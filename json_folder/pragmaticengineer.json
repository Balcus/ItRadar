[
{"url": "https://blog.pragmaticengineer.com/twitter-vs-instagram-threads/", "title": "Twitter vs Instagram Threads: two different approaches to throttling", "content": "\n             Originally published 6 July 2023 üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of six topics in today‚Äôs subscriber-only  The Scoop issue . If you‚Äôre not yet a full subscriber, you missed this week‚Äôs deep-dive on  What a senior engineer is at Big Tech . To get the full issues twice a week,  subscribe here . The past week has been interesting for social media giants. Last weekend, Twitter ‚Äì the text-based social network with around 250M daily active users ‚Äì started to throttle usage, limiting users to a few hundred tweet impressions and then cutting them off for the day. Here‚Äôs Twitter‚Äôs owner, Elon Musk, sharing details  on Twitter : Over the next two or three days, the limiting stayed in place. I experienced tweets not loading when using one of my non-paid Twitter accounts. Even when limiting was quietly removed, other restrictions were put in place: such as logged out users no longer seeing tweets. This means Twitter cannot be used ‚Äì at least for now ‚Äì for public announcements that anybody can read. It‚Äôs still unclear what exactly caused this move, but it surely had to do with infrastructure issues. Twitter runs its infrastructure on three of its own data centers. The company utilizes Google Cloud to some extent, and my understanding from talking with Twitter engineers is that this was for machine learning (ML) use cases. What caused the need to throttle the network? Twitter‚Äôs  official explanation  days later was extremely vague. ‚ÄúWe temporarily limited usage so we could detect and eliminate bots and other bad actors that are harming the platform,‚Äù a statement said. Bots and bad actors are present on all social media platforms, and detecting, limiting or banning these accounts is typically done by ML systems which detect suspicious patterns. How does Twitter do this detection? Well, it relies on Google Cloud‚Äôs ML and AI services, as per engineers whom I talked with at Twitter. And the limiting occurred the day after a contract with Google Cloud expired. In terms of infrastructure, Twitter runs its own data centers ‚Äì currently three, with plans to reduce this to two. But Twitter engineers I previously talked with shared that they use Google Cloud for ML workloads because it‚Äôs more efficient than doing it within their own data centers. A month ago,  Platformer  ‚Äî a fellow Substack publication ‚Äî  reported : ‚ÄúPrior to Musk buying Twitter last year, the company signed a multi-year contract with Google to host services related to fighting spam, removing child sexual abuse material, and protecting accounts, among other things. (...) Twitter continued to push Google to lower its cloud costs, at some point it stopped paying its cloud invoices ‚Äî and is now planning to move off the platform altogether. The move has triggered a mad dash within Twitter to move as many services as it can off of Google Cloud before its contract ends on June 30. But the project is running behind schedule, sources said, leaving the fate of several key platform defenses in question.‚Äù A few weeks later, on 21 June, Bloomberg  reported  Twitter had resumed paying Google Cloud and patched up the relationship. Still, I wonder if Twitter simply negotiated a much lower Google Cloud quota starting 1 July. Could this mean it had to limit the platform because it lost tools for reliably detecting spam accounts and bots, and needed time to build its own approach? Either way, Twitter decided to mitigate the issue by reducing engagement on the platform, and limiting users. This move likely cost the company some advertising revenue, as fewer impressions overall also means fewer ad impressions. It also highlights that operating a large social media network reliably is challenging when cutting costs is the primary focus, as it has been at Twitter for several months. In contrast,  Instagram Threads  enjoyed a major launch with no throttling in place.  Threads is clearly built to be a Twitter challenger, by offering the same, text-based social network features. The app launched in the early hours of today (Thursday, 6 July,) and is off to a flying start  reaching  10 million sign ups in the first 7 hours: The pace has not slown much since, and within the first 24 hours, Threads passed 30 million sign ups. Onboarding 30 million new users in less than a day ‚Äì and applying no rate limiting ‚Äì is a massive feat for any social network. For example, another Twitter challenger, Bluesky, launched its app in February 2023. In the 4 months since, the app has grown to 180,000 users,  but  with another 1.9M people on a waitlist. Bluesky is throttling user onboarding because it needs to scale infrastructure as the app grows, and build moderation tools like blocking or muting, which are increasingly important as a social network grows. That Meta could pull off a non-throttled launch is very impressive at the scale of tens of millions of users, for two reasons: Infrastructure readiness from day one.  Threads clearly had the infrastructure ‚Äì compute, storage and networking ‚Äì ready to rapidly scale up to millions of active users. It surely helped the Threads team that they could utilize the infrastructure of Instagram. Instagram serves more than 1 billion monthly active users, after all. Moderation tools and network dynamics.  Moderation is very important for growing social networks. This includes both self-moderation ‚Äì where users have tools to block or mute others ‚Äì as well as platform-level moderation like removing hate speech or dealing with harassment. Again, this is an area in which Meta has plenty of in-house expertise from Facebook and Instagram. Surely the Threads team relies on this. I‚Äôd call the Threads launch perfect, based on what I‚Äôve observed so far, except for one detail that makes it less than flawless. The app is available globally, but not in the EU. This limitation likely has to do with the app not yet being GDPR compliant. For example, to delete a Threads profile users also  need  to delete their Instagram account. If there was any question over whether Threads is gunning to take Twitter‚Äôs spot, Meta CEO Mark Zuckerberg makes this aspiration  very clear : The coming months should be interesting, given Threads will clearly pursue a growth strategy and isn‚Äôt worried about infrastructure costs. Meanwhile, Twitter is clearly optimizing infrastructure costs, even at the expense of reduced engagement ‚Äì and therefore lower growth. This was one out of the six topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Things picking up at Meta.  I spoke with engineers inside the company and learned that several things are suddenly improving, policy-wise. What are these changes?   Exclusive . Meta‚Äôs rapid bounce back.  In just 6 months, Meta‚Äôs valuation went from its lowest in 7 years, to trending up to an all-time-high valuation. What can we take from this dramatic turnaround?  Analysis The old concept of ‚Äòslotting‚Äô at Google.  Exclusive .  Until 2010, Google used a concept called slotting when hiring senior engineers. I talked with an engineer who was in the last batch of this process on what it meant, and why it was discontinued.  Exclusive . OpsGenie is down ‚Äì again . A year ago, real-time paging service OpsGenie was  down for two weeks  for hundreds of companies. Could the reason for the latest outage be a very similar reason to that of last year? If so, why would Atlassian not invest in making its ‚Äúmission critical‚Äù services like OpsGenie more robust?  Analysis . How does bad weather damage fiber cables?  Azure had a regional outage thanks to an intense storm in the Netherlands. But how can strong winds cut through fiber cables? I found first-hand evidence.  Beware falling trees. Read the full The Scoop here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/google-shutting-down-firebase-dynamic-links/", "title": "Google Shutting down Firebase Dynamic Links", "content": "\n             üëã Hi, this is  Gergely  with a free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Pulse issue . If you‚Äôre not yet a full subscriber, you missed this week‚Äôs deepdive:  The 2023 tech market, as seen by hiring managers . To get full newsletters twice a week,  subscribe here . In this issue, we cover: What is Firebase Dynamic Links (FDL)? Use cases for FDL The shutdown Firebase Dynamic Links alternatives What is Firebase Dynamic Links (FDL)? Firebase Dynamic Links  (FDL) is a neat service that allows you to create a ‚Äòsmart‚Äô link, and that link transforms into: An iOS deeplink when opened on an iOS device An Android deeplink on Android A web link when opened in a browser There are several neat things about Firebase Dynamic Links: You can customize the link behavior based on whether or not someone has your app installed. For example, you can decide to send users who don‚Äôt have the app to a place to download the app, send them to a website, or show them an interstitial site that describes the benefits of the app before sending them to the app store to install it. They can ‚Äúsurvive‚Äù an app installation: so if an iOS user were to open your link, they would be prompted to download the app, which they could then download, and once they have done so, they would get linked to the right part of the app. It is possible to treat customers differently based on a campaign identifier on the link. Use cases for Firebase Dynamic Links This product is powerful and has many uses. But to focus here, I tried to sketch out below a reasonably common use case of directing users to a deeplink within iOS and Android, taking care of persisting this detail via the install, and offering an interstitial site on iOS before forwarding the user to the App Store: A use case of Firebase Dynamic Links: navigating users to a specific part of the iOS, Android, and web apps, while taking care of app installation on the way. This is how how Google describes the product, with one sentence: ‚ÄúFirebase Dynamic Links are links that work the way you want, on multiple platforms, and whether or not your app is already installed.‚Äù Firebase Dynamic Links worked out how deeplinks were  supposed  to function, whereas they often did not in other offerings! This product created a smart routing layer on top of dynamic links and web links, making it easy enough to configure and use. These links were especially helpful for: Promotions and marketing campaigns QR codes Content sharing links that ‚Äújust work‚Äù Converting desktop users to mobile ones The shutdown Dynamic links powered Firebase Invites: an app invite service where users could send app invite links to their friends, to drive installation of the app. Firebase deprecated the Invites product in 2020: presumably after a drop in the popularity of app invites, about 2 years after Facebook also  deprecated  their app invites product. Now after 7 years, Google has announced it will retire Firebase Dynamic Links, but with no definite successor lined up.  Since Google launched the product  in 2016 , it‚Äôs been viewed as a stable product within the Firebase product suite. In May of this year, Google launched a  Firebase FAQ page , where they are communicating that Firebase Dynamic Links will be deprecated, suggesting users should stop using it going forward: ‚ÄúFirebase Dynamic Links is no longer recommended for new projects. In the future, the Dynamic Links service will shut down, but you will have at least 12 months from the announcement date to migrate. We will announce more information in Q3 2023.‚Äù Because of how useful this product is, especially for app developers building on top of it, this announcement came as a surprise. Even more surprising is how Google does not even hint at a follow-up product. They instead seem to suggest to use other solutions going forward: Android App Links  for Android apps iOS Universal Links  for iOS apps Google Play Instant  and  iOS App Clips  as a way to preview an app.  But these are ‚Äúinstant experiences‚Äù and not really alternatives to Firebase Dynamic Links To me, it feels that Google is abandoning their original vision of having links that ‚Äújust work‚Äù everywhere, and it‚Äôs unclear why. So I reached out to Google, asking the same questions, and here‚Äôs what I got as answers from a Google spokesperson (the bolding is mine) Q: Will Google build a service Firebase Dynamic Links customers can migrate to? A: ‚ÄúWe won‚Äôt be providing a direct replacement for Firebase Dynamic Links, but we will be recommending and providing guidance on alternatives developers can use based on their needs on migrating away from Firebase Dynamic Links in the coming weeks. For example, we‚Äôve found that some developers greatly value the deep-linking functionality that allows them to direct users to specific places in their apps. They deem this to be more important than routing referred users to the right store to download the app, and providing a deferred deep-linking experience. For these developers, using  App Links  (for Android) or  Universal Links  (for iOS) is a viable alternative,  although  they would no longer be able to route and provide a deferred deep-linking experience to their users previously provided by FDL. For developers who strongly care about a contextualized app experience on the first click before their app is even installed, we‚Äôll be recommending  App Clips  and  Google Play Instant  as potential alternatives,  although  these options come at a higher development time/cost.‚Äù Q: Can you share more reasons for sunsetting FDL? This was a popular service, and Google recognized the need for links that ‚Äújust work‚Äù on any platform, early on. A: ‚ÄúOver the years, the web and mobile ecosystems have evolved with technologies such as App Links, Google Play Instant, Universal Links, and App Clips. These make user journeys across apps and the web quite seamless and predictable for your users. ¬†We believe developers and their users will benefit more from adopting these native platform technologies directly and continue moving the ecosystem forward. On the other hand, the original native APIs that Firebase Dynamic Links were based on also evolved and changed, and presented new challenges. ¬†For example,  the ecosystem changes impacted our ability to provide a consistently stable experience for one of Firebase Dynamic Links‚Äô core features  - giving app users a smooth transition into the app post install, regardless of platform. Instead of continuing to support a less than ideal experience, we decided to sunset Firebase Dynamic Links, and to refocus our resources on solving other developer pain points. Though we also understand that this change will require developers time to evaluate, decide, and adopt alternative solutions or platform providers in the market. Importantly, we want to emphasize that we are continuing to evolve Firebase to meet the needs of developers as the ecosystem continues to also evolve and change. We‚Äôll continue to  launch new features and updates across Firebase products , and are committed to helping developers excel in their app development journeys.‚Äù Hearing the reasoning behind sunsetting FDL, I cannot help but wonder if there might have been some platform-level changes, for example, on iOS, where the Firebase team deemed it too problematic to keep supporting the smooth transition to the post-app-install experience.  If you have more insights on this, feel free to leave a comment! Just as curious: Google is heavily promoting iOS native features, like Universal Links and iOS App Clips, despite Android being a competitor to iOS. I have not observed Apple do a ‚Äúreverse‚Äù promotion, i.e., highlighting Android native features, and so this one-way ‚Äúhighlighting‚Äù is especially odd. Firebase Dynamic Links alternatives If you are an FDL customer, what vendors could you move to that are offering similar functionality? I  asked this question , and here are the suggestion shared by developers: Adjust : an app marketing platform that  supports deep linking AppWrite : a backend platform to build web and mobile apps that is in the process of  adding supports for deeplinks AppsFlyer : their  deep linking product Branch.io : ‚Äúflawless mobile linking and attribution‚Äù Kochava : a mobile measurement partner that also  supports deep linking Rebrandly : a brand URL shortener with  support for mobile deeplinks To Google‚Äôs credit, they came back to me offering non-vetted alternatives and are promising to provide a way to export existing deep-linking metadata. From the Google spokesperson I talked with: ‚ÄúFor developers that continue to need the set of features offered by Firebase Dynamic Links, we recommend developers use other deep-linking service providers / vendors, such as Bitly, Kochava, AppsFlyer, Adjust and other similar providers in the market. ¬†(Note, these providers have not been fully vetted, but do provide similar functionality to Firebase Dynamic Links). To make this migration easier and as seamless as possible, we will give developers the ability to export their deep-link metadata.‚Äù I will give Google credit for giving well over a year of heads-up on their shutting down of FDL. A timeline of more than 12 months is generous, and by the time Google announces the definite sunset timeline in Q3 of this year, they will likely have given around 18 months‚Äô notice. This is a lot more generous than is the case for Google Domains, which will shut down  by the end of the year , leaving only around 9 months‚Äô notice for all customers. If you need to shut a product down, giving notice well ahead of the actual shutdown is the way to go, as well as building migration tools for customers. While retiring FDL will be painful for current customers, it‚Äôs at least nice to see Google closing this product in a considerate way. Google‚Äôs product deprecation reasoning leaves a lot of second-guessing, still.  A reader in the comments noted how Google‚Äôs shutting down of Firebase Dynamic Links rhymes with the Steve Yegge rant from 2020:  Dear Google Cloud: your deprecation policy is killing you . And, indeed: ‚ÄúIn the Google world, deprecation means: ‚ÄúWe are breaking our commitments to you.‚Äù It really does. That‚Äôs what it ultimately means. It means they are going to force you to do some work, possibly a large amount of rework, on a regular basis, as punishment for doing what they told you to do originally ‚Äî as punishment for listening to their glossy marketing on their website: Better software. Faster! You do everything they tell you to do, and you launch your application or service, and then, bang, a year or two later it breaks down.‚Äù When Google launched Firebase Dynamic Links, they explained the vision behind this product like this: ‚ÄúThat‚Äôs why we‚Äôve created Firebase Dynamic Links: they‚Äôre deep links that work the way you want them to. With one single link, you can send users either to your iOS or Android app, if they have it installed. And if they don‚Äôt, you can send then to the appropriate listing in the App Store or on Google Play. Most importantly, these links survive the installation process, so when a user starts up their app for the first time, you can still retrieve the deep link URL that brought them to your app in the first place.‚Äù One thing that is distinctively different than with the Google Cloud story is how those were deprecations with viable migration paths. Firebase Dynamic Links has none. And so we‚Äôre left to wonder: has native mobile ‚Äî and, specifically, iOS ‚Äî changed enough to render deeplinks that survive app installs to be infeasible, as a product, going forward? And if so: will other vendors keep finding workarounds, or will they also have to throw in the towel on universal deeplinks on all platform, like Google seemingly has? This was one out of the five topics covered in  this week‚Äôs The Pulse . The full edition additionally covers: Details behind Wise‚Äôs open engineering salary bands . How did Wise open their compensation bands? I got more details from Timothee Ledure, the former engineering lead at Wise, at their Singapore office.  Exclusive . Events tech company Hopin selling its events tech business.  Hopin raised more than $1B in funding, but has now sold its ‚Äòcore‚Äô business to RingCentral. I talked with current and former Hopin engineers to get more details on the sale, including the rumored price tag.  Exclusive . Startup shutdowns are, unfortunately, trending up.  The ‚Äòstartup purge‚Äô event that we predicted at the beginning the year would come seems to, sadly, be here. Data from Carta confirms an uptick in startup shutdowns.  Analysis. Uber posted its first operating profit.  Profitable is not what most people think of when talking about Uber. And yet, the company has now delivered its first quarterly profits, and could well keep on being profitable. Why does this matter?  Analysis . Read the full The Pulse here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/how-microsoft-does-qa/", "title": "How Microsoft does Quality Assurance (QA)", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of seven topics from today‚Äôs subscriber-only issue on  How Big Tech does QA . To get full issues twice a week,  subscribe here . Microsoft has played an outsized role in the development and importance of quality assurance across the industry. Microsoft was the first major company to come up with a specialized testing role which went well beyond manual testing. In this issue, we cover: The SDET role Retiring of the SDET role The SDET role The SDET  (Software Development Engineer in Test) role was one that Microsoft pioneered across the tech industry. They are  software engineers  who focused on writing automated tests; building and maintaining testing systems. The only difference between an SDET and a software development engineer (SDE) is that SDETs didn‚Äôt generally write production code: they wrote test code, working in the same team as SDEs. I could not trace the  exact  introduction of the role, but it was most likely in the 1990s. For example, here‚Äôs  a post from 2004  from a member of the Microsoft Exchange team explaining what it means to be an SDET in their organization: ‚ÄúAn SDET is a developer who works in a test team and not a development team. The SDET has a keen sense of a tester yet loves writing code, and lots of it. The SDET enables the test team with the tools and processes that need to be in place for the testers to do what they do best‚Ä¶ test the living daylights out of the product and find as many bugs as possible before it goes to the market.  An SDET has the ability to analyze the functionality and architecture of a Product and thus design and implement tools that help testers test it.  The SDET enjoys short project life cycles, designs and implements many tools and test frameworks in a single year, uses the latest technology and has plenty of room for innovation.  Though product quality is a prime concern, the SDET doesn‚Äôt have the stressful days that developers have during the end of a product life cycle. In layman‚Äôs terms‚Ä¶ an SDET back-side is rarely on the line :)‚Äù Microsoft had a formal career path for the SDET role. From the same post: ‚ÄúThere‚Äôs plenty of room for growth in [the SDET position.] If you love doing what you are doing as an SDET then you can grow to become a Test Architect. If you want to get involved in management, then you can progress towards becoming an SDET Lead and then Test Manager.  If you want to just code and not be involved with testing then you can take the path of becoming a developer. Many people take this path. If you realize that your heart belongs to testing, then you can become a tester.‚Äù A 2:1 SDE:SDET ratio was common across Microsoft  until around 2014. It was the case on my team at Skype for Xbox One, in 2012, when the team was formed. Here‚Äôs how our team was composed, based on headcount: 12x SDEs (software development engineers) 6x SDETs (software development engineer in test) 2x PMs (product managers) 1x EM (engineering manager) 1x SDET lead On our project, the SDET team owned all parts of testing: Manually verifying that features devs built, worked as expected, including edge cases we might have not considered Building integration and end-to-end tests to automate checks Creating manual tests plans, and executing before major milestones Being involved during the planning phase of features, bringing ideas on edge cases and how the work would be validated Building solutions for tricky problems, such as how to do reliable performance benchmarking for our Skype product on the Xbox hardware Unit tests were a source of tension, early on. Who should write them? Several experienced developers came from gaming, where developers typically don‚Äôt write automated tests, and their view was that any automation ‚Äì including unit tests ‚Äì should be done by the SDET teams.  We cover more on how games are built in  Game development basics , and go very hands-on in the issue,  Building a simple game . Those of us who‚Äôd previously built applications, or did test driven development (TDD,) felt that this approach was wrong, and that developers should write their own unit tests because unit tests and the code are tightly coupled. I was in this camp. Having dedicated SDETs made it a tempting option for developers to ‚Äúoutsource‚Äù the writing of unit tests.  I‚Äôm just going to say it now: without an SDET team, the question of who writes unit tests would have not been up for debate: we developers would have  had  to write them. This is a recurring debate I‚Äôve seen in every team with assigned SDETs. Surprisingly, even this year I heard of a Silicon Valley-based company where a developer team has the test team write unit tests! In our case, we settled on developers writing unit tests, with the SDET team doing everything else. This approach worked well enough, but there were a few memorable features of this setup: An ‚Äúus and them‚Äù dynamic that created division.  When us developers finished a feature, we handed it over to an SDET, who usually found issues, so the feature came back to developers to fix. This felt annoying to devs, as it created work we might have not accounted for. Over time, it started to feel like there were two teams, with different goals, which didn‚Äôt always row in the same direction. Ticket ping-pong between dev and test.  I finish work on my feature and send it over to test (ping). The tester finds a bug and sends it back to me the next day (pong). I fix the bug, and send it over again in a few days (ping). The tester finds another bug and sends it back to me‚Ä¶ and this back-and-forth happened more times than I‚Äôd be willing to admit! Devs were good at building complex systems, and could help SDET a lot.  Our SDET team had been building an integration testing system for months, and progress was slow. Our team really needed this system, as manual tests were taking too long. Finally, one of the senior engineers proposed that devs join in to help build this system,  as one team . Two weeks later, with the lead of experienced devs, a system was up and running. This got me thinking; would the team not work better without the dev/test division? We had just proved it did. The elephant in the room: some devs looked down on the SDET role.  Although not everybody did, it was clear that many devs regarded SDET work as less challenging than their own. SDETs also knew they could have better career options by switching to a dev role. Well, it turns out they didn‚Äôt have to wait that long for advancement. Retiring the SDET role Early 2014, I joined a new team called Skype for Web. This team was different from most teams at Skype, as they shipped a new version of the software every day, not every month. The team consisted of 6 SDEs and 3 SDETs, on paper. In reality, we were 9 SDEs, thanks to the engineering manager and the test lead who quietly decided it made zero sense to have a dedicated test role, when we shipped new features every day. I write about this change that the team‚Äôs leadership didn‚Äôt broadcast, in the issue  How Big Tech runs tech projects and the curious absence of Scrum : ‚ÄúWhen I joined the Skype for Web team, we initially did two-week sprints, and followed the usual Scrum processes. We also had a split of software engineers and QA engineers. However, our shipping pace was every two weeks, but we wanted to ship more frequently. The first thing we did was make QA a part of engineering. In the ‚Äúold world‚Äù, an engineer would finish their work, check into their branch, update a ticket, and let the QA know it‚Äôs ready for review. The QA would take this ticket a day or two later, review it, and reopen the ticket if they found issues. This was a long delay. We made a quiet, unofficial, change where all SDETs built production software as well, and all software engineers became responsible for testing their own code. Now, we no longer had to wait days for feedback before shipping code to production. However, the bi-weekly sprints and the numerous Scrum rituals became the next problem.‚Äù We became a lot more productive by removing the SDET role from our team!  SDETs still focused mainly on testing-related work, but also picked up development tasks. Just as importantly, we paired a lot! I remember pairing with SDETs to build a feature. I was good at thinking about how to make something work, and the SDET was really good at pointing out edge cases I hadn‚Äôt considered. When it came to debugging, the resourcefulness of SDETs surprised me. On most teams across Microsoft, SDETs spent a lot of time manually testing things, and writing integration tests. But on our team there was very little manual testing, and we all built integration testing  infrastructure,  and monitoring  infrastructure . When a developer or an SDET picked up a piece of work, they wrote all tests ‚Äì unit and integration ‚Äì which made sense. The best part of this change was that there was no more ‚Äúus vs them.‚Äù Arguments ceased about whether to fix a bug which an SDET had discovered, as now we did our own testing and fixed bugs which we discovered, before shipping to production. Web teams across Microsoft started to quietly remove the SDET role . Back in 2014, our web team in the London Skype office felt ‚Äòspecial,‚Äô as the only other teams to merge the SDET function were web-based teams, of which there were not many. On every other team, SDETs kept working the way they always had. However, it wasn‚Äôt only web teams within the Skype division which merged these roles for better efficiency. Web teams independently came to the realization that merging SDET and dev roles made them move faster, and so this happened across all of Microsoft! In the middle of 2014, Microsoft formally retired the SDET role and introduced the SE role.  The inspiration was apparently a larger web team at Microsoft, Bing.  From Ars Technica , in 2014: ‚ÄúAt Bing, the task of creating programmatic tests was moved onto developers, instead of dedicated testers. QA still exists and is still important, but it performs end-user style \"real world\" testing, not programmatic automated testing. This testing has been successful for Bing, improving the team's ability to ship changes without harming overall software quality.‚Äù In July 2014, Microsoft announced that they will execute their largest layoffs to that date, letting go 18,000 staff of the 127,000 employees at the company. 12,500 of the cuts were for the Nokia division. As part of this layoff, a large number of SDET roles were also eliminated. This happened around the same time as the SDET role was announced to be retired, and existing SDETs needed to move over to the software development engineer (SDE) track over the next several months. The SDE role was also renamed to SE ‚Äì Software Engineer. How did this transition work out?  From what I gather, it went fine. The change made a lot of sense for teams that ship on a daily basis. And teams within Microsoft that ship weekly or monthly are increasingly rare, as Microsoft also leans into the software-as-a-service (SaaS) model. Of course, Microsoft continues to be a vendor for the Windows operating system family, and the Surface tablet. These are both areas where the approach to quality needs to be different to that of SaaS products. A good account of the change came from the Visual Studio Team Services team in 2017, three years after this change. Reflecting on it,  Brian Harry  ‚Äî currently Technical Fellow at Microsoft ‚Äî  wrote : ‚ÄúTwo years ago [in 2015], we had 10‚Äôs of thousands of tests. They were written by ‚Äòtesters‚Äô to test code written by ‚Äòdevelopers‚Äô. While there were some advantages of this model ‚Äì like clearly measurable and controllable investment in test, expertise and career growth in the testing discipline, etc., there were also many disadvantages ‚Äì lack of accountability on the developers, slow feedback cycles (introduce bug, find bug, fix bug), developers had little motivation to make their code ‚Äútestable‚Äù, divergence between code architecture and test architecture made refactoring and pivoting very hard/expensive, and more. (...) Full testing would take the better part of a day to run, many more hours to ‚Äúanalyze the results‚Äù to identify false failures, and days or weeks to repair all the tests that were broken due to some legitimate change in the product. (...) Two years ago, we started on a path to completely redo testing.  We combined the dev and test orgs into a consolidated ‚Äòengineering‚Äô org.  For the most part, we eliminated the distinction between people who code and people who test. That‚Äôs not to say every person does an identical amount of each, but every person does some of everything and is accountable for the quality of what they produce. We also set out to completely throw away our 10‚Äôs of thousands of tests that took 8 years to create, and replace them with new tests that were done completely differently.‚Äù This team took stock of the type of tests they had in place and decided they didn‚Äôt like that there were few small unit tests, but lots of complex and hard to maintain end-to-end tests. So they changed this: The change in the number and type of tests the Visual Studio Team Services experienced after merging the dev and the test teams. Before the merge: end-to-end tests dominated, but unit and integration tests were rare. This flipped after the merge. Data source:  Microsoft Dev Blogs Here‚Äôs another visualization on how the team‚Äôs tests changed over a two-year timeframe: In 2 years, almost all ‚Äúold‚Äù tests from when test was separate from dev, were gone. The new tests became more granular as well. Data source:  Microsoft Dev Blogs So, was all this work worth it in the end? According to Brian, yes it was. Writing at the time, he said: ‚ÄúWe are starting to reap the benefits in improved quality, agility and engineer satisfaction.‚Äù We covered the QA approach at one out of seven Big Tech companies from the article  How Big Tech does QA . The full edition additionally covers details for: Google Google Meta Apple Amazon Uber Netflix Read the full issue here . Related issues, which overlap with testing: How Big Tech runs tech projects and the curious absence of Scrum . How projects are organized does have an impact on how straightforward ‚Äì or not ‚Äì it is to do manual testing on a regular cadence Healthy oncall practices  ‚Äì while not all Big Tech companies have a dedicated QA function, engineers are almost always oncall, and this forces some more focus on quality Shipping to production Dealing with a low-quality engineering culture at Big Tech What is a senior software engineer at Big Tech? \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/are-reports-of-stackoverflows-fall-exaggerated/", "title": "Are reports of StackOverflow‚Äôs fall greatly exaggerated?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of five topics from today‚Äôs subscriber-only  The Pulse issue . To get full issues twice a week,  subscribe here . Before we start: plenty of people who subscribe to the newsletter utilize a learning and development budget their company provides. In what is neat: The Pragmatic Engineer is now the first-ever newsletter  listed  on  Learnerbly . Learnerbly is an L&D platform hundreds of tech companies use, as it makes administering these budgets much simpler ‚Äî and it‚Äôs also a lot easier for people to request books, courses, or newsletters. If your company already has Learnerbly, you can  now request the full newsletter  with just one click. A week and a half ago, machine learning engineer Ayhan Fuat √áelik ‚Äã‚Äãwrote an interesting analysis titled  The fall of Stack Overflow . Stack Overflow shares website data with some of its most active members with reputations higher than 25,000.  I‚Äôd like to call out how neat this approach is and how it contributes to transparency, even when the data isn‚Äôt flattering. Ayhan visualized this data and observed a definite fall in all metrics: page views, visits, questions asked, votes. Visualized: Statistics, as shared with StackOverflow community members with reputations of 25,000+. Data source:  The Fall of Stack Overflow The post stated Stack Overflow has lost about 50% of its traffic. However, the traffic data turned out to not account for  a Google Analytics change . Allowing for this, the drop would be 35%. Still, the most worrying part of the statistics is not traffic, but the drop in questions asked and upvotes. I pinged engineers at Stack Overflow to get their thoughts about what‚Äôs happening. What they said is that they are not seeing so dramatic a drop, internally, and that data shared with the most active contributors is inaccurate. I also reached out via official channels to Stack Overflow, and here‚Äôs what the company told me (the company later  published  a blog post with some of the below data included): 5%:  the company wrote ‚Äúoverall, we're seeing an average of ~5% less traffic compared to 2022.‚Äú 14%:  the sharp decrease in traffic in April 2023. The company said: ‚Äúwe can likely attribute this to developers trying GPT-4 after it was released in March.‚Äù 14% : this is by how much search engine traffic is down, year-on-year. A predictable rise and fall, as with any sudden change.  When global lockdowns started in 2020, Stack Overflow saw a spike and then a decrease in  cloud migration questions  and  security-related ones . I sense the company is not surprised that AI had an impact on traffic and the types of questions. Q&A activity is definitely down:  the company is aware of this metric taking a dive, and said they‚Äôre actively working to address it. While the pandemic and its associated lockdowns didn‚Äôt pose a threat to Stack Overflow‚Äôs business model, coding assistants like Copilot, Cody, ChatGPT and the  other alternatives  are different. I find myself reaching less for Google and StackOverflow as a first step when building a new project, and instead using an assistant to get started. More complicated problems ‚Äì and when I can‚Äôt get unstuck with the GenAI helper ‚Äì are reasons why I head for the browser and open up new tabs, which tend to lead to StackOverflow. Still, GenAI tools are only as good as their training data. And StackOverflow has the world‚Äôs richest programming Q&A training data. So the obvious question is will StackOverflow be content with being scraped for this data ‚Äì as they have been, until now ‚Äì or will the company turn it into AI products? Two weeks ago, CEO Prashanth Chandrasekar  announced  OverflowAI, a set of AI-related products StackOverflow is working on. The company also announced an upcoming improvement: better search, and also 4 AI tools coming to Stack Overflow for Teams. Stack Overflow for Teams could be the product which benefits most from the GenAI wave.  Until now, our attention has been on the ‚Äúoriginal‚Äù StackOverflow public site we all know and use ‚Äì especially when fixing an annoying bug. However, the increasingly important revenue-maker for StackOverflow is StackOverflow for Teams, a ‚Äúprivate‚Äù StackOverflow instance. When it comes to GenAI, Stack Overflow for Teams is getting a lot more love. Here are features the company is building: A new Slack integration to give answers to technical questions, using the Stack Overflow for Teams knowledge base Stack Overflow for Visual Studio Code: a pair programmer to bring Stack Overflow content right into the IDE Enterprise knowledge ingestion: ingesting content from Confluence, Google Drive, Github, and ServiceNow Improved search: similar to the makeover of the public StackOverflow product Stack Overflow will struggle to compete with AI tools scraping tools which ingest all public StackOverflow questions and answers. However, it can compete by offering tools for companies to utilize their own internal knowledge bases, and by ensuring that internal company data doesn‚Äôt leave the premises. Over time, I won‚Äôt be surprised if Stack Overflow‚Äôs main business becomes Stack Overflow for Teams, and the public Stack Overflow serves as a lead magnet for Stack Overflow for Teams, while generating some ‚Äì although increasingly less important ‚Äì income via ads. Could we see the fall of public Q&A sites as AI tools rise?  A striking statistic is just how much the volume of questions asked has dropped. It‚Äôs not as if people have fewer questions, it‚Äôs just that developers are typing these questions into AI tools, instead. For public Q&A sites like StackOverflow to thrive they‚Äôll surely need to be where these questions are asked, which will be integrations in Slack that the company is working on, and programming AI agents, which is another thing Stack Overflow is building. But the use case that will surely thrive is private, company-only knowledge bases. I would be surprised if Stack Overflow can do much about developers turning to AI coding tools first, before visiting it, but integrating private Stack Overflow for Teams into these chatbots seems like a smart strategy for being where customers ask questions. The one thing left to answer is how will StackOverflow incentivize people to ask more answers? Looking at this broadly, when AI tools can answer most questions, who will write the answers for complex questions which AI tools don‚Äôt have answers for? And what will be their incentive to do so? This was one out of the five topics covered in  this week‚Äôs The Pulse . The full edition additionally covers: What kind of migration is causing a payout outage at Booking.com?  Small business hosts on the travel booking platform are waiting more than a month to be paid. Booking.com says a systems migration is the reason for the delay. I talked with engineers at the company and discovered an SAP migration is to blame.  Exclusive . Amazon gets stricter about enforcing return to the office (RTO.)  The online retail giant sent a warning email to employees ‚Äúnot meeting the expectation of joining colleagues in the office at least three days a week.‚Äù I talked with engineers about the response to this ominous, unfriendly email.   Exclusive . Zoom to end remote work: an RTO turning point?  Remote work tool Zoom is having most staff return to the office for two days a week. It‚Äôs a symbolic turning point which may signal how many companies will operate in a similarly hybrid way, going forward.  Analysis . A senior engineer/EM job search story.  Davidson Fellipe, a software engineer with 15 years‚Äô experience, based in New York, was recently let go. After 350 applications and 85 first-round interviews in 4 months, he secured 3 offers, and has now started his new job. He shares first-hand learnings about navigating the jobs market.   Exclusive . Read the full The Pulse here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/how-games-typically-get-built/", "title": "How Games Typically Get Built", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of for topics from the past newsletter issue  Game Development Basics . To get the full issues, twice a week,  subscribe here . Q: ‚ÄúI play video games, and I was wondering how building games compares to more ‚Äòstandard‚Äô software development. I‚Äôd love to get a glimpse into the game development world, and how it compares to the software engineering approaches at tech companies.‚Äù How games are built is a fascinating subject for me, and my interest derives from having worked with former game developers. At Skype, I worked on the team building Skype for the Xbox One console, and several engineers on that team had previously worked in games. It was by talking with them that I realized just how different the game development world is. Video games are very complex pieces of software, built in different conditions and under very different constraints than many other business applications are. To answer the question of how the video game development sector works, I turned to  Tommy Thompson , director of AI and Games, who‚Äôs a veteran of game development and of teaching it. Tommy has built his own video games, consulted on a wide variety of game projects, and for a decade has taught game development at various universities. He also runs the highly popular  AI and Games YouTube channel , where he delves into how AI makes for better games, and games make for better AI. I met Tommy in 2010 at Scott Logic, a UK software consultancy where we were both software developers on neighbouring desks. As we reconnected more than a decade later, I discovered just how much our paths diverged right after that job; Tommy spent the next ten years in gaming, while I moved on to tech companies. In this issue, we cover: Getting started in games development Games are software, but in a non-standard way Typical roles within games development How games typically get built The game development lifecycle As a heads up, Tommy is hosting his third annual  AI and Games jam , 15-22 September. Over a week, participants build their own game utilizing AI in some form.  Learn more or sign up if you‚Äôre interested . With this, it‚Äôs over to Tommy: Getting started in games development Video game development is undoubtedly one of the largest entertainment sectors in the world. It‚Äôs a  $200+ billion industry , which thrived during the strictest of lockdowns throughout the Covid-19 pandemic, when people stayed indoors and checked out the latest instalments of action-packed games such as  DOOM  and  The Last of Us ,   to more relaxing experiences like  Bugsnax  and  Animal Crossing . Or perhaps they jumped on their favourite ‚Äòlive service‚Äô games, playing the likes of  Dota 2, Fall Guys  or  Fortnite  with friends, to enjoy social interactions at a time when we couldn‚Äôt meet up in person. Game development is a sector that hosts a myriad of challenges. Each project typically takes several years to create, with shifting hardware specifications and emerging competitors and trends to anticipate and react to, during the process. But even in 2022, the biggest challenge for anyone keen to learn more is that gaming is a sector which is often shrouded in mystery. Getting started in video game development, or even just understanding how it all works, is often a difficult first step.  Perhaps unlike any other software development field, the tools, technologies, practices and pipelines that are typical for a video game production are not well communicated or documented to the wider world. Naturally, this leads to a gap between the creator and the consumer, as wild and inaccurate hot takes on social media regarding the  recent leaks of Grand Theft Auto 6  footage show. Still, even for a typical software engineer, it can be difficult to figure out how your skills apply in this industry, and how it really works. Back in 2010, I was working as a software engineer in the banking sector, and Gergely and I used to work in the same office. It was around that time our paths diverged, with mine leading into the world of video game development. I had actually transitioned into a career as a university lecturer in computer science. But soon after, I was teaching game development on a bachelor's degree course. Despite my enthusiasm, and some earlier work making crude games as part of my PhD research, it became readily apparent that despite being a video game player, I still knew very little of how game development worked. This is of course a problem when you‚Äôre supposed to be teaching it! So, over the past 10 years I‚Äôve been on a journey to learn more about game development, with my experiences in teaching resulting in me becoming course director of several games development courses at UK universities,  starting a YouTube channe l that marries my interests in artificial intelligence (AI) and video game development (perhaps unsurprisingly called ‚ÄòAI and Games‚Äô) and developing my own game on PC and Xbox. I now work as a developer and consultant on artificial intelligence in the video games industry; working with companies ranging from big hitters such as Intel and Ubisoft, to smaller game studios around the world, and contributing to the production of several game projects over the past few years. In this article, my focus is on providing a high-level overview of how game development works, and how software engineers fit into that space. Naturally, there‚Äôs a lot of ground to cover, and I hope that even at this introductory level, you find it quite insightful. So, let‚Äôs start with the basics. Games are software, but in a non-standard way Video games can often feel far removed from traditional software, given the modes of interaction and style of presentation are often unique to this space. But in essence, it‚Äôs business as usual. As a software engineer working on a game, your task is to facilitate the introduction of new features, integrate them within a large and ever-changing code base, clamp down on bugs and other emergent problems, and ensure it runs smoothly on a myriad of different platforms with varying hardware specifications. I‚Äôd argue that my time working as a mobile developer prepared me more for my time in games, than anything else. All this sounds a lot like a regular software development gig, but the big difference compared to most software projects, is the highly multidisciplinary nature of the gaming medium. As a game programmer, you‚Äôre part of a much larger team, catering to a variety of different needs and project requirements. Typical roles On a typical games project, programmers work alongside designers, artists, animators, writers, sound designers and other disciplines. It‚Äôs usually a large and diverse team working together to make the project a reality. This is undoubtedly one of the most exciting, and equally challenging, aspects of any given project. It‚Äôs a highly collaborative space, as you work together to bring the vision of the game to life. Being able to feed off the creative energies of others around you is incredibly satisfying. I often explain this working relationship as that artists  make it pretty , while designers and programmers  make it work . If anything, maintaining consistency of vision and preventing feature creep is one of the biggest problems you face while working on a game. This becomes the responsibility of the directors and producers. The director  is typically at the helm of the creative vision. Directors work with different teams to paint the broader picture, making executive decisions, all the while trying to maintain consistency. Producers  work on ensuring requirements are established, tasks are properly identified, scoped and budgeted, that team synergy is effective, and whether the director‚Äôs vision is actually attainable given the time and money available. Compared to traditional software projects, a game director acts akin to a product manager, with an emphasis upon hands-on work, leading team members below them, and focusing on the creative aspects of the project. A producer occupies an interesting middle ground between product and project manager. They‚Äôre responsible for keeping the project on track, collaborating with leadership and stakeholders ‚Äì such as an external publisher ‚Äì but also they keep a close eye on the product performance and work to ensure the game ships. Depending on the size of a studio, a producer may also be responsible for business management, such as liaising with external partners and handling finances. In a worst-case scenario, the director is also the producer. But it‚Äôs generally agreed that separating the creative direction from the project management helps keep things on track. Perhaps unsurprisingly, this whole process was heavily affected by the global health crisis and the need to work from home. It led to a number of new challenges, for which the industry is only now beginning to understand the most effective solutions. How games typically get built If what I‚Äôve described of multi-disciplinary teams working together sounds exciting or intriguing, what typically makes many scream in terror is when I talk about how games are typically built. It‚Äôs an onerous, complicated and often counter-intuitive process, given so many games emerge more as happy accidents, than the products of a carefully supervised process. Prototype vs final version. Top image: The prototype of  Sea of Thieves  (Rare, 2018) developed in the Unity game engine. Bottom: The final version of the game, developed in Unreal Engine 4. Prototyping.  Games start out in a prototype stage, typically built using existing art assets, or with cobbled-together solutions for the purpose of establishing the basics of functionality and behaviour. Prototypes are critical for getting a game signed off into full production, or obtaining funding from an external partner; given the ‚Äòfun‚Äô of the experience should be made evident and also that there is a market for the product. Should a game move into full production, it typically becomes a mishmash of different creative processes operating at once. Programmers are building core systems, artists are establishing the visual aesthetic and style of the game, and designers are establishing gameplay, long-term progression and retention. Integration testing is often a difficult aspect of game development . Integration testing is challenging because so many disciplines are working in parallel. This is because assets from different teams get pushed into the build at different stages, often breaking much of the game as it‚Äôs being created. Identifying and helping resolve these issues is often led by dedicated quality assurance teams ‚Äì assuming the team size or budget permits. Quality assurance might also be pushed out to the latter stages of development. In full production, you‚Äôre essentially trying to ‚Äúcapture lightning in a bottle‚Äù for a second time - the first time was during prototyping. Only this time, the game is significantly more complex and potentially is even being built in an entirely different game engine. Managing feature creep is a very real problem.  Games take a long time to make and the industry is an evolving and reactive beast. As new games get a foothold in the market, they can often force changes upon in-production titles in an effort to stay competitive and relevant. Trends emerge in specific genres when a new idea captures the imaginations of players. A recent example would be the adoption of  ‚Äòping‚Äô systems in first-person shooters,  brought about by the success of Apex Legends. New trends emerging can lead to small deviations from an existing production schedule, or an entire revamp of a concept in order to pursue a new trend. Arguably the biggest example of this in recent years is  Fortnite  by Epic Games.  Fortnite  started out as a third-person wave defence shooter, only to become a battle royale in a style akin to  PlayerUnknown‚Äôs Battlegrounds,  to significant critical acclaim and financial reward. But of course, a success story like  Fortnite  isn‚Äôt the reality for most projects. Games can spend years in something of a ‚Äòfugue state,‚Äô whereby the core of the game fails to take shape until the closing months as core design and direction are not nailed down sufficiently. Tech debt  can manifest quite easily as systems are built for one purpose, only for them later to be used for another. For some large-scale projects, the initial ‚Äòfun‚Äô aspect is only recaptured in the final 20% of the production process, which often leads to  difficult working conditions for developers  in the closing weeks ‚Äì if not months ‚Äì of a given project. There has been a growing emphasis over the past decade for game studios to embrace better work practices from traditional software development. Practices include: Test-driven development Automated build processes Agile methodologies All these processes are introduced to better catch many of the problems that emerge earlier in production. The real challenge is then adapting many of these ideas to work effectively within this multi-disciplinary environment. The Game Development Cycle For games, the traditional software development lifecycle never really fits. This is because you're often working to build or rebuild the same game multiple times during production. In some instances, the game continues to be developed even after it ships. In this section, I‚Äôll give a breakdown of the overall process. As a caveat, this breakdown isn‚Äôt universal, experiences will vary, and practicalities will shift depending on the type of project and the size of the studio. But it at least paints a picture of how the process typically pans out. For reference, it‚Äôs worth keeping in mind that your average game will typically take somewhere in the region of 2-5 years to make. Concept art ‚ÄòFaye‚Äôs Funeral‚Äô by Jose Cabrera for  God of War  (Sony Santa Monica, 2018) The game development life cycle consist of these three phases: Pre-production Production Release The three phases of the game development lifecycle. This was one out of the four topics covered in the article  Game Development Basics . The rest of the article covers: The game development cycle, in-depth .  What happens in the pre-production, production and release steps? Indie vs AAA production .  What are the major differences between how indie games are built vs how AAA titles come together? Game development tools & services .  Some of the custom tools used in game development: source control approaches, game engines and middlewares. Read the full article here . I recommend checking out Tommy‚Äôs game development YouTube channel,  AI and Games . If you are interested in games development, you can follow Tommy  on LinkedIn  as well or subscribe to his newsletter, also called  AI and Games . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/building-an-an-early-stage-startup/", "title": "Building an an Early Stage Startup: Lessons from Akita Software", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of five topics from today‚Äôs subscriber-only deepdive on  Advice on how to sell a startup . To get full issues twice a week,  subscribe here . Venture funding is  on a downward trend , and we seem to be at the start ‚Äì or the middle ‚Äì of  a ‚Äústartup purge‚Äù event . Startups that are running out of money, and are unable to raise more capital, are having to forcibly shut down. Of course, it‚Äôs not just grim news: startup funding might be harder to come by, but it‚Äôs not impossible to get. And it‚Äôs not just startups shutting down: there are plenty of startups being acquired. Today‚Äôs Thursday issue is a bit different than usual: we‚Äôll share the story of a startup acquisition that had a happy outcome to showcase the viability of this exit path. At the center of the story is Jean Yang, who interned at Google, Microsoft Research, and Facebook as a software engineer. She got her Ph.D. at MIT and was a professor at Carnegie Mellon (CMU) before founding Akita Software. Earlier this week, I sat down with Jean to talk through her story of how her startup just got acquired by Postman.  This news is hot off the press, publicly announced  by Postman  and  by Akita  yesterday, and you are among the early ones to hear about this event. In this issue, we cover: How Akita was founded On cofounders Raising funding Pivoting and growing the company On hiring The tech stack The biggest challenges of building a startup For this article, I interviewed Jean directly. My questions are in italics, with the answers coming from Jean. 1. How Akita was founded How did you start Akita? I was working on programming languages research: language design, dynamic analysis, and static program verification. I regularly talked to industry teams on these topics. As I did, I realized that there was a bigger threat to software reliability than the language design topics that I was working on ‚Äì the threat of how software grew into these complex and heterogeneous ecosystems that nobody really yet understood how to reason about. The problem of ever-more complex software was one that bothered me over the last decade. However, it was only a few years ago that I realized that APIs could be both the cause of the problem and the solution. The cause of the problem ‚Äì thanks to the rise of APIs, SOAs, and SaaS ‚Äì is greatly accelerating complexity and confusion. But the solution as well: because the API layer is an easy, relatively standard layer to gain visibility into. When I decided to start Akita, I reached out to everybody I was connected to on LinkedIn who worked at a company, and I asked if they were open to talking. During the first 1-2 years of my startup, I continued to call in every favor I could to talk with software teams, so I could continue to test the market. 2. On cofounders You founded Akita with no cofounders. Did you seek out any at all? I wanted a cofounder! I trialed working with two different cofounders for a few weeks each, but we weren‚Äôt going through it with the same motivations and levels of commitment. Ultimately, I felt it was the right time to start the company, so I decided to do it alone. I 100% believe that starting a company is easier to do when you have cofounders.  Ideally, you have people who are philosophically and financially incentivized in the same way that you are. I‚Äôve seen multi-founder teams accelerate incredibly quickly when that‚Äôs there. It was  Steven Sinofsky  ‚Äì the former president of the Windows Division at Microsoft and the author of  Hardcore Software  ‚Äì who once told me that a cofounder is not someone you find, but someone you already have in your life. I completely agree. 3. Raising funding How did you get the funding, and how much was it? I feel that I got lucky raising the first round of funding: it was surprisingly smooth. I started an accelerator with my friend at  Highland Capital  in 2015. In 2018, my friend was still running this accelerator and convinced me to participate instead of applying to Y Combinator or another accelerator. So I did: in the summer of 2018, I took leave from Carnegie Mellon, where I was a professor by then. I moved to the Bay Area, hoping to raise investment in the next six months. I started with early conversations with venture capitalists. These conversations didn‚Äôt really go anywhere; there were a lot of ‚Äúlet‚Äôs keep in touch‚Äù endings. Things changed when a friend of mine introduced me to his seed investors. These seed investors were familiar with the API and security space and ‚Äúgot‚Äù my vision. I got my first term sheet a week later ‚Äì and I raised a seed round the week after that. My seed round co-leads were  Martin Casado  at a16z and  Mike Vernal  at Sequoia, and we had participation from people like Kevin Durant. I had been talking with Martin all summer but actually met Mike three days before the deal got done. I was able to convince Martin that adding Sequoia would be a benefit; Mike was the second person to the deal, so he agreed to split with Martin. To this day, we‚Äôre one of the few seed deals split between a16z and Sequoia! Over the years,  Harpoon Ventures  also got interested. In 2021 and 2022, they also invested into our seed extension round. Thanks to this funding, we did not need to fundraise until this year, in 2023. 4. Pivoting and growing the company In 2021 ‚Äì when we last talked ‚Äì you had just pivoted your company. What happened? The original vision for Akita was to solve problems for API security. As a first product, we built an API fuzzer. API fuzzing is a type of API testing where an API fuzzer generates various inputs meant for testing and aims to uncover security vulnerabilities, or bugs. People loved our fuzzer demos. But then we couldn‚Äôt deploy our fuzzer because most teams were lacking specs for their APIs! So we started to build API specs on top of our API security product. In 2019, we were on our way to signing our first major customer contract for API fuzzing. But to close this contract, we‚Äôd just spent months building an API spec for this user. We kept running into the same problem with other customers, and so we realized that to solve for the API security problem space, we also needed to solve for the API spec problems. We pivoted to API observability in 2020.   This happened a year later, in 2020, and this pivot took about a year to execute, in large part because we were building something so different we needed to recruit different people to help build it. 5. On hiring Every startup hires differently. How did you hire? We have a pretty involved interview process for an early stage startup, and we kept tweaking it. We do have two things that are less standard compared to other early stage companies: We have a more hands-on interview than many. We do a bug bash and also a collaborative coding exercise. We take references more seriously than just doing it as due diligence. For example, I asked people to put up as references their thoughts on why the person would be a good fit for a fast-moving environment with a lot of uncertainty. I had to relearn how hiring works, compared to academic hiring.  I had only ever hired before in academia. In academia, you‚Äôre building a team to optimize your chance of getting ‚Äúsuperstars.‚Äù Since you‚Äôre only judged on your top papers, you‚Äôre optimizing for having a few good papers. In academia, you can tolerate high variance. Consistency and teamwork are not quite as important. At my startup, I‚Äôve come to value consistency, the ability to execute with a team, and product sense more highly than I previously did. I also don‚Äôt value high-variance brilliance as much as I used to when in academia. For example, try to imagine hiring John Nash from  A Beautiful Mind  as a product engineer to a startup. While that profile would excel in an academic setting, it likely wouldn‚Äôt go well at a startup. The tech stack What was your tech stack, and how hands-on were you? Our tech stack is this: Go  on the backend Python : We have a bit of Python left over from a developer who preferred Python to Go. This is one of the benefits of working at a startup: it‚Äôs easy enough to influence technology decisions! JavaScript/Node.js  on the frontend AWS EKS  (Elastic Kubernetes Service) as the infrastructure we run on top of As for how hands-on I've been: I‚Äôve focused on the product side of things at Akita ‚Äì things like market research, user research, and customer success. I still got  very  involved in how the technical solutions map to the product. When we‚Äôre solving hard technical problems, I also get involved because I‚Äôll sometimes have insights about how we can leverage constraints from user needs to simplify the problem. And to give a sense of the product: here‚Äôs a screenshot of the app: Screenshot from Akita‚Äôs observability dashboard The biggest challenges of building a startup What were the biggest technology challenges when building the product? I‚Äôll be honest, growing the company was much harder than any technical challenge. I solved hard problems before and knew how to do it ‚Äì you talk with people, you iterate, and so on. I feel like it‚Äôs hard to throw a technical problem at me that would really scare me. Building out the team was the most difficult.  I showed up to Silicon Valley with a pretty small startup engineering network, as most of my friends are either in academic research or founders who need to hire themselves. It took me a while to build up my network, build up the trust of people outside of the programming languages community, and even figure out startup hiring! When I first started, I really didn‚Äôt know how to hire for an early stage startup. I am grateful to all of the people who have worked with the Akita team and me over the years and have learned a lot of lessons to use going forward. Talking about technology challenges, two did stand out. Dropping into a team‚Äôs tech stack with minimal work.  We built Akita on top of  BPF (Berkeley Packet Filter) , which made things easier, though. BPF is a networking interface that allows user-space applications to inject small programs into the kernel. These programs get triggered in response to events, like a packet received on the network interface. One part of the work that was unexpectedly hard was to actually get BPF to be ‚Äúdrop-in.‚Äù Being ‚Äúdrop-in‚Äù means getting things as close to a one-line install as possible. This means that we need to figure out  exactly  what versions of software our customers are using, and how we can automate Akita to install and run on top of that stack. Doing all this took more time than I expected! Building algorithms for conveying insights from API traffic.  After we first got our API spec generator working, our users reported they were overwhelmed by the sheer number of endpoints showing up. We realized that we had to do a much better job of automatically figuring out which API calls might correspond to a single endpoint. We also had to offer teams a way to prioritize certain endpoints. This got us down the path of showing latency, errors, and endpoint changes ‚Äì like adding and removing endpoints, or fields changing on endpoints. The challenge of endpoint changes is quite hard, and we‚Äôre still working on that. This was one out of the five topics we covered in the article  How to Sell an Early Stage Startup: Lessons from Akita Software . The full article additionally covers: Jean‚Äôs background.  From learning to code with Logo and Visual basic to working on F* ‚Äì a security-typed programming language. Selling Akita.  Why Jean sold the company even though she was about to close a Series A. And how the Series A term sheet helped with the sale. Advice when selling a startup.  Building up a network, conducting the sale process, and how to think about privilege, luck, and hard work. Future plans at Postman.  Her plans as Postman‚Äôs Head of Product - Observability. Read the full article here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/why-are-cloud-development-environments-spiking-in-popularity-now/", "title": "Why are Cloud Development Environments Spiking in Popularity, Now?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover a fresh industry trends: Cloud Developent Environments ‚Äî which is analysis full subscribers have received  3 weeks ago . To stay up to date with trends across the tech industry,  subscribe here . There is a quiet revolution unfolding at tech companies: cloud development environments (CDEs). The past three months, I shared insights with full subscribers: Cloud development environments at tech companies  (27 Jun 2023) Why are CDEs spiking in popularity, now?  (5 Sep 2023) The Cloud development environment vendor landscape  (26 Sep 2023) The trend is so fresh that even Gartner ‚Äî an authority in detecting trends ‚Äî has only  mentioned CDEs for the first time  two months after The Pragmatic Engineer  analyzed  this category. In today‚Äôs issue, we cover why this trend is popular around now, and what are startups to watch for in this space. Why are CDEs gaining popularity, now? The concept of remote development environments stretches back to the dawn of computer programming. In the 1960s, expensive central computers were shared by many users, sitting at terminals. Each user had a specific amount of time to use the processor in this setup called ‚Äútimesharing.‚Äù Cloud development environments are similar to how programmers used a terminal to program a central computer, back then. A big difference is that in the case of old-school timesharing, the goal was to save on infrastructure costs, as the cost of CPU cycles was far higher than programming time. A single mainframe machine cost several times the annual salary of a programmer; the Atlas computer at Manchester University in the UK cost ¬£50M in today‚Äôs money, the equivalent of several hundred programmers‚Äô annual salaries. No wonder compute time was so valuable! The input/output area of the Atlas computer (right) and the computer itself, occupying a large room with its circuit boards inside closets. Image source:  The Atlas story Today, it is compute that‚Äôs much cheaper than software engineers‚Äô time. In the US, a software engineer working at a Big Tech company is compensated more than 100 times the cost of a high-end laptop, annually.¬† So why the sudden rise in use of remote environments? I observe several trends which make this shift understandable and sensible: Reasons why remote development and cloud development environments are getting popular Here are the reasons: 1. Larger codebases.  Every day, there‚Äôs more code at a tech company, not less. This means more repositories are needed, which are fast enough to build and work with, but which increase fragmentation. At many large companies, this inevitably leads to consolidating many smaller repositories into fewer, larger ones. Which leads to the next point‚Ä¶ 2. Monorepos.  These are becoming more popular at large tech companies for a few reasons. The biggest is consistency; with a monorepo, dependencies are clear and API breakages due to outdated dependencies are absent. Also, tasks like integration testing are much easier. However, monorepos result in codebases growing large, so that even checking out the code or updating to the head can be time consuming. 3. Laptop compute power is plateauing.  The available compute power of laptops and personal computers no longer increases as it did prior to 2010. Moore‚Äôs Law says the number of transistors in an integrated circuit (IC) doubles around every two years. But the most recent 10 years suggest this is no longer the case. 4. The Cloud is spreading and offering more capabilities.  Since around 2010, there‚Äôs been a boom in Cloud computing. AWS launched in 2006, Azure in 2010, and GCP launched its first region in 2015. Since then, all Cloud providers have expanded their availability, and the price of Cloud compute has dropped due to competition and technological progress. 5. Low-latency networking is cheaper and more common.  CDEs only make sense when latency is low. This requires high bandwidth internet connectivity for developers, and remote development environments to be located in close vicinity to servers. High-bandwidth networking is spreading rapidly, including fallback options with mobile 4G and 5G coverage. And with cloud providers launching new data centers, zones and regions, it‚Äôs now easier than ever to have cloud environments near to software engineers‚Äô locations.¬† For example, Uber  runs  its Devpods out of 5 data centers this way, presumably operated by a provider like Google Cloud.  We previously covered  Uber's transition from its own data centers to the public cloud . 6. Developer productivity investments.  Assuming a team of four software engineers costs $1M/year, would you spend $10K/year to improve the efficiency of that team by 10%? The answer should be a no-brainer ‚Äòyes,‚Äô because the business value generated by a team costing $1M/year should already exceed $1M/year. So if the team gets 10% more efficient, it should generate at least $100K/year extra value.¬† At companies with large codebases, CDEs are a pragmatic way to increase the productivity of software engineers. 7. Remote work . Covid-19 lockdowns and the rise of remote working have played a role in boosting CDEs. With remote work, engineers spend more time on video calls, which utilizes laptop resources like CPU, memory, and more. Executing a build is much slower while on a call. Plus, a CPU and memory-intensive build can impact the quality of the video call, and make the local environment much less responsive.¬† LinkedIn gathered data showing how much slower video calls make common developer operations. It found video calls added a 2-4x increase in latency to a developer laptop. 8. Concern about code leaks.  One downside of remote work ‚Äì and hiring people whom you‚Äôve not met in person ‚Äì is that trust problems tend to arise more easily. When working from the office, it‚Äôs easy to verify that the same person you hired is the one doing the work, remotely. With full-remote work, the risk is higher that someone other than the employee accesses the codebase. CDEs can offer an additional layer of protection to reduce the risk of source code leaking outside of the network. At the very least, far more logging is in place, and it can be easier to detect when larger parts of the codebase are accessed and copied across the network. 9. Open source VS Code Server . In 2021, Microsoft open sourced VS Code Server. This is the server code that powers VS Code remote development, and GitHub Codespaces. Thanks to this, the barrier to entry was dramatically reduced for anyone wanting to build their own cloud development environment which supports VS Code. This applies to startups offering CDE solutions, as well as companies building such a solution in house. None of these trends alone can explain the spike in popularity of cloud development environments, but their combined effect in recent years does provide a plausible explanation. It‚Äôs also possible to posit that the ‚Äúspark‚Äù which ignited this confluence of factors was the Covid-19 pandemic of 2020-21, and the accompanying rise of remote work. CDE vendors: a definite trend With more than 20 players in this space, let‚Äôs begin with a timeline of when the products launched. The segment really took off around 2018, although Cloud9 ‚Äì which AWS acquired in 2017 ‚Äì was founded in 2010. A timeline of cloud development environment products and startups. Full subscribers can  access a list with links here . Startups that offer remote development solutions include: Gitpod : feels like it might have the most momentum in the CDE space ‚Äì at least right now Stackblitz :  the only vendor that offers environments which boot in milliseconds, and the only solution that mount a micro-operating system written in WebAssembly inside the browser tab that boots in <200ms! DevZero : founded in 2021 by two engineers who‚Äôd worked at Uber, and the solution brings a lot of inspiration from  Devpods at Uber , and the developer experience at the company Crafting : probably the most advanced solution of all; one that extends Kubernetes under the hood, and aims to be far more than a CDE Replit : probably the most popular collaborative coding environment for personal use. Codesandbox  started out as a web IDE in around 2018, but expanded since. Coder : one of the few vendors that offers only a self-hosted CDE platform. Codeanywhere : one of the earliest cloud IDEs, founded in 2013 Daytona : founded in 2023, and its founders are the cofounders of Codeanywhere. Cloudomation : almost exclusively targets Germany Hocus : started in November 2022, still in the building phase Strong Network : approaches CDEs from the cybersecurity and compliance perspective We go into more detail for each of the above solutions ‚Äî as well as products from more established companies ‚Äî in the article  Cloud development environment vendors . There‚Äôs an absolute flurry of startups which provide tools for remote development. Between 2010-2020, we saw a couple of startups launch in competition with each other, but it‚Äôs since 2020 that there‚Äôs been a lot more activity, and new product launches seem to be speeding up. Here is a summary of all the vendors and products mentioned in this article: The number of cloud development environment product launches seem to be increasing since 2021. Feels like we‚Äôre either at the beginning, or the middle of the ‚ÄòCDE wave‚Äô It feels to me like we could be nearing an inflection point : after which more developers will work with remote environments at medium and large companies, than those that use only their local machine to develop. I am reinforced by this feeling as I talked to vendors who all have a pretty clear vision on what they want to build: but their products are still being built out, and I had trouble keeping track with the various innovative approaches they are all trying! Will most developers at large and mid-sized tech companies build software on a remote machine in 2-3 years time? And will they do this in a way that‚Äôs indistinguishable from doing it locally? It‚Äôs hard to be sure, but I believe this is the direction we are headed in. These were two out of the close to dozen topics we covered on this fresh trend. See these articles for more details: More on why CDEs are spiking now : Virtual desktops vs CDEs The evolution of the CDE space since 2016 The biggest challenges of the CDE space The future of software development in local environments Remote development environments at tech companies: The idea behind CDEs Upsides of CDEs Pipedrive Uber Slack The downsides of CDEs The CDE vendor landscape: CDE startups and open-source solutions Gitpod Stackblitz DevZero Crafting Big Tech and established companies \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/bun-lessons-from-disrupting/", "title": "Bun: lessons from disrupting a tech ecosystem", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of four topics in yesterday‚Äôs subscriber-only  The Pulse issue . To get full newsletters twice a week,  subscribe here . Two weeks ago, a JavaScript runtime and toolkit called  Bun  was released and took the Node.js world by storm. Bun was mostly built by  Jared Sumner , a former Stripe engineer, and recipient of the Thiel Fellowship (a grant of $100,000 for young people to drop out of school and build things, founded by venture capitalist, Peter Thiel). Bun has other contributors, but Jared writes  the lion‚Äôs share  of code. Bun is a backend JavaScript runtime that is an alternative to  Node.js  and  Deno . Its top focus is performance, and according to benchmarks shared  in the launch video , around 10x performance increases can be observed when building packages, running code, or handling inbound requests on a server. This theoretically reduces the hardware requirements of applications. Bun has stirred up the JavaScript space, and adoption has been rapid. Vendors like Vercel and Replit added support for Bun, as did frameworks like Ruby on Rails and Laravel Sail (PHP.) Many developers are giving Bun a go. Of course, it‚Äôs early days, but Bun keeps improving rapidly. But how is Bun so fast?  Firstly, performance was the guiding principle, and the team made smart choices to achieve this, and also tradeoffs which need to be kept in mind. Smart choices include using a more performant JavaScript engine than Node does (Bun uses Apple‚Äôs JavaScriptCore, while Node uses Google‚Äôs V8,) and using the low-level programming language  Zig . There‚Äôs also a large number of performance-centric optimizations like: Using tagged pointers  to avoid the overhead of storing extra function pointers Additional steps  to reduce memory usage by scheduling additional garbage collector executions ‚Ä¶ and many more which all add up With performance, there are also tradeoffs. For example, in its quest for performance, when running ‚Äòbun install‚Äô, Bun  doesn‚Äôt check the network  to ensure that locally cached packages are correct ‚Äì even when specifying to use the latest version. Doing this would introduce seconds of latency, but also ensure correctness. The npm or pnpm package managers do this additional check and so are slower, though arguably more reliable. Discovering these edge cases ‚Äì and making sure they don‚Äôt catch you off guard ‚Äì will surely be a learning curve for developers using Bun, just like with every new framework. Bun showcases how the ‚Äòinnovator‚Äôs dilemma‚Äô manifests in a tech ecosystem.  The innovator‚Äôs dilemma comes from the book of the same title by Clayton Christerenses. The dilemma is this: a large, market-leading company has some motivation to innovate, but also a strong disincentive as well, because innovation risks undermining its existing products. In the case of the Node ecosystem, Node is the innovator. In 2009, it was revolutionary and the majority of the JavaScript backend development community moved to this ecosystem. Now of course, Node has interest in innovating in all areas, including performance. But it needs to make sure performance improvements don‚Äôt break any Node users. Bun has no such constraint. It begins with a clean state, and can ship something that works for, say, 90% of existing Node projects, and break the remaining 10%. This means it can make decisions which greatly improve performance, which Node doesn‚Äôt have the luxury of doing. If it was not for the innovator‚Äôs dilemma there would hardly be any startups taking on large companies, or new frameworks which successfully challenge existing ones. Bun also reveals the contrast between venture-funded open source and ‚Äòcommunity sweat‚Äô-funded open source.  Node‚Äôs contributors are unpaid, and have been doing all work voluntarily. I reached out to  Yagiz Nizipli , who is the contributor who took on responsibility for performance work on Node. He confirmed Node has no funding, and no collaborator gets paid for their work on it. There are people whose company pays them to maintain Node for their own, company systems ‚Äî such as IBM paying to maintain Node so that it stays compatible with  IBM AIX  ‚Äî a proprietary Unix operating system designed to run on IBM¬Æ Power¬Æ servers. However, at the end of the day, it‚Äôs all volunteers like Yagiz who have been building Node for over a decade, helping it become the dominant JavaScript backend runtime.  I tip my hat to all volunteer open source contributors and maintainers ‚Äî both for Node, and for other projects. If you are one of these people: thank you! This is in stark contrast to how Bun is funded. The framework is built by a startup called  Oven , which has raised more than $7M in funding, which means the company can afford to pay all its contributors a market-rate salary, plus equity in the company. Clearly, strong funding will create a much more focused team, and Bun contributors work on Bun full-time, while unpaid Node contributors work on Node part-time. Venture funding comes at a cost, and the bill usually falls due later.  There is barely anything to complain about in a startup like Oven paying people to work full-time on an open source framework like Bun. It‚Äôs a win for everyone; the community and the developers working on it full time. In contrast, the goal of a VC investor is a financial return. VCs fund businesses they expect to eventually be worth a lot more than the value of their investment, and to be either sold, or go public. This means that in the mid to long-term, Bun‚Äôs funding needs to support a business. For most commercial open source companies, the approach tends to be to offer a managed, dedicated service of the open source software, or to provide additional features on top of it. This is the approach Vercel is taking with Next.js ‚Äì where they are the trusted provider to host Next.js apps. In the case of Oven, I assume the plan is to do something similar. Of course, not all startups succeed, and most startups which fail do so by running out of money. When this happens, the startup shuts down. In the case of a closed source startup, the software is also gone. However, with open source software like Bun, it will not go anywhere even if the business ceases to exist. The project would simply need volunteer contributors, or sponsors who pay contributions. The license of a project is key to understanding how ‚Äòrisky‚Äô it is to use. Bun  uses  an extremely permissive MIT license that minimizes any risk. Technological innovation rarely happens in a vacuum; it builds on previous technologies.  Node growing into a mature ecosystem is what enabled Bun to now take it by storm, and offer an alternative with superior characteristics ‚Äì in this case, performance. Youtuber and tech investor  Theo Browne  posted  the most balanced take  I‚Äôve seen so far on what Bun means for the ecosystem. In the video  The truth about Bun , he points out the risk of an open source project being dependent on an individual: ‚ÄúYagiz is the person on the Node team focused on performance. He is a part-time, unpaid contributor to Node, working really hard to make Node performant enough to be a viable choice (...) He‚Äôs the person thanklessly maintaining this thing (...) For Bun, the majority of code is coming from the person (Jared) who also makes the majority of business decisions [for his company]. You eventually get to the point where these things conflict. Jared‚Äôs done an incredible job of managing this thus far: but he‚Äôs mostly done this by working absurd amounts of time. That is a risk, and we need to be real about this risk. At Node, there‚Äôs great work going on from hundreds upon hundreds of people to make Node as great as it is. Node survived for more than a decade, because they‚Äôve managed and mitigated these risks really well‚Äù I‚Äôm excited to see such innovation in the Node ecosystem,  because innovation begets innovation. What Jared and the team have done with Bun is outstanding engineering; they‚Äôve shown it‚Äôs possible to push performance far beyond what most engineers would assume to be possible. By building Bun to be so ridiculously fast, they‚Äôre getting a ton of warranted interest and early adoption. But this innovation also helps the wider ecosystem, as maintainers on Node and other package managers also jump to do performance optimizations for their tools, doing so with renewed inspiration. It will be interesting to see the impact of more venture funding pouring into this space. Node was built by a team of volunteers, becoming an admirable framework, which is ever-improving, even without direct funding. This approach has proved to be sustainable, thanks to the hundreds of involved contributors. While Bun has incredible momentum: will this be enough to make it a sustainable framework and business? This was one out of the four topics covered in this week‚Äôs The Pulse. The full edition additionally covers: Industry Pulse : Databricks going public ‚Äì maybe, Square‚Äôs long outage, Slack‚Äôs redesign, and Valve blocks video games with GenAI assets. The tech IPO winter has ended:  For 18 months, there were no tech IPOs, with HashiCorp being the last to list on the stock market. But now Arm, Instacart and Klaviyo have broken the ice, offering hope for more to come. Twilio‚Äôs iconic billboard is different, but why?  For 7 years on the highway to San Francisco, Twilio had a billboard boasting: ‚ÄúAsk your developer.‚Äù Now, the company has replaced this famous billboard with a new message geared toward sales and marketing teams. Read the full issue here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/chronosphere/", "title": "Going from Developer to CEO: Chronosphere", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover three out of eight topics from today‚Äôs  deepdive into tech scaleup Chronosphere . To get full issues twice a week,  subscribe here . We don‚Äôt frequently have CEOs on The Pragmatic Engineer: in fact, today is the first issue when we‚Äôre talking with a CEO ‚Äì partially ‚Äì  about  their CEO job. I‚Äôve always wondered what it would be like to go from a developer, to eventually become the CEO of a large and growing company. Martin Mao travelled this path: starting his first developer job at a local startup in Australia, then making the move to the US ‚Äì first being at Microsoft in Seattle, then at Amazon, and then at Uber, in Silicon Valley. He‚Äôs solved interesting engineering challenges along the way, too ‚Äì like building observability for Amazon‚Äôs EC2 offering, and being one of the first engineers on Uber‚Äôs observability platform.  We covered more on this topic in the article  How Uber built its observability platform . However, Martin had not written a line of production code for the last four years, as he‚Äôs taken on the role of CEO, and heads up observability scaleup  Chronosphere  ‚Äì at more than 250 people and growing. The company supports billions of active time series across its customer fleet. Chronosphere was actually founded by two former software engineers:  Rob Skillington  ‚Äì the CTO of the company ‚Äì and Martin, acting as CEO. It‚Äôs not common to have only engineering founders at a company: my gut feel is that at infrastructure startups, such a setup can make a lot more sense. Today, we cover: From learning to code in Australia, to working in Silicon Valley Launching a startup Going from developer to CEO Some of the stages of how Chronosphere grew, as a tech company With this, it‚Äôs over to Martin, who tells his story and applicable learnings. 1. From learning to code in Australia, to working in Silicon Valley How did I learn to code? In high school, in Australia,  Prashant Varanasi  was one of my good friends. He was learning to code, and needed help in a programming competition, because he needed a team of three. He asked for help, and taught me the basics of Visual Basic, so we could enter the competition. And we ended up doing well in it, too! Afterwards, we both won scholarships to college to study computer science.  Prashant would later work as a senior software engineer at Google, and a distinguished engineer at Uber, but, of course, back then, I didn‚Äôt know this. In college, I tried my hand at a couple of startups.  I founded a text messaging startup at first. Then, I joined a startup that tried to beat Facebook, and become the #1 social media company in Australia, around 2007. At this social media startup, we put a lot of work into importing your contacts from Microsoft Messenger. But when Facebook entered Australia, they pretty much crushed us. After graduating, I began looking for a more serious job. In 2009, the tech scene in Australia was not as vibrant as it is today: Atlassian was still small and Canva didn‚Äôt exist. Google was already on the scene, and I interned at the Google office, working on Google Docs. However, Google paid a fraction of what they did in the US, so I set my eyes on the United States. Microsoft In 2009, not many US tech companies were hiring, as the sector was still recovering from the 2008 crash. Microsoft, however, was, and I got an internship to work there. They accepted five interns from Australia, and I was lucky enough to be one of those five. When I went to intern there, I thought I would spend three cool months in Seattle, and that would be it. I had no idea you could get offered a full-time job at the end of an internship, until the internship ended and Microsoft came to me, saying, ‚ÄúOh, hey, here‚Äôs your job offer.‚Äù It was an offer to stay in Seattle. On top of the option to continue working at Microsoft, it was also the best monetary opportunity as well, so I took it without a second thought. I worked on Office 365, as it was born.  I joined the Microsoft Office team but was tasked to work on a new product. My team was taking the Office product distributed on CD ROMs and making it into a SaaS solution. They called it Office 365, and in 2010, this was a really exciting project to work on. We then shipped the first version, and then I felt that it was time to move on. See, I was working at Steve Ballmer-era Microsoft. We had a target to hit a two-year release cycle. They let me code full-on for eight weeks, and then told me to stop. I asked what I should be doing next. They said, ‚ÄúIt‚Äôs now QA time!‚Äù¬† I tried to push bug fixes, but was told that it was too risky. I was, however, told that I could get those fixes ready for the next release. But the next release was not for another two years‚Äô time! After a few years, I thought to myself: ‚ÄúWhat am I doing here? I‚Äôm not productive at all. I should do something else with my life.‚Äù Amazon I attribute a lot of things to luck, and how I ended up at Amazon was one of these. My mentor at Microsoft was a senior engineer who had moved over to Amazon and ended up running a part of the EC2 team. This was around 2013, and EC2 was one of the hottest services at Amazon. For some reason, Amazon didn‚Äôt have any senior engineers on the part of the EC2 team that was responsible for the EC2 instance management, and for the Windows business. The Windows business was itself a billion-dollar business at the time! So my former mentor reached out and asked, ‚ÄúHey, do you want to be a tech lead on EC2?‚Äù I thought about it for a while, and then decided I couldn‚Äôt turn down an opportunity like that. And it was really interesting to work on EC2. I wrote code for drivers on Windows, and started to put a basic observability system in place. EC2 had no observability system back then: people would spin up EC2 instances but have no idea whether or not they worked. So we took on the challenge of fixing this. With my team, we built the basics of what is now called  AWS Systems Manager . This was a remote management tool, to do things like: SSH remotely into machines, via a browser interface Roll out patch updates Manage rolling updates for several machines We built it, shipped it, and presented it at  re:Invent  ‚Äì Amazon‚Äôs annual flagship event. It was a lot of fun! After a couple of years, it felt to me the mood changed to most teams just wanting to ship new services. The focus seemed to shift to: invent something new ‚Üí build a service for it ‚Üí ship it. Once you do this a couple of times ‚Äì building and shipping a new service ‚Äì it starts to become easy enough. The discussion I had with people went along the lines of, ‚ÄúOh, I know what service you want to ship. I know how to do it. It‚Äôs not that hard to do, anymore.‚Äù It was around this time that  Rob Skillington  ‚Äì now my cofounder at Chronosphere ‚Äì called me up and convinced me to join this startup called Uber, and said it would be a crazy ride!¬† Uber The pitch to join Uber wasn‚Äôt just the business vision, but also the engineering one. The engineering pitch went something like, ‚ÄúHey, here‚Äôs your chance to come in and work on a system where we don‚Äôt use the public cloud; we own our own datacenters, and we get to build infrastructure services that could one day become the size of Google‚Äôs infrastructure.‚Äù It was a pitch that was hard to say no to! I joined in 2015, when there were a couple hundred engineers at Uber, and the infra team was made up of about 50 people. Rob was right that Uber would be crazy. It was at Uber where we ended up building  M3 : Uber‚Äôs open source, large-scale metrics platform.  We previously covered the building of M3 in the article  How Uber Built its Observability Platform. 2. Launching a startup At Uber, I felt like we had completed the core mission of M3. We spun up a reliable observability platform, and rolled it out. Virtually every engineer was using the platform. The roadmap, frankly, was not that exciting, compared to the challenges we had to overcome in the past. I decided to look around. I looked at both internal and external opportunities. And of course, I also considered building something from scratch. In 2019, Uber didn‚Äôt have a ton of opportunities, internally. The speed of execution felt slower than it had been in earlier years, and truly hard problems were hard to come by. On the other hand, I found the idea of building a company  very  compelling. We originally built M3 to support Uber‚Äôs scale on a microservices/container (cloud native) architecture. It was that very architecture that created the scale, reliability, performance and cost-efficiency challenges. When we built M3, we thought only Uber and a handful of companies in the world would need something like this: such as Google, Facebook and Netflix. Kubernetes changed the observability needs of so many companies.  As Kubernetes really picked up in popularity, it was clear the majority of the world‚Äôs architecture would look like Uber‚Äôs architecture did, and that M3 would be a solution to observability needs. We just so happened to have M3 open sourced ‚Äì ready to be used in the open, as well.¬† We then looked at the competition. No one was in a position to solve this problem! None of the existing vendors had built and optimized for a cloud-native architecture. At scale, pricing was out of hand with all solutions. The cloud-native observability market seemed one that would be ripe for disruption. And we just so happened to have the perfect solution, already built and tested at scale. I remember thinking that if we ever wanted to start a company, there would never be a better opportunity from a timing perspective. Finding a cofounder My cofounder is  Rob Skillington . We are both Australian, have known each other for over a decade, and worked together closely for four years at Uber on M3. In fact, he even officiated at my wedding!¬† My personal and biased belief is that starting a company with someone you know and trust really helps.  Building a company is hard. There are a lot of tough moments, which might prove to be even tougher with someone you don‚Äôt know as well. Find someone who‚Äôs interested in a different part of the business from you, and someone who brings different skill sets. It‚Äôs common to have two engineering technical cofounders, but generally one has to focus more on the business side. In our case, Rob remained technical and I focused on the business. Finding one cofounder who is technical and one who‚Äôs interested in the business is not as easy as you might think, either, because both founders need to want to enjoy their area. I see so many technical folks that just don't want to move over to the business side. This is fine, but then you need to go and find a CEO so you can focus on what you love to do! Fundraising Fundraising turned out to be pretty straightforward. Firms like Sequoia and Greylock were reaching out to us, when they heard we were planning to start a company. These VC firms have these scout networks of folks who work in Big Tech whose job it is to look out for interesting tech to invest in: and this was how they found us. We put together an 80-page business plan.  This business plan was not really for the investors, but rather, to help us think about the business. In this document, we covered: The product The market The go-to-market (GTM) plan Our competitors ‚Ä¶ and many other things! We worked on a few iterations of this plan, and once it was solidified, this gave us the conviction that we were onto something. With the plan in place, we sent this document ‚Äì rather than the usual pitch deck ‚Äì over to the VCs. Our approach was unorthodox, but worked! The document answered all the questions they had, and we still did a pitch, of course, with a deck. We ended up pitching to a firm and partner we liked, early on:  Jerry Chen  at Greylock. Jerry gave us a term sheet on the spot, and we took it. Launching the company was easier than I imagine many founders have it. After all, we already¬† had open source technology to use ‚Äì M3 ‚Äì and we also had a clear path on what we wanted to build, similar to the roadmap the observability team at Uber used to have.¬† When we started out building the company, it felt a little like a continuation of our path from Uber. We were heads down building the product we wished we could have bought. Here's the timeline of our fundraising story since the launch of the company: May 2019: founding the company Nov 2019: the first round of funding led by Greylock: Series A ($11M) Jan 2021: Series B ($43M) Oct 2021: Series C ($200M) Jan 2022: Series C-1 ($115M) An interesting bit of history is how the first funding round at most startups is called either a pre-seed, or a seed round. But we didn‚Äôt have one of these! We knew what we wanted to build, and knew there was a demand for it, and we had validation from the M3 open source community on the demand. We had the technology ready in the form of the M3 project, which was a massive achievement by itself. We needed $11M to get started. When we told Greylock that we were raising $11M, they said that that figure was too large to be called a seed round. Still, we didn‚Äôt get hung up on the name. We just called it a Series A. 3. Going from developer to CEO With my cofounder, Rob, we quickly established that he would remain technical, and I would be on the business side.¬† By the end of my time at Uber, I didn‚Äôt feel that I had to prove myself in engineering any more.  I was there from the beginning when we built M3. I could still get joy out of technical stuff, but I've proven that I'm a solid engineer, and that I'm an okay engineering leader. I didn‚Äôt feel like I needed to go and prove anything more in those areas. Still: I had this hunger to learn about how the rest of the business worked. At Uber, I wasn‚Äôt that close to the business and had no idea about the details. Being the CEO, I got to learn so much of this! My day-to-day life now, as CEO, is very different to when I was an engineer or even an engineering manager. Right at the start, I still had GitHub access and did some reviews. But I was definitely the first and only member of the early team to become ‚Äúnon-technical.‚Äù I had to take care of everything else that wasn‚Äôt technical at the company.¬† Now my days involve not just back-to-back meetings, but also tons of context switching!  It‚Äôs like, \"Oh, I have to switch context to a marketing meeting where we're talking about a demand generation strategy to one about customer success to one about how to sell to customers.\" Over time, I built up a support network. Below are a few things I did to find people who could help me navigate the new problems I faced: Leaning on VCs.  VCs don‚Äôt have as much domain knowledge, but they have a vast network. I would ping my VCs, telling them: \"Hey, I'm trying to solve this marketing problem. Can you put me in touch with 3-4 people in your network that could help me walk through it externally?\" Leaning on advisors.  For people who have been helpful, I tend to keep in mind as an advisor. For example, I have a sales advisor, a marketing advisor, and people who can advise in a few other areas. Seeking out other founders and CEOs.  I never realized how most founders and CEOs give a lot more time than you would expect. For example, one CEO in particular, from a publicly traded infrastructure company, has helped me out no end. If I text this CEO about something, he‚Äôll make time to help and offer support, even though I know how busy he is. I notice that most such CEOs are really protective of their time, yet they‚Äôre still willing to carve out time for other founders. This makes me want to pay it forward as well, and help earlier-stage founders too. This was three one out of the eight topics covered in this week‚Äôs The Pulse. The full edition additionally covers: The early days of Chronosphere The need to introduce a career ladder The impact of Uber and future plans Advice for software engineers Appendix: Chronosphere‚Äôs 80-page(!) business plan Read the full issue here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/working-at-a-startup-vs-in-big-tech/", "title": "Working at a Startup vs in Big Tech", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of four topics in today‚Äôs subscriber-only  The Pulse issue . To get full newsletters twice a week,  subscribe here . Willem Spruijt  is a software engineer whom I worked on the same team with at Uber in Amsterdam, building payments systems. We started as teammates, and in a twist, I became Willem‚Äôs manager. He was a very productive engineer at Uber ‚Äì which I regularly told the manager group during  performance calibrations  ‚Äì and he was the embodiment of what I like to call a  product-minded engineer . After spending 6 years at Uber, Willem cofounded  Rise Calendar .  Disclaimer: I‚Äôm  an investor  in this company, having invested due to knowing Willem so well after working together for years. Willem is two and a half years into running his own startup, which  just launched  the public beta. I thought this a great time to ask about his experience between working at a startup, and working at a large company, as it‚Äôs the second time Willem has gone from a large company to startup. With this, it‚Äôs over to Willem. The material below is straight from him: Background Early in my career, I founded two startups. One was  Yunoo , a personal budgeting tool for the Dutch market. Four years after we launched, the company was acquired by a mid-sized local company in the enterprise resource planning (ERP) sector. I stayed with this ERP company for a year. But I had the startup bug in me, and so founded a second startup. This last one was a great adventure; we went to the US to join the TechStars 2013 accelerator. However, this startup failed miserably. I was still recovering from this failure in 2015, when a friend who designed the first version of Uber‚Äì  Jelle Prins  ‚Äì pinged me, and said Uber was kickstarting an engineering office in Amsterdam. By that time, I‚Äôd been following Uber for years, and suspected that the ridesharing industry would only get bigger. My time at Uber was hypergrowth as its finest . In 2015 when I joined, we had 6 engineers in the Amsterdam office. Six years later, we were at 250 people. For most of my time, I was part of the Rider Payments team and worked for 4 years with Gergely. In 2021, I left Uber for Rise Calendar as a technical co-founder.  Rise  is a beautiful calendar app that helps you schedule and protects your week. Since then, we‚Äôve raised a pre-seed round ‚Äì when Gergely got involved as an angel investor ‚Äì and have grown the team to 7 people. Having spent about 15 years split between startups and Big Tech, here‚Äôs my honest take on the good, the bad, and the ‚Äúugly‚Äù of each environment. The good, the bad and the ‚Äúugly‚Äù of each environment Startups: the good Learning:  Startups are such amazing places to learn in! You usually have a small developer team, and for the most part, no infrastructure, security, data science, or observability teams ‚Äì which are all commonplace in Big Tech. Engineers are expected to jump in where needed, even when you don‚Äôt have expertise. So you are forced to learn about specific topics and immediately apply them in production. Just by doing this, you broaden your expertise incredibly fast in a wide range of topics. Impact:  you can make a large impact and directly influence the direction of the company, and very clearly influence the success of the company, as well. Startups are very flat organizations, meaning you are often involved in strategic decisions. An example of making a company-wide impact at Rise was during our Christmas hackathon, when an engineer built a Calendly-like feature for anyone to book a slot in your calendar. It worked so well that we launched the feature a month later. Going from idea, to adding, to building and shipping this to all customers, is something you rarely see in bigger companies. Startups: the bad Financial risk:  Startups tend to pay a lower base salary than Big Tech. They rarely have the annual performance-based bonuses that are typical at larger companies. Many startups give equity to engineers, and some startups hand out handsome equity packages to early employees.  Uber is a prime example of this, where early engineers did very well from generous early packages. But let‚Äôs be honest, with any startup there is significant risk. Plenty of startups fail and close, or end up being acquired or acqui-hired. Acqui-hiring often means another company takes over the startup‚Äôs team: but does it on terms where investors ‚Äì or even the founders ‚Äì don‚Äôt see much of a return on their investment and equity. Stress:  startups are often races against the clock. This focus on speed and execution often leads to fast context-switching and a working environment with constant time pressure. My personal experience is that startups are more stressful than Big Tech, where there‚Äôs the option to ‚Äúlean back‚Äù sometimes. This is not so much the case at a smaller company. It‚Äôs important to add that this depends very much on the culture, and my experience won‚Äôt be universal! Startups: the ugly Failure:  Startups fail, more often than not. This can lead to ugly situations where people lose their jobs pretty much overnight. Startups are usually a tighter-knit group because people feel a personal connection to the company and product, much more than is the case in Big Tech. So shutting down a product or the entire company can be a lot more emotional than a large company shutting down one of its many products. Big Tech: The good Specializing:  Big Tech organizations have so many specialized teams! At Uber, they ranged from mobile feature teams (called program teams ‚Äì  here is some history about this split ,) platform teams, networking teams, and infra ones. Internal transfers:  usually this is surprisingly easy! I‚Äôve moved between teams, and so have so many engineers, like a Rider Payments engineer who moved over to the Developer Platform team. Combined with an environment with many specialized teams, and you have a place where engineers can go really deep in a domain while working on a variety of things. Financial stability/perks:  speaking for software engineers, Big Tech pays well and almost always issues performance-based cash bonuses. Then there‚Äôs the equity granted, which is more stable and lower risk compared to startup equity. Joining a Big Tech, and building up a ‚Äúfinancial buffer‚Äù before going to a startup, is something I‚Äôve seen plenty of engineers do. Things may always go south for a startup, so it‚Äôs good to have reserves! Networking:  One of the most underestimated things about Big Tech is that it‚Äôs surprisingly easy to build a large network while working there! Many of my former Uber colleagues joined other Big Tech companies, or started a new business ‚Äì and there‚Äôs this one guy who ended up writing this newsletter which blew up. I will admit the relationships I built up at Big Tech have proved to be far more valuable in the long run than I expected! Big Tech: the bad Lack of purpose : In a startup, it‚Äôs easy to make an immediate impact for the end-user. I used to work with Engineer #1 at Uber, Conrad Whelan, who told me this in 2015: ‚ÄúIf an unexpected but important task takes less than 30 minutes, just get it out immediately! Push it to production.‚Äù Back then, Uber was akin to a startup, and not (yet) a Big Tech business. At Rise, we perform between 25 and 50 deploys per day with a team of 7. Such a pace generates a ton of energy in the team. Our end users are amazed when they see a bug they reported fixed within minutes, or when a feature they suggested is shipped a few hours later. This feeling of actual impact and purpose is much reduced in Big Tech. Also, changes take longer. Overhead and bureaucracy:  on the Rider Payments team at Uber, we had the running joke: ‚Äúwe‚Äôre all just plumbers here üë©‚Äçüîß.‚Äù This referred to how much ‚Äúplumbing‚Äù was needed to build even a relatively simple feature. Uber had thousands of microservices, and our team regularly made changes to more than 20 of them. Many of the changes were simply to proxy a value from one service to another. The problem? Each of those changes needed to be approved by the team owning the service. These teams were in different time zones, and so even straightforward ‚Äúplumbing‚Äù changes could take days to land. And it got worse. For more complex changes, we usually needed the teams owning the services to carry them out. So we had a quarterly planning process to ensure all project dependencies were incorporated into each team‚Äôs roadmap. But priorities changed frequently and ‚Äì surprise, surprise! ‚Äì we frequently found ourselves stuck and waiting on other teams. If this seems to be becoming a rant, it‚Äôs because it is. Uber was a fast-moving company, but also a big company, so things started to take a lot more time. At a startup, when you have a monolith the same changes take hours, not days. Big Tech: the ugly I had to think quite a bit to come up with anything ‚Äúugly.‚Äù There are plenty of unpleasant things at larger companies, but nothing terrible. However, one thing really got under my skin. Misaligned incentives around performance reviews.  Doing work that results in a great performance review is not always the same work that best helps the company. And this can create pretty twisted, political situations. For example: A recently joined senior staff engineer decided to propose a project to do a re-architecture of a system. This person wrote up a neat document that was well thought out, and sent it around to other senior staff engineers. But there was a problem, this engineer took an existing document that other engineers had written a few months before, copy-pasted it, changed a few words, and presented it as their own work. Clearly, this engineer was doing this in hopes of demonstrating how quickly they got up to speed, and how valuable their own, personal contributions were. But by not involving the original authors, the proposal lacked context that was not in this document ‚Äì such as why it wasn‚Äôt made, in the end. This is just one example where pursuing personal recognition, that comes in the form of performance bonuses, can result in actions that are not in the best interest of the company. Anyone working at a large company sees things like this. Which is better? This is Gergely again. Thanks Willem, for that dose of honesty! I have to admit I always suspected Willem would go back to working at ‚Äì or founding ‚Äì a startup. It was pretty clear that the more ‚ÄúBig Tech‚Äù Uber became, the more frustrating it was for him to wait on others, versus making code changes himself. And this attitude made Willem a really productive engineer, as he jumped to working on something else while waiting on another team. During  performance calibration sessions , as Willem‚Äôs manager I had an easy job proving to other managers why he belonged in the top quartile in most years, thanks to his consistently high output. Willem‚Äôs startup background really helped him get things done, and not wait on others. At the same time, now that he‚Äôs on his third startup, I cannot unsee how his Big Tech experience of structuring things, planning ahead and building reliable systems, has proved very valuable. Spending time at a large company and a startup, is probably as good as it gets.  Both environments have very different dynamics, and you need to lean on distinct skills to succeed in each. A more common path I see is devs going from startups to Big Tech because of the increase in compensation. Although not as frequent, I also see plenty of people go the other way, from Big Tech to startups. This step feels like a bigger adjustment, especially for those who have not worked at startups before. Growing your network is indeed an underrated benefit of working at a larger company, either Big Tech or a fast-growing scaleup. You can meet so many more people at these companies, and this is even more true if you move teams, or the company is growing quickly. I echo what Willem said about how it‚Äôs only years later that you appreciate this value. Even for this newsletter, the first few interviews were all with people I met and worked with at Uber:  Ganesh Srinivasan ,  Adam Rogal  and  Sophia Vincent . A final note on Willem‚Äôs new startup. I got involved more than two years ago and assumed the team would ship something in a few months. After all, we were talking about Willem, who was a productivity machine at Uber! But this is not what happened. For over two years, Rise kept running a private beta product. Launching so slowly is quite rare for startups, Figma is  one of the best-known examples  for staying in private beta for a similar duration. Rise Calendar is now  out of stealth mode . And it turns out there was a reason to take so much time to build: it was to opt to launch with a product that is polished. This was one out of the four topics covered in this week‚Äôs The Pulse.  The full edition  additionally covers: Industry pulse.  A roundup of recent events in tech, with commentary. Are we about to see a spike in startup shutdowns?  I‚Äôve gathered evidence which suggests startup shutdowns are on the rise, and plenty of infra and developer tooling startups are also in deep trouble. Is down-leveling back in Big Tech?  In 2021, upleveling was common across all of Big Tech. This is no longer the case, and job market dynamics are likely to make down-leveling more common. Read the full The Pulse. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/a-senior-engineer-em-job-search-story/", "title": "A senior engineer/EM job search story", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of five topics from today‚Äôs subscriber-only  The Pulse issue . To get full issues twice a week,  subscribe here . Before we start: plenty of people who subscribe to the newsletter utilize a learning and development budget their company provides. In what is neat: The Pragmatic Engineer is now the first-ever newsletter  listed  on  Learnerbly . Learnerbly is an L&D platform hundreds of tech companies use, as it makes administering these budgets much simpler ‚Äî and it‚Äôs also a lot easier for people to request books, courses, or newsletters. If your company already has Learnerbly, you can  now request the full newsletter  with just one click. Davidson Fellipe  is a lead software engineer based in New York, with more than 15 years of experience. In April this year he was unfortunately impacted by job cuts at the company where he worked, and found himself on the job market. A few months later, he signed an offer to start a new company, and shared brief details of his job search on LinkedIn: Davidson summarizing his job hunt. Source:  Davidson‚Äôs LinkedIn I was interested in learning more about how Davidson went about his job search, and his experience of being in the jobs market, so I reached out and he kindly shared more context and advice for navigating the current market. Davidson shared that he eventually received one engineering manager offer and two individual contributor offers. He accepted the senior engineer offer. How long was your job search? ‚ÄòMy search lasted for about three months, until I received the first offer. ‚ÄòStarting in April 2023, I applied to a few positions, mostly targeting engineering manager roles. During that time, I dedicated a significant effort to applying using referrals whenever possible. The period from April to mid-May was challenging: I found myself in hiring freezes and canceled processes. For some applications, it took 2-3 weeks before I had a call with the hiring manager. At this time, more than half of my applications were rejected during the resume review,  even  with referrals. ‚ÄòIf you attempt to apply everywhere, you can get a lot more frustrated . Instead of applying broadly, I focused on engineering manager positions for frontend, product engineering, and developer experience (front-end.) Over time, I gradually opened myself up to individual contributor roles, but only for frontend positions (senior, lead, staff, and founding engineer roles.)‚Äô Which tools did you use to stay organized and to apply for so many positions? ‚ÄòTo keep track of all my applications, I created a spreadsheet with columns like: Company name Position applied for Application date Status Last stage ‚ÄòOther tools that helped: Teal application tracker  and  Simplify  for applications. Simplify helped me a lot to automatically fill applications in the most popular applicant tracking systems (ATS.) Another useful option was for me to have an \"Identity\" ready in 1Password, with the most common information requested by the ATS. Notion : for every company I talked to, I took notes on Notion to record what we talked about. Crafting tailored resumes : I dedicated time to crafting two, different one-page resumes, highlighting accomplishments, and showing my past experiences. I did one as a manager, and the other as an engineer: with the goal to improve my chances of converting interviews. For instance, my experience as a founding engineer at a startup helped secure interviews with some startups.‚Äô How helpful did you find referrals? ‚ÄòPeople in my network offered referrals, and I also asked people I knew when I saw positions close to my profile at their company. ‚ÄòI also had cases when I saw a position I was interested in, but didn't know anyone at the company. In some cases, I added someone from the company via LinkedIn, and asked for a referral. I got a few interviews with this strategy! ‚ÄòI helped others impacted by layoffs, and the other way around.  I shared opportunities or redirected recruiters to others I knew were let go, and people did the same for me. We were all experiencing the same challenges, after all! ‚ÄòI worked with external recruiters as well. These recruiters ‚Äì which work with multiple companies ‚Äì tend to have a number of opportunities that may match your skills and interests. Working with external recruiters helped in getting more interviews, especially with startups.‚Äô How did you find the interview processes? ‚ÄòThere are far more candidates for fewer positions, so the bar to go to the final round is higher. ‚ÄòTalking about startups, they are very creative with interviews! I‚Äôve completed both technical quizzes and even cognitive aptitude tests. These types of interviews were usually an extra round before the coding interview or take-home assessment. Having at least 4 interviews or screening steps was pretty common.‚Äô How did you manage your time and energy? ‚ÄòJob searching took a toll on my time and energy. I took a few weeks of vacation in my home country, then gradually started to increase the pace of interviews. My daily high-level plan was this: Morning: walk, study, review answers and tailor my resume. Afternoon: interviews, review job descriptions and take-home assessments that were timeboxed. Evening: take-home assessments that were not timeboxed; fire off applications, and in the end: recharge!‚Äô What are interesting observations about the hiring process, and what advice would you share with job seekers? ‚ÄòWhat was surprising was that most hiring processes took up to 3 weeks from the conversation with the recruiter to the conversation with the hiring manager! ‚ÄòOne thing that helped:  New York City‚Äôs Salary Transparency Law  was  very  helpful for not applying for jobs whose salary was below my salary expectations. ‚ÄòAdvice for others: Don't underestimate the power of your LinkedIn intro and LinkedIn headline! And don't be afraid to apply if you see ‚Äú500 applicants‚Äù for a role.‚Äù This is Gergely again.  Thanks a lot  Davidson , for sharing the reality of your job search, and congrats on securing offers and accepting one of them. You can follow Davidson  on LinkedIn  or  Twitter . He  announced this week  which company he will join. It‚Äôs nice to hear about the positive impact of salary transparency regulations, and a good reminder that companies which publish compensation bands in their job adverts will likely attract more qualified candidates, as Davidson passed on places whose compensation was not a fit, which saved both him and the company time. This was one out of the five topics covered in  this week‚Äôs The Pulse . The full edition additionally covers: Are reports of StackOverflow‚Äôs fall greatly exaggerated?  A blog post suggests traffic is down 50% at Stack Overflow, due to ChatGPT gaining popularity. I reached out to Stack Overflow for more details: the company admitted a drop, but it‚Äôs only 14% as per data shared with me. The company seems to be doubling down on Teams for generative AI use cases as well.  Exclusive . What kind of migration is causing a payout outage at Booking.com?  Small business hosts on the travel booking platform are waiting more than a month to be paid. Booking.com says a systems migration is the reason for the delay. I talked with engineers at the company and discovered an SAP migration is to blame.  Exclusive . Amazon gets stricter about enforcing return to the office (RTO.)  The online retail giant sent a warning email to employees ‚Äúnot meeting the expectation of joining colleagues in the office at least three days a week.‚Äù I talked with engineers about the response to this ominous, unfriendly email.   Exclusive . Zoom to end remote work: an RTO turning point?  Remote work tool Zoom is having most staff return to the office for two days a week. It‚Äôs a symbolic turning point which may signal how many companies will operate in a similarly hybrid way, going forward.  Analysis . Read the full The Pulse here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-pulse-vanmoof/", "title": "The Pulse: VanMoof files for bankruptcy protection", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of six topics in today‚Äôs subscriber-only  The Pulse issue . If you‚Äôre not yet a full subscriber, you missed this week‚Äôs deep-dive on  Software architect archetypes . To get the full issues, twice a week,  subscribe here . Before we start, a small change. I‚Äôm renaming Thursday‚Äôs article‚Äôs series to  The Pulse  from  The Scoop . The content will not change, but ‚ÄòThe Pulse‚Äô just better represents the mission of these articles, which is to help you keep an ‚Äúear to the ground‚Äù on what‚Äôs happening across Big Tech and at startups ‚Äì sectors which regularly affect the whole tech industry. I receive and validate plenty of interesting information from insiders at these companies, but my main focus is  analyzing  what‚Äôs going on in our industry; the implications of that and the opportunities for software engineers and tech businesses. Names matter, and I feel ‚ÄúThe Scoop‚Äù suggests a more gossipy, tabloid newspaper-style approach than what these articles actually deliver. Since  The Scoop‚Äôs first issue  I‚Äôve focused on relevant industry changes and what they mean. I hope ‚ÄúThe Pulse‚Äù makes the intent of this series clear: to provide you an ear to the ground and the latest analysis of the state of our industry. Now, on to today‚Äôs topic: VanMoof files for bankruptcy protection VanMoof has been a Dutch e-bike success story. The company was founded in 2009 by two brothers who had a vision of creating the perfect city bike. The company started making waves in 2017, when it raised a ‚Ç¨4M seed round. Then the company raised $197M in funding ‚Äì as  per Dealroom  ‚Äì including a giant, $128M round in August 2021. The business manufactures custom built, premium e-bikes. The bikes look slick, employ sound effects, have a built-in battery (which is different from most e-bikes with removable batteries which is easy to steal,) and VanMoof offered innovative customer service such as  Peace of Mind  (theft protection and bike recovery via a Bike Hunter squad) and maintenance. Living in Amsterdam ‚Äì where VanMoof is headquartered ‚Äì I‚Äôve seen more and more of its distinct bikes on the streets and honking with a distinct sound! Bikes like this one: A VanMoof S3 model. The bike comes with built-in batteries and GPS, theft protection and maintenance are additional. Image source:  VanMoof It‚Äôs not just the bike that‚Äôs innovative, delivery is as well. The company distributes its bikes through the post. To avoid rough handling during delivery, the company came up with an innovative idea: package the bike  like a TV box : This is not a TV, but a VanMoof bike. Just don‚Äôt tell the carriers! Image source:  Bicycling magazine This change made  a major difference : ‚ÄúIn 2015 we began shipping our bikes to the USA. The only problem was that a lot of them were arriving to their new customers damaged. Annoying for them and expensive for us. We couldn't say for certain, but US handlers didn‚Äôt seem to take as much care as we‚Äôd hoped. (...) Bikes obviously didn‚Äôt have the kind of priority flat-screen TVs have for example‚Ä¶ And that was it. The lightbulb moment. Our co-founder Ties Carlier‚Äôs simple idea. Our boxes are about the same size as a really big, expensive, flat-screen television. So we put an image of one on every box. We assumed handlers would care a little more about that. And we were right. That small tweak had an outsized impact. Overnight, our shipping damages dropped by 70-80%.‚Äù One limitation of VanMoof bikes is that they can be serviced only in dedicated shops. Until 2019, the company had only 8 locations, which limited their customer base. However, by 2020 the company expanded service hubs to 50 cities, including Paris, New York, San Francisco, Los Angeles and Tokyo. When announcing the $128M fundraise, the company shared its grand plans: ‚ÄúThe funding will be used to both expand production and reinvent the way in which hardware and software components are made, and make high-quality, high-tech e-bikes more accessible to consumers.  Surge in demand shows the US is the fastest growth market for VanMoof, with the post-pandemic e-bike wave showing no sign of slowing down. The latest projections expect the e-bike market to surpass $46 billion in the next six years, with a growth rate now twice as high as predicted before Covid-19.‚Äù It all seemed to be lining up for VanMoof: their bikes were in demand, and biking was a growing industry. So it was unexpected to hear a few days ago that VanMoof has  paused all sales  and has had its executives depart, as  reported by TechCrunch  this Monday (10 July). At first, the company  blamed  the pause of sales on a bug in their system, then  confirmed  that pausing sales was intentional. And on Wednesday, 12 July, the company  filed for payment deferment  in the Netherlands ‚Äì which is the last step to avoid bankruptcy and gives a few months‚Äô breathing space to try and get the business together. So, what happened? By this January VanMoof was running out of money. As Patrick Brady at Electric Bike Report  wrote  (emphasis mine): ‚ÄúDutch e-bike brand VanMoof went to its shareholders and requested a capital investment, saying that its projections showed that it would struggle to remain liquid following the first quarter of 2023. The company‚Äôs request was in the ‚Ç¨10-40M range ($10.9-$43M). Analysts point to a workforce of more than 900 people as being a significant hurdle in their operations, in part owing to a retail operation spread over more than nine time zones. It‚Äôs a huge workforce for a company with relatively modest sales.  It‚Äôs fair to wonder how long until some of those retail locations close and a portion of their workforce is laid off.  Not that we applaud layoffs by any means, but the survival of a company with many jobs is better than the failure of a company with all the jobs.‚Äù A few days later, analyst Micah Toll at Electric Bike Report  added more thoughts  on how (un)sustainable VanMoof looks: ‚ÄúI can‚Äôt fathom how VanMoof can sustain such a large workforce. Companies like Rad Power Bikes sell considerably more e-bikes than VanMoof, and even Rad had to undergo several rounds of layoffs in the last year or so. I imagine VanMoof‚Äôs payroll must be a huge part of its burn rate, especially since you can‚Äôt put off paying employees the way you can with suppliers of brakes and pedals. And of course those e-bike hunters don‚Äôt work for free.‚Äù Indeed, VanMoof did no mass layoffs despite an increasingly challenging financial situation, and the company having already come close to running out of money at the end of 2022. Like  with Bird , the writing is sadly on the wall that VanMoof goes bankrupt or is sold. The company  has no public CEO  ‚Äì its cofounder and former CEO Taco Carlier no longer lists this position. VanMoof  appointed  the former CEO of Booking.com, Gillian Tans, as president in 2022. A post about the appointment has been removed, and Tans no longer lists VanMoof on her LinkedIn page. VanMoof customers are at the risk of their bikes becoming bricked if the company shuts down.  While it would be unfortunate if the business ceases to exist, current VanMoof owners face the pressing problem that their bikes depend on VanMoof‚Äôs servers to operate. The bikes can be controlled via smartphone, through Bluetooth. This connection is encrypted with a key obtained from VanMoof‚Äôs servers when logging onto the mobile app: Using a VanMoof bike via its smart app to set gear modes, change assistance mode, lock the bike and much more depends entirely on VanMoof‚Äôs servers sending an encryption key The problem? Should VanMoof‚Äôs servers go offline, customers cannot get this key, meaning they cannot communicate with their bike. So a ‚Ç¨2,500-3,000 / $2,700-$3,200 smart bike becomes unusable with the smartphone. Luckily, a group of VanMoof enthusiasts have created a third-party tool to obtain this encryption key. If you own a VanMoof bike,  download ‚Äì and safely store ‚Äì your encryption key here. Also, a VanMoof competitor ‚Äì  Cowboy Bikes  ‚Äì stepped in just in time, and they helpfully built an app to allow VanMoof owners to save their bike keys, so they can keep on riding.  Get this app for iPhone here. The risk of VanMoof‚Äôs bikes being bricked in the case of insolvency raises a pressing ownership question.  If you buy an expensive e-bike, should you have the right for this bike to keep operating, even if the company you bought it from has problems, be they technological, or financial? It does  feel  unfair to not be able to use a smart bike you own because something‚Äôs happened to servers which your smartphone uses to communicate with the bike. On the other hand, operating a service which passes over an encryption key costs money, and will have a business entity behind it. This entity can encounter financial troubles, and it might make business sense for it to stop operating. With the spread of smart devices at risk of not working if a remote server shuts down, my sense is that regulators will eventually have to step in, and force companies to follow clear guidelines for how customers can ‚Äì or cannot ‚Äì use their smart devices, and what happens in the case of bankruptcy. Should consumers have the right to operate their device without being connected to the internet? Can companies be allowed to change contracts to charge a fee for keeping the lights on in cases of business going into liquidation? I don‚Äôt have the answers, but these questions are becoming more pressing. This was one out of the six topics covered in this week‚Äôs The Pulse. The full edition additionally covers: Further tightening of performance management at Amazon?  Some engineering managers face a challenging constraint for engineers they want to promote by the end of the year. Is Amazon trying to encourage more churn?   Exclusive. Google Cloud Domains to shut down: more details.  It‚Äôs been confirmed by Google that its Cloud product which was in preview, is to be shut down, with Google Cloud Domains customers being transferred (whether they like it or not) to Squarespace.  Analysis. Bird valued at a mere $26M.  If you would have invested $1,000 in shares of the scooter sharing company when it went public in November 2021, those shares would be worth about $11. The company is at risk of going under, and its unit economics tell part of the story on why. Also, the company inflated its revenue numbers for 2 years after it went public using a SPAC.  Analysis . Is a startup bankruptcy wave underway?  We may be at the start (or even in the midst of) the ‚Äòstartup purge‚Äô that‚Äôs been expected for some time.  Analysis . Selling developer tools when most companies are cutting spending.  SaaS spending is down, as is spend on developer tools.  Anna Debanham  (a partner at Boldstart Ventures) shares advice on how to sell these tools at this time.   Advice . Read the full The Pulse here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/what-is-a-senior-software-engineer-at-wise-and-amazon/", "title": "What is a Senior Software Engineer at Wise and Amazon?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. To get full issues twice a week,  subscribe here . The past month, we‚Äôve done deepdives in the newsletter on  what a senior software engineer is at Big Tech , and  at scaleups . This issue looks at two companies from the 15 covered in those articles: we cover Wise and Amazon. Wise Wise  ‚Äì formerly Transferwise ‚Äì is a publicly traded Fintech, valued at $6.5B at time of publication. The company employs more than 5,000 people in 17 countries. Its biggest engineering hubs are London (UK,) Estonia, Austin (US,) Budapest (Hungary,) and Singapore. The company not only makes its engineering levels  public , but also its compensation ranges across all regions. Here‚Äôs how levels and compensation line up: Career levels and compensation targets at Wise. These numbers are gross base salary ones: equity comes on top of these. Source:  Wise engineering career map Harsh Sinha , the CTO of Wise  added  additional context to the above numbers: The numbers refer to gross base salary. Equity is paid on top of these, and Wise does not have cash bonuses. The bonuses are ‚Äòloaded in‚Äô to the equity awards. The US numbers are clearly higher than other regions. As context, the numbers reflect what the company has found it takes to close great engineering talent in the respective markets. Wise has a much smaller US footprint, engineering-wise, and has scaled their engineering team heavily in the EU and UK, over the years. Summarizing L3 (senior engineer) expectations at Wise: The senior level at Wise. I asked  Balazs Barna , the Head of US Engineering at Wise to give his two cents on the senior role. He said: ‚ÄúThe Senior Engineer role at Wise is the equivalent to an Engineering Manager 1 on the IC track. Senior Engineers are not only expected to lead significant projects in their teams, but they have a say in whether that feature is worth building or not. After all, there is nothing worse than an engineer solving a problem that doesn‚Äôt need to be solved in the first place! We put a lot of emphasis on communication and prioritization and the ability to unblock yourself or your team ‚Äì this comes on top of the programming and design skills. A ‚Äòtypical‚Äô Senior Engineer to me is someone who seeks out difficult problems, and has the skills to solve them in a sustainable way. They strive to build things fast, but also know when we have to slow down to go faster.‚Äù Amazon: SDE3 Amazon‚Äôs SDE3 level maps to what the industry commonly refers to as ‚Äúsenior engineer.‚Äù A summary of this level‚Äôs typical expectations: A summary of Amazon‚Äôs SDE3 level. Amazon‚Äôs SDE3 definition is closer to what is considered a ‚Äúteam lead‚Äù or ‚Äútech lead‚Äù role at many companies, and so I view this SDE3 role as being at the upper end of a senior engineer definition. Amazon emphasizes a few different things at this level: Dealing with ambiguity.  Senior engineers are expected to tackle problems where the business problem (or customer case)  is  well defined, but the technology strategy is not. It‚Äôs down to them to create well-designed, extensible, performant and secure solutions. A lead role.  The SDE3 level expects leadership on projects in which this engineer is involved. However, expectations make it clear that ‚Äúleading‚Äù does not mean doing all the major work. It involves mentoring colleagues, reviewing their work, and making space for others to voice opinions. Writing and explaining things simply.  Amazon expects senior engineers to be skilled at communicating their technical ideas in writing. They also expect senior engineers to do this regularly. Seniors are expected to be able to explain problems and suggest solutions in simple, concise terms. Autonomy . Seniors are expected to be able to deliver the right things without guidance. Maintainability . SDE3s are expected to balance speed of execution and delivery, with building maintainable foundations for the future. The expectation which stands out most to me, is that Amazon expects SDE3s to not be a key dependency. This is how Amazon puts it: ‚ÄúYour team is stronger because of your presence; but it does not depend on your presence to be successful.‚Äù This is a pragmatic-enough expectation which encourages mentoring and knowledge sharing. After all, if you hoard knowledge, you  will  be on the critical path for your team, so if you‚Äôre absent, work can come to a halt. It‚Äôs less usual for such an expectation to be spelt out this clearly, even though it‚Äôs pragmatic to seek to remove the ‚Äúsingle bus factor,‚Äù wherein a team is fully dependent on an individual. Expectations for moving into an SDE3 (senior) role Amazon is almost alone among most tech companies in the way its internal leveling document specifies levels and their expectations, and also provides guidance on how to move to the next level. Here‚Äôs the guidance Amazon offers SDE2 roles about moving to SDE3. It‚Äôs not a checklist, but some expectations that could be considered: Lead a complex project . Lead a strategic team effort, starting at the design stage. This project should require multiple team members‚Äô contributions. Influence the long-term roadmap . Advocate for long-term technical investments, and build software flexible enough to evolve in future. Coach and mentor . Mentor or help others on the team. Mitigate roadblocks . Discover and mitigate unknown risks which block projects. Demonstrate engineering best practices . Work efficiently, deliver incrementally and frequently. Improved writing skill.  Efficient at communicating design decisions and technical decisions in writing, and keep improving in writing for non-technical audiences. Design reviews . Lead team reviews and participate in other teams‚Äô reviews. Address systemic issues . Take the lead in identifying and solving architecture deficiencies. Reduce support costs by addressing systemic issues. We cover more about Amazon‚Äôs engineering levels in the article,  Inside Amazon‚Äôs engineering culture . To learn more about what senior software engineer expectations tend to be, check out the following full articles: What is a senior software engineer at scaleups?  Covering Honeycomb, Miro, TravelPerk, Sentry, Sourcegraph, Remote.com and Urban Sports Club. What is a senior software engineer at Big Tech?  Typical expectations at Meta, Uber, Dropbox, Shopify and Oracle. Needless to say: every company has slightly different definitions on what their ‚Äòsenior‚Äô title covers. However, it‚Äôs interesting to see just how many things are common on what the above companies reasonably expect from this level. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-man-behind-the-big-tech-comics/", "title": "Code Review on Printed Paper: an Excerpt from the Twitoons Comic Book", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover two out of seven topics from today‚Äôs full issue on  The Man Behind the Big Tech Comics . To get full issues twice a week,  subscribe here . If you ever worked at Google, I probably don‚Äôt need to introduce Manu Cornet. And if you‚Äôre not a Googler or a Xoogler, then here‚Äôs a short recap of some of his comics. For example, if you don‚Äôt know what a Xoogler is (ex Googler) or a Noogler (new Googler) or a Doogler (the pet dogs owned by Googlers) and now you‚Äôre wondering why Google has all these terms, Manu created a comic on this: Source:  Manu Cornet / Goomics Today‚Äôs issue will be a  lot  more visual than usual. The topic will also be more lighthearted: Big Tech, Twitter, and comics. Manu recently published his book  Twitoons: one employee‚Äôs cartoon chronicle of Twitter‚Äôs accelerated descent . I read the book: it‚Äôs funny! I still can‚Äôt decide if it‚Äôs funny because of Manu‚Äôs style, or if it's funny because it‚Äôs  true . Today‚Äôs newsletter closes with a full chapter from this book, visualizing when Elon Musk demanded all Twitter software engineers print out their code on paper (!!) and report for code review. But before we get there, we touch on how one of the most referenced Big Tech comics was created.  This one . With this, my questions and comments are in italic, and Manu‚Äôs answers in regular fonts. As usual, none of these links are affiliate ones, and I have not been paid to mention any of them. More on this¬† here . Drawing the famous Microsoft, Oracle, Amazon, Facebook, Google, Apple comic How did you come up with the ‚Äúfamous‚Äù organizational chart comic that you are most known for? Initially, the punch line was meant to be Oracle. At the time, this company was suing Google over its use of Java, and I decided to make fun of how Oracle has a much larger legal department than engineering, so I drew this: The first org chart Manu drew To make a good punchline, you need a buildup.   So to make this a good comic, I needed to draw other companies for a comparison. So I drew four more: The next four I still needed one last one, to make it six and make it symmetric. Microsoft was, of course, the obvious missing one. So I researched the culture at Microsoft a little bit and came up with that ‚Äî now famous ‚Äî gun drawing: The final one, on Microsoft After you‚Äôve been working on an idea for a while, you completely lose track of whether it‚Äôs actually funny or not. After I finished it, I didn‚Äôt find it funny. I showed it to my partner at the time, and she didn‚Äôt find it funny either. I was very close to not releasing this cartoon, in the end! Then I just published it. It‚Äôs ironic because this comic became probably my most popular comic, and the Microsoft drawing with the guns was the one that people found the most funny. It shows you how clueless I am about predicting what will work! Code review on printed paper: an excerpt from the Twitoons book A year ago, the end of October 2022 was a very turbulent time at Twitter. In the article  Turmoil at Twitter , we covered both how engineers were told to print out code on paper (!!) for Elon Musk to review, as well as how firings on the spot had started. Manu was one of the several people let go after pulling a 7-day week, working through the weekend.¬† Manu‚Äôs book covers this period with far more detail than we‚Äôve accessed, along with new, previously unpublished illustrations. The below excerpt is from Part 6 of the  Twitoons book , from the chapter titled ‚ÄúCode Review.‚Äù Despite the long hours, we were all still painfully aware that the chopping block was dangerously near. Source:  Twitoons, the comic Regardless of how hard we worked, would the dreaded termination email still show up, on a bright Sunday, with the usual (and newly ironic) friendly chime? Indeed, in parallel with the urgent product changes, Elon Musk kickstarted the dreaded ‚Äúreduction in force.‚Äù. Given that he had clearly stated he wanted virtually no moderation on the platform, it was easy to guess what would happen to all the teams responsible for that: all fired. For engineers, it was a little trickier: he needed at least some of them to keep the site running. But which ones? One important problem with software engineering is that evaluating workers is extremely difficult. Large technology companies spend an enormous amount of resources trying to monitor, evaluate, and eventually accurately reward contributions from their expensive workforce. For a team that makes cars in a factory, measuring performance isn't exactly easy, but it's feasible: you measure the number of cars produced per month, you take into account things like customer return rate and mechanical failures, and with a little trial-and-error you can reach something reasonable. For software, it's foolish to measure quantity: a shorter program (fewer lines of code) is often better than a longer one. You could measure things like bug reports or software crashes, but most projects are so complex and involve so many moving parts produced by different teams and intertwined dependencies that any such attempt usually turns out to be a wild goose chase. So performance measurement is already difficult in normal conditions, when it serves as an input to decisions affecting an employee's role and career. Now imagine you are part of a team of engineers coming from Tesla, tasked with determining which 20% of engineers Twitter should continue employing, and which 80% it should fire. On top of that, you need to figure it out by next Monday because otherwise they all get more stock options the following week, as planned, and that's gonna cost your boss. And on top of that, consider that the engineers doing the evaluation are not only unfamiliar with the material they need to evaluate (the code that makes Twitter work); they aren't even familiar with the very industry, since the software  they  usually write is destined for cars. It's like asking a tricycle maker to pilot a spaceship because, well, it's all transportation. Tesla engineers thus resorted to measuring what most experts will tell you is completely meaningless: the quantity of code contributed to Twitter by each engineer. The number of files they changed, insertions, and deletions (lines of code added and removed). As if these numbers were the only thing that mattered in one's entire tenure, sometimes their entire career. Source:  Twitoons, the comic Given the harsh conditions and time constraints the Tesla folks were under (and had, by the way, probably been under for months or years), it's hard to blame them. Meaningless, but expeditious. The whole process was dubbed by Mr. Musk a ‚Äúcode review‚Äù where each Twitter engineer was asked to pick their own ‚Äúmost salient‚Äù code contributions, print them out on paper, and bring them to their interview, nay, their trial, by Tesla engineers. The printing out part caused so much mess and confusion that the process was eventually simplified and people could use a computer screen to showcase the reasons why they claimed they shouldn't be fired. Let me emphasize that this is a complete perversion of the common expression ‚Äúcode review‚Äù: engineers usually review each other's code in a well-established practice aimed at catching bugs, making the code better, and sharing knowledge. Not at selecting people for employment termination. Oh, and knowing Elon, he might have devised a slightly different flavor of ‚Äùreviews‚Äù for female employees? Source:  Twitoons, the comic For those who were paying close attention to the timeline of employee terminations, even that raw code quantity number didn't seem to explain it at all. My team's most productive engineer by a long run, in terms of pure quantity, was let go alongside everyone else. There were also petty little arrangements where an engineering director who knew one of Elon's goons requested that employees X and Y should be kept on the payroll, and so on. But to whoever wasn't privy to all this underground barter... Source:  Twitoons, the comic ...it all seemed rather random, and it probably was. The press, who had a good idea of what was happening at the headquarters, sent reporters to camp at the entrance in hopes of getting a quote or a video clip from fired employees. Two pranksters who claimed to be Rahul Ligma and Daniel Johnson showed up with cardboard boxes and were able to temporarily convince the media they were part of the early layoffs, starting a trail of misinformation on social media. Ironic. As far as I was concerned, I'm glad I didn't have to submit to any of those ‚Äúcode review‚Äù sessions, since I was fired on November 1, a few days before the large waves of layoffs. As I was attending a team meeting about a new critically important project, I was kicked out of the meeting, my work email and calendar blanked out, and my work laptop locked itself up. I thought I may have been hacked. It was only half an hour later that I received an actual termination email. It didn't state a cause, but the apparent immediate reason was that I was trying to help my coworkers safeguard some documentation (performance reviews, praises from peers, etc.) that would be valuable should they need to seek employment.¬† More broadly, did it have anything to do with my critical cartoons? It's hard to tell, since the person who fired me (my boss's boss, a.k.a. director) was also fired the following week (I actually kind of liked him, and still do). So was my direct boss. And the director's boss (I quite liked her, too). And her boss. Anyway, it's fair to say that I was deemed a little too much of a troublemaker under the new leadership. I don't blame them. I had been planning to make a cartoon where I would depict myself standing in front of the office entrance, alongside reporters and recruiters. After my termination, the cartoon (you wouldn't think I would stop drawing about Twitter just because I was fired, would you?) took a slightly different meaning, which I quite liked. Source:  Twitoons, the comic This is Gergely again. If you enjoyed these comics, you can buy Manu‚Äôs book  Twitoons, here  ‚Äî priced at a modest $12.90 ‚Äî and the one on  Google‚Äôs corporate culture, here . You can view more of Manu‚Äôs comics  on his website .  As usual, none of these links are affiliate ones, and I have not been paid to mention any of them. More on this  here . It‚Äôs been almost exactly one year that about 50% of the staff at Twitter got fired ‚Äî Manu being booted a few days earlier than most. I asked Manu if he had received severance owed to him as per his contract: and he has not gotten anything just yet. Other former Twitter engineers are in the same situation as Manu ‚Äî waiting on severance overdue. In a smaller win for former emplyoees, the National Labor Relations board issues its first complaint against X Corp for illegally firing Yao Yue, a widely respected principal engineer at the company. Zo√´ Schiffer  at  Platformer  reported this in the article  How one former Twitter employee could beat Elon Musk in court . Still, this case only goes to trial in January ‚Äî and Elon Musk‚Äôs strategy clearly seems to be to not worry about potentially breaking regulations in the impulse of the moment: instead, deal with these years later, in court. More than 2,000 employees  have filed  arbitration claims against Twitter: and eventually the jury will get to all of these, and decide on severance due. Originally, I reached out to Manu intending just to ask for permission to publish a part of his book, as it was quite relevant for last year‚Äôs events at Twitter. But as we started talking, I realized I‚Äôve never met a real-life cartoonist before, much less a software engineer cartoonist! So our conversation turned into a lot more than just about the latest book. In the full issue of today‚Äôs newsletter, we dive into several other topics we discussed: The motivation to draw caricature comics . How Manu started to draw comics, and why. Fourteen years at Google as a software engineer.  Getting into Google, spending 8 years on the Gmail team; working on Android and ChromeOS, and what Manu learned from his time at Google. Comics at Google . About 1/10th of Google employees subscribed to Manu‚Äôs comics. When did Manu get into the most trouble because of comics? Working at Twitter . Twitter‚Äôs web app and tech stack. Internal tooling at Twitter, versus Google. The best and the worst of ‚Äúold Twitter‚Äù . The things ‚ÄúTwitter 1.0‚Äù did vey well, and where it clearly struggled ‚Äî Manu‚Äôs insider view. How to draw cartoons as a software engineer . The similarities and differences in drawing a good cartoon vs writing good code; Manu‚Äôs cartoon drawing toolset; and advice to get started. Read the full article here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/asked-to-do-something-illegal-at-work/", "title": "Asked to do something illegal at work? Here‚Äôs what these software engineers did", "content": "\n             The below topic was sent out to full subscribers of  The Pragmatic Engineer , three weeks ago, in  The Pulse #66 . I have received several messages from people asking if they can pay to ‚Äúunlock‚Äù this information for others, given how vital it is for software engineers. It is vital, and so I‚Äôm sharing this with all readers, without a paywall. In the unlikely case that you are asked to do something fishy or illegal: I hope the below will help decide how to do the right thing.  Sign up to The Pragmatic Engineer  to get articles like this earlier in your inbox. What would you do if you learned your company is up to something illegal like stealing customer funds, or you‚Äôre asked to make code changes that will enable something illegal to happen, like misleading investors, or defrauding customers? Here are three real-life cases, where what engineers and engineering managers did had serious consequences. FTX: an engineering director went along with the fraud A trial related to FTX, the cryptocurrency exchange which allegedly defrauded investors of $9B, is ongoing. Day 9 of the trial of former FTX CEO Sam Bankman-Fried trial, heard testimony from Nishad Singh, who joined the business as a software engineer, and later became an engineering director. Here is software engineer and writer Molly White summarizes of his evidence : ‚ÄúTo hear Singh tell it, he didn‚Äôt even really realize what was going on at FTX and Alameda Research until September 2022 ‚Äî only a month or two before everything came crashing down. (...) Several times throughout various testimonies, we‚Äôve seen a document written by Sam Bankman-Fried, in which he describes his thinking that Alameda Research should be shut down. That document was, ultimately, how Singh learned in September 2022 that Alameda Research had taken billions of dollars of customer funds from FTX.¬† This was when Gary Wang told Singh that Alameda was borrowing massive amounts of customer money from FTX ‚Äî at the time, around $13 billion of it. Singh testified that he felt ‚Äòreally afraid‚Äô, and called an in-person meeting immediately. Bankman-Fried, who was sitting next to Singh at the time, ‚Äòseemed unsurprised and made up what I understood to be a false excuse for dodging the meeting.‚Äô Singh, Ellison, and Wang met without him, and Singh confirmed his fears: that he had not misunderstood Wang, and that Alameda had actually taken customer funds to that extent.‚Äù Okay, so in September 2022, Singh had confirmation that something illegal was happening at the company, which he had no direct knowledge of,  until then . At that point, if he wanted to avoid being an accomplice to potentially illegal activity, his options were: Talk to a lawyer on how to avoid assisting a crime Turn whistleblower. See the  tech whistleblower guide Quit the company, ensuring he did not further aid this activity¬† The smart thing would have been to do #1. The profitable thing could have been to do #2 because in the US, a whistleblower may receive a  whistleblower reward  of between 10-30% of what the government recovers from fraudulent activities. The final choice #3 is hard, but could have meant Singh would not have had to plead guilty as he did.¬† Here‚Äôs what Singh did instead: he asked for a personal meeting with Bankman-Fried and confronted him about the missing funds. However, Bankman-Fried replied there not much to worry about, and that they‚Äôd repay the funds by raising more money from investors (!!) This should have been the point at which Singh quit. Instead: ‚ÄúHe thought about leaving the company then, he testified, but worried that his departure could cause everything to fall apart. He felt that if he stayed, maybe he could help the companies make back what they owed.‚Äù For the next two months, Singh tried to make things better, but it was fruitless. FTX collapsed in November 2022. Lesson #1: when you discover fraud may be happening, do not ‚Äústay around to fix it.‚Äù  Any other approach would have been better for Singh; seeking legal advice, turning whistleblower, or quitting on the spot. To be fair, Singh didn‚Äôt seen  totally  clueless, and it seems he decided to profit on the developments. Days after he found about this fraud, he took a $3.7M loan from FTX (!!) to buy a house, The Verge  pointed out . It‚Äôs exactly the type of thing you don‚Äôt want to do after you discover fraud. Now, Singh is facing up to 75 years in jail thanks to his decision to aid the company after discovering the fraud. His sentence will most likely be reduced due to his plea deal, but any course of action which leads to a criminal conviction is surely a grave error of judgment. Frank: a software engineer refuses to fake customer data Frank was a student loan startup founded by Charlie Javice in 2016. In 2019, Javice was featured on the Forbes ‚Äú30 under 30‚Äù  finance list , suggesting she was a high-flying founder: How Charlie Javice appeared on the Forbes 30 under 30 list in 2019. We now know the 300,000 user number was fake. Source: Forbes It certainly seemed like Charlie Javice was a standout founder; in 2021, JP Morgan purchased Frank for $175M. However, things turned sour quickly. JP Morgan thought it bought a startup with 5 million customers, which worked with 6,000 schools. But after the purchase, this data was found to be mostly fake. Let‚Äôs get to a software engineer‚Äôs involvement. This April, founder Charlie Javice was arrested, and a lawsuit is ongoing between her, former Chief Growth Officer Olivier Amar, and JP Morgan. From to this lawsuit, we get an inside look at how events unfolded inside Frank. In 2021, an engineer was asked to produce fake data for 4.2M non-existent customers.  As acquisition talks were ongoing, JP Morgan wanted to validate that Frank had the nearly 5M customers it claimed. In reality, Frank had 293,000 customers, so the CEO asked an engineer to fake the data and turn this list into 4.2M members. Here‚Äôs what happened next ‚Äì from  the lawsuit : ‚Äú[In 2021] Javice [CEO], Amar [Chief Growth Officer] and the Director of Engineering then had a Zoom meeting during which Javice and Amar asked the Director of Engineering to help them create a synthetic list of customer data. She asked the Director of Engineering if he could help take a known set of FAFSA application data and use it to artificially augment a much larger set of anonymous data tht her systems had collected over time. The Director of Engineering questioned whether creating and using such a data set was legal, but Javice tried to assure the engineer by claiming that this was perfectly acceptable in an investment situation and she did not believe that anyone would end up in an ‚Äòorange jumpsuit‚Äô over this project.‚Äù Lesson #2: when your manager claims they don‚Äôt believe anyone would end up in an ‚Äúorange jumpsuit,‚Äù assume that someone definitely could.  The engineering director‚Äôs next step? They refused: ‚ÄúThe Director of Engineering was not persuaded and told Javice and Amar that he would not perform the task, and only would send them the file containing Frank‚Äôs actual users, which amounted to approximately 293,000 individuals at the time.‚Äù And this engineering director played it right, as the people who are likely to go to jail and end up in orange jumpsuits are the other two people on the call, who knowingly went along with the illegal. Pollen: an engineer told to double charge customers by the CEO Last year, I published my first ‚Äì and to date only‚Äì investigative article on  how events tech startup Pollen raised $200M and then collapsed , owing months of wages to staff. In the investigation, I focused on an unusual detail: $3.2M worth of funds taken months early from customers. The incident was described internally by Pollen as a mistake, and an incident review  should  have followed. Even more confusing, the company blamed the payments processor Stripe for the incident. The reality was that this was a very deliberate double charge. I could not share this fact at the time ‚Äì as the company threatened me with libel after I informed them of this detail ‚Äì but the BBC has now produced a documentary  revealing details  about this deliberate double charge that was covered up as an outage. From  the documentary : [Narrator] ‚ÄúPollen initially told some customers that the problem was with their payments provider. Later, Callum [the CEO] addressed his staff who were demanding to know what happened.‚Äù [CEO of Pollen talking] ‚ÄúAll that happened was that a couple millions of dollars of payment plans that were due to be paid at a later month were then paid earlier. It‚Äôs being investigated. We‚Äôve committed already that once that investigation is done, it will be shared with the company so that people understand what happened.‚Äù [Narrator] ‚ÄúWith over 1,500 customers impacted, rumors began to circulate about the causes of the incident.‚Äù [Dan Taylor, managing editor at Tech.eu] ‚ÄúFrom my understanding, there was a creative code ‚Äòmalfunction‚Äô that all of the sudden, double charged customers. But that double charge magically happened to meet Pollen‚Äôs payroll, that month. Hmm! Odd, don‚Äôt you think?‚Äù [Narrator] ‚ÄúThe internal investigation due to be shared with the company was never completed, but a group of Pollen staff did their own, unofficial digging. (...) The code contained in the report confirms that the customer's monthly payment plans had been manually altered, which meant that double or triple charges will take place on a single day, without the customer‚Äôs authorization.‚Äù The engineer making this change even did a test run the day before, to ensure that this code change ‚Äúcorrectly‚Äù double charges customers! A former Pollen software engineer appearing in the documentary also makes the point that any code changing production code in payments needs to go through code review, so whoever made this change could have not been acting alone. Two days after the incident, a senior engineering team member sent an internal chat message to 3 colleagues, where they admit that they had run the script at the request of the CEO. Here is what this message said: ‚ÄúAlso want to come clean that it was me who ran a bad script - in hindsight I wasn‚Äôt knowledgeable enough to alter a subset of payment plans for Balvin [one of the events organized by Pollen]. I did this as a special request from Callum and didn‚Äôt want to raise on call to handle. It‚Äôs been a long week and I displayed a very poor form of judgement.‚Äù In the video, a Pollen software engineer is shown the message, and he says: ‚ÄúI‚Äôm not sure I buy this. It seems a bit fishy.‚Äù Lesson #3: if the CEO asks you to do something potentially illegal ‚Äì document it, and consider not doing it.  We don‚Äôt know what happened with the senior engineering member who carried out the code changes, following a request from the CEO. This person could have said no, like the engineering director at Frank did. The message sent a few days ago already said that this person regretted doing so, and it‚Äôs unlikely that this action was worth the risk it carried. If you take one lesson from this, it‚Äôs that you can always say no.  In these three stories, the only engineer who‚Äôs legally safe is the former engineering director at Frank who point blank refused to assist what could be an illegal request. The engineering director at FTX who stayed after he confirmed fraud was occurring is now facing jail time, while the senior engineering member at Pollen is at the mercy of the UK police, and how they deal with what could be a potential wire fraud case.¬† \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/from-software-developer-to-software-engineer/", "title": "From Software Developer to Software Engineer", "content": "\n             When it comes to job titles of people who write code, the most common ones are software developers and software engineers. But what is the difference between the two?  Ian Brayshaw  argues that the two  should not be treated as synonyms : \n \n Engineers see the bigger picture. They recognise the importance of understanding how a business works, as well as knowing why they are building something. They will insist upon designing software first so that they know what the final outcome should be. \n \n \n An engineer is not necessarily a better coder than a developer, but they do make sure that they are involved in every step of the process and they will question what they are doing before doing it. \n \n I do agree that  engineers take more responsibility  then developers, however I argue that  this mostly down to experience, and a drive  to get to new levels of understanding. Curious people that keep asking ‚Äúwhy‚Äù while producing software and learning more over time will inevitably become engineers. \n Hartley Brody  has a  similar view  on this. He says hackers, developers and engineers are different phrases for the seniority of someone who produces code: \n \n A hacker can come up with solutions, but maybe they can‚Äôt look back after they‚Äôve finished and realize how they came up with the solution. (‚Ä¶) \n \n \n At some point, you level up and become a developer and a developer understands best practices. They‚Äôve heard other developers say things like ‚Äúyou should put your scripts at the bottom of the webpage‚Äù ‚Ä¶ and you use those best practices to craft solutions but you don‚Äôt really understand beneath the best practices, beneath the abstractions. (‚Ä¶) \n \n \n An engineer is someone who can get things done, craft a solution ‚Äî they understand the best practices, but they also understand why they‚Äôre using the best practices that they are. They move into an understanding of the platform as a whole. \n \n Getting things done and crafting solutions  are two key qualities that engineers practice daily. And there is no better way to get there then by practicing these two.  Take a problem, code a solution, understand it, learn from it - rinse and repeat  with a bigger one. \n Following this method, after many-many iterations one gets to being able of comfortably tackle all sorts of complex problems. When getting here then congratulations - you have made it from developer to software engineer. \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/getting-into-the-zone-with-a-single-pomodoro/", "title": "Getting Into the Zone with a Single Pomodoro", "content": "\n             The cost of getting interrupted while developing is high. Have you had one of those days when you just didn‚Äôt seem to get anything done due to a little bit of this, a little bit of that? I definitely have. \n Sometimes the distraction is due to meetings. Other times it‚Äôs Slack or emails. If not those, then phone notifications, Twitter or websites calling for my attention - bottom line being that I find often it hard to focus. \n I‚Äôve experimented with a bunch of productivity tools, but it was finally a twist on the pomodoro technique that worked best for me.The Pomodoro technique is a pretty simple, but organized framework. Wikipedia sums it up like this: \n \n The technique uses a timer to break down work into intervals traditionally 25 minutes in length, separated by short breaks. These intervals are known as \"pomodoros\", the plural in English of the Italian word pomodoro meaning ‚Äútomato\". \n \n \n There are five basic steps to implementing the technique: \n \n \n \n Decide on the task to be done \n \n \n \n Set the pomodoro timer to n minutes (traditionally 25) \n Work on the task until the timer rings; record with an x \n Take a short break (3‚Äì5 minutes) \n After four pomodoros, take a longer break (15‚Äì30 minutes) \n \n The thing that is really appealing about pomodoro is that it  only asks for 25 minutes of your time to start with . Focusing for 25 minutes? Sure. Ignoring all notifications for 25 minutes? You got it. Not checking Twitter for the next 25 minutes? I can do that. \n And this ease of getting started is what I use to get back into the zone. Whenever I feel too distracted  I just start one single an uninterrupted block of 25 minutes , one single pomodoro. \n Thanks to the popularity of the technique there are plenty of  apps  and  tools  to help with this and 25 minutes is not that big of an ask. Any interruptions I get this time I just ignore and after 5-10 minutes usually find myself back in the zone. And when the pomodoro is over? More often then not I ignore that as well and just keep going. \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/what-agile-really-means/", "title": "What Agile Really Means", "content": "\n             Nowadays almost every software development company and team claims to be agile and usually follows some kind of agile methodology. However in the middle of the whole agile movement the real meaning of \"agile\" is often lost. What does it mean to write code in an agile way? Or to work in an agile team, deliver a product in an agile fashion? \n Where has the meaning behind agile disappeared - and  what  does it really mean at its root? \n The Birth Of Agile \n Let's take a step back to where it all started. In 2001  17 pretty well known   software craftsmen gathered in Utah to summarize their views on efficient software development in a short document. The outcome of this meeting was the  Agile Manifesto  which forms the basis of agile software development (and marks the start of the agile movement). The 4 values the agile manifesto states are these: \n \n Individuals and interactions  over processes and tools \n Working software  over comprehensive documentation \n Customer collaboration  over contract negotiation \n Responding to change  over following a plan \n \n That's pretty much it. So why does \"agile\" seem to be something much more complex and difficult to grasp these days? \n Agile Methodologies and Certifications \n Today, 14 or so years after the beginnings of agile software development, agile is pretty much a synonym to following some agile methodology, the most popular without doubt being  Scrum . \n And it's little wonder it's so popular: for starts the methodology is very credible, as it was developed by Ken Schwaber and Jeff Sutherland, two of the members of the Agile Manifesto. Getting started with methodology is pretty easy - there are tons of online resources and more structured  Scrum Master courses  as well. I also took one of those a few years back - at my time at Skype almost every engineer got to attend a 2-3 days long Scrum Master training. (Note: while the in-person classes are interesting and entertaining, all relevant materials are available online and for free to get up to speed with Scrum.) \n Scrum is also super popular because it's really simple to  implement and follow . Implement a couple of lightweight ceremonies on a schedule - standups, backlog groomings, plannings and retrospective, and that's basically it. And results will come  fast  even if leaving out certain ceremonies. For example just by having a daily standup the team will be more productive if there's not been something similar in place beforehand. \n And it's not just Scrum, but a bunch of other agile methodologies and tools that are gaining traction.  Kanban  is another popular one, as well as  Scrumban  (mixing Scrum & Kanban).  Extreme Programming  is also a tool that although fewer teams use, but those who do absolutely swear by it. \n I've used Scrum, Kanban and Scrumban with various teams and projects, sometimes strictly sticking to their processes and other times loosely following recommendations. For example at Skype we did Scrum by the book and at Skyscanner we've tailored a version of Scrumban to fit our needs. \n Still, the more I use these methodologies to build software in an agile way, the more I'm certain that  following an agile methodology is  not  a what agile software development is about. \n Back to Basics \n Building software in an agile fashion will always be speedier, team members will be more motivated and overall outcomes will be better compared to the plan-months-ahead  waterfall  style development. As the benefits are immediate it's little wonder that a whole consulting and training industry has spurred to help teams and companies transition to agile with the use of agile methodologies and workflows. \n The word \"agile\" has been so overused in the software industry - not the least by consultants making a living off of it - that it has now pretty much lost its original meaning. This is what  Dave Thomas , one of the founders of the Agile Manifesto  says in a recent post . One of the four values of the Agile Manifesto is this: \n \n Individuals and interactions  over processes and tools \n \n So why is it that all agile methodologies introduce  more  processes and tools in order to achieve agility? Does this not go against the original ideas of agile? Dave - rightfully - says that it's time to ditch the methodologies and get back to the basics of agile. \n The Real Meaning of Agile \n Doing something in an agile way means making a small change quickly, learning from it, making adjustments to our understanding of the problem and repeating this many times. This is what  doing something with agility  means: \n \n What  to do: \n \n \n \n Find out  where you are \n Take a small step  towards your goal \n Adjust  your understanding based on what you learned \n Repeat \n \n \n \n How to  do it: \n \n \n \n When faced with two or more alternatives that deliver roughly the same value,  take the path that makes future change easier . \n \n \n These few simple steps are really what agile is all about. Stick with these basics and you can apply them to all parts of software development: \n \n When writing code , do it in an agile way. Decide what you want to achieve, do a small change, test it, learn from it, adjust and repeat. Try to write code that's easy to change later. \n When building a product , do it in an agile way. Do small changes, get immediate feedback, do small iterations and make decisions that allow future changes as much as possible \n Similarly,  when working as a team , solve problems using these basic principles, a small step at a time \n The tools and methodologies you use should help achieve this kind of agility. If they only add more process - ditch them. \n \n The most successful engineers, teams and products all follow these simple steps one way or the other. Agile is not a methodology with rules and processes to follow. At its roots  agile is a simple and fast way of learning and improving by taking small steps, one after the other. \n Put this principle first and make sure whatever light- or heavyweight process you follow  helps  achieve this kind of agility. \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/moving-from-objective-c-to-swift-unit-testing-done-right/", "title": "Transitioning From Objective C to Swift in 4 Steps - Without Rewriting The Existing Code", "content": "\n             We started developing  Skyscanner TravelPro  in Objective C in March 2015. A couple of months later, when Swift 2.0 was released, we started to slowly introduce Swift. Fast forward to 8 months later - and  100% of the new code we write is in Swift . Without having rewritten all of our existing, working and tested Objective C code - there would have been little point in doing so. \n There are many resources talking about how to decide whether to use Swift for a new project or not, best practices for writing Swift. However if you're in knee deep in an existing, often pretty  large  Objective C codebase, you will probably find this article useful. If not - one day you might bump into a codebase where you want to start using Swift: this article is a good start. \n Here's a visual representation of how the codebase has changed in 10 months. Since November 2015 all new code is written in Swift, which now makes up about 10% of our 65,000 line codebase - and growing. \n \n So what was our approach going from Objective C to Swift? \n 1. Start with a Simple Component \n We decided to start as simple as we could: with some isolated classes that could be tested and used by themselves. The first few components we chose were simple UI controls, utility functions and extension methods on existing classes. \n For example among the first Swift additions we added in was a simple String extension method that made localizing strings much more pleasant to read: \n extension String {\n    var localized: String! {\n        let localizedString = NSLocalizedString(self, comment: \"\")\n        return localizedString\n    }\n}\n \n Interesting enough we could have implemented the same functionality using Objective C categories, however it never occurred to the team to use anything other then the good old  NSLocalizedString(@\"MyText\", @\"\") . With a new language,  lots  of new ideas surface. So from day one all our Swift strings are written in the tidier  \"MyText\".localized  format. \n 2. Using Existing Objective C Code From Swift \n After writing a couple of standalone Swift components - and unit tests against them - we moved on to using our existing Objective C classes from Swift. Things started to get real. \n To use any Objective C classes from Swift you need to  define a Swift bridging header . This is a  .h  file where you define all your Objective C headers to \"expose\" for Swift to use. On top of the header itself, the build settings need to be changed for the compiler to pick this up. Once this is done, these Objective C classes are imported into the Swift world, and can be used easily. \n When using Objective C classes from Swift then you will likely notice warnings saying  pointer is missing a nullability type specifier . When Objective C code imported into Swift then the compiler checks for  nullability compatibility  - and if it doesn't find any information on nullability, then issues this warning. It does this check because in Swift nullability information is always explicitly declared, either with non nullable types or by using  optionals . \n The only changes we needed to make to our Objective C code  was adding nullability information to the header to resolve the warnings issued by the compiler. To do so, we used the new  _Nullable  and  _Nonnull  annotations. This was something that only took a couple of hours - and made is think long and hard on what could, or could not be  nil  in our existing codebase. \n For the most part this refactor involved changing lines of code like this: \n // Original method signature in the .h file\n@property (nonatomic, strong, readonly) THSession *session;\n\n// New, Swift-friendly method signature\n@property (nonatomic, strong, readonly) THSession * _Nullable session;\n \n In case of method signatures with blocks, the changes were a bit more complex, but nothing unmanageable: \n // Original method signature in the .h file\n- (NSURLSessionDataTask *)updateWithSuccess: (void(^)())success\n    error:( void(^)(NSError * error))error;\n\n// New, Swift-friendly method signature\n- (NSURLSessionDataTask * _Nullable)updateWithSuccess: (void(^ _Nullable )())success\n    error:( void(^ _Nullable )(NSError * _Nonnull error))error;\n\n \n 3. Using Swift Code From Objective C \n After having a couple of moderately complex Swift components using our Objective C classes, it was time to use these components from within Objective C. Using Swift components from Objective C code is  much more straightforward , as there is no bridging header needed. \n The only changes we had to make to our existing Swift files was inheriting from  NSObject  or adding the  @objc  attribute  to classes we wanted to expose. There are some Swift specific classes that cannot be used from Objective C, like structures, tuples and generics and  a few others . These limitations didn't affect us because we didn't want to expose any of the new structures to Objective C. The only exception, where we had to do a little extra work was enums. To use  enums  from Swift, in Swift they need to be specified with the  Int  value type: \n @objc enum FlightCabinClass: Int {\n    case Economy = 1, PremiumEconomy, Business, First, PrivateJet\n}\n \n 3. (Re-)learn Unit Testing and Dependency Injection with Swift \n Once we had some more complex components with dependencies, we hit an issue that wasn't obvious on how to best resolve. This issue was unit testing. Unlike Objective C, Swift does not support readwrite reflection. Put it simply: there is no OCMock equivalent in Swift, in fact  mocking frameworks straight don't exist . \n An example that caused us to scratch head it this. We wanted to test that when pressing the submit button on a page, the  saveTrip  method is invoked on the  viewModel  property of the  view  object. In Objective C, using  OCMock , this could be tested in a similar way: \n // Testing that when pressing the submit button, a method is invoked on the ViewModel\n- (void)test_whenPressingSubmitButton_thenInvokesSaveTripOnViewModel {\n    // given\n    TripViewController *view = [TripViewController alloc] init];\n    id viewModelMock = OCMPartialMock(view.viewModel); \n    OCMExpect([viewModelMock saveTrip]);\n    \n    // when\n    [view.submitButton press];\n    \n    // then\n    OCMVerifyAll(viewModelMock);\n}\n \n In Swift this approach would not work. In Objective C unit testing is usually done with the help of rich mocking frameworks like  OCMock . Dependency injection is a good practice, but as  OCMock  makes unit testing very easy even without explicit dependency injection, most of our Objective C dependencies were implicit. In Swift however, dynamic mocking libraries like OCMock do not exist.  In Swift the only way to write testable code is by making dependencies explicit and injectable . Once this is done, you have to write your own mocks to verify behavior. \n Sticking with the previous example: in Swift it would need to be changed, so the   viewModel  can be passed in as a dependency to the  view . This can be done by either having the  viewModel  implement a protocol, or by subclassing the  viewModel  itself. The test class needs to define the mock object that is being passed: \n func test_whenPressingSubmitButton_thenInvokesSaveTripOnViewModel() {\n   // given\n   let viewModelMock = TripViewModelMock()\n   let view = TripViewController(viewModelMock)\n   \n   // when\n  view.submitButton.press()\n\n   // then\n   XCTAssertEqual(viewModelMock.saveTripInvoked)\n}\n\nclass TripViewModelMock: TripViewModel {\n        var saveTripInvoked = false\n        \n        override func saveTrip() {\n            self.saveTripInvoked = true\n        }\n}\n \n The Swift test code is visibly more verbose then the Objective version. However, the explicit dependency injection pattern forced us to decouple our code as much as we could. Before migrating to Swift, we thought that our Objective C code was pretty decoupled. However after writing a couple of weeks of Swift code, the difference between the \"old\" and \"new\" code was stark. Moving to Swift - and testing our code properly - made our codebase more loosely coupled then before. \n Dive Deep in the Good Parts \n After getting the hang of dependency injection and writing our own mocks, we got much deeper into Swift, and started to pick up some really neat techniques. In the previous example I showed how to re-create the  OCMPartialMock  functionality from Objective C. A cleaner approach would be to use pure mocks instead of partial mocks. In Swift a better way to write loosely coupled code is using protocols, and  protocol oriented programming  techniques. We picked up this really quickly and our code became more loosely coupled and more testable. \n Then there's some new language features like the  guard and defer ,  generics , error handling with  do-catch ,  nested types , the  where clause  and the  @testable keyword  - and this is only touching the surface. Even though Swift is easy to get started with, there is plenty of depth to the language. \n Apart from learning a new language, what else did we get out of moving over to Swift? \n \n Easier to read code : \n \n // Objective C\nCGColorRef newColor = [[[UIColor blueColor] colorWithAlphaComponent:0.2] CGColor]];\n[self updateLayerBackgroundColorWithColor: color];\n\n// Same code in Swift\nlet newColor = UIColor.blueColor.colorWithAlphaComponent(0.2).CGColor\nself.updateLayerBackgroundColorWithColor(newColor)\n \n \n Stricter compile time checks  compared to Objective C. Apart from  type safety  and the compile time benefits with this, the Swift compiler does additional checks like  not allowing single line if statements  or  enforcing exhaustive switch statements . \n No more header files  - and no more and copying method declarations between  .h  and  .m  files \n ... and of course the thrill of learning and using new language features! \n \n On the disadvantages side: there seem surprisingly few. One important one is that some of our third party dependencies building on the dynamic nature of Objective C like  JSONModel  aren't and won't be available in Swift. And the other big one is that now need to maintain our existing Objective C code, which means additional context switching - and motivation to continuously transform more of our Objective C code to Swift. \n Of course Swift is still a new language that is heavily under development, and  breaking changes coming late 2016 . Despite all that all of our team agrees that moving our Objective C project to Swift has been great success. It resulted in cleaner architecture, easier to read code and more productivity then if we would have stayed all Objective C. More importantly: by doing a gradual change and not rewriting our \"old\" code,  shifting from Objective C to Swift has not slown us down a bit . \n (Note: I have since then written a follow up to this post:  How We Migrated Our Objective C Projects to Swift ‚Äì Step By Step ). \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/my-code-ended-up-running-an-oil-rig-this-is-what-i-learned/", "title": "My Code Ended Up Running an Oil Rig. These are the 5 Things I Learned.", "content": "\n             In 2010 I built one of the most advanced charting libraries available for Windows,  Visiblox   [1] . Originally I was pretty convinced it would mostly be finance companies using this component in their applications. That was until I found out that one of the biggest oil rigs used these charts to build their mission critical drill monitoring system. \n Where It All Started \n In 2010, while working at  Scott Logic , a financial consultancy, we noticed that a lot of the banks we were working with all wanted better charting solutions. Almost all of our clients wanted to display tens of thousands of data points in their apps. At the time the existing off-the-shelf components were great to create pretty charts... but couldn't handle more than a couple hundred data points without long load times or jerkiness. \n So we decided to fill this niche: let's build high performance charts that can display millions of data points and zoom in and out instantaneously. While we're at it, might as well make it ridiculously extensible. Like... allowing to add any number of axes to the charts and restyle every element to your heart's content. \n We built a prototype in a month, got feedback, then shipped the v1 publicly in 6 months. Our financial clients loved it and we had a few other companies purchase licenses as well. \n The Call from Texas \n A couple of months after launch we got a call from Texas asking for technical support on our charts. Some developers were trying to implement charts with multiple X axes. Sure enough, our chart supported this in theory - even though I've not seen anyone have a use case for doing this in practice. So out of curiosity I asked what their use case was. It was this: \n \n I started to get interested. Drill depth? RPM? Vibration? Where would this stuff be running? I asked the guys where this stuff would be deployed. Helpful enough they showed me. It will be running on one of these monitors: \n \n On one of the biggest oil rigs, monitoring the in progress drill operations: \n \n And  that  was the moment I realized: holy damn,  my code is actually doing some real world badass stuff! \n Five Things I Learned From The Oil Rig Devs \n The next few weeks I worked closely to finish implementation of the monitoring component with the devs on the oil rig, before it was deployed in production (and still running, if I'm not mistaken). Here are 5 things that I've learned from my code making it to power the oil rig's monitoring system. \n 1. Give Devs Advanced Tools and They'll Surprise You With Even More Advanced Stuff \n We built the charts component as a tool or SDK for developers to incorporate into their apps. We had a few advanced use cases in mind, such as being able to zoom in and out with millions of data points, as well as charts with multiple Y axes. \n We knew we couldn't cover all possible use cases so made the charts as extensible as possible - being able to add and style any number of axes, plot your own series and so on. We did some wacky experiments in-house of just how customizable the charts were. \n However  nothing surprises you as much as real world use cases . To date I've never seen such a complicated - and very valid - use case of using a chart with multiple X axes, and the Y axes cleverly monitoring the depth of the drill. \n 2. Mission Critical Systems Don't Build it All From Scratch \n The devs on the oil rig had an existing custom built charting component in place beforehand - however it became more and more difficult for them to maintain. This is why they looked around for alternatives - and found the charts library I was building. \n It was cheaper and easier for them to not have to deal with the implementation details of rendering the charts. Instead they leveraged a tool that took care of all of these details. For them even though the charting UI was a very important part of the system, it was a better tradeoff to take a tool, test it and integrate it, rather than build it from scratch. \n If you build a reliable tool that significantly reduces the amount of work needed to be done, then  devs will use this tool, regardless of the industry  and how mission critical the system is. (They will obviously be pragmatic about it: the more mission critical part of the system we're talking about, the more likely they'll consider implementing it in-house.) \n 3. Memory Leaks Are Complete Showstoppers In Mission Critical Systems \n One of the first measurements the devs did were around performance and memory leaks. And this is perfectly understandable: when you're building a system that needs to run  continuously for or months , it's super important performance stays stable. Even more important that the app doesn't run out of memory. \n Turns out memory leaks and performance degradations have a very strong one-way correlation.  If there is a memory leak in the code, it will almost certainly cause performance degradation . And of course, after a while it will result in the app running out of memory and crashing. \n On Visiblox we spent tons of time tracking down all memory leaks - and kept measuring different scenarios to make sure memory footprint stayed stable at all times. Of course, performance degradations can happen for a variety of other reasons then memory leaks, but whenever building long running apps where crashes are not acceptable, do your homework on memory leaks. \n 4. To Succeed in a Mature Market Your Product Needs to Be 10x Better than the Competition \n The motivation to create (yet) another charting library came after many of our clients expressed their frustration with the existing charting components. However before we even decided to start working, we tried every single charting library, mapping the market. \n The WPF charting market at this stage was pretty mature, with about 15 decent charting libraries available, many of them having been developed for 3-4 years. The niche we discovered was that none of the libraries could render more than 500 data points without taking too long to load or being jerky. But would providing a solution to just this performance problem be enough to get traction? \n We knew no one would invest time and effort integrating our library unless we gave them a compelling reason to do so. A lesson I took away from Visiblox is that to be able to succeed on a mature market, your product needs to be at least 10x as good as existing alternatives in more than one area.  If your product is just a little bit better in a few areas, then people won't bother investing time and effort to switch . \n The story we had was that we could seamlessly display 2,000x as many points as our competitors  and  give you unrivaled extensibility. Turns out the oil rig developers only decided to switch because our component gave them  both  of these advantages that were massively better than other alternatives on the market. \n 5. High Performance Software Utilizes the Language, Framework and Platform to its Limits \n When development of Visiblox started we didn't dive in straight with coding but did proper planning, prototyping, research and measuring to decide how to tackle the problem of building high performance charts. \n What is the maximum number of points that we can store in memory and how much space will one single point take? Should we use classes with an  8-12 byte memory overhead  or just go with structs? If we use structs, will be limited to the size of the stack or will the C# VM still  allocate data on the heap ? \n What is the fastest way to draw lots of points in WPF? Should we manipulate bitmaps, is using  Canvas  feasible or are there other viable alternatives? How do the different approaches work when implementing zooming? Before choosing any of the approaches we built prototypes for each solution, measuring their execution speed, memory overhead and debating their complexity.  [2] \n After doing our homework on deciding the approaches coding the first version was much easier than I expected: a first, working version was ready in about a month with pretty good performance already. However to build software that was pretty well optimized for performance  we needed to know limits of the language, framework and platform really well . \n Your Code  Will  Be Used In Unexpected Ways - But Only If You Release It \n It was a great feeling that from thousands of miles away and with no actual knowledge of how oil rigs works, I actually helped make an offshore platform run better (or at least make their charts prettier). \n Building stuff that's not consumer facing sometimes doesn't feel as sexy - Visiblox for example, isn't as cool to show off to my friends as one of my side projects,  Cocktail Flow . However in many ways building tools for devs can be just as fun and rewarding. \n And it's not just by building SDKs or components you can enable other devs to create something even more amazing. The easiest way to give a fellow engineer a chance to surprise you:  publish some of your code to so others can reuse it , for example  on Github  - like I did with the  theme of my blog . \n Notes \n [1] -  Visiblox  to date is still the most performant WPF & Silverlight charting library. The same team behind this library also created  Shinobi Charts for iOS and Android  which is a similarly superb SDK to use in any app - not just for oil rigs. \n [2] - We ended up using Canvas over bitmaps. Drawing on bitmaps are much faster, however it's really complex to implement zooming, which in return is very trivial using a Canvas. We ended up re-using points (and moving unused points offscreen) as adding and removing points to a canvas turned out to be a very large performance overhead. \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/a-comment-is-an-invitation-for-refactoring/", "title": "A Comment Is An Invitation For Refactoring", "content": "\n             Uncle Bob Martin has a pretty strict view on comments. He goes as far  to say : \n \n A comment is an apology  for not choosing a more clear name, or a more reasonable set of parameters, or for the failure to use explanatory variables and explanatory functions. Apologies for making the code unmaintainable, apologies for not using well-known algorithms, apologies for writing 'clever' code, apologies for not having a good version control system, apologies for not having finished the job of writing the code, or for leaving vulnerabilities or flaws in the code. \n \n A pretty purist view - but can we really go coding without comments? What about how code should tell you the  how  and  comments should tell you the  why ? \n The more code I read, the more I believe that  most  inline comments can be eliminated by refactoring the code itself  (note the emphasis on  most ). Whenever you come across a comment in the code, ask yourself: could I refactor the code to remove this comment? The answer will be  yes , in many cases. \n And this is a great thing. Every comment that becomes part of the code will make refactoring more difficult - because when refactoring, not only the code, but the comment also needs to be changed. And we usually end up forgetting about them. In  Clean Code  the section on comments says: \n \n The problem with comments is that they have no compile-time check and  tend to be forgotten . It‚Äôs very easy to change your code but forget about the comments. \n \n Almost all inline comments are ones that could be removed or moved while making the code more readable and easier to refactor. Let's look at  3 examples  where comments are an indication that the code could be better organized. \n 1. Comments Inside (Too) Long Methods \n I come across this pattern fairly often, where there are several comments splitting up parts of a long method: \n override func viewDidLoad() {\n   super.viewDidLoad()\n\n   // setup the navigation bar\n   self.searchBar.searchBarStyle = .Minimal\n   self.searchBar.translucent = true\n   self.searchBar.placeholder = \"Search\"\n\n   // setup table view\n   self.tableView.delegate = self\n   self.tableView.dataSource = self\n   self.tableView.estimatedRowHeight = 150.0\n}\n \n This is an invitation to again extract the sections the comments refer to. The comments are explaining the \"how\" in this case, not the \"why\" - a no-brainer to move the parts into methods of their own: \n override func viewDidLoad() {\n   super.viewDidLoad()\n   self.setupNavigationBar()\n   self.setupTableView()\n}\n \n Which version is easier to read? My vote goes for the second one - it's easier to read as the method is now shorter - and easier to refactor, as we no longer have to maintain the comment when changing the code. \n 2. The Bugfix Comment \n Many comments I come across explain how a bug is eliminated by some otherwise hard to understand line(s) of code. Take this example: \n func willPresentSearchController(searchController: UISearchController) {\n    // Fixing searchbar disappearing on iOS9 when search controller is active\n    if let navigationController = self.navigationController {\n        self.storedNavigationBarTranslucency = navigationController.navigationBar.translucent\n        self.navigationController?.navigationBar.translucent = true\n    }\n}\n \n This comment is an invite to extract the bugfix code in its own method: \n \nfunc willPresentSearchController(searchController: UISearchController) {\n    self.preventSearchBarFromDisappearingWhenSearchControllerIsActive()\n}\n\n// Fixing searchbar disappearing on iOS9 when search controller is active    \nfunc preventSearchBarFromDisappearingWhenSearchControllerIsActive() {\n    if let navigationController = self.navigationController {\n        self.storedNavigationBarTranslucency = navigationController.navigationBar.translucent\n        self.navigationController?.navigationBar.translucent = true\n    }\n}\n \n The readability of the code is just as good - and the bugfix code is extracted in its own logical item, a method. It's fine to keep the comment in place - but now it's obvious that the bugfix method does one thing, providing the workaround. \n 3. The Commented Out Code Comment \n Every now and then I come across comments addressing commented out code. \n // NOTE: temporary removed until the calendar functionality is removed. Re-enable afterwards by uncommenting this line:\n//self.setupNativeCalendarAccess()\n \n Another invitation... to delete the whole comment altogether. Commented out code is dead code, and  dead code rots your codebase . There should be no reason to keep the code in place - this is exactly what source control is there for - if someone will need the original code, they can find it in the commit logs. \n Coding Without Comments? \n Comments certainly have their use and place. A use case where they're invaluable are API documentation and explaining things that code just can't convey (or it would be too complex). Here's what  Jeff Atwood  says about  coding without comments : \n \n If your feel your code is too complex to understand  without  comments,  your code is probably just bad . Rewrite it until it doesn't need comments anymore. If, at the end of that effort, you still feel comments are necessary, then by all means, add comments. Carefully. \n \n Apart from documenting your public API, you should  treat each comment as an opportunity to refactor your code , to make it even more readable, with or without the comment. Comments have their use and place - make sure its a valid one before using them. \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/swift-the-only-modern-language-with-no-mocking-framework/", "title": "Swift: The Only Modern Language without Mocking Frameworks", "content": "\n             Swift was designed to be a safe language and is has not fallen short of that promise. Here is how  Apple describes  the new language: Swift is a new programming language for iOS, OS X, watchOS, and tvOS apps that builds on the best of C and Objective-C, without the constraints of C compatibility.  Swift adopts safe programming patterns  and adds modern features to make programming easier, more flexible, and more fun. Swift‚Äôs clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to reimagine how software development works. On top of type safety and extensive complier checks, the language designers decided to go one step further with safety, not allowing readwrite reflection. As  Adrian Kashivskyy   puts it : Remember that reflection in Swift is currently read-only and  there‚Äôs no way to modify your program at runtime  (with Objective-C-derived classes being an exception as you can stillclass_addMethod() in Swift). Perhaps this limitation will be incrementally lifted in subsequent language releases. However, Swift was designed to be safe ‚Äì bringing true read-write reflection would break that dogma. For the most part this safety is a good thing. This ensures that code executes as expected at all times by disallowing of other components modifying parts of your code. Objective C allowed making runtime changes via  method swizzling  and could be used for a variety of creative use cases like automated logging of certain methods. Reflection in Other Languages Between modern languages Swift is one of the very few that disallows readwrite reflection. Languages that allow modifying programs as they run include  Java, C#, Go, Ruby, Python, Javascipt, PHP, Perl, Haskell, Lisp  and  R . In fact, from the  15 most popular languages * on GitHub the only ones not supporting readwrite reflection are  C ,  C++  - and Swift. So why do C and C++ not support reflection? For C++ it would be  too much work to do add it  and adding it would also be  pretty complicated . For C the reasons are likely similar - on top of that making changes to mature and standardized languages take a long time. For Swift none of the C++ and C arguments apply, so why the limitation on reflection? The answer is likely around security. Reflection is yet another attack vector in applications, or as  Erwann Wernli-Sch√§rer   shares his thoughts on it : The more reflective power you have the harder it is to ensure things are safe as they should.  Reflection defeats notably static typing  and can lead to run-time errors. So if reflection is a security threat, how do some of the other major frameworks mitigate this? In the recent versions of  C# , starting from .NET 4.5 Microsoft introduced  much more strict rules  - all code can read type information (similar to what Swift allows), but  only trusted code with permission can modify code runtime . On top of this, code that is  marked as security-critical  cannot be accessed via reflection at all, offering a way to completely lock down sensitive code from inspection or modification. Could the case be that Swift will support readwrite reflection only  after  putting some similar restrictions to .NET in place? This is yet to be seen, as the Swift team so far has not explained their decision behind omitting of this feature - or if we can expect it to be added at some later release. Reflection and Mocking When writing unit tests, the ¬†fundamentals of verifying correct behaviour is isolation.  Niraj Bhatt   summarizes  the common practice of isolating components with the help of  Test Doubles : Isolation is hard in real world as there are always dependencies (collaborators) across the system. That‚Äôs where concept of something generically called ‚ÄòTest Double‚Äô comes into picture. A ‚ÄòDouble‚Äô allow us to break the original dependency, helping isolate the unit (or System Under Test (SUT) ‚Äì as commonly referred) Dummy  is simplest of all. It‚Äôs a placeholder required to pass the unit test. Fake  is used to simplify a dependency so that unit test can pass easily. Stub  is used to provide indirect inputs to the SUT coming from its collaborators / dependencies Mock  Using behavior verification we can set expectations for SUT to exhibit the right behavior during its interactions with collaborators. Spy  ‚Äì Spy is a variation of behavior verification. Instead of setting up behavior expectations, Spy records calls made to the collaborator\" Dummies, fakes, stubs, mocks and spies are  building blocks of unit testing  for all modern languages. They can either be manually coded - which is more tedious - or created using mocking frameworks providing that provide easier to read APIs, removing a lot of the boilerplate code. Mocking frameworks are all built on top of reflection , taking advantage of being able to change classes, types and objects runtime. They modify existing classes under the hood to either stub, mock or spy on functionality. They provide an API that is usually more pleasant to work with then when manually assembling objects. The Language with No Mocking Framework Apart from C and C++, all other popular languages have mocking frameworks for developers to use as. And they definitely use them: in Java  Mockito is a top 10 Java library  across all libraries, not only the testing tools. For Objective C  OCMock  is the most used one and, for C#  Moq  and for Javascript  Sinon  and  JSMockito  are popular ones. As Swift does not support readwrite reflection, it leaves the language without being able to create a framework to do the heavylifting for mocking. Mocking, stubbing and spying can still be done, but helper classes need to be manually created for every test, writing similar boilerplate code multiple times. Is this really a bad thing?  Many advocates of unit testing, including  Uncle Bob  often say that  mocking frameworks are overused . So what advice does Uncle Bob give  about not using mocking frameworks  - something Swift developers will need to get used to: I don't often use mocking tools. I find that if I restrict my mocking to architectural boundaries, I rarely need them. Mocking tools are very powerful, and there are times when they can be quite useful. For example, they can override sealed or final interfaces. However, that power is seldom necessary; and comes at a significant cost. Mocking across architectural boundaries is  easy . Writing those mocks is  trivial . Writing your own mocks forces you to give those mocks  names , and put them in special directories. You'll find this useful because you are very likely to reuse them from test to test. Writing your own mocks means you have to  design  your mocking structure. And that's never a bad idea. In Swift there is no other choice then to follow the advice from Uncle Bob:  write your own mocks . Will developers coming from languages other then C and C++ to Swift miss having the tools at hand? Probably so. No one knows this better then the  Erik D√∂rnenburg , creator of the most popular Objective C mocking library, OCMock. Answering the question on  whether mocking is even need in Swift  he says: Mock frameworks have proven convenient in many languages. It's not that they are essential, but they do add convenience. Stubbing a factory method to return a mock is quick and easy. Creating a protocol and a wrapper, and using dependency injection is probably more sustainable, but it is also more work and looks more complex. As ever, having options and making the right choice seems key. Like it or not, but in Swift the way forward is to follow Uncle Bob's advice and write your own mocks. It's a proven and sustainable approach - still,  it would have been nice to have a choice . See also the discussion on  Readwrite reflection in Swift  on the the Swift forms email list. Notes * Top 15 most popular programming languages  on GithHub  as of November 2015, ordered by priority (excluding markup and command line languages like CSS and Shell): Javascript, Java, Python, PHP, Ruby, C++, C, C#, Objective C, R, Go, Perl, Swift, Scala and Lisp. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-startup-dilemma-move-slow-or-break-things/", "title": "The Software Development Dilemma: Move Fast without Breaking Things?", "content": "\n             One of the most famous Facebook slogans is  Move Fast and Break Things . This is how  Pedram Keyani  thinks back about what this meant at Facebook  back in 2007 : \n \n I‚Äôll never forget my second day on the job when Chris Cox, our V.P. of Product, assigned me the task to fix a pretty complex bug in News Feed.  I'd never written PHP in my life , but a few hours later when I got my code working and ready for review, he said \"Cool, ship it!\" with a big smile on his face. At first, I didn't think he was serious, but once it shipped, I realized that I had just pushed out a change on my second day that  25 million people would experience instantly . \n \n For any engineer - including myself - this is as good as it gets. Finally, I can just focus on what I do best and worry about the rest after shipping. Where do I sign up? \n ... Except Things Do Break \n It's really tempting for any team to follow the Facebook way. Why don't we just iterate fast, ship product quickly and beat our competition by out speeding them? \n In reality, more often than not moving fast and breaking things will result in  shipping scrappy software . This is because in the rush to get stuff out the fastest way time-consuming things get skipped. Like user testing, automation, analytics, monitoring, manual testing - just to name a few. \n These bugs will keep annoying people using and relying on the software. It might just be a little bug here, another one there, but they all add up. A good example is the how food delivery apps have tons of small glitches that make their couriers' job pretty difficult. This is how  Anna Vignet  talks about  her experience  delivering door to door in San Francisco: \n \n I‚Äôve been delivering for Postmates and DoorDash, but  glitches in their apps  have created unnecessary buckets of my sweat. (...) \n \n \n The app dispatches bicyclists on short-distance orders but doesn‚Äôt account for the grade of the streets. (...) \n \n \n Sometimes the app seemed to forget that I needed to bike back to the hotspot. After delivering Mexican food to a neighborhood on the west side of the city, the app immediately buzzed, asking me to pick up barbecue, and deliver it to the east side within 32 minutes‚Ää‚Äî‚Ääa 4.5-mile ride. That seemed impossible. (...) \n \n \n Given that these companies can‚Äôt deliver food without us, couriers,  it‚Äôs remarkable how unfinished  their support services are. \n \n To be honest for startups software having bugs are probably not a deal breaker early out. But it's not just startups who follow this kind of thinking, it's almost everyone in the industry.  Scott Hanselman  brought this topic up a couple of years ago and in a recent post he  doesn't see things getting better : \n \n I posted a rant back in 2012 called \" Everything's broken and nobody's upset. \" (...) Fast forward a few years, and I think that we as an industry are perhaps still headed in the wrong way. Technology companies are outsourcing QA to the customer and we're doing it using frequent updates as an excuse. \n \n \n The App Store make it easy to update apps. Web Sites are even worse. How often have you been told \"clear your cache\" which is the 2015 equivalent to \"did you turn it on and off again?\" \n \n \n It's too easy to ship crap and it's too easy to update that crap. When I started in software we were lucky to ship every 6 to 9 months. Some places ship every year or two, and others still ship once. I see folks misusing Scrum and  using it as an excuse to be sloppy . \n \n How Can We Stop Breaking Things? \n A lot of the software we use every day is broken one way or the other and most people seem to accept this. As engineers, surely we can do better than this. \n A very simple solution could be to jump back in time and ship less frequently - but jokes aside  being slow is no longer an option . Shipping fast is the new normal, like it or not. Would you be eager to work at a place that has \"Move slow and don't break things\" painted on the wall? Yeah, neither would I. \n Identify Things You Cannot Break \n Zach Holman  has a great post about how at GitHub they  Move Fast and Break Nothing . He thinks there is one thing you should do first and foremost: \n \n I think move fast and break things is fine for many features. But the first step is  identifying what you cannot break . These are things like billing code (...), upgrades (hardware or software upgrades can always be really dicey to perform), and data migrations. \n \n Once you've identified these areas, it's a whole massive challenge on how to  not  break these critical parts in the software, and still make fast and small changes. Like changing the engine while a car is running, there is no simple and one size fits all solution to this. \n One interesting approach GitHub are doing is  parallel code paths . In a nutshell, the idea is running both the old and the new code, and only switching to the new code one if it performs at least as good as the old one. \n Move Fast With Stability \n Coming back to Facebook - turns out they also had to go back on the whole \"Break Things\" part. In 2014  Mark Zuckeberg said  their new motto is \"Move Fast With Stable Infra\": \n \n What we realized over time is that it wasn't helping us to move faster because we had to slow down to fix these bugs and it wasn't improving our speed. \n \n What this means is more automated tests, better monitoring and other infrastructure to help prevent and catch bugs as early as possible. I have to agree as this being one of the best ways to go about enabling to move fast. \n I would go as far as calling this  infrastructure debt  - early on, as a startup, it's usually okay to have more of it. But once you have more users, if you don't want to upset them with bugs a lot of the time, then perhaps you should start to change your mentality to something similar. \n Be Aware of What You Break \n Identifying what not to break and moving fast with stability are all good directions to take. But let's not forget about something basic: if you don't know it's broken -  You Ain't Gonna Fix It  (YAGFI*). \n Whatever software you ship do make sure you can  detect when your software breaks . Log errors on the server, send crash reports on apps, collect timeouts on web apps. These are pretty basic and most engineers I know do these from day zero. \n What many people don't do, but should, are two things. First, they don't  alert the team  when a part of the system breaks, that cannot break. The whole point of identifying those critical parts of your software is that you drop everything when something goes wrong there, fix it, and learn from it. \n The other, just as important thing few products do well is  make it easy for users to report bugs . How easy is it for people to send you bug reports on your website, app or service? For most products it's really difficult. If your product is one of these, consider using or replicating something like  Usersnap  or  Zendesk . And you should take user reported bugs seriously. A complaint of someone not being able to make a payment should be treated the same way as your payment server returning a  500  response. \n Move Fast and Be Smart About It \n I remember many years ago when the code I wrote took 6-12 months to ship out. The projects I work on these days is usually no more than a week for iOS and as little as hours on the web. \n More and more companies are proving that it is possible to move fast without sacrificing much quality.It is time for us engineers to step up to this challenge and  find ways of moving fast and  not  breaking things . \n *YAGFI - this could very well be the opposite of  YAGNI . \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/aws-azure-and-gcp-regional-outages/", "title": "Handling a Regional Outage: Comparing the Response From AWS, Azure and GCP", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover three out of seven topics from today‚Äôs subscriber-only issue  Three Cloud Providers, Three Outages: Three Different Responses . To get full issues twice a week,  subscribe here . It‚Äôs rare that all three major cloud providers suffer regional outages, but that‚Äôs exactly what happened between April and July: 25 April 2023: GCP . A Google Cloud region (europe-west-9) went offline for about a day, and a zone was offline for two weeks (europe-west-9-a.) ( incident details ).  We did a deepdive into this incident in  What is going on at Google Cloud? 13 June 2023: AWS.  The largest AWS region (us-east-1) degraded heavily for 3 hours, impacting 104 AWS services. A joke says that when us-east-1 sneezes the whole world feels it, and this was true: Fortnite matchmaking stopped working, McDonalds and Burger King food orders via apps couldn‚Äôt be made, and customers of services like Slack, Vercel, Zapier and  many more  all felt the impact. ( incident details ).  We did a deepdive into this incident earlier in  AWS‚Äôs us-east-1 outage . 5 July 2023: Azure . A region (West Europe) partially went down for about 8 hours due to a major storm in the Netherlands. Customers of Confluent, CloudAmp, and several other vendors running services out of this region suffered disruption. ( incident details ).  We touched on this outage in  The Scoop #55: how can a storm damage fiber cables? A regional outage is rare for any cloud provider because regions are built to be resilient. The fact each major cloud provider suffered one allows us to compare their responses, and take some learnings about best practices. We‚Äôll also learn how this article contributed to AWS publishing its first public postmortem in two years! Today, we cover: 1. Communicating during the incident 2. Preliminary incident details 3. Incident postmortem and retrospective 3.1 Azure‚Äôs standout postmortem and retrospective 3.2 Google Cloud‚Äôs detailed incident review 3.3 Silence of AWS (until this article was about to publish) 1. Communicating during the incident How did the cloud providers communicate during the incidents? A summary: How each cloud provider communicated during the incident, and how easy incident notes are to find after an outage is resolved Google Cloud  is the only cloud provider that preserved the incident communication log  on the incident page , so we can see which updates occurred and when. I like that every status update followed this template: ‚ÄúSummary: {short summary} Description: {more details, based on what is known} {When the next update can be expected} Diagnosis: {summary if this is known} Workaround: {possible workaround for customers}‚Äù The incident at Google Cloud was a particularly nasty one; flames spread through a data center hosting the europe-west-9-a zone, and also some clusters from the europe-west-9-c zone. The incident caused the entire europe-west-9 region to be inaccessible for around 14 hours. There was little to tell customers beyond that they needed to fail over to other regions. Google Cloud posted regular updates sharing what they could, such as this, four hours into the incident: ‚ÄúSummary: We are investigating an issue affecting multiple Cloud services in the europe-west9-a zone Description: Water intrusion in europe-west9-a led to an emergency shutdown of some hardware in that zone. There is no current ETA for recovery of operations in europe-west9-a, but it is expected to be an extended outage. Customers are advised to fail over to other zones if they are impacted. We will provide an update by Wednesday, 2023-04-26 00:30 US/Pacific with current details. We apologize to all who are affected by the disruption. Diagnosis: Customers may be unable to access Cloud resources in europe-west9-a Workaround: Customers can fail over to other zones.‚Äù After the first few hours, updates became pretty much copy-paste and uninformative. However, GCP kept providing them, and was clear about when the next update was due.¬† While I appreciate continuous updates, these were unnecessarily verbose and robotic in tone; as if someone was resending the same template every 30 minutes. It was also hard to tell when an update contained new information. Despite that, it‚Äôs better to send updates and make them visible after an incident, than to not send them, or remove them post-incident. AWS  did the best job of sharing concise, clear and frequent-enough updates among all the cloud providers. Here are the updates from the first hour of the incident: ‚Äú[5 June 2023] 12:08 PM PDT  We are investigating increased error rates and latencies in the US-EAST-1 Region. 12:19 PM PDT  AWS Lambda function invocation is experiencing elevated error rates. We are working to identify the root cause of this issue. 12:26 PM PDT  We have identified the root cause of the elevated errors invoking AWS Lambda functions, and are actively working to resolve this issue. 12:36 PM PDT  We are continuing to experience increased error rates and latencies for multiple AWS Services in the US-EAST-1 Region. We have identified the root cause as an issue with AWS Lambda, and are actively working toward resolution. For customers attempting to access the AWS Management Console, we recommend using a region-specific endpoint (such as: https://us-west-2.console.aws.amazon.com). We are actively working on full mitigation and will continue to provide regular updates. 1:14 PM PDT  We are continuing to work to resolve the error rates invoking Lambda functions. We're also observing elevated errors obtaining temporary credentials from the AWS Security Token Service, and are working in parallel to resolve these errors. 1:38 PM PDT  We are beginning to see an improvement in the Lambda function error rates. We are continuing to work towards full recovery.‚Äù Ninety minutes into the incident, an update provided a summary of progress: ‚Äú1:48 PM PDT  Beginning at 11:49 AM PDT, customers began experiencing errors and latencies with multiple AWS services in the US-EAST-1 Region. Our engineering teams were immediately engaged and began investigating. We quickly narrowed down the root cause to be an issue with a subsystem responsible for capacity management for AWS Lambda, which caused errors directly for customers (including through API Gateway) and indirectly through the use by other AWS services. We have associated other services that are impacted by this issue to this post on the Health Dashboard. Additionally, customers may experience authentication or sign-in errors when using the AWS Management Console, or authenticating through Cognito or IAM STS. Customers may also experience intermittent issues when attempting to call or initiate a chat to AWS Support. We are now observing sustained recovery of the Lambda invoke error rates, and recovery of other affected AWS services. We are continuing to monitor closely as we work towards full recovery across all services.‚Äù And an update inside the final hour and a half of the outage: ‚Äú2:00 PM PDT  Many AWS services are now fully recovered and marked Resolved on this event. We are continuing to work to fully recover all services. 2:29 PM PDT  Lambda synchronous invocation APIs have recovered. We are still working on processing the backlog of asynchronous Lambda invocations that accumulated during the event, including invocations from other AWS services (such as SQS and EventBridge). Lambda is working to process these messages during the next few hours and during this time, we expect to see continued delays in the execution of asynchronous invocations. 2:49 PM PDT  We are working to accelerate the rate at which Lambda asynchronous invocations are processed, and now estimate that the queue will be fully processed over the next hour. We expect that all queued invocations will be executed.‚Äù Azure  is the only cloud provider whose updates from during the incident cannot be viewed after it was resolved. I tracked this incident at the time and there were regular updates. However, today there is no paper trail to see their contents.¬† There is plenty to like about how Azure handles public communications, but it is the only major cloud provider that makes incident notes inaccessible to public view after an outage is resolved. 2. Preliminary incident details With any incident, mitigation comes first. An investigation starts after everything is back to normal and customers can use a service as normal. This investigation can be time consuming, so it‚Äôs hard to tell customers exactly when to expect more details. However, in these cases we aren‚Äôt talking about a small engineering team with a few users; but the largest cloud providers in the world upon whom tens of thousands of businesses rely. And these businesses expect some full details when a full investigation is complete. Here‚Äôs how the providers compared: How the cloud providers did in making preliminary incident reviews public AWS  was extremely fast in providing a summary of the incident, and did so in just 5 minutes (!!) after the incident was mitigated. Below is the update added to the status page: ‚Äã‚Äã3:42 PM PDT  Between 11:49 AM PDT and 3:37 PM PDT, we experienced increased error rates and latencies for multiple AWS Services in the US-EAST-1 Region. Our engineering teams were immediately engaged and began investigating. We quickly narrowed down the root cause to be an issue with a subsystem responsible for capacity management for AWS Lambda, which caused errors directly for customers (including through API Gateway) and indirectly through the use of other AWS services. Additionally, customers may have experienced authentication or sign-in errors when using the AWS Management Console, or authenticating through Cognito or IAM STS. Customers may also have experienced issues when attempting to initiate a Call or Chat to AWS Support. As of 2:47 PM PDT, the issue initiating calls and chats to AWS Support was resolved. By 1:41 PM PDT, the underlying issue with the subsystem responsible for AWS Lambda was resolved. At that time, we began processing the backlog of asynchronous Lambda invocations that accumulated during the event, including invocations from other AWS services. As of 3:37 PM PDT, the backlog was fully processed. The issue has been resolved and all AWS Services are operating normally.‚Äù Call me amazed. Credit where it is due, this communication was fast and on point. Unfortunately, it was also almost the last time AWS communicated anything publicly about this outage. Google Cloud posted a preliminary incident review 14 days after the regional outage was resolved, at the time when the europe-west-9-a zone was still down. The fact that the zonal outage lasted 14 days makes it a little tricky to judge whether Google Cloud posted the preliminary report one day after the  full  outage was resolved, or 14 days after the  regional  outage was mitigated. I am leaving the 14 days here, because a regional outage is far wider-reaching than a zonal outage, and Google did leave customers who were dependent on the europe-west-9 region ‚Äì but not the europe-west-9-a zone ‚Äì waiting two weeks for preliminary details. Azure  is the only cloud provider that publishes timelines on preliminary PIRs (production incident reviews) ‚Äì and for full incident reviews: ‚ÄúWe endeavor to publish a ‚ÄòPreliminary‚Äô PIR within 3 days of incident mitigation, to share what we know so far. After our internal retrospective is completed (generally within 14 days) we will publish a ‚ÄòFinal‚Äô PIR with additional details/learnings.‚Äù In this case, I remember Azure did publish such a review, and it was within the 3-day timeframe. However, after the final review was published the preliminary review was no longer publicly available. 3. Incident postmortem and retrospective Until this post, the 3 cloud providers did comparably well at handling their incidents. Post-incident is where things diverged significantly: How the providers handled the final post-incident review 3.1 Azure‚Äôs standout postmortem and retrospective On 5 July 2023, one of the worst storms to ever hit the Netherlands struck, which I can attest to, first-hand. In The Scoop #55 I  shared a photo  of a tree uprooted and felled by the storm winds, just a few blocks from my house. I wrote that such an event could tear cables. Well, it turns out this is exactly what happened in Azure‚Äôs case; the storm uprooted a tree which yanked a data center fiber path out from under the ground: The Azure fiber paths that were cut, thanks to a massive storm in the Netherlands. Image source:  Microsoft . The  full production incident review  was published within two weeks of mitigation, and contained these sections: ‚ÄúWhat happened?‚Äù ‚ÄúWhat went wrong and why?‚Äú ‚ÄúHow did we respond?‚Äù ‚ÄúHow are we making incidents like this less likely or less impactful?‚Äú ‚ÄúHow can customers make incidents like this less impactful?‚Äù The storm severed a cable which caused 25% of network links between two West Europe data centers to become unavailable. The problem was that network capacity was already above target utilization ‚Äì and packets started to drop as a result of the capacity loss. Azure responded by starting to rebalance traffic in its network, and sent technicians to repair the cable. Cable restoration took longer thanks to the extreme weather, and functionality was restored thanks to rebalancing the network. Azure was the only provider to share dates alongside not-yet-completed action items.  Not only was Azure the fastest of all providers to publish their final postmortem: but it is the only cloud provider to do this with dates as ETAs: ‚ÄúHow are we making incidents like this less likely or less impactful? - We have repaired the impacted networking links, in partnership with our dark fiber provider in the Netherlands. (Completed) - Within 24 hours of the incident being mitigated we brought additional capacity online, on the impacted network path. (Completed) - Within a week of the incident, we are 90% complete with our capacity augments that will double capacity in our West Europe region to bring utilization within our design targets. (Estimated completion: July 2023) - As committed in a previous Post Incident Review (PIR), we are working towards auto-declaring regional incidents to ensure customers get notified more quickly (Estimated completion: August 2023).‚Äù Now this is what I call self-imposed accountability! Azure took the incident review further than other cloud providers, by holding a post-incident video discussion.  This discussion is like a video retrospective, and Azure describes it like this: ‚ÄúIn addition to providing a written post-incident review after major outages, we also now host these retrospective conversations. You‚Äôre about to watch a recording of a livestream, where we invited impacted customers through Azure Service Health to join our panel of experts in a live Q&A.‚Äù The video discussion is 23 minutes long, and  well worth a watch  for anyone interested in reliability or networking: Azure‚Äôs incident retrospective video is a conversation that includes Microsoft‚Äôs learnings, and guidance for customers on how to improve reliability. Source:  Microsoft This video retrospective featured several people: The hosts: David Steele (Senior Program Manager on the Post-Incident Transparency team) and Sami Kubba (Principal PM Manager and Communications Team Lead) Dave Moltz: Head of the Networking team Jitendra Padhye: Partner Software Engineering Manager Frank Rey: Partner Technical Program Manager The video retrospective was surprisingly useful, with a lot of information the PIR did not contain. For example: Azure sees about 40 fiber cut issues per day(!), meaning a fiber cut is ‚Äúbusiness as usual.‚Äù During the recording, a fiber cut was being handled in the UK which was invisible to customers. The Western Europe region was ‚Äúrunning hot‚Äù compared to other regions, in not having as much networking redundancy as Azure prefers. The team ended up adding enough capacity to create more resilience. My impression of Azure from a reliability perspective has greatly improved after watching this incident review.  It feels like the Azure team took the incident seriously, were transparent about what happened, and were very clear about what improvements they were making to avoid similar outages. The review also helped reveal the scale at which Azure operates, with more than three dozen fiber cuts occurring every day, globally! The review closed with these words: ‚ÄúAt the scale at which our [Azure‚Äôs] Cloud operates, incidents are inevitable. Just as Microsoft is always learning and improving, we hope our customers and partners can learn from these two, and provide a lot of reliability guidance through the  Azure Well-Architected Framework . (...) We‚Äôre really focused on being as transparent as possible and showing up as being accountable after these major incidents .‚Äù Azure not only talks the talk; it walks the walk. Outstanding incident transparency is a blueprint any vendor can follow ‚Äì if you want to go above and beyond on transparency and accountability, that is. 3.2 Google Cloud‚Äôs detailed incident review The good thing about Google Cloud is that it published a preliminary incident review, and followed up with a postmortem two months after the incident on 23 June, after the region went offline on 25 April. The bad thing is that these two reviews contradict one another: the preliminary postmortem makes clear that two zones operated out of one data center (!), but the final review omitted this rather significant detail. Even worse, Google Cloud did not address this contradiction, despite me asking them about it for about a month. In September, I covered the outage in depth in  The Pulse #61: What is Going on at Google Cloud? , writing: ‚ÄúIn Paris, Google Cloud seems to have partially operated two zones from the same data center. The fire that took the ‚Äúeurope-west9‚Äù region offline was caused by a water leak in the battery room at a Globalswitch data center, which is where one of Google Cloud's zones operates.¬† Google published a preliminary incident report two weeks after the incident, on 10 May. In this report they wrote: - A water leak caused a fire in a Paris data center, in the battery room. - The water leak initially impacted a portion of europe-west9-a; however,  the subsequent fire required all of europe-west9-a and a portion of europe-west9-c to be temporarily powered down  (...) Many regional services were affected while europe-west9-c was partially unavailable. It‚Äôs clear the fire was in the data center where the europe-west9-a zone was based. But why would a fire in europe-west9-a require the powering down of a portion of an independent data center? The obvious explanation is that some instances of europe-west9-c were operated in the same data center location as europe-west9-a operates from!¬† I asked Google if europe-west9-a and europe-west9-c are in the same building, at least partially. The company responded, but failed to answer the question. ‚Äù Ultimately, Google Cloud went through the process of providing status updates, then providing a preliminary postmortem, and then closing with a final incident review. However, in comparison with the other cloud providers: AWS did a better job with concise and informative status updates. Both Azure and AWS provided a preliminary incident report much faster than Google Cloud did. Azure had its final incident report ready in the 14 days Google took to publish a preliminary report. Azure was more up front in sharing the root cause of the outage, and changes they made for greater resilience. Google did a decent job with the root cause though. Google Cloud  did  provide the most detailed written post-incident analysis of all three providers.  It also addressed how one building could bring down a whole region, and what they were doing about it,  writing : ‚ÄúGoogle uses an internal version of regional Spanner as a back-end database to several Google Cloud services such as IAM and various control planes that manage our infrastructure and services for a region. The outage had a regional impact as this regional Spanner was not configured correctly across the three buildings in the region for it to maintain its quorum. Regional Spanner should have had one replica in each of the three buildings in the region. Instead, it had two of its three replicas in two different clusters in the building that was powered down. (...) We are currently conducting a detailed per-region audit (and conducting any required remediation if needed) of our internal regional Spanner allocations to confirm all regions fully meet Google Cloud expectations for fault isolation to prevent this issue in the future.‚Äù This incident is hard to separate from what looks like a deliberate design choice by Google to partially operate two zones out of one data center. This is the type of approach that would be impossible to fathom AWS doing because the company is clear that ‚Äútwo zones‚Äù always means two separate locations, far enough away from each other. So even if a data center goes up in flames ‚Äì as happened to Google ‚Äì the region is still operational. 3.3 Silence of AWS (until this article was about to publish) AWS did not follow up with any form of postmortem for more than four months after the incident. The company maintains a page  with postmortems , stating that the page contains incidents deemed significant. On average, there has been once postmortem published per year, and none since December 2021: AWS publishes surprisingly few postmortems compared to rival cloud providers We can easily compare this publishing cadence with other providers: No other cloud provider makes postmortems public as rarely as AWS does Looking at 2023 incidents for 2023: Google Cloud  published  more than 100 production incident reviews, and is the most granular of all providers in reporting incidents Azure  published  15 production incident reviews AWS  published  zero‚Ä¶ until 20 October As I was writing this article, it struck me as very odd that despite AWS‚Äôs outage having the largest customer impact and being felt across the globe, AWS was the only provider not publishing any form of postmortem. So I reached out to the company on 15 October ‚Äì more than 4 months after the outage of 4 June ‚Äì and asked if it would publish a postmortem.¬† I said I was writing this article which compares how cloud providers respond to regional outages, and also that out of GCP, Azure, and AWS, only they (AWS) had failed to publish a postmortem for a major outage. I also asked for a definition of what ‚Äúbroad and significant customer impact‚Äù means: as this is the definition AWS uses in deciding when to publish a public postmortem. On 19 October, a spokesperson from AWS responded, and asked for a bit more time. On 20 October, this person responded by  linking to a new postmortem . This was the first public postmortem from AWS in two years! It is pretty clear AWS published this postmortem because of the press inquiry. While I‚Äôm glad about this, it makes me wonder: why does it take someone writing an article about how AWS avoids publishing postmortems after major incidents, for AWS to finally publish a postmortem? AWS‚Äôs public postmortem lacks some key details about what happened.  In the face of AWS‚Äôs absence of public communication on the outage at the time, I did some digging to find out what caused such a large region to go down. From June‚Äôs  The Scoop #52: AWS‚Äôs us-east-outage : ‚ÄúWhile no postmortem yet published, I talked with current Amazon engineers who said it was a load test for AWS Lambda which caused the incident: - The load test seems to have overloaded AWS Lambda. Many services depend on Lambda and started to degrade - When the engineering team figured out the likely cause, they killed the load test and added more capacity to Lambda. The test was killed about an hour into the outage - The next 2-3 hours of the outage were spent recovering degraded services. Some needed to be restarted, and the recovery of others was slower than expected‚Äù The postmortem AWS  shared  gives more details on how Lambda works, and why it couldn‚Äôt handle more capacity. However, the postmortem omits mentioning the increase in load was due to a load test, and that mitigation involved stopping the load test. It‚Äôs actually a great sign that AWS regularly does load testing; but within AWS there were plenty of questions about why it took so long to notice that capacity was pushed overboard by the test, and why it took so long to stop the test. The public postmortem reads as abstract, and I don‚Äôt get the feeling that transparency was a goal of this document. These were three out of the seven topics covered in the subscriber-only article  Three Cloud Providers, Three Outages: Three Different Responses . The full edition additionally covers: What is a cloud region and how does it differ between cloud providers? A recap. Why is AWS so opaque to the public? Why is Azure stepping up in transparency and accountability? Lessons for engineering teams from the three cloud providers Read the full article here \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/things-ive-learned-transitioning-from-engineer-to-engineering-manager/", "title": "Things I've learned transitioning from engineer to engineering manager", "content": "\n             A couple of months ago I moved from a senior engineer position to being an engineering manager on a medium sized team. I've found this role change come with a steep learning curve: many things that mattered when I was an individual contributor - like writing good code and teaching others engineering best practices - suddenly became less important. Other things that I paid less attention to the past - like time management strategies and learning about my new role - became things I need to focus on much more. In this post I'm summarizing what worked well for me during the early phase of this transition. See a video on how I moved into engineering management here:  How I became an engineering manager . Mentors matter - especially within the company When I started my first job I was convinced I had software engineering figured out. This was due having finished my masters in the upper half of the class and having built a few small and moderately successful projects on the side. Turns out, despite these I was as junior as any fresh grad when it came to engineering in the real world. It would take me years of hard work to get from this junior level to something more senior. Looking back, it is also clear how mentors helped me grow much faster professionally - most of whom I've met by chance on the way. Now that I was starting on a new position, I wasn't kidding myself that just because I have some tech lead experience, read some books on management and know how to code, I have any of engineering management figured out. What I did know from experience though is that mentors do make a big difference. I wanted to make sure mentoring won't happen by accident. This was the first time I was looking in a targeted way for a mentor. As engineering management expectations can be different from company to company and I work at a larger one, I was keen to find a mentor within the company to start with. However, I didn't have a clear idea on how exactly this works. I asked for help from my management chain, who in return connected me with people I both look up to and can learn tons from - as well as had the bandwidth to take on another mentee. So far having a mentor - and one who is inside the company, but outside my management chain - has felt very helpful. Because my mentor is further away from what I do, it feels I get independent advice, from a birds eye view. However, given my mentor is within the company, they also give me a lot of insight and ideas that are specific to the environment I'm working in. It's hard to see the effect of mentorship the short term, but it already gives me additional confidence to have someone I trust provide me with regular and candid feedback. Understand the most important priorities of your new role I had a solid understanding of my previous individual contributor role. But what really is an engineering manager? Are they a tech lead who also do 1:1s and performance reviews? Are they expected to coach and / or mentor team members? Should they still code? Are they responsible for only the team executing well, or also in setting the direction or strategy? These were just a few questions I had. I thought plenty of these as well as talked with my manager, mentor and other managers about how they see their role. I don't think there are universal answers and the expectations will also vary from company to company. However, the one company agonistic priority I've learned - that will is different to that of when I was in an individual competitor - is this: As an engineering manager, you'll need to put company first, team second and your team members third. And I would also add: yourself as fourth. As an individual contributor I was used to this being the other way around: I would do my job first, then help my teammates whenever I could. Only after getting these out of the way would I look for doing things that would further help the team. I didn't have to think too much of what‚Äôs good for the company - I usually assumed that whatever I‚Äôm doing is what the business needs. As an engineering manager if I mix up the order I could easily find myself with an amazing team building something that doesn't move the needle any way. Or worse, with a group of empowered individuals each going off their own way, and not producing much valuable as a whole. Decide on a time and task management strategy Early on in my transition, I asked another manager what practical advice they would have to start doing day one. They told me something practical indeed: Figure out your time management strategy. Up to that point, I hadn't thought much of this. As an individual contributor, I wouldn't worry too much about time management: I would say no to some meetings I didn't have to go to and try to be on the  maker schedule  most of the time. I also did not have too many meetings. However, as a manager, I do have far more meetings than before. Also, I am the one actually scheduling many of these meetings - the most important ones being the 1:1s, team meetings and catching up with key stakeholders. I do want to make conscious decisions on structuring these and when to leave time for uninterrupted chunks. And of course, I also want to take into account how much these meetings disrupt my team's time and make sure to minimize that. Same goes for task management. As an engineer, I was able to do almost all of my tasks any given week. As a manager, I have far more things to pay attention to: both things I need to do, and more frequently things that others need to do or need input from me. Keeping all of this in my head doesn't work well for me - so I've started to write things down. I'm still experimenting on what setup works best for time and task management. I do, however, consider my and other's scheduling preferences more consciously for meetings. For tasks, I've started to experiment with simple GTD strategies that already work better than my original ad hoc approach did. Set short term goals One of my roles as engineering manager is to help engineers set goals that grow them professionally. So I took a good deal of time understanding priorities and goals of people on my team. I did this first by asking people to do a self-assessment of where they are compared to the next level in the corporate career leader. Internally we have well defined job levels and expectations that made this easier to do. I also talked with people about where they would like to grow, things they like and dislike doing at work and in where see themselves on the longer term, beyond their current role or company. Over a few 1:1s I got a sense of their short and long term ambitions and then asked them to put some goals in place. We then talked through these. An important thing I told people is how they themselves own their career progression - they should be coming up with the goals as well as executing on it. As a manager, my role is to help and support with this process - but they will own driving it. I went through this process with everyone on my team. The only person I forgot to do it - ironic enough - was myself. It took my manager to remind me that I also should come up with short and longer term goals. So I put my of goals together and worked with my manager and mentor to refine these, prioritize them and cut them down to something that's more achievable. Having these goals written down and going through them regularly help me focused on doing the important things and deprioritizing things that are not on the top of my list. Finally - take time to read, experiment, learn and reflect One piece of advice that stuck with me was from  the 90 day plan article  on FirstRound. It's this: If you‚Äôve decided to transition from engineer to technical manager, your first month is about committing to own your education. I'd argue replacing \"first month\" with \"first year and beyond\". Going back to the analogy with how I started software engineering: I just kept learning wherever I could - from others code, from books (see  my reading list ), via conferences and so on - and I kept getting better over time. Similarly now I've asked for book recommendations and started to read some of them, signed up for  The Lead Developer Conference  and decided to reflect on my experiences on various places like this blog. I will close with this: learning is only one part of the advice. The other part is experimenting with things that make sense in the given situation and later reflecting on what worked and what did not. So far, transitioning to the engineering manager track has been a really humbling, interesting and exciting journey. Looking forward to learning more and sharing these learnings along the way. Sidenotes  I since then wrote a post, looking back on the  the key things that helped me move into engineering management from being a developer . For this original post, I was inspired to write it after my colleague shared his  learnings from six months as a first-time engineering manager . If you enjoyed this article, I suggest you read both of these as well. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/things-that-helped-me-successfully-move-into-engineering-management/", "title": "Seven things that helped me move into engineering management", "content": "\n             I have moved from being a tech lead to engineering manager  close to a year ago . I wanted to share some of the things that over prepared me for a softer landing over the years, when making this leap from individual contributor to management. It is not the easiest change, after all: (Photo credit from the  Good Manager, True Leader  presentation by  Pawel Brodzinski ) 1. Maximize your learning: move projects and teams often I've worked at six companies on eight teams with nine different managers the last ten years. A lot of this happened by chance - for example, two of my company moves were just due to me relocating. At the same time, there was a theme of me getting bored of working on the same thing after a year. When this happened, I either changed projects or teams within the company. When there were no good opportunities, I changed companies for a new challenge. Working with many teams and people have given me a breadth of experience . I worked at companies big and small, growing and stalling ones, agile and not-so-agile ones. I got experience building projects used by few customers and ones by millions, shipping several successful projects and failing a few. Having this kind of diverse experience helps me relate to challenges I face day to day better. No two situations are ever the same. Still, I find it easier to make good decisions when I have experienced a somewhat similar challenge before. 2. Master many technologies, languages, and stacks In my ten years an engineer I worked on thick clients, web, backend and mobile stacks. I've used a dozen of languages and mastered a few of them. All of this happened by a combination of learning at work, side projects and teaching. Work has been the main source of my professional learning. I aimed to master the languages used on projects here both by finding mentors in more senior engineers, as well as reading books to become more of an expert on them. After I became hands on enough with a language or stack, I would start to explore another language, pair with engineers working on other stacks and volunteer for projects using different technologies. I've found side projects a great way to compliment the skills I built at work. For example, I've never done professional mobile development, but when Windows Phone was announced, I built several apps for this platform. These apps were surprisingly well-received, which led me building a  Python backend  and give  several conference talks . All of this was new, exciting and educational. Teaching is something that helped me master technologies even better. Early on in my career, I started to participate in team knowledge sharing sessions, followed by attending local meetups and also recording a  three-hour in-depth training . These activities pushed me out of my comfort zone and forced me to deepen my knowledge. Having a solid engineering and technology background helped me move into a management role with greater confidence , better understanding what and why backend, mobile or web engineers on my team are doing. 3. Observe and learn how your manager works and leads I had a  lot  of different managers, having worked on many teams. Some were great, some were neutral and some I disliked. A couple years into my career I started to observe and try to understand what and why they do. I started making a mental list of good and bad things I saw.  For the bad things, I decided that if I was ever to be a manager, I would not repeat those. An example of a bad thing I experienced was my manager delegating something to me, then stepping in and taking it back as I was really close to fully finishing. All without much explanation. The memory of being angry, frustrated and feeling not trusted is still vivid and something that made me want to not repeat with people on my team. 4. Read and learn about leadership, project and people management Well before I became a team lead or manager, I already started to read a lot about project management, managing teams and leadership principles. I always thought leading and managing are hard and found it interesting to learn more.  There are countless amazing books on this topic , as well as other online or offline resources. A few ones I would especially recommend are these. The Lean Startup  by Eric Riles. On many of the projects I work on I use some of the principles discussed in this book. The Managers Path  by Camille Fournier. Hands-on advice for all parts of the management ladder. Turn the Ship Around  by L. David Marquet. Turning a top-down run organization like the military into an empowering place, run by the people. And you get to read about what it's like to run a nuclear submarine! The Hard Thing about Hard Things  by Ben Horowitz. An entertaining and engaging read on how a company went from zero success and how for leaders it can get pretty lonely. 5. Step up for opportunities to teach, help the team and lead The more experience I gained in on a team or tech stack, the more opportunities I had to help others. Pairing and mentoring were things I started to do without thinking much about it. When someone on my team was stuck and I could help, I would sit with them or do some extra sessions to help. Whenever new opportunities for projects came up, I often volunteered. As I started to lead efforts, I grew interested in project management, read more about it and proposed improvements at a team level. As I grew more experienced, I started to suggest directly to my manager on how I could help the team. Doing this initially meant me  moving out of my comfort zone to put myself and my suggestions forward . The more experience I had under my belt, the easier this got. For example, when I was at Skyscanner, I noticed how we had a very ad-hoc way of dealing with incoming bugs. I proposed to use a new process that I had previously seen work well at Skype. No one objected, so I went ahead with a simple bug backlog and grooming process. This change worked well, the team got more productive and I got positive feedback on taking initiative. 6. Start owning your career and seek out opportunities for the next level I did not think much of where I wanted my career to go for many years. I just went with the flow: learning what I could, getting feedback and acting on it so I would keep growing professionally. I didn't even fully admit to myself what I wanted to do next - like wanting play a lead role in the next, upcoming project. Still, I felt disappointment when someone else got that opportunity and felt I couldn't talk about this with my manager, as I never brought it up before. I now regularly stop to think through where I am with my career, where I would like to go and talk my plans through with my manager  and management chain. Doing this forces me to be honest with myself and results in productive conversations on the reality of where I'd like to go next, a reality check on those goals and actions I can take to get there. This is also how I moved into engineering management at Uber. After tech leading a team for a few months, I told my manager that I am interested in doing more of a management role, should there be an opportunity. We had a frank discussion on whether this was realistic and what options there were at the time within the team and company.  As with many internal moves, moving into management not only requires the drive and some level of experience, but also an opportunity to do so  - and though my manager was supportive, unfortunately there were no opportunities when we had this conversation. Months later, when there was an opening, my manager had my back, suggested me as someone worth taking a risk on, and after getting a signoff from upper management, we kicked off the process to transition. Without sharing my goal of moving into management, a supportive manager, and an opening in engineering management you very likely won't be able to make this move. So secure the first two, and be patient (and realistic) on when an opportunity to move comes along. 7. Invite feedback and be receptive to it Transitioning to managing people and serving a team after years of writing code is a  hard  change. One thing that helped me get more ready is asking people for feedback. I did this whenever I had a conflict with someone, when I mentored someone or when I worked with a team in some way. I  especially  valued critical or negative feedback - not all people will go the extra mile to tell you flaws others know about to you. I digested this feedback and did my best to act on it. Asking for frequent feedback made me a more aware of how others see me and motivated me to change for the better.  I became more self-aware of my strengths and weaknesses. As the biggest impact, it pointed out some of my blind spots, bad habits and areas that I needed (and still need) to work on that are especially important when managing. Opportunities are more plentiful in high-growth companies When I graduated, I had no idea that I want to become a software engineer, even less being an engineering manager. Software engineering is this wonderful field packed with things to learn, problems to solve and paths that can be very different for any two people. The longer one is in this field, the more likely leadership and management opportunities naturally come up. All things being equal,  opportunities to take on more responsibility, to lead and to move into management  do  happen more frequently at high-growth environments . It's also a lot easier to observe and learn from how leaders in places like this. I  left Skype to join Skyscanner  as the third full-time employee in London, in the middle of explosive growth. The next hire was our SVP engineering,  Bryan , whom I worked side by side to grow the office and teams. When I left for Uber a year and a half later, the London office grew over 10x and I departed with important lessons on growth and leadership, all experienced first hand. If you're looking to move into an EM role, you might also find a few  Ask the EM articles  helpful: Ask the EM: how Can I Prepare to Eventually Move into Engineering Management? Ask the EM: I Feel Stuck as a Senior/Staff Engineer, Wanting to Move Into an EM Role  \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/distributed-architecture-concepts-i-have-learned-while-building-payments-systems/", "title": "Distributed architecture concepts I learned while building a large payments system", "content": "\n             When building a large scale, highly available and distributed system, what architecture concepts do you need to use, in practice? In this post, I am summarizing ones I have found essential to learn and apply when building the payments system that powers Uber. This is a system with a load of up to thousands of requests per second, where critical payments functionality needs to work correctly, even if parts of the system are down. As background: I joined Uber two years ago as a mobile software engineer with some backend experience. I ended up building the payments functionality in the app - and  rewriting the app  on the way. Afterwards, I ended up  moving into engineering management , heading up the team itself. This meant getting exposed to more backend, as my team is responsible for many of the backend systems that enable payments. Before working at Uber, I had little to no distributed systems experience.  My background is a traditional computer science degree and a decade of full stack software development. However, while I was able to draw boxes and talk tradeoffs, I did not have much understanding or appreciation of distributed concepts like consistency, availability or idempotency. Is this list that I'll go over complete? Probably not. But it's the stuff that would have made my life easier, had I known them earlier. So let's dive into things like SLAs, consistency, data durability, message persistence, idempotency and some other things I needed to learn on the job. [Update] Read also the follow-up post for this article:  Operating a large, distributed system in a reliable way  and I also recommend the book  Designing Data-Intensive Applications  for more reading. SLA With large systems, that process millions of events per day, some things are bound to go wrong. Before diving into planning a system, I have found the most important thing to decide what a system that is \"healthy\" means. \"Healthy\" should be something that is  actually  measurable. The common way to measure \"healthy\" is with  SLAs : service level agreements. Some of the most common SLAs I have seen used are: Availability : the percentage of the time the service is operational. While it is tempting to want to have a system that has 100% availability, achieving this can be really difficult, as well as expensive. Even large and critical systems like the VISA card network, Gmail or internet providers don't have 100% availability - over years, they will be down for seconds, minutes or hours. For many systems, the four nines availability (99.99%, or about  50 minutes downtime  per year) is considered high availability. Just getting to this level is quite the work usually, to get to. Accuracy : is it ok for some of the data in the system to be inaccurate or lost? If so, what percentage is acceptable? For the payments sytems that I worked on, accuracy needed to be 100%, meaning no data was allowed to be lost. Capacity : what expected load should the system be able to support? This is usually expressed in requests per second. Latency : in what time should the system respond? What is the time that 95% of the requests and 99% of the requests should be served? Systems usually have a lot of noisy requests, hence the  p95 and p99 latencies  are more practical usage in the real world. Why did SLAs matter when building a large payments system?  We put together a new system, replacing an existing one. To make sure we build the right thing, a system that is \"better\" than it's predecessor, we used SLAs to define expectations. Availability was one of our top requirements. Once defining the target, we needed to consider the tradeoffs in the architecture to be able to meet this. Horizontal vs vertical scaling Assuming the business using a newly built system grows, the load will only increase. At some point, the existing setup will not be able to support more load and more capacity needs to be added. The two most common scaling strategies are vertical or horizontal scaling. Horizontal scaling is about adding more machines (or nodes) to the system, to increase capacity. Horizontal scaling is the most popular way to scale distributed systems, especially, as adding (virtual) machines to a cluster is often as easy as a click of a button. Vertical scaling is basically \"buying a bigger/stronger machine\" - either a (virtual) machine with more cores, more processing, more memory. With distributed systems, vertically scaling is usually less popular as it can be more costly than scaling horizontally. However, some major sites, like Stack Overflow has  successfully scaled vertically  to meet demand. Why did the scaling strategy matter when building a large payments system?  We decided early on that we would build a system that scales horizontally. While vertical scaling is possible in some cases, our payments system was already at the projected load that we were pessimistic if a single, super-expensive mainframe could even handle it today, not to mention in the future. We also had engineers on our team who have worked at large payment providers where they tried - and failed - to scale vertically on the largest machines that money could buy at their time. Consistency Availability of any system is important. Distributed systems are often built on top of machines that have lower availability. Let's say our goal is to build a system with a 99.999% availability (being down about 5 minutes/year). We are using machines/nodes that have, on average, 99.9% availability (they are down about 8 hours/year). A straightforward way to get our availability number is to add a bunch of these machines/nodes into a cluster. Even if some of the nodes are down, others will be up and the overall availability of the system will be higher, than the availability of the individual components. Consistency is a key concern in highly available systems. A system is consistent if all nodes see and return the same data, at the same time. Going back to the previous model, where we added a bunch of nodes to achieve higher availability, ensuring that the system stays consistent is not so trivial. To make sure that each node has the same information, they need to send messages to each other, to keep themselves in sync. However, messages sent to each other can fail to deliver, they can get lost and some of the nodes might be unavailable. Consistency is a concept that I spent the most time understanding and appreciating. There are  several consistency models , the most common one used in distributed systems being  strong consistency, weak consistency  and  eventual consistency . The Hackernoon article on  eventual vs strong consistency  gives a nice and practical overview of what the tradeoffs between these models are. Typically, the weaker the consistency required, the faster the system can be, but the more likely it will return not the latest set of data. Why did consistency matter when building a large payments system?  Data in the system needed to be consistent. But just how consistent? For some parts of the system, only strongly consistent data would do. For example, knowing if a payment has been initiated is something that needed to be stored in a strongly consistent way. For other parts, that were less mission-critical, eventual consistency is something that was considered as a reasonable tradeoff. A good example is listing recent transactions: these could be implemented with eventual consistency (meaning, the latest transaction might only show up in parts of the system after a while - in return, the operation will be return with lower latency or be less resource intensive). Data Durability Durability  means that once data is successfully added to a data store, it will be available going forward. This will be the case even if nodes in the system go offline, crash or have their data corrupted. Different distributed databases have different levels of durability. Some support machine/node level durability, some do this at cluster level and some just don't provide it out of the box. Some form of replication is usually used to increase durability - if the data is stored on multiple nodes, if one or more nodes go down, the data will still be available.  Here is a good article  on why achieving durability in distributed systems can be challenging. Why did data durability matter when building a payments system?  For many parts of the system, no data could be lost, given this being something critical, like payments. The distributed data stores we built on needed to support cluster level data durability - so even if instances would crash, completed transactions would persist. These days, most distributed data storage services, like Cassandra, MongoDB, HDFS or Dynamodb all support durability at various levels and can be all configured to provide cluster level durability. Message Persistence and Durability Nodes in distributed systems perform computations, store data and send messages to each other. A key characteristic of sending messages is how reliably these messages arrive. For mission-critical systems, there is often a need for having zero messages being lost. For distributed systems, messaging is usually done by some distributed messaging service, such as RabbitMQ, Kafka or others. These messaging services can support (or be configured to support) different levels of reliability in delivering messages. Message persistence means that when some failure happens on a node that is processing the message, the message will still be there to process after the failure is resolved. Message durability is usually used at  message queue  level. With a durable message queue, if the queue (or node) goes offline when the message is sent, it will still get the message when it comes back online. An good article to read more on this topic is  this one . Why did message persistence and durability matter when building a large payments system?  We had messages that could not be afforded to be lost, such as the message that a person has initiated payment for their ride. This meant that the messaging system that we used needed to be lossless: every message needed to be delivered once. However, building a system that delivers each message  exactly  once or one that delivers  at least  once is different complexity. We decided to implement a durable messaging system with at least once delivery and chose a messaging bus, on top of which we would build this (we ended up going with Kafka, setting up a lossless cluster for this case). Idempotency With distributed systems, things can go wrong, such as connections could drop midway or requests can time out. Clients will often retry these requests. An idempotent system ensures that no matter, how many times a specific request is executed, the actual execution on this request only happens once. A good example is making a payment. If a client makes a request to pay, the request is successful, but the client times out, the client could retry this same request. With an idempotent system, the person paying would not get charged twice. With a non-idempotent system, they could. Designing for idempotent, distributed systems require some sort of distributed locking strategy. This is where some of the earlier distributed system concepts come into play. Let's say we intend to implement idempotency by having optimistic locking in place, to avoid concurrent updates. In order to have optimistic locking, the system needs to be strongly consistent - so that at the time of the operation, we can check if another operation has been initiated, using some sort of versioning. There are numerous ways to achieve idempotency, depending on the constraints of the system and the type of operation. Designing idempotent approaches is a nice challenge -  Ben Nadel writes about different strategies he has used , both with distributed locks or database constraints. When designing distributed systems, idempotency can be one of the easily overlooked parts. I have come across scenarios, where my team was burned by not ensuring correct idempotency for some key operations. Why did idempotency matter when building a large payments system?  Most importantly: to avoid double charges or double refunds. Given that our messaging system has at least once, lossless delivery, we need to assume that all messages might be delivered multiple times and systems need to ensure idempotency. We chose to handle this with versioning and optimistic locking, having the sytems that implement idempotent behaviour use a strongly consistent store as their data source. Sharding and Quorum Distributed systems often have to store a lot more data, than a single node can do so. So how does one go about storing a bunch of data on a certain number of machines? The most common technique is using  sharding . Data is horizontally partitioned using some sort of hash to assign to a partition. While many distributed databases implement sharding under the hood, sharding is an interesting area to learn more about, especially around  resharding . Foursquare had a 17 hour downtime in 2010 due to hitting a sharding edge case, where a  nice postmortem was shared  on the root causes. Many distributed systems have data or computations replicated across multiple nodes. In order to make sure that operations are performed in a consistent way, a voting based approach is defined, where a certain number of nodes needs to get the same result, for the operation to be successful. This is called the quorum. Why did quorum and sharding matter when building the payments system at Uber?  Both of these are basic concepts that are pretty commonly used. I personally came across this concept when looking into how we setup Cassandra replication. Cassandra (and other distributed systems)  use quorum  and local quorum to ensure consistency across clusters. As a funny side effect, on some of our meetings, when enough people are in the room, someone would ask: \"Can we start? Do we have a quorum?\" The Actor Model The usual vocabulary of describing programming practices - things like variables, interfaces, calling methods - all assume single machine systems. When talking about distributed systems, we need to use a different set of approach. A common way of describing these systems is following the  actor model , where we think about the code in terms of communication. This model is popular, as it matches the mental model that we would think of, for example, when describing how people communicate in an organization. Another, also popular way of describing distributed systems is  CSP - communicating sequential processes . The actor model is based on actors sending messages to each other and reacting to them. Each actor can do a limited set of things - create other actors, send messages to others or decide what to do with the next message. With a few simple rules, complex, distributed systems can be described well, which can also repair themselves, after an actor crashes. For a short overview, I recommend the article  The actor model in 10 minutes  by  Brian Storti . Many languages have implemented  actor libraries or frameworks . For example, at Uber, we use the  Akka toolkit  for some of our systems. Why did the actor model matter when building a large payments system?  We were building a system with many engineers, a lot of them having distributed experience. We decided to follow a standard distributed model over coming up with distributed concepts ourselves, potentially reinventing the wheel. Reactive Architecture When building large, distributed systems, the goal is usually to make them resilient, elastic and scalable. May this be a payments system or another, high load systems, the patterns in doing this can be similar. People in the industry have been discovering and sharing best practices that work well in these cases - and Reactive Architecture is a popular and widely used pattern in this space. To get started with Reactive Architecture, I suggest reading the  Reactive Manifesto  and watching  this 12-minute video  on the topic. Why did Reactive Architecture matter when building a large payments system?   Akka , the toolkit we used to build much of our new payments system was heavily influenced by reactive architecture. Many of our engineer's building this system were also familiar of reactive best practices. Following reactive principles - building a responsive, resilient, elastic and message-driven system, thus came quite naturally. Having a model to fall back on and check that progress is on the right track was something that I found helpful and I'll be using this model when building future systems as well. Closing I have been lucky enough to participate in the re-building a high-scale, distributed, mission-critical system: the one powering payments at Uber. By working in this environment, I picked up a lot of distributed concepts that I did not have to use previously. I've summarized these in the hope that others find this helpful to start or continue learning about distributed systems. This write-up has been strictly focused on the planning and architecting of these systems. There is a whole lot of things to be said about building, deploying and migrating between high-load systems as well as operating them reliably. But all of those are topics for another post:  Operating a large, distributed system in a reliable way . For those interested in learning more on distributed systems , I recommend the book  Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems . This is the most practical book I've found so far. It covers the different distributed concepts - both those that I've gone through and some more - together with real-world examples. The  Amazon Builder's Library  also has some more specific, in-depth topics on distributed systems. Note: read the  Russian translation  of this post, as well as the  Japanese translation . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/efficient-software-project-management-at-its-roots/", "title": "Efficient Software Project Management at its Roots", "content": "\n             After a decade of shipping software projects in various environments, I have started to notice patterns on projects that are more successful than others. The most surprising thing I'm seeing is how  actual, day to day project management methodology is not the most important predictor of project success . Instead, the things I observed making or break software projects are pretty universal and little to do with methodologies like Scrum, Kanban or Waterfall-style approaches. \n In this post, I'm summarizing the most important principles that I have seen make or break a project*. These are: \n \n Clarity  from the start \n Milestones  that are directional \n Transparency  on an ongoing basis \n Dependency and Risk Management  in a pragmatic way \n \n * needless to say, your mileage might vary. What worked for in my case at tech companies like Skype, Skyscanner, Uber might hold true less in other environments. \n Clarity from the Start \n Many projects I've seen go south were ones where stakeholders were not aligned. An example is where the legal team discovered a large liability - but only after the feature was built. Back to the drawing board. Or when Team A built a new set of APIs for Team B to use. When it was done, Team B took a hard look and requested so many changes that Team A had to practically redo their work, doubling the time to finish the project. \n I have seen few better time investments than ensuring clarity from the very start. A common tool I see used is via a  project kickoff with all stakeholders present  and  involved . By all stakeholders, I mean everyone who will be working on the project or will have some sort of input. So every designer and PM who does the spec, engineers who write code, data scientist, people who will help test, roll out, communicate or market the project. By involved, I mean not a meeting where the project lead talks and everyone else purely listens. \n Given this is an expensive meeting, the person leading the meeting typically prepares an overview about the background (\"why\"), goals (\"what\") suggested approach (\"how\") and end state. Showing off designs or other visuals is a great thing at this stage in order to get through to people who are more visual than textual types. \n \n The key for a successful kickoff meeting is the interactivity. \n \n After the brief, a good question to open things up for is \"Does everyone understand why we are doing this project, how we will get there and what your role will be to help? Raise your hand if the answer is \"no\" or \"maybe\" to any of these.\". It's a great sign when questions start pouring in. I've found it good practice to not kick off the project until all major questions and concerns are clarified. \n Milestones that are Directional \n Now that everyone knows what we are building, why and how, time to get started. However, another common trap I often see is the initial energy runs out soon after the start and the team starts to lose focus. In order to keep clarity throughout the project, as well as an ongoing sense of focus, milestones that help the team focus are something I've seen work exceptionally well. \n What is a good milestone? It's an outcome that can be verified and moves the project towards the end goal. It is ideally something that does not take too long to get to - ideally something that can be hit in a couple of weeks in an ideal world. \n Having good milestones in place means that the team can be honest with their progress.  With good milestones in place, it makes no difference whether the team uses story points, engineer-days or any other way to measure progress . Whether the milestone has been hit or not, and how long it took over original estimates is pretty black and white. Milestones also help the team focus. Teams can decide if they can or will swarm on hitting a milestone, before starting a new one or how they parallelize these. \n Transparency on an Ongoing Basis \n I have seen countless software projects slip, then slip again. In some ways, it is the nature of crafting software. When building something new, surprises will happen and some of those surprises will translate in delays. However, people are teams are often late to admit to stakeholders when they come across trouble that they cannot fully mitigate. \n A very simple tool I see help in creating this transparency is  having a regular, no-BS update on where the team  really  is . For distributed teams, an email to all internal stakeholders can work well. For teams onsite, a team check-in with stakeholders locally present also works nice. This is not meant to be some high level, carefully composed status for upper management. It's meant to be a quickly thrown together description on where the team is against the milestones, what the upcoming goals are for the next period and what progress was made the last period. All team members are part in delivering/writing this update. This serves as a continuous reality check on what is actually happening, close to where the real work is going on: the engineers themselves. \n \n A lot of projects slip because team members are not even honest with themselves. \n \n \"I'll finish this task by Friday\", says an engineer and thinks \"I hope, that is, it's more difficult than I expected. Oh well, I'll just work on the weekend a bit if I'm late.\". By creating a culture where people commit to short-term goals, then hold themselves accountable and check in with each other helps keep both feet on the ground. \n I have found transparency on the progress of the project to be a powerful tool in helping projects succeed, for two reasons. First, a team that is honest with itself tends to focus better when things are at risk. In teams that don't have much feel on how well they are doing, engineers will often cherry pick the cool or interesting task. In a team where everyone is aware of how good (or bad) things are going, people will pick up work that can help the team the most. \n Second, being honest with immediate stakeholders creates a lot of trust over time. A lot of business stakeholders don't have much understanding or appreciation of what is easy or hard about software development. By exposing them to more granular details and helping them understand what tradeoffs the team is continuously making helps build empathy and more realistic expectations on both ends. \n Dependency and Risk Management in a Pragmatic Way \n For projects that are late, I noticed two common reasons. First, something along \n \"We did all that we could ahead of schedule, but we were blocked by {dependency X} and could not do a thing about it.\"  This is a symptom of poor dependency management. The other thing is more like  \"We were on track, but then {big, unexpected issue} happened that took us a lot longer to resolve than estimated\" . This is a symptom of poor risk management. \n Despite these being so important for most projects I've seen, most popular software project methodologies barely mention dependency or risk management. People practicing things like Scrum or Kanban to also think a lot less of these areas and don't do it early enough. More heavyweight project management methodologies like PMI do have  sections dedicated to managing project risks . To me, this approach seems too bloated and abstract for day to day software development, so here's something a lot simpler of what I have seen work. \n For dependency management , use the same principles as with good delegation. There are people who are good at delegation, and people who are not great at it. However, good enough delegation is a totally learnable skill. Same applies to dependency management. \n \n Discovery. Figure out who your dependencies are and what they need to do. \n \n \n Agreement. Talk to them and agree what they will do and by when. \n Check-in  before  the due date. For teams that you don't have a good track record working with, do more frequent check-ins, to make sure they are on track. \n Give feedback and/or escalate. Once the work is complete, give feedback. If your dependent team did a great job, call this out clearly. If they did not do a good job, consider understanding why. If they are really late, consider escalating earlier, rather than later. \n \n For risk management , have a culture that rewards raising concerns early on and be pragmatic in tradeoffs to mitigate risk. Most of the risk in software projects is discovered by engineers, on the ground. The best engineers love problem-solving and are naturally optimistic. So when they come across a problem, they see a challenge to solve, not a potential delay to the project. \n To tackle this, create a culture of talking about interesting challenges coming up on a day to day basis. Start rewarding people who flag things that might take longer to do and bring tradeoffs to the table. \n \n As a rule of thumb for software projects, between time, feature and people, to undo a negative change in one of the dimensions, another one also needs to be changed. \n \n Whenever risk comes up, consider reacting to it ahead of time. Lots of unexpected work creeping up early on in the project? Perhaps it's time to cut scope or pull in more people, perhaps pull in more experienced people. Is scope creep happening, with more features being added to the project? Communicating the tradeoffs and deciding between fixing the scope, pushing back on timelines or adding more people early on in the project will go a long way in de-risking the work. \n Finally: Get It Done, Learn and Celebrate \n As software teams, project management and all the fluff around is never the goal itself. The goal is to get things done, delivering some specific value to the business. There are many ways to get there, the \"optimal how\" being different and ever changing in every environment. \n When we eventually do get things done, looking back and figuring out where we can do better next time is a key part of individual and team growth. And of course, celebrating a big achievement - whether it was done through blood, sweat and tears or like a hot knife through butter - is a final, really important step. This last step really helps build a cohesive team who will be ready and hungry to deliver on the next, more complex project, in a way even better than this last one. \n \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/scaling-engineering-teams-via-writing-things-down-rfcs/", "title": "Scaling Engineering Teams via  RFCs: Writing Things Down", "content": "\n             I have recently been talking at small and mid-size companies, sharing engineering best practices I see us use at Uber, which I would recommend any tech company adopt as they are growing. The one topic that gets both the most raised eyebrows, as well the most \"aha!\" moments is the one on how the planning process for engineering has worked since the early years of Uber. When working at large companies like Microsoft or smaller ones like Skyscanner, there have been two things related to planning that have always bugged me. First, the lack of visibility on others building or having built the same thing as my team. Second, the tech and architecture debt accumulated due to different teams building things very differently, both approach-wise and quality-wise. What if I said there is a way to tackle both these issues pretty well, using a few simple steps? A word of warning, one of the steps will sound a little crazy. Here they are: Do planning before building something new . This can be in-person whiteboarding or just talking it through with the team members, as long as you're all clear on how you will get things done. Capture this plan in a short, written document.  Once it is clear to the team how and what you do, it should be relatively quick to write down the \"how\". Don't go overboard. Have a few, select people approve this plan before starting work.  Similar to how it's a good quality gate to only merge a pull request after someone does a review on it, it makes a huge difference if before starting work on a project, a few, relevant people validate the planned work. These can be senior engineers, people on a team who will use the feature and so on. Send this planning document out to  all  engineers in the company  and let anyone and everyone comment on it. Yes, this the step that probably sounds crazy. Have everyone follow the above steps  for every project that is beyond some super trivial complexity and iterate on a lightweight,  RFC-like process  so it works well for your org or company. As unlikely it might sound, the above process both works and scales really well , from a handful of engineers to teams of thousands. It addresses not only issues on visibility or reducing tech/architecture debt, but also spreading knowledge and having engineers be more engaged day to day. This is the one, simple process I recommend any small or medium tech team to do, especially if they are in a growth phase. It's also the process we've successfully used and iterated on at Uber, going from tens of engineers to a couple of thousand ones. The power of writing things down Writing and sharing that writing with others creates accountability. It also almost always leads to more thorough decisions. A simple way to increase code quality? Do code review in writing, before merging. A simple way to have a meeting be less of a waste of time? Have a written agenda before the meeting, then write up and send out decisions and actions afterwards. A simple way to run projects with fewer surprises? Have the team write down what they are planning to do and share it with others. Us, engineers hate time wasters. Documentation is often seen as one of these time wasters, mostly because it is boring to do. Planning is often seen as a kind of documentation, so there is a natural tendency to just skip this step for efficiency. I like to flip this argument around on saving time, though. If everyone agrees how the project should be done then writing the approach down should be a piece of cake.  It just needs to capture the shared understanding on what the approach is, what architecture changes will be made, what the tricky parts are. Someone from the team should be able to do this in a few hours, the other team members giving a thumbs-up after reading through it. Usually, I see this being less straightforward.  \"This is not what I meant when we talked.\"  or  \"What about this important edge case we forgot?\"  and  \"If we change this here, it could break this other part of the system\"  are things that often come up when writing the plan down. It's great to have these discussions before having the same realizations when the project is halfway done. What about when people don't agree with how the project should be done or there are just a lot of changes? That already sounds like a project that will take a lot longer than people think - writing down things at least should give a clearer picture. Reviewers and spreading knowledge across the organization While writing is a good way to organize one's thoughts, it is a very different exercise when we write for someone else to understand. It's a good idea to specify who needs to read this document and give a thumbs-up. Once the plan is written-up, the surest way to make sure the people actually read the doc is to require them confirming just this - in writing, via e.g. a comment. The part of sending out the plan on how this project will be built, to all the engineering organization, via email, is something that can sound crazy. People often worry about this creating a lot of noise. This is both true and not. The noise levels will definitely increase. Thankfully, email filters are easy to create - just make it easy to filter for these kinds of emails. At the same time, there are a lot less project plans being sent out, even with an engineering size in the hundreds or thousands, than people typically expect. The type of information pushed to people in an organization shapes the culture considerably.  Having an organization with a culture to push engineering plans to everyone - for example, via email - and invite anyone to comment sets a tone of trust and responsibility. During my first few months at Uber, I used to obsess on reading planning docs from a variety of teams, chiming into ones where I had relevant domain knowledge e.g. on the technology. In these first few months, I learned a lot more about what other teams worked on, than I did in years working at a large company where this information was not visible. To this day, I still look through plans that teams make, getting a sense of what is going on outside my little bubble. Finally, allowing anyone and everyone to chime in is a key part of keeping a consistent engineering bar across the organization. At Uber, I have seen multiple cases of people on one side of the organization realize that another team on the other side of the organization is planning to do something similar to what they have done, but with a very different approach, often with a different quality bar. For example, a US team building a new feature might have not considered other parts of the world and a team in India pointing out gaps in their localization approach. The teams having transparency, self-balancing and self-correction happens quite naturally. Tailoring the process via iteration At Uber, a process described here has been used from the early years. Details of how this planning and review process has worked has been refined as the company grew and matured. What started out as an email to every engineer changed into mailing lists per domain (backend, mobile, web) and templates built by engineers to help convey information in a more consistent matter. As the company is growing to the thousands of engineers, more tooling is being built to make the process of searching and approving even easier. An interesting part of the iteration I've seen is the evolution of templates. People who review many engineering proposals often had the same type of questions. Questions like  \"What is the motivation to do this work?\"  or  \"How will this be tested?\"  or  \"Will any archtiecture changes be made here?\"  were very common questions. Seeing the repeat on these, engineers came up with templates that keep being updated to make reading and writing these plans be easy. To give an example, this is roughly how the backend and frontend (mobile/web) templates evolved about a year ago, since when we switched to generated templates: Backend List of approvers Abstract (what is the project about?) Architecture changes Service SLAs Service dependencies Load & performance testing Multi data-center concerns Security considerations Testing & rollout Metrics & monitoring Customer support considerations Mobile/Web List of approvers Abstract (what is the project about?) UI & UX Architecture changes Network interactions detailed Library dependencies Security concerns Testing & rollout Analytics Customer support considerations Accessibility Iterating and customizing to the needs of the engineering team is key. In our case, the templates started to include important things we cared about. Things like reliability, scale, security. At Uber, we've built many smaller services, so things to consider when doing so - like load and performance testing or SLAs - are part of that domain. When accessibility became a big focus for mobile, that section made it into the template. You get the idea. A process that scales At Uber, we called this process RFC - Request for Comments, given the many similarities it has with the  Request For Comments publication process  in the tech community. The process stuck because it was started early enough - when the engineering team was small - and it helped scale knowledge and eliminate silos, as the company kept growing rapidly. It has scaled remarkably well, from tens of engineers to the low thousands. Starting at a few thousand engineers, new challenges arise with this kind of process, which is a good problem to have by itself. To keep all of this from being overly theoretical, you can see our RFC process happen in the open by checking some of our open source projects, such as  BaseUI . BaseUI is web a design system comprised of modern, responsive, living components. All RFCs are  published and reviewed here  and  here . Development only starts  after the RFC is approved . So is this process unique to Uber? Far from it. Larger tech companies, like Google, Facebook, Microsoft or Amazon all came up with something that resembles some level of RFC process. Google calls it design docs and here's a good overview  of how it works . Architecture Decision Records -  ADRs  - are also a good format to use. The scale on how thorough the documentation should be, who the docs are pushed to, how strictly it is reviewed or how standardized it is across different orgs is different for all companies. If your at a tech company where planning is still adhoc, without a structured way on recording/distributing it,  one of the things that will help engineering scale greatly is having a type of RFC process in place early on . Just give it a try and iterate on how you do it. That's how it always starts. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/pull-request-or-diff-best-practices/", "title": "Pull request best practices", "content": "\n             When an engineer proposes code changes to the codebase as part of their work and have code reviews in place, they create a  pull request . This change consists of a description of the change and the actual changed files. For non-git based workflows, there are other names for this:  diffs  for Arcanist based workflows - which my team currently uses - or just simply  code reviews  for teams using Microsoft's TFS. ¬†The easier it is for other team members to review this change, the better.  Easy to review means easy to understand. Easy to understand results less time spent by the reviewer trying to get their head around the change. It helps the person reviewing to give relevant feedback, having few misunderstandings on the intent of the change.  This post collects best practices on creating easy to understand pull requests , or what ever the name for these might be in your work environment. Clear and concise title Code reviewers will skim the title of the change to decide if they want to review the code and if so, when. So let's make this easy for them. Keep the title short, but expressive enough to signal what the reviewer can expect.  Let's say you're working on an accounting software and there is a new business requirement on how to calculate tax for Switzerland. A title like  Changes for Swiss tax calculation  is concise. A title like  Change for tax calculation in Switzerland for new regulation  is still concise, with more context. However, a title like  Adding new tax parameters  or  Change tax logic  are overly generic and won't help reviewers give an idea of the type of change. This will make it difficult for them to decide if they should review the change. What about titles like  TaxInternals structure update and CalculateEffectiveRate changes in case of Swiss country code  or  Change tax calculation for Swiss businesses in the TX bracket effective from 2019 following new regulation ? These are on the other end of the spectrum: they are verbose and feel they provide like too much detail in the title. What is too little and what is too much information will depend on your environment: try to strike the right balance. As the team grows, it can make sense to agree on conventions to make titles easy to compare. One practice, for example, that my team have adopted is starting the title with uppercase and the first word being a verb in present tense. So we prefer  Change Swiss tax calculation for new regulation  over  changed Swiss tax calculation for new regulation  or  Ability to calculate Swiss tax for new regulation . This kind of suggestion can be a nice touch for consistency across code reviews or onboarding new people - but all of it will be specific to your team or company. The \"why\" of the change People reviewing the code spend a lot less time thinking about the change as the author. Providing the context in the description of the change request helps them up to speed on the reasoning behind the code changes. Having a clear \"why\" section will make the code easier to review for people for everyone.  For people with plenty of domain knowledge, it serves as a quick validation and they will verify if you follow what you set out to. For people with less domain knowledge - such as recent team members or people not familiar with the codebase - it will allow to do a decent review. Having people who are not that familiar with the codebase can both bring in a new perspective and it is also an efficient way to share knowledge. For teams using project management tools, on top of a short and clear description, linking to the tracking task is helpful. The task often has a lot more context, often conversations and can help the curious reviewer dig deeper and catch up on context. The same goes for linking other resources that can help understand the \"why\" deeper, such as design documents. Visual support For client-side changes, such as those on the web or mobile, few things make a review easier than attaching \"before\" and \"after\" screenshots - gifs or video recordings for changes on animations. This is a practice that not only helps the reviewers greatly, but also the author, who does another verification when creating the pull request. For changes impacting the UI, without this visual aid, thorough reviewers would have to grab the changes, build the product and run it in their local environment to visualize the changes.  Pull request guides and best practices for  your  team My team came up with code review request best practices that we circulated, reviewed and committed to and now use it to onboard new members. This was a good exercise to decide what things we cared about, as a team, and to turn best practices into  our  practices. One thing that worked especially well was having a list of a few, internal examples of code review requests that were deemed easy to review. Good code review requests come in different shapes and sizes. Having best practices helps set team-level expectations. Good examples help remind people that good ones are not a one size fits all. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/operating-a-high-scale-distributed-system/", "title": "Operating a Large, Distributed System in a Reliable Way: Practices I Learned", "content": "\n             For the past few years, I've been building and operating a large distributed system: the  payments system at Uber . I've learned a lot about  distributed architecture concepts  during this time and seen first-hand how high-load and high-availability systems are challenging not just to build, but to operate as well. Building the system itself is a fun job. Planning how the system will handle 10x/100x traffic increase, ensuring data is durable, regardless of hardware failures is intellectually rewarding. However,  operating a large, distributed system has been an eye-opening experience  for myself. The larger a system, the more Murphy's law of \"what can go wrong, will go wrong\" applies. This is especially true with frequent deploys, lots of developers deploying code, multiple data centers involved, and the system being used globally by a large number of users. The past few years, I've experienced a variety of system failures, many of which surprised me. These went from predictable things like hardware faults or innocent bugs making it into production, all the way to network cables connecting data centers being cut or multiple cascading failures occurring at the same time. I've gone through dozens of outages, where parts of the system were not working correctly, resulting in large business impact. This post is the collection of the practices I've found useful to reliably operate a large system  at Uber, while working here. My experience is not unique - people working on similar sized systems go through a similar journey. I've talked with engineers at Google, Facebook, and Netflix, who shared similar experiences and solutions. Many of the ideas and processes listed here should apply to systems of similar scale, regardless of running on own data centers (like Uber mostly does) or on the cloud (where Uber  sometimes scales to ). However, the practices might be an overkill for smaller or less mission-critical systems. There's much ground to cover - I'll go through the following topics: Monitoring Oncall, Anomaly Detection & Alerting Outages & Incident Management Processes Postmortems, Incident Reviews & a Culture of Ongoing Improvements Failover Drills, Capacity Planning & Blackbox Testing SLOs, SLAs & Reporting on Them SRE as an Independent Team Reliability as an Ongoing Investment Further Recommended Reading Monitoring To know if a system is healthy, we need to answer the question \"Is my system working correctly\"? To do so, it is vital to collect data on critical parts of the system. With distributed systems that run multiple services, on multiple machines and data centers, it can be difficult to decide what key things  really  need to be monitored. Infrastructure health monitoring.  If one or more machines/virtual machines are overloaded, parts of the distributed system can degrade. The health stats for machines a service operates on - their CPU utilization, memory usage - are basics that are worth monitoring. There are platforms that take care of this monitoring and auto-scaling instances out of the box. At Uber, ¬†we have a great  core infrastructure team  providing infra level monitoring and alerting out of the box. Regardless of how this implemented, being aware when things are in the red for instances or the infrastructure of the service is must-have information.  Service health monitoring: traffic, errors, latency . Answering the question \"is this backend service healthy?\" is a pretty common one. Observing things like how much traffic is hitting the endpoint, the error rate, and endpoint latency all provide valuable information on service health. I prefer to have dashboards on all of these. When building a new service, by using the right HTTP response mappings and monitoring the relevant codes can tell a lot about the system. So by ensuring 4XX mappings are returned on client errors, and 5xx codes for server errors, this kind of monitoring is easy to build and easy to interpret. Monitoring latency deserves one more thought. For production services, the goal is for most end users to have a good experience. Turns out, measuring the average latency is not a great metric to do so because this average can hide a small percentage of high latency requests. Measuring the p95, the p99 or p999 - latency experienced by the 95th, 99th or 99.9th percentile of requests - is a lot better metric. These numbers help answer questions like \"How fast will the request be for 99% of people?\" (p99) or \"At least how slow is the request for one in 1,000 people?\" (p999) . For those more interested in this topic, this  latencies primer article  is good further read. Average, p95 and p99 latency visualized. Note how though the average latency for this endpoint is under 1s, 1% of requests take 2 seconds or more to complete - something the average measurement would have masked. There is a lot more depth around monitoring and observability. Two resources worth reading more are Google's  SRE book  and the section on the  four golden signals  of distributed systems monitoring. They suggest if you can only measure four metrics of your user-facing system, focus on traffic, errors, latency, and saturation. The short read is the  Distributed Systems Observability  e-book from  Cindy Sridharan , which touches on other useful tools like event logs, metrics and tracing best practices. Business metrics monitoring.  While monitoring services tells us a lot about how correctly the service seems to work, it tells nothing about whether it works as intended, allowing for \"business as usual.\" In the case of the payments system, a key question is, \"can people take trips using a specific payment method?\". Identifying business events that the service enables and monitoring these business events is one of the most important monitoring steps. Business metrics monitoring was something my team built after having been bruised by outages that we had no way to detect otherwise. All our services looked like they were operating normally, yet key functionality was down across services. This kind of monitoring was quite bespoke to our organization and domain. As such, we've had to put a lot of thought and effort into customizing this type of monitoring for ourselves, building on the  observability tech stack at Uber . Oncall, Anomaly Detection, and Alerting Monitoring is a great tool for people to inspect the current state of the system. But it's really just a stepping stone to automatically detect when things go wrong and raise alerts that people can take action on. Oncall itself is a broad topic - Increment magazine did a great job covering many aspects in its  On-Call issue . I strongly prefer thinking of oncall as a follow-up to the \"you build it, you own it\" mindset. Teams who build services own them, owning the oncall as well. My team owned oncall for the payments services that we built. So whenever an alert fires, the oncall engineer would respond and look into the details. But how do we get from monitoring to alerts? Detecting anomalies from the monitoring data is a tough challenge  and an area where machine learning can shine. There are plenty of third-party services that offer anomaly detection. Again lucky for my team, we had an in-house machine learning team to work with, who tailored their solutions to Uber use-cases. The ¬†NYC-based Observability team wrote a helpful article on how  anomaly detection works at Uber . From my team's point of view, we push our monitoring data to this team's pipeline and get alerts with the respective confidence levels. Then we decide if we should page an engineer or not. When to fire an alert is an interesting question. Too few alerts can mean missing impactful outages. Too many can cause sleepless nights and burn people out.  Tracking and categorizing alerts and measuring signal-to-noise is essential in tweaking the alerting system . Going through alerts and tagging whether they were actionable or not, then taking steps to reduce non-actionable alerts is a good step towards having  sustainable on-call rotations  in place. Example of the  in-house oncall dashboard  used at Uber, built by the Uber Developer Experience team in Vilnius The Uber developer tooling team based in Vilnius  builds neat on-call tooling  that we use to annotate alerts and visualize the oncall shifts. Our the team holds a weekly review of the last oncall shift, analyzing pain points and spending time to improve the oncall experience, week after week. Outages & Incident Management Processes Imagine this:  you're the engineer oncall for the week. A pager alert wakes you up the middle of the night. You investigate if there's a production outage happening. Uh oh. Seems like part of the system is down. Now what?  Monitoring and alerting just got very real. Outages might not be that big of a deal for small systems, where the oncall engineer can understand what is happening and why. They are usually quick to understand and easy to mitigate. For complex systems with multiple (micro)services, lots of engineers pushing code to production, it is challenging enough just to pinpoint where the underlying problem is happening. Having a few standard processes to help with this makes a huge difference. Runbooks  that are attached to alerts, describing simple mitigation steps are the first line of defense. For teams that have good runbooks, it's rarely a problem if the engineer oncall does not know the system in-depth. Runbooks need to be kept up to date, updated, and re-worked with new type of mitigations, as they happen. Communicating outages across the organization  become essential as soon as there are more than a few teams that deploy services. In the environment I work at, thousands of engineers deploy services they work on into production when they see fit, resulting in hundreds of deploys per hour. A seemingly unrelated deployment on one service might impact another one. Here, standardized outage broadcasting and communication channels make a big difference. I've had multiple cases when an alert was unlike anything I've seen before - and realizing that other people in other teams are seeing similarly odd things. Being in a central chat group for outages, we pinpointed the service causing the outage and mitigated the issue quickly. We did this much faster, as a group than any one of us would have done it by ourselves. Mitigation now, investigation tomorrow.  In the middle of an outage, I often got the \"adrenalin rush\" of wanting to fix what went wrong. Often the root cause was a bad code deploy, with a glaring bug being present in the code change. In the past, I would have jumped to fix the bug, push the fix and close the outage over just rolling back the code change. However, fixing the root cause in the middle of an outage is a  terrible  idea.  There is little to gain and a lot to lose with a forward fix . Because the new fix has to be done quickly, testing has to be done in production. Which is the recipe to introduce a second bug - or a second outage - on top of the existing one. I have seen outages blow up, just like this. Just focus on mitigating first, resisting the urge to fix or investigate the root cause. A proper investigation can wait until the next business day. Postmortems, Incident Reviews & a Culture of Ongoing Improvements It is telling of a team how they handle the aftermath of an outage. Do they carry on? Do they do a small investigation? Do they perhaps spend a surprisingly  large  effort on the follow-up, stopping product work to make system-level fixes? Postmortems  done right are a building block for robust systems. A good postmortem is blameless yet thorough. Templates for postmortems at Uber evolved over time across engineering, having sections for the summary of the incident, impact overview, the timeline of events unfolding, a root cause analysis, lessons learned and a list of detailed follow-up items. A postmortem template similar to what I've used at Uber Good postmortems dig deep down into the root cause and come up with improvements to make preventing, detecting or mitigating all similar outages a lot faster. When I say dig deep, I mean they won't stop at the root cause being a bad code change with a bug that the code reviewer did not spot. They dig deeper with the  \"5 Whys\"  exploration technique, to dig deeper, arriving at a more meaningful conclusion. Take this example: Why did the issue happen? -->  A bug was committed as part of the code. Why did the bug not get caught by someone else? -->  The code reviewer did not notice that the code change could cause such an issue. Why did we depend on only a code reviewer catching this bug?  ---> Because we don't have an automated test for this use case. \"Why don't we have an automated test for this use case?\"  --> Because it is difficult to test without test accounts. Why don't we have test accounts?  --> Because this system does not yet support them Conclusion: this issue points to the systemic issue of not having test accounts. Suggesting to add test accounts support to the system. Following this, write automated tests for all future, similar code changes. Incident reviews  are an important accompanying tool for postmortems. While many teams do a thorough job with postmortems, others can benefit from additional input and being challenged on preventative improvements. It's also essential that teams feel accountable and empowered to carry out the system level improvements they propose. For organizations that are serious about reliability, the most severe incidents get reviewed and challenged by the experienced engineers. Organizational level engineering management should also be present to provide empowerment to go through with the fixes -  especially  when those are time-consuming and block other work.  Robust systems are not built overnight: they are built through continuous iterations . Iterations that come from an organization-wide culture of continuous improvements, following learning from incidents. Failover Drills, Planned Downtime & Capacity Planning & Blackbox Testing There are a couple of regular activities that require significant investments but are critical in keeping a large distributed system up and running. These are concepts I came across at Uber for the first time - at previous companies, we did not need to use these as our scale and infrastructure did not prompt us to do so. A data center failover drill  is something I assumed was dull until I observed a a few of them. I was initially thinking, designing robust distributed systems is precisely about being resilient to data centers going down. Why test it regularly, if it should  theoretically  just work? The answer has to do with scale and testing whether services can efficiently handle a sudden increase in traffic in a new data center. The most common failure scenario I have observed is services not having enough resources in a new data center to handle global traffic, in case of a failover. Imagine ServiceA and ServiceB running from two data centers each. Let's assume that utilization of the resources is at 60% - with tens or hundreds of VMs running in each DC - and alerts are set to trigger at 70%. Now let's do a failover, directing all traffic from DataCenterA to DataCenterB. DataCenterB is suddenly unable to cope with the load, without provisioning new machines. Provisioning could take long enough time that requests get piled up and start dropping. This blocking could start to impact other services, causing a cascading failure on other systems, that are not even part of this failover. Possible ways a data center failover could go wrong Other common failure scenarios involve routing level issues, network capacity problems, or  back pressure  pain points. Data center failovers are drills that any reliable distributed system should be able to perform without any user impact. I am emphasizing  should  - this drill is one of the most useful exercises to test the reliability of a web of distributed systems. Planned service downtime exercises  are an excellent way to test the resiliency of the overall system. These are also a great way to discover hidden dependencies or inappropriate/unexpected usages of a specific system. While this exercise can be done relatively easily with services that are client facing and have few known dependencies, it is less straightforward to do with critical systems that require high uptime and or with ones that many other systems depend on. But what will happen when this critical system will be unavailable, someday? It is better to validate the answer with a controlled drill, all teams being aware and ready, over an unexpected outage. Black-box testing  is a way to measure the correctness of a system as close to the conditions as an end user would see it. This type of testing is similar to end-to-end testing. Except that for most products, having proper black-box tests warrant their own investment. Key user flows, and the most common, user-facing test scenarios are good ones to make \"black box testable\": doing this in a way that they can be triggered any time, to check if the systems work. Taking Uber as an example, an obvious black-box test is checking if the rider-driver flow works at a city level. That is, can a rider in a specific city request an Uber, being matched with driver partners and get a ride? Once this scenario is automated, this test can be regularly run, simulating different cities. Having robust black-box testing systems makes it easier to verify that the system - or parts of the system - work correctly. It also helps a lot with failover drills: the quickest way to get feedback on the failover is to run the black-box tests. Example for using black-box tests during a failed failover drill, rolling back manually minutes into the drill. Capacity planning  becomes equally important for large distributed systems. By large, I mean the cost of compute and storage being in the tens- or hundreds of thousands dollars per month. At this scale, having a fixed number of deployments might be cheaper over using self-scaling cloud solutions. At the very least, fixed deployments should handle the \"business as usual\" traffic, with automatic scaling happening for peak loads. But what is the minimum number of instances that should be running for the next month? The next three months? The next year? Forecasting the future traffic pattern for systems that are mature and have good historical data is not difficult. Yet it is important both for budgeting, for choosing vendors or for locking in discounts with cloud providers. If your service has a large bill and you've not thought of capacity planning, you are missing out on an easy way to reduce and control cost. SLOs, SLAs & Reporting on Them SL0 stands for  Service Level Objective  - a numerical target for system availability. For each independent service, defining  service-level SLOs  like targets for capacity, latency, accuracy, and availability are good practices. These SLOs can then serve as triggers for alerting. An example service-level SLO could look like this: \n     \n     \n     SLO Metric \n     Subcategory \n     Value for Service \n     \n     \n \n     Capacity \n     Minumum throughput \n     500 req/sec \n \n \n     \n     Maximum expected throughput \n     2,500 req/sec \n \n \n     Latency \n     Expected median response time \n     50-90ms \n \n \n     \n     Expected p99 response time \n     500-800ms \n \n \n     Accuracy \n     Maximum error rate \n     0.5% \n \n \n     Availability \n     Guaranteed uptime \n     99.9% \n \n Business-level SLOs  or functional SLOs are an abstraction above the services. They'll cover user or business-facing metrics. For example, a business-level SLO could be this: expecting 99.99% of email receipts to be sent within 1 minute of the trip completed. This SLO might map to service-level SLOs (e.g. latencies of payment and email receipt systems), or they might need to be measured differently. SLA - Service Level Agreement  - is a broader agreement between a service provider and a service consumer. Usually, multiple SLOs make up an SLA. For example, the payments system being 99.99% available could be an SLA, that breaks down to specific SLOs for each supporting system. After defining the SLOs, the next step is to measure these and report on them.  Automating monitoring and reporting on SLAs and SLOs is often a complex project , one that is tempting to de-prioritize for both the engineering team and the business. The engineering team won't be as interested, they already have various levels of monitoring that detect outages realtime. The business, on the other hand, would rather prioritize delivering functionality over investing in a complex project that doesn't have immediate business impact. Which brings us to the next topic: organizations that are operating large distributed systems sooner or later need to invest dedicated staffing for the reliability of these systems. Let's talk about the Site Reliability Engineering team. SRE as an Independent Team Site Reliability Engineering  originated  from Google from around 2003 - to more than 1,500 SRE engineers today. As operating a production environment becomes a more complex of a task, with more and more automation required, soon enough, this work becomes a full-time job. It varies when companies recognize that they have engineers working close to full time on production automation: the more critical these systems are and the more failures they have, the earlier this happens. Fast growing tech companies often put an SRE team in-place early on, who build their own roadmap. At Uber, the  SRE team was founded in 2015  with the mission of managing system complexity over time. Other companies might couple starting such a team to when a dedicated infrastructure team is created.  When a company grows to reliability work across teams takes up more than a few engineers' time, it's time to put a dedicated team for this in place. With an SRE team in-place, this team makes the operational aspects of keeping large, distributed systems a lot easier for all engineers. The SRE team likely owns standard monitoring and alerting tools. They probably buy or build oncall tooling and are the goto team for oncall best practices. They might facilitate incident reviews and build systems to make detecting, mitigating, and preventing outages easier. They certainly facilitate failover drills, often drive black-box testing, and are involved with capacity planning. They drive choosing, customizing, or building standard tools to define and measure SLOs and report on them. Given that companies have different pain areas they look for SRE to solve, SRE organizations are different across companies. The name is often something else as well: it could be called operations, platform engineering, or infrastructure. Google published two  must-read books on site reliability that are freely available  and is an excellent read to go deeper into SRE. Reliability as an Ongoing Investment When building any product, building the first version is just the start. After the v1, new features get added in the iterations to come. If the product is successful and brings in business results, the work just keeps on coming. Distributed systems have a similar lifecycle, except they need more investment, not just for new features, but to keep up with scaling up. As a system starts to take more load, stores more data, has more engineers work on it, it needs continuous care to keep running smoothly. Many people building distributed systems the first time assume this system to be like a car: once built, it only needing essential maintenance every few months. This comparison could not be further from how systems like these operate. I like to think of the effort to operate a distributed system being similar to operating a large organization, like a hospital . To make sure a hospital operates well, continuous validation and checks are needed (monitoring, alerting, black-box testing). New staff and equipment need to be onboarded all the time: for hospitals, this is staff like nurses and doctors and equipment like new medical devices; for distributed systems it's onboarding new engineers and new services. As the number of people and the number of services grows, new the old ways of doing things become inefficient: the same way a tiny clinic on the countryside works different to a large hospital in a metropolis. It becomes a full-time job to come up with more efficient ways of doing things, and measuring and reporting on efficiency becomes important. Just like large hospitals have more supporting officer staff, like finance, HR or security; operating larger distributed systems similarly rely on supporting teams like infrastructure and SRE. For a team to run a reliable distributed system, the organization needs to be investing continuously in the operations of these systems, as well as the platforms that they are built on. Further Recommended Reading Though this post is lengthy in its content, it still only touches the surface. To dive deeper into operating distributed systems, I recommend the following resources: Books Google SRE Book  - a great and free book from Google. The  Monitoring Distributed Systems charter  is especially relevant for this post. Distributed Systems Observability  by  Cindy Sridharan , another excellent and free book with great points on monitoring distributed systems. Designing Data-Intensive Applications  by  Dr Martin Kleppmann  - the most practical book I have found so far on distributed systems concepts. However, this book does not touch much on the operational aspects discussed in the post. Online resources On-Call issue of the Increment magazine : a series of articles on incident response processes of companies like Amazon, Dropbox, Facebook, Google, and Netflix. Learning to Build Distributed Systems  - a post by AWS engineer  Marc Brooker , answering the question \"how do I learn to build big distributed systems\"? See the Russian translation of this article  here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-product-minded-engineer/", "title": "The Product-Minded Software Engineer", "content": "\n             Product-minded engineers are developers with lots of interest in the product itself. They want to understand why decisions are made, how people use the product, and love to be involved in making product decisions. They're someone who would likely make a good product manager if they ever decide to give up the joy of engineering. I've worked with many great product-minded engineers and consider myself to be this kind of developer. At companies building world-class products, product-minded engineers take teams to a new level of impact. Sherif Mansour , PM at Atlassian wrote  an excellent article  on product engineers, and how product managers can identify these people and work well with them. His takeaway is similar: Over my last ten years of product management,  I‚Äôve come to conclude that product engineers are a critical ingredient to helping you build a successful product , scale yourself and become a better product manager. He also quotes  Jean-Michel Lemieux , head of engineering at Shopify who defines product engineers like this: Once you have the product foundations, you need devs who engage with the 'why', actively. Engineers who have the thirst for using technologies to leapfrog human/user problems. Those with empathy to reach for magical experiences. That is what defined a product engineer in my books. Bad ones cut too many corners.  Great product engineers know that minimum lovable products need the right depth  to be considered during the build phase. Teams who are working on user-facing features, collaborating with product managers are environments where product-minded engineers can have a huge impact. They often become key contributors, the goto people for product managers and frequently advance to being team leads.  So, what are the key traits of product-minded engineers, and how can you work on becoming more product-minded?  This article summarizes 9 traits I've observed these kinds of people share, and  my suggestions for any engineer to grow their product-minded muscle . 1. Proactive with product ideas/opinions Product-minded engineers don‚Äôt settle for getting a specification and jumping to implement it. They think about other ideas and approach the product manager with these. They often challenge existing specifications, suggesting alternative product approaches, that might work better. 2. Interest in the business, user behavior and data on this When coming with ideas, product-minded engineers don't just get these from thin air. They take the time to understand how the business works, how the product fits in, and what its goals are. They are also empathetic about how the product makes users feel and how those users benefit from using this product. They often dive straight to data about business and user metrics, getting their hands on this data however they can. They might access it directly - if this is possible - or approach the product manager or data scientists to get this kind of information. They do this because of their curious nature. This is the next trait I've observed. 3. Curiosity and a keen interest in \"why?\" Product-minded engineers like to understand the \"why?\" behind all things. Why build this feature for the product, why not the other one? Why ship this first milestone, instead of choosing another one, that's a lot simpler to build? How will things be measured - why don't we choose a more thorough way to measure things? They are autonomous in finding answers they can, by themselves. They turn to the product manager and other people in the business for other, product-related questions. Even though they ask many questions, doing this frequently, they manage not to annoy people, as they've built up strong relationships with them. 4. Strong communicators and great relationships with non-engineers Product-minded engineers like talking with people outside engineering, learning about what and why they do. They are smooth communicators, making it clear they're interested in learning more about how other disciplines work. I frequently see them grabbing coffee, lunch, or doing a hallway chat with non-engineers. 5. Offering product/engineering tradeoffs upfront Because they have a strong understanding of the product \"why,\" as well as the engineering side of things, they can bring suggestions that few other people can. For example, when scoping the effort to build the product, the engineering effort to build a key feature might be significant. Many engineers would start to look for ways to reduce the effort and try to figure out what the impact of the reduced effort would mean for the feature itself. Product-minded engineers attack this problem from both angles: both looking for engineering tradeoffs and what the product impact is. They also start making product tradeoffs, evaluating the engineering impact. They often go back to the product manager, suggesting a completely different feature to be built, given the product impact would be similar, but the engineering effort vastly smaller. Juggling both the product and engineering tradeoffs and the impact of each is a unique strength product-minded engineers have.  They can quickly go back-and-forth between the two sides of the same coin: product features and engineering effort and tradeoffs. Because they do it all in their head, using their engineering and product insights, they get to valuable conclusions remarkably quickly. 6. Pragmatic handling of edge cases Edge cases are a funny thing. On one extreme, engineers often forget about many of these, having to come back to addressing them, after getting feedback from people testing the product or end users. On the other hand, handling all possible edge cases in a new product or feature can take a lot of time. Product-minded engineers quickly map out edge cases and think of ways to reduce work on them: often bringing solutions that require no engineering work.  They are focused on the \"minimum lovable product concept\" and evaluate the impact of an edge case and the effort of handling it. They come with good middle-ground suggestions: mapping out most things that can go wrong and bring suggestions on what edge cases need to be addressed, before shipping even an early version. For example, if one in a thousand users might be hit by an error, they will consider the effort to fix it and think about what happens if they don't do anything. Can customer support help the person in this case, during validation? Can the user just retry and succeed the next time? Can the product be slightly modified, so this edge case won't occur? 7. Quick product validation cycles Even before the feature they are working on is production-ready, product-minded engineers find creative ways to get early feedback. This could be doing hallway testing with colleagues, showing the work-in-progress feature to the product manager, organizing a team bug bash on the beta build, and many other, creative ways. They are continuously thinking:\"how can we validate that people will use this feature, the way we think they will?\" 8. End-to-end product feature ownership Most experienced engineers own their work end-to-end: from getting the specification, through implementing it, all the way to rolling it out and validating that it works correctly. Product-minded engineers often go a step beyond this. They consider their work done only after getting results on user behavior and business metrics. After rollout, they still actively engage with product managers, data scientists, and customer support channels, to learn how the feature is being used in the real world. It can take weeks to get enough reliable data to draw conclusions. Even though they might be working on a new project, they make checking on the results one of their top priorities. It's not a time-consuming activity, but it needs that additional persistence from someone wanting to know: how is my work  really  doing? When a feature performs worse than expected, they are curious to understand where the mismatch was. They are just as interested in finding the root cause between the product plan and the real world result, as they are to debug a hard-to-reproduce bug in the codebase. They'll often spend a good amount of time debating hypothesizes and learnings with the product manager and data scientists. 9. Strong product instincts through repeated cycles of learning A typical project for a product-minded engineer usually goes like this: They ask a lot of questions to understand exactly why the product feature is being built. They bring suggestions and tradeoffs to the table, some of which are included in the revised spec. They build the feature quickly, getting early feedback, as they do. After shipping the feature, they actively follow up to understand if the feature lives up to the expectation. When it does not, they dig deep, to understand why it did not and learn something new about product usage in the real world. After each project, their product understanding deepens, and they start to develop better and better product instincts. The next time, they'll bring even more relevant suggestions to the table. Over time, they become a goto person for product managers, their advice being sought well before projects are kicked off. They build a strong reputation outside the team, opening more doors for their continued career growth. Tips to become a more product-minded engineer If you work on a user-facing product, here are a few tips I've seen work well, to growing your product-minded muscle. Understand how and why your company is successful . What is the business model? How is money made? What parts are most profitable, what parts of the company are expanding the most? Why? How does your team fit into all of this? Build a strong relationship with your product manager . Most product managers jump at the opportunity to mentor engineers. Having engineers be interested in product means they can scale themselves more. Before coming in, asking a lot of product questions, take time to build this relationship and make it clear to your product manager, that you'd like to get more involved in product topics. Engage in user research, customer support , and other activities, where you can learn more about how the product works. Pair with designers, UX people, data scientists, operations people and others, who frequently interact with users. Bring well-backed product suggestions to the table.  After you have a good understanding of the business, the product and stakeholders: take initiative. You could bring small suggestions to a project you are working on. Or you could suggest a larger effort, outlining the engineering effort and the product effort, making this easy to prioritize in the backlog. Offer product/engineering tradeoffs  for the projects you work on. Think of not only making engineering tradeoffs for the product feature your team is building but suggest product tradeoffs that result in less engineering effort. Be open to the feedback on these from others. Ask for frequent feedback from your product manager.  Being a great product-minded engineer means you have built up good product skills, on top of your existing engineering skillset. The best person to give you feedback on how you're doing on the product skillset is your product manager. Reach out for feedback on how valuable they see your product suggestions and ask for thoughts on areas for further growth. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/software-architecture-is-overrated/", "title": "Software Architecture is Overrated, Clear and Simple Design is Underrated", "content": "\n             I had my fair share in designing and building large systems. I've taken part in rewriting Uber's  distributed payment systems , designing and shipping Skype on Xbox One and open-sourcing  RIBs , Uber's mobile architecture framework. All of these systems had thorough designs, going through multiple iterations and had lots of whiteboarding and discussion. The designs then boiled down to a design document that was circulated for more feedback before we started building. All of these systems were large at scale: hundreds of developers build them - or on top of them - and they power systems used by millions of people per day. They were also not just greenfield projects. The payments system rewrite had to replace two, existing payments systems, used by tens of systems and dozens of teams, all without having any business impact. Rewriting the Uber app was a project that a few hundred engineers worked simultaneously on, porting existing functionality to a new architecture. Let me start with a few things that might sound surprising.  First, none of these designs used any of the standard software architecture planning tools.  We did not use  UML , nor the  4+1 model , nor  ADR , nor  C4 , nor  dependency diagrams . We created plenty of diagrams, but none of them followed any strict rules. Just plain old boxes and arrows, similar  this one describing information flow  or  this one outlining class structure and relationships between components . Two diagrams within the same design document often had a different layout and were often added and modified by different engineers. Second, there were no architects on the teams that owned the design . No  IT architects  or  enterprise architects . True, neither Uber nor Skype/Microsoft have hands-off software architect positions. Engineers at higher levels, like staff engineers, are expected to still regularly code. For all the projects, we did have experienced engineers involved. However, no one person owned the architecture or design. While these experienced developers drove the design process, even the most junior team members were involved, often challenging decisions and offering other alternatives to discuss. Third, we had practically no references to the common architecture patterns  and other jargon referenced in common software architecture literature, such as  Martin Fowler's architecture guide . No mentions of microservices, serverless architecture, application boundaries, event-driven architecture, and the lot. Some of these did come up during brainstormings. However, there was no need to reference them in the design documents themselves. Software design at tech companies and startups So how did we get things done? And why did we not follow approaches suggested by well-known software architecture approaches? I've had this discussion with peer engineers working at other tech companies, FANG (Facebook, Amazon, Netflix, Google), as well as at smaller startups. Most teams and projects - however large or small - all shared a similar approach to design and implementation: Start with the business problem . What are we trying to solve? What product are we trying to build and why? How can we measure success? Brainstorm the approach . Get together with the team and through multiple sessions, figure out what solution will work. Keep these brainstormings small. Start at a high level, going down to lower levels. Whiteboard your approach . Get the team together and have a person draw up the approach the team is converging to. You should be able to explain the architecture of your system/app on a whiteboard clearly, starting at the high-level, diving deeper as needed. If you have trouble with this explanation or it's not clear enough, there's more work required on the details. Write it up via simple documentation with simple diagrams  based on what you explained on the whiteboard. Keep jargon to the minimum: you want even junior engineers to understand what it's about. Write it using  clear and easy to follow language . At Uber, we use an  RFC-like process  with various templates. Talk about tradeoffs and alternatives . Good software design and good architecture are all about making the right tradeoffs. No design choice is good or bad by itself: it all depends on the context and the goals. Is your architecture split into different services? Mention why you decided against going with one large service, that might have some other benefits, like more straightforward and quicker deployment. Did you choose to extend a service or module with new functionality? Weigh the option of building a separate service or module instead, and what the pros and cons of that approach would be. Circulate the design document within the team/organization and get feedback . At Uber, we  used to send out all our software design documents to all engineers , until there were around 2,000 of us. Now that we're larger, we still distribute them very widely, but we've started balancing the signal/noise ratio more. Encourage people asking questions and offering alternatives. Be pragmatic in setting sensible time limits to discuss the feedback and incorporate it, where it's needed. Straightforward feedback can be quickly addressed on the spot, while more detailed feedback might be quicker to settle in-person. Why was our approach different from what is commonly referred to in software architecture literature?  Actually, our approach is not that different in principle, to most architecture guides. Almost all guides suggest starting with the business problem and outlining solutions and tradeoffs: which is also what we do. What we don't do is use many of the more complex tools that many architects or architecture books advocate for. We document the design as simple as we can, using the most straightforward tools: tools like Google Docs or Office365. I assume that the main difference in our approach boils down to engineering culture at these companies. High autonomy and little hierarchy is a trait tech companies and startups share: something that is sometimes less true for more traditional companies. This is also a reason these places do a lot more \"common sense-based design\" over process-driven design, with stricter rules. I know of banks and automotive companies where developers are actively discouraged from making any architecture decisions without going up the chain, getting signoff from architects a few levels up, who are overseeing several teams. This becomes a slower process, and architects can get overwhelmed with many requests. So these architects create more formal documents, in hopes of making the system more clear, using much more of the tools the common literature describes. These documents also reinforce a top-down approach, as it is more intimidating for an engineer, who is not an architect, to question or challenge the decisions that have already been documented using formal methods, that they are not that well-versed in. So they usually don't do so. To be fair, these same companies often want to optimize for developers to be more as exchangeable resources, allowing them to re-allocate people to work on a different project, on short notice. It should be no surprise that different tools work better in different environments. Simple, jargonless software design over architecture patterns The goal of designing a system should be simplicity . The simpler the system, the simpler it is to understand, the simpler it is to find issues with it and the simpler it is to implement it. The more clear language it is described in, the more accessible that design is. Avoid using jargon that is not understood by every member of the team: the least experienced person should be able to understand things equally clearly. Clean design is similar to clean code: it's easy to read and easy to comprehend. There are many great ways to write clean code. However, you will rarely hear anyone suggesting to start with applying the  Gang of four design patterns  to your code. Clean code starts with things like single responsibility, clear naming, and easy to understand conventions. These principles equally apply to clear architecture. So what is the role of architecture patterns?  I see them similarly in usefulness as coding design patterns. They can give you ideas on how to improve your code or architecture. For coding patterns, I notice a  singleton pattern  when I see one, and I raise my eyebrow and dig deeper when I see a class that acts as a  facade , only doing call-throughs. But I've yet to think  \"this calls for an  abstract factory pattern \" . In fact, it took me a lot of time to understand what this pattern does and had my \"aha!\" moment, after working with a lot of dependency injection - one of the few areas, where this pattern is  actually pretty common and useful . I'll also admit that although I spent a lot of time reading and comprehending the Gang of four design patterns, they've had far less impact on becoming a better coder than the feedback I've gotten from other engineers on my code. Similarly, knowing about common architecture patterns is a good thing: it helps shorten discussions with people, who understand them the same way as you do. But architecture patterns are not the goal, and they won't substitute for simpler system designs. When designing a system, you might find yourself having accidentally applied a well-known pattern: and this is a good thing. Later, you can reference your approach easier. But the last thing you want to do is taking one or more architecture pattern, using it as a hammer, looking for nails to use it on. Architecture patterns were born after engineers observed how similar design choices were made in some cases, and those design choices were implemented similarly. These choices were then named, written down, and extensively talked about. Architecture patterns are tools that came  after  the solution was solved, in hopes of making the lives of others easier.  As an engineer, your goal should be more about solving solutions and learning through them rather than picking a shiny architecture pattern, in hopes that that will solve your problem. Getting better at designing systems I've heard many people ask for tips on becoming better in architecting and designing systems. Several experienced people will recommend reading up on architecture patterns and reading books on software architecture. While I definitely do recommend reading - especially books, as they provide a lot more depth than a short post - I have a few suggestions, that are all more hands-on than just reading. Pull over a teammate and whiteboard your design approach . Draw up what you are working on and why you are doing things. Make sure they understand. And when they do, ask for their feedback. Write up your design in a simple document and share it with your team, asking for feedback . No matter how simple or complex thing you're working on, may that be a smaller refactor or a large project, summarize this. Do it in a way that makes sense to you and a way that others can understand - for inspiration,  here's how I've seen it done at Uber . Share it with your team in a format that allows commenting, like Google Docs, Office365, or others. Ask people to add their thoughts and questions. Design it two different ways and contrast the two designs.  When most people design an architecture, they go with one approach: the one popping in their head. However, architecture is not black-and-white. Come up with a second design that could also work. Contrast the two, explaining why one is better than the other. List the second design briefly as an alternative considered, arguing why it was decided against. Be explicit about tradeoffs  you make, why you made them, and what things you have optimized for. Be clear about constraints that exist and you've had to take into account. Review other's designs. Do it better.  Assuming you have a culture, where people share their designs via whiteboarding and sessions or documents, get more out of these reviews. During a review, most people only try to take things in, becoming one-way observers. Instead, ask clarifying questions for parts that are not clear. Ask them about other alternatives they've considered. Ask them what tradeoffs they've taken and what constraints they've assumed. Play devil's advocate and suggest another, possibly simpler alternative - even if it's not a better one - asking them their thoughts on your suggestion. Even though you've not thought as much about the design as the person presenting it, you can still add a lot of value and learn more. The best software design is simple and easy to understand. The next time you're starting a new project, instead of thinking,  \"How will I architect this system, what battle-tested patterns should I use and what formal methodology should I document it with?\" , think  \"How can I come up with the simplest possible design, in a way that's easy for anyone to understand?\".  Software architecture best practices, enterprise architecture patterns, and formalized ways to describe systems are all tools that are useful to know of and might come in handy one day. But  when designing systems, start simple and stay as simple as you can. Try to avoid the complexity that more complex architecture and formal tools inherently introduce. Read my  follow-up Twitter thread on this post . You can also read the Russian translation of this article  on Habr  and the Chinese translation  on InfoQ China . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/on-writing-well/", "title": "Undervalued Software Engineering Skills: Writing Well", "content": "\n             I have been coaching several experienced software engineers to further grow professionally,  since transitioning  to being an engineering manager. I have noticed a few skills that people often underestimate the importance of developing. Skills that add a significant boost to the impact of any developer. One of these is writing. Most software engineers primarily focus on becoming great at writing code. And this makes perfect sense. This is an essential step to become a great engineer within a reasonably sized team. Successful companies, however, grow continuously. Sooner or later, the software engineering team will be beyond a few dozen people, where everyone can easily talk with everyone else. People will be split across different floors. New offices in different locations will be opened. Face-to-face communication starts to be insufficient. Channels   like email, chat or video calls become more important. The pace of which this growth happens varies by company: for some, it takes years. For some of the really successful companies, it happens much more rapidly. It is with a larger organisation that writing becomes important  for messages to reach a wider group of people. For software engineers, writing becomes the tool to reach, converse with and influence engineers and teams outside their immediate peers. Writing becomes essential to make thoughts, tradeoffs and decisions durable. Writing things down makes these thoughts available for a wide range of people to read. Things that should be made durable can include proposals and decisions, coding guidelines, best practices, learnings, runbooks, debugging guides, postmortems. Even code reviews. For people to read what you write, it needs to be written well . If you grab people's attention early on, they will keep reading and they will receive the message you intended to get across. More of them will respond to it and do it without few misunderstandings on what you meant. By writing well, you can scale your ability to communicate efficiently to multiple teams, to an organisation or across the company. And the ability to communicate and influence beyond your immediate team is the essential skill for engineers growing in seniority - from senior engineer to what organizations might call lead, principle, staff or distinguished engineer. So how can you work on becoming better at writing?  Writing clearly, concisely and in a way that is easy to read? As with every skill, it's a matter of being aware of the fundamentals, practicing, getting feedback and repeating.  For the learning the fundamentals, books are a good place to start. Two books I frequently recommend engineers to start with are  On Writing Well: The Classic Guide to Writing Nonfiction  and  The Sense of Style: The Thinking Person's Guide to Writing in the 21st Century . Here are  a few more . Being aware of the fundamentals, re-reading your own writing and ruthlessly re-editing is the next step in becoming a better writer. Putting yourself in the shoes of who you write for and asking yourself if you are grabbing their attention early is key. Challenging yourself to deliver the same message in a shorter form and re-writing your content is another. Immediate feedback from services like  Grammarly  and the  Hemmingway App  are helpful. Asking for feedback on your emails and documents from people who you have seen write well is another way to grow. Don't take this advice just from me . Take it from others, like employee #8 and now SVP of engineering at Google, Urs H√∂lzle who  also says  that writing clearly is an important superpower for engineers. ¬† Engineers often underestimate the importance of writing well. Invest in this skill to scale your ability to get your message to others, becoming a more influential engineer. Note that none of the links in this article are affiliate links or sponsored. See  my ethics statement  on the lack of such links. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/an-elegant-puzzle-book-review/", "title": "An Elegant Puzzle Book Review: an Overdue Read for Software Engineering Leads", "content": "\n             I've recently read  An Elegant Puzzle: Systems of Engineering Management , written by Will Larson. After working at Yahoo and Digg, Will was an engineering manager for two years at Uber, leaving for Stripe right around when I started and  transitioned to engineering management . Though I don't know Will personally, the fact that some part of his experience comes from Uber made me very curious to dive into the book. And what a delight it's been reading it, taking  book notes as I went along . Note that none of the below links are affiliate links or sponsored ones. See  my ethics statement  on the lack of such links. An Elegant Puzzle is to date the most hands-on perspective on engineering management within a high-growth, tech-first organization, that I have read. It's a long overdue book for engineering managers and leads . Having read many  management and engineering management books , what set Will's book apart is it starts right where the others end. An Elegant Puzzle wastes no time - especially not in the beginning - on covering the generic manager's toolkit, such as 1:1s, giving feedback, team building, which many other books devote a good chunk of their content. Instead, it talks about the  engineering  pain points that come with a high-growth organization and team, once management fundamentals are in place. What to do when our systems are slowing us down, but we have too many migrations? What's a good way to pay down tech debt? How do we say no, when there is so much work, but not enough people? How do we grow seniority evenly across the team? For me, reading the book was full of \"aha!\" moments. When I joined Uber, the Amsterdam office was 25 engineers. I started to manage 5 people when moving into engineering management. Three years later, the Amsterdam office is 150 people - doubling every year - and my team tripled. Many of the problems I faced are challenges the book discusses in detail. Challenges like setting a vision/strategy for my team, building a robust hiring and onboarding pipeline, or dealing with a never-ending stream of migrations.  The tone of the book is casual: it feels like we're sitting with Will, having coffee, while he talks about problems he's faced at different companies, systemic approaches he's seen work best, then giving examples of things that worked for him, in the past.  I like how the book rarely presents \"best\" approaches, instead, Will shares what worked for him  - with a healthy dose of systems thinking - and approaches he recommends to his peers and managers on his team. The book reads well as a reference - I personally prefer the physical book for this one. This book as the best resource I've come across for engineering leaders with some experience under their belt. For people who work in a similar environment like Will does, the advice is very relevant. These are places that are considered \"top tier\" companies, meaning the engineering environment is strong, leaders are technical, compensation is close to top-of-market, and engineering is a value-add, not just a cost center. Working in Amsterdam, places with such \"Silicon Valley tech culture\" like Uber seem more of the exception than the norm, as many engineering leads in Europe work in a different environment and different constraints. Managers are often less technical, some places still only  starting their DevOps transformation . In places like these, tech debt is something the business often does not want to hear about, and tech can still be seen as a cost center over a revenue generator. For managers working at these companies, the ideas in this book are still valuable to go through: companies that operate along with the principles outlined in the book hire and retain easier. They also move faster than their competition. Implementing the ideas might involve challenging the org's status quo and transforming the culture - for the better. An Elegant Puzzle is not just for engineering managers: product managers and engineers working at high-growth companies will find it a good read.  Other disciplines working with engineering - such as recruiters or operations - will find it an empathetic read. The head of product at a large startup recently told me how she was devouring over the book: \" I found the model in Will's book a simple model for building high-performing teams really useful (Are you falling behind? Add more people! Are you treading water? Pay down debt!)\".  A recruiting manager, who read the book,  said   \"I would highly recommend this book to any of my colleagues in the recruitment world who are or aspire to be people managers. While the book was written for leaders of engineering teams, the concepts translate to any situation where you are managing people.\" You want this book on your bookshelf If you are an engineering lead in a high-growth organization, I recommend having the (physical) book within arms reach, together with  The Manager's Path . And if you're working in a high-growth tech company, reading it will build a lot of empathy with the type of problems engineering managers and engineers deal with day to day in those environments. I am hoping that this book is the first of many software engineering-heavy management books: it is definitely the first of its kind that I've read. You can  buy the book here . Oh, and  I've also decided to write a book  about pragmatic software engineering   practices within high-growth startups and tech companies. Subscribe to email updates at the bottom of the post, if you'd like to be kept in the loop on developments on the book. Book Notes My recommendation on reading the book is to dive into relevant sections, starting at the table of contents. All chapters, as well as subsections within the chapters, can be read independently. I'm summarising the most relevant parts of the book and quotes that stuck with me The interesting thing about the book is Will published the drafts of the chapters on his blog,  Irrational Exuberance , as he wrote them. So all the content can be found in its raw form on this blog. I'm linking these for easy reading. The book is a series of independent problem areas that engineering managers face, in a high-growth environment. They can be read in any order. The book structures these sections into loosely mapped chapters: Organizations : topics on organization and team design Tools : systems thinking and tools to manage change at the org, team and individual level Approaches : common, but difficult situations engineering managers often find themselves in and dealing with these Culture : efforts that can shift the culture within an organization Careers : hiring, evaluating performance, promoting and retaining people Appendix : tools to operate an organization at the line manager, middle manager, and manager of managers level, as well as the reading list. #1 Organizations The book starts with the chapter on organizational design. Managers of managers will find this chapter especially useful, along with people who have - or want to have - insights into reorgs. Sizing engineering teams  - the very first section - was a section I wish Will shared more insights. It's one of the opinionated pieces, and it would have been good to hear what led Will to come to the size of teams he prefers (6 to 8 reports for a manager). Being in a high-growth team myself, we're also targeting around 10 reports per manager, after seeing what has and what has not worked out in people bandwidth. However, this is also dependent on the maturity of the team, seniority of the manager. I've had anywhere between 8 to 15 direct reports the past years, and the lower number is my strong preference as well, though I've yet to put an exact reason as to why. Productivity in the age of hypergrowth  is one of my favorite sections. ¬†It was both a \"deja vu\" and an \"aha!\" moment for me. Working at Uber,  one of the fastest-growing tech companies  every, hypergrowth has been something I have gotten used to, over the years. What was weird to see is how many systems we were decommissioning all the time, how stressful oncall was, and how many production incidents we kept having. I kept asking myself:  \"Is this normal? are we doing something wrong?\"  The \"aha!\" moment came with Will's observation saying that systems survive one magnitude of growth (10x): If your company is designing systems to last one order of magnitude and doubling every six months, then you'll have to reimplement every system twice every three years. This creates a great deal of risk‚Äìalmost every platform team is working on a critical scaling project‚Äìand can also create a great deal of resource contention to finish these concurrent rewrites. However, the real productivity killer is not system rewrites, but the migrations  which follow those rewrites. Poorly designed migrations expand the consequences of this rewrite loop from the individual teams supporting the systems to the entire surrounding organization. Other sections in this chapter: Staying on the path to high-performing teams A case against top-down optimization Where to stash your organizational risk? Succession planning #2 Tools This chapter is on managing change at different levels. Some parts of it overlap with the previous chapter when it comes to managing organizational change. Introduction to Systems thinking   is   where I'd recommend starting the book. I've intuitively been using this toolset, but the book is a great example of successfully applying this tool across the board. Developer velocity is an excellent example, the takeaway being: Once you start thinking about systems, you'll find it's hard to stop.  Pretty much any difficult problem is worth trying to represent as a system , and even without numbers plugged in, I find them powerful thinking aids. Migrations: the sole scalable fix to tech debt  is my other favorite section, together with  Productivity in the age of hypergrowth . My past three years at Uber, migrations have always been top of my mind and top of mind of all engineers working around me. It's refreshing to get the take from a different source, and a take that is an informed one. This section is gold, both summarizing why migrations matter ( \"they are usually the only available avenue to make meaningful progress on technical debt\" ) and tips for running good migrations (de-risk, enable, finish). Given I've done many migrations, this is a charter that felt short for me and missing some other important tips on making migrations successful. Things like purpose-built monitoring, shadowing and reverse shadowing traffic, as well as dealing with the fact that migrations almost always take longer due to the long tail being a lot more complicated. I suspect I'm the minority on this one though - and perhaps this is a queue for me to write an overdue post on this one. Running an engineering reorg  dives into how good reorgs  should  be run. With a team that grows fast, reorg is just a matter of time, and it's easy to get these wrong. Hidden in this section is a thought that I strongly agree with, based on the well-running organizations I've seen within Uber: At  quickly growing companies , I believe  there are two managerial skills that have a disproportionate impact on your organization's success: making technical migrations cheap and running clean reorganizations . Do both well, and you can skip that lovely running to stand still sensation, and invest your attention more fruitfully. Presenting to senior leadership  is some spot-on advice I wish I had gotten earlier. At Uber, I've had multiple initiatives I wanted to get buy-in from the higher-ups. The first few times I tried to convince my management chain why it was a great idea, the response was less than enthusiastic. Over time, I figured out how to go about this better, but Will gives detailed advice on how to prepare better: There absolutely is not a single right way to present to senior leaders, but hopefully, the template is a useful starting point. 1. Tie topic to business value. 2. Establish historical narrative. One or two sentences to answer the question \"Why should anyone care?\" 3. Explicit ask. What are you looking from the audience? One or two sentences. 4. Data driven diagnosis. (...) 5. Decision making principles. 6. Whats' next and when it'll be done. 7. Return to explicit ask. (...) I've had a lot of luck with this format in general, and I think you'll find it pretty useful as a starting point. Other sections in this chapter: Product management: exploration, selection, validation . An excellent section on how to put on the \"product manager hat\", that is often a useful one. Visions and strategies  - a guide to writing durable visions and easy to understand, more lightweight strategies. I've used both of these techniques, as the role of my team shifted. Metrics and baselines  &  Guiding organizational change with metrics Identify your controls Career narratives The briefest of media trainings Model, document, and share  - an approach to introducing processes that others might adopt, that I've also started to use at Uber (and notice other teams do the same). Scaling consistency: designing centralized decision-making groups Time management Communities of learning #3 Approaches The chapter discusses situations engineering managers will often find themselves in, from having to say no to partnering with your manager or setting org direction.  Saying no   is a section that resonates very well with me. In a high-growth organization, there are is always more impactful work that needs to be done, than the team can handle. (Saying) no is explaining your team's constraints to folks outside the team, and  it's one of the most important activities you undertake as an engineering leader . (...) Articulating your constraints depends on the particulars of the issue at hand, but I find that two topics are frequent venues of disagreement. The first is velocity: why is this taking so long when it should take a couple of hours? The other is prioritization: why can't you work on this other, more important, project? The   Your philosophy of management  section exemplifies how, over time, every manager will develop rules of thumb on managing, and Will explains what his management philosophy is. It's a good one to start thinking about defining your own and revising it regularly. At its core, I believe management is an ethical profession . To see ourselves, we don't look at the mirror, but rather at how we treat a member of the team who is not succeeding. (...) I believe almost every internal problem can be traced back to a missing or poor relationship, and that  with great relationships it is possible to come together and solve almost anything . (...) Often in this profession we're asked to deal with difficult situations. No set of rules can guide you safely through every scenario, but I have found that postponement is never the best solution. Instead of avoiding the hardest parts, double down on them. If you have a poor relationship with your manager or a member of your team, spend even more time with them. Meet with them every day or have dinner with them. (...) (...) As a final thought,  the best management philosophy never stands still, but (..) continues to evolve as it comes in contact with reality . The worst theory of management is to not have one at all, but the second worst is one that doesn't change. Other sections in this chapter: Work the policy not the exceptions Managing in the growth plates Ways engineering managers get stuck Partnering with your manager Finding managerial scope Setting your organizational direction Close out, solve or delegate #4 Culture A short chapter on efforts that can shift the culture within an organization. Make your peers your first team   is advice I wish I would have read earlier. When I moved into management, I focused most of my effort on the team itself, making sure we were a great team. The same time, I neglected building relationships with fellow engineering managers and other stakeholders. And it never occurred to me to think of my engineering manager peers as my first team, until recently. The best learning doesn't always come directly from your manager, and one of the most important things a first team does is provide a  community of learning .  Your peers can only provide excellent feedback if they're aware of your work and are thinking about your work similarly to how you do . Likewise, as you're thinking about your peers' work, you'll be able to learn from how they approach it differently than you anticipate. Soon, your team's rate of learning will be the sum of each other's challenges, not longer restricted to your own. Long term, I believe that your career will be largely defined by getting lucky and the rate at which you learn. I have no advice about luck, but  to speed up learning I have two suggestions:  rapidly expanding company , and make your peers your first team. Other sections in this chapter: Opportunity and membership Select project leads Consider the team you have for senior positions Company culture and managing freedoms Kill your heroes, stop doing it harder  - a good reminder on why \"working harder\" as a solution to all problems inevitably leads to burnout of people and the team. At my early days at Uber, I've been there, done that. Resetting the broken systems were indeed the solution, similar to how Will explains this. #5 Careers A chapter on interviewing and hiring processes, as well as coaching engineers grow in their career. Roles over rocket ships, and why hypergrowth is a weak predictor of personal growth   shares good advice on why tenure is a weak predictor on personal growth and how working at a high-growth company doesn't mean you get to grow quickly, without doing much. Even hypergrowth companies tend to have teams that are largely sheltered from change by either their management or because they're too far away from the company's primary constraints to get attention. By tracking your eras and transitions, you can avoid lingering in any era beyond the point where you're developing new masteries. This will allow you to continue your personal growth even if you're working in what some would describe as a boring, mature company. The same advice applies if you're within a quickly growing company or startup: d on't treat growth as a forgone conclusion, growth only comes from change, and that is something you can influence . Career levels, designation momentum, etc . is a section that talks a lot about how performance management systems and career levels have to change at a rapidly growing company. Calibration process changes, level splits, expansions, or drifts are all things I've seen happen at Uber, as we doubled every year. While this section is specific to (very) high-growth companies, as a manager, it's good to have an idea of challenges to expect when the old system breaks under a lot bigger organization. There are, surely, hundreds more interesting topics when it comes to how performance systems work in practice as opposed to in design. Although they seem quite simple,  I keep learning something new each time I go through a performance cycle, and I suspect that is a widely shared experience . Other sections in this chapter: Running a humane interview process Cold sourcing: hire someone you don't know Hiring funnel  is a good example of identifying bottlenecks via systems thinking. As someone, who is also a hiring manager, it's also a good reminder that hiring does not stop with an offer, but onboarding, impact, promoting and retaining are just as part of it. Performance management systems  covers career ladders and performance designations well. Hopefully, your company already has these in place: this section can help you verify if they are up to the standard Will defines. And if you don't yet have them and your company is beyond the small startup size, it's time to think about putting those together, involving managers and engineers. Creating specialized roles, like SRE or TPMs Designing and interview loop #6 Appendix The Appendix comes with a nice surprise: instead of the usual references list, it contains the   Tools for operating a growing organization  section.  This one is a brief refresher on key processes a team lead, a front-line manager with multiple team leads, and a manager an organization wants to have in place. Line management : Around the time your team reaches three engineers, you'll want to be running a sprint process. There are many successful ways to run sprints, try a few and see what resonates for you. (...) Middle management : As you move into middle management, you'll become responsible for two to five line managers, and will need to shift away from day-to-day execution to give your line managers room to make an impact (and free yourself up to make a larger impact as well). (...) Managing an organization : As your organization starts to get even larger and you're mostly managing middle managers, the playbook shifts again. (...) Along the way, remember that your old problems still exist, it's just that other folks are dealing with them instead.  As you roll out new processes to solve your personal pain points, you should be handing off processes to your managers , and keeping them intact and running. The book closes off with the  Books I've found very useful  section, where the referenced books are accompanied by a short summary. Where the Book Could Be Even Better Given Elegant Puzzle brings so much original content and ideas, with full of applicable ideas for people like myself working at high-growth tech companies, there's not much that I'd hold against it. However, a few things would have made the book an even more pleasant read. Diagrams  in the book are often a few pages away from where they are mentioned and I did not find them adding much context to the text itself. This is especially true for the Kindle version, as well as the large, whole-page diagrams. There are many inline diagrams that work well, but I found myself not getting much from the whole-page, yellow diagrams. These full-page diagrams are one of the few things that I found to work better on Will's website than they did in print. Inline diagrams like this read well. I wish there was more of these, and fewer of the yellow, full-page ones. The first chapter struck me as an odd start.  Given so much of the book builds on systems thinking, I would have put that chapter/section first. Coming back to the first chapter later made more sense to me. Some chapters are less cohesive than others . Some sections seemed to be an odd shift in style, content and length. For example, the  The Briefest of Media trainings  is a short section is between the  Career Narratives  and  Model, document and share  sections. There's little anything connecting the three. Also, the formatting is quite different between all three of them. Don't get me wrong, all three sections are good. However, lining them up based on a train of thought might have made for a better read. The book has no real end . This one I did not mind, as I treat the book more as a reference for various problem areas. However, I do think there was a missed opportunity to have a closing section, recapping the journey the reader and Will went together. Instead, after finishing reading the  Designing and interview loop  section, we immediately get to the  Appendix : and then the book suddenly ends. All the above, however, are small nitpicks. As I concluded before the book notes,  you do want this book on your bookshelf : grab it  on Amazon . Finally, if you are interested in getting updates on my book on (pragmatic) software engineering that I'm starting to write, subscribe below. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/developers-mentoring-other-developers/", "title": "Developers mentoring other developers: practices I've seen work well", "content": "\n             How does mentoring work?  I asked this question ten years into my software engineering career when I joined Uber. Until then, I've never received or done mentoring, or at least never put this label on any activity I've done before. Uber, however, had an official mentoring program. Almost every engineer I met had a mentor. Mentorship is an expectation for senior and above engineers, it being listed in our engineering competencies. Since working here, I've been mentored, been a mentor, and have observed engineers around me grow via mentorship. Mentorship has been the best things that's sped up my growth and others engineers around me.  This post discusses mentorship practices that work well engineer-to-engineer . The practices come from my own experience, observations I've made people mentoring each other and from conversations I've had with  half a dozen mentors  in my network and on  Coding Coach . I'm hoping this post will be a good starting point if you're either an engineer wanting to mentor, or a developer looking for mentorship. Let's dive into the topics: \n     What is mentoring? \n     Onboarding: a specific type of mentoring \n     Informal mentorship: it's happening everywhere \n     Formal mentorship: more effort, more focus, more growth \n         \n             Kicking off mentoring: the introductory meeting \n             When you are a mentee \n             When you are a mentor \n         \n     \n     Being a supportive and efficient mentor \n     Mentorship across the organization \n     Remote mentorship \n     The best engineers are great mentors \n     Closing quotes from mentors who are engineers \n     Places to find mentors \n What is mentoring? I've heard the term mentoring used with various meanings, often as a substitute for onboarding, coaching or helping. I like to narrow this down. In my take,  mentorship is a learning relationship between an experienced person and someone who wants to grow.  The  Wikipedia definition of mentorship  is not far off. The person receiving mentorship is referred to as the  mentee , while the person sharing their expertise is the  mentor . With software engineering, the setup is pretty typical: a more senior engineer mentors a more junior person. Reflecting on my previous experience, before joining Uber, I  do  recall many situations where I was mentored or was a mentor. When I was a junior developer, I paired with a senior engineer for a few months, learning lots from him. When a new person joined our team, I sat with them for a few weeks, helping them understand the codebase. These were all mentoring situations, though I never put the mentorship label on them. Onboarding: a specific type of mentoring A common type of mentoring is having an onboarding buddy when joining a new company. This person helps understand the new environment, and often pairs to write code that ships to production for the first time. They explain how systems, processes, and unwritten rules work. Some teams refer to this role as a mentor as well. I find onboarding being a nice example of mentoring . It's well-defined in scope: the mentor shares their expertise on how the team and company work. The duration is not too long and not too short: it lasts from the first day to when the new start is onboarded, typically in one or two months. Also, the responsibilities are clear: the mentor needs to do a lot of the preparation and drive this relationship, given the mentee is new. It's also something that happens pretty frequently. Most engineers are receivers of this mentorship every time they switch companies - even if it's not formalized. Informal mentorship: it's happening everywhere Mentorship doesn't need to be formal for a less experienced person to learn from a more experienced one. And for the most part, it isn't. It happens naturally when developers work together and collaborate. Code reviews are frequent examples of informal mentorship.  There's no need for formalities for a less experienced person to learn from a more experienced one. And for the most part, there are no formalities. At teams and companies, where code reviews are everyday practice, this learning happens with every review. It happens with  good code reviews and even more with better code reviews . Code reviews and the discussions during and after helped me significantly level up as a developer. I had many mentors, learning a little from each of them. Working on a project, as part of a team is another situation where mentorship is given and received. It might be during planning meetings, architecture discussions, whiteboarding, retrospectives, or something else. When working closely with other developers, feedback and learning naturally happen. Formal mentorship: more effort, more focus, more growth The mentoring I've observed to be rare for developers is a more \"formal\" type of mentorship. A setup where a more experienced mentor agrees to mentor a more junior engineer, they kick things off and have a regular cadence of meeting and the mentor helping the mentee grow. Why bother with the effort of more formal mentorship?  After all, informal mentoring happens all the time. Well, first, you might not be working with enough experienced people and would want to find someone targeted to learn more from. Second, more importantly, having a more \"formal\" mentoring relationship can help you grow faster and in a more focused way. There are two places where it's easy to get started with more formal, more focused mentorship: at more structured tech companies and within online communities . More and more tech companies have internal mentorship programs. Unfortunately, though, they advertise very little of these to the outside world. Uber, PayPal, and Amazon all places I know have various internal programs that make it easy to get more focused mentorship. Online communities of mentors are also a welcoming place with an easy way to start.  Coding Coach  is a new and thriving online community, which is a great place to join as someone looking for mentorship or as a mentor. Having formal mentors throughout my developer years would have helped me grow faster. So when I transitioned into engineering management, my first point of action was finding a mentor. This decision was the thing that  helped me grow the most . I've seen similar success stories with developers on my team after they kicked off focused mentoring with another engineer. For junior engineers, it was no surprise that they ended up growing faster.  What I did not expect is how much senior engineers gained from setting up formal mentorships with more experienced - staff or principal - engineers. So how do you go about setting up formal mentorship? Like with any long-running project, a good kickoff helps to get all participants - in this case, the mentor and mentee - get on the same page. Kicking off mentoring: the introductory meeting The best way to start formal mentorship is with a kickoff. I often suggest people to approach potential mentors and open along the lines of  \"You're someone I look up to. Can I setup time to talk about areas I'd like to grow in and how you could potentially help, as a mentor?\" ¬†It's  good to get some dedicated time for this, to share some background and see if both people can and do want to commit time for mentoring. Come prepared for the intro, making a list of the topics to discuss. Topics that are worth discussing in this kickoff are: Background . It's nice to share backgrounds to break the ice and get to know the other person a bit better. What's in it for me?  What are you hoping to gain from this relationship? Where would you like to grow? Ask the other person the same thing. The best mentorships are two-way streets, where both people get something out of it. Roles . What would you hope to get from the mentor? What would the mentor expect from the mentee? Topics  to cover. What areas are you interested in? Where would you like to grow? Is there something more pressing to discuss? Cadence . How often should we follow up and when? I've seen most developers catch up once every two weeks for half an hour or and hour, at a time that works for both of them, e.g., sometimes over lunch. Communication between catch-ups . Would the mentor be open to random pings? What is their schedule like? Short-term wins . What is an area you'd like to grow in the next month? Let's start with focusing on that. Evaluating  progress. What criteria would help to assess how efficient this mentorship is? Challenges . It's nice to lay out things that might make this relationship hard. For example, it's okay to share with your to-be-mentor that you have no clue how mentorship works. Or your mentor might share how they have a crazy next month, and they will be swamped. Don't forget; it's always okay to say no to mentoring . As a mentee looking for a mentor, I've had potential mentors politely decline several times. Sometimes it was lack of time; other times, they felt they did not have the expertise I was looking for. Don't let this derail you: ask for any other recommendations this person might have and try meeting another potential mentor. Sooner, rather than later, you'll have your first match. When you are a mentee With a running cadence and regular catch-ups in place, how do you keep getting value out of the mentorship? I'm a firm believer that as a mentee,  you need to invest time and effort in mentorship, to get value out of it . Set expectations clear from the start. Come prepared to the catch-ups with your mentor, making good use of their time. Bring challenges, wins, and areas you'd like to get their input on. Have a list of top things you'd like to talk through with them. During the discussion, as you get advice and ideas, commit to actions, follow through with these, and let your mentor know how it went. In the  Manager's Path , Camille Fournier advises following a similar approach:  You owe it to this person not to waste her time. If you don't have the time to prepare or don't feel that preparation is necessary, ask yourself whether the mentoring relationship is really something you need at all. I like to keep a running doc, shared with my mentor, where I drop notes between our catch-ups and prepare a list of topics. The structure I use is this: Key things that happened since last time . I like to fill in mentor briefly on key things that happened since last time. I keep this short. Reflecting on action items / guidance / discussions from last time . If I did something we talked about last time like tried out an approach, read a book, I share the results. This is useful for both of us, and my mentor gets to learn something interesting. A challenge I'm having , talking through it and brainstorming on an approach to solve it. A recent success  I've had. I describe a situation I thought I handled well and why I thought it went well, asking my mentor to share what she thought of it. Nine out of ten times, I get feedback from a different angle, that make me re-evaluate how I'll handle the situation the next time. When you are a mentor Being clear with expectations both ways is the foundation for a good relationship. Clarify how much time you can commit to, and also tell your mentee what you're expecting from them. If you'd like them to come with a list of things to talk through, say so. If that's not your style and keep it casual, tackling things as they come, discuss this upfront as well. Being a supportive and efficient mentor Being an efficient mentor is not about solving other people's problems. It's about helping them grow so they can solve their problems themselves. When mentoring, you want to delay sharing solutions as long as possible. Listen to what your mentee has to say.  This   is  the  most important role a mentor can play. The mentee is coming for advice, but talking about what's going on and how they are feeling is just as important. Try starting the conversation with questions that help you listen, like \"What's  on your mind?\" , \" What are you struggling with?\",  \" What are you working on?\"  \" What are your goals for the week?\" . Sit back, listen and think about areas you might be able to help with. Discuss specific situations  to dive deeper. These situations can be ones brought up by the mentee or ones noticed by the mentor. Topics can be from communication, cultural issues, deep technical questions, code reviews, and many more. Provide context and perspective  for the specific situation. You probably have been in the industry for longer and had similar situations that your mentee is struggling with. If you work at the same company, you probably know how things work a lot better. Reflecting on how you experienced a similarly challenging situation back in the day, and how you also struggled with it can help the mentee feel less anxious. Leverage your network  to help your mentee. This is especially powerful when you work at the same company, as you can put them in touch with other people who can help. Mentors are usually a lot better connected than mentees. Making introductions and asking others to spend some time with the mentee goes a long way. When you don't work at the same company, you might still see opportunities to connect them with others, helping with a warm introduction. Be supportive  and let them know that you are on their side. People who approach you for mentorship are not only looking for advice but also support. The less experience they have in the field, the more likely they  feel like an impostor  and the more your support will help them. Encouraging words go a lot further than you would think: Any mentor I've worked with here so far has  always  ended our conversations with -- \"You got this\" or \"You can do this\" or something of that nature. They may just be words, but damn if they don't mean the world to me. (quote from a mentee sharing their experience) Avoid giving answers on a silver plate . You want the person you're mentoring to get to solve their problems themselves, with as little direct guidance from you, as possible. Ask questions, offer alternatives, and hold back telling people what to do. Taking a patient, coaching-first approach empowers more junior developers and accelerates their learning.  A few more tips on how to be a great mentor: Aim to learn something new  from your mentee. Be curious about the problem they want to solve and understand their viewpoint. Even if you know a good answer, if you coach them down the line, you might learn something new, looking at the problem through a different lens. Help mentees come up with multiple solutions to their problems  and help them articulate the tradeoffs themselves. Explain concepts over solutions and help mentees understand that there are rarely black or white answers. This is especially true for technical topics and mostly holds for non-technical problems. Tailor your approach for technical vs non-technical topics . Technical questions are usually easier to deal with: you can coach by asking what avenues they've tried and guide them with questions towards something that works. For non-technical topics like communication, conflict and others, listening is key. Mentoring brings benefits on the long-term as well . Beyond the short-term benefits of becoming a better communicator and teacher, don't forget about the long game. The software industry is small, and the person you are mentoring as a junior soon grow more senior. In a few years, they might be a director or CTO even. Be a supportive mentor, and they'll think fondly of you. You might reconnect later, in a different setting. There is no one pattern for mentorship.  For most people, mentoring is a mix of informal mentorship and regular catch-ups. People often reach out to mentors with one-off questions. Some prefer in-person mentoring, and some mentorships don't go beyond reviewing code. All the mentors I've talked shared one thing about what their approach is:  \"It depends.\" Mentorship across the organization Mentorship is time- and emotionally consuming. It's often invisible to managers of the mentors. At the same time, it's one of the best ways to grow seniority on the team. It's one of the best tools to retain people at the company. When developers get mentoring, they learn. When they learn, they are engaged. When developers are engaged, they are a lot more likely to stay.   Thus,  recognizing and encouraging mentorship within teams and companies is one of the most important things managers can do and advocate for. So how can you support more mentoring within your team and organization? Facilitate setting up mentoring relationships  between people. As a manager, you have a good understanding of the strengths and weaknesses of people. It also carries more weight, when you are reaching out to a potential mentor, asking them to have an intro meeting with a mentee on your team. Recognize that mentoring takes time , especially from the mentor, who is not getting an immediate return. As a manager of a mentor, create time where you can and don't assume they'll get to mentoring in their free time. Lead by example . Volunteer to be a mentor to others and seek out mentorships. Be open about this, sharing your progress with your team members. Mentorship being part of promotions, performance reviews, and competencies . Make mentorship part of performance evaluations and promotions. I am not saying that someone mentoring should get paid more. However, to make mentoring something that spreads across the organization, make sure mentoring is called out as an expectation from senior engineers. This does three things.  First, it makes it a requirement to mentor others to get promoted to the senior level. High performers, who are on the path to promotion, now have another incentive to help others. Second, for non-senior engineers who already mentor others, it explicitly recognizes them going above and beyond. Finally, it creates an incentive for existing senior engineers to mentor and share their knowledge more. Remote mentorship Mentoring is powerful when done in-person, but sometimes mentors are not based in the same place or location. Mentorship is a powerful tool with this setup, as well. One of my mentors lives in San Francisco, so we do video calls all the time. I've also talked with several experienced mentors who do remote mentoring  on Coding Coach  and have all had great experiences using this format. Exercises work exceptionally well for remote technical mentorship  in this kind of relationship. Both mentors and mentees have mentioned that this is a tool that they've seen work better than others. A mentee I talked with, summarized it like this: I personally enjoy getting my hands dirty, so when my mentors have offered up exercises, or specific challenging questions that require me to figure it out, I loved it. The information seems to stick more. (quote from  Ryan ) The same rings true from the side of the mentors. As an experienced mentor says: When mentoring remotely, I try to help by giving some exercises regarding the level of the developer. I do the exercise as well and I give several steps to build, but I give no indications/hints at the beginning. There is just a problem that needs to be solved. I'm doing this, since a big part of the developer's job is to know what and how to search. So the mentee is usually spending a lot of time looking for online examples or pieces of algorithms they have to understand eventually. When they are ready, we talk about our mutual solutions, and I ask to explain the choices they've made. We discuss the algorithm, the methods they chose, and the code quality. (quote from  Lo√Øck ) The best engineers are great mentors The most sought-after software engineers I know, are all generous mentors. People not only look up to them for their coding, architecture, and execution skills. They also do so because they are approachable and continuously help others grow around them. This is because they are generous mentors, may this be informal or formal mentorship. And mentorship is how they keep growing their skills in areas like teaching, listening, and leadership, and growing a strong and supportive network around them. If you are not being mentored or mentoring, reach out and find a mentor, or volunteer to be one in your company  or online . Doing so will help yourself and other people grow further.  Finally, if you'd like to read more about mentorship for software developers, the Mentoring chapter in  The Manager's Path  is another good read on this topic. Closing quotes from mentors who are engineers In writing this article, I've reached out to several mentors and mentees in my network and via the  Coding Coach Slack group , asking about their experience and tips to share. Below are some of my favorite comments, which all highlight how different, yet how valuable mentoring is, for both people involved: Mentoring is a bit more intimate in a way as it's a 1 to 1 interaction. But you get to make a difference in someone's life. As cheesy as it might sound, I think it's quite special. It's  a win-win situation where I get to meet and help other developers, wherever they are in their career path. I also get to deepen my knowledge and improve my communication skills . Teaching is the best way to learn - this is quite true. -  Aurore I use multiple approaches when mentoring. I have a small number of people with whom I have a cadence, and a slightly larger number of people that shoot me occasional, targeted questions. Both styles are great! Also, in my style, I lean heavily toward coaching.  I feel strongly that people learn best when they help themselves.  -  Brent A mentor is someone who has skills that a mentee desires to have and the time and willingness to help the mentee attain them. It's not really more complicated that.  I find that if you try and make it more complex than that formality and process tends to get in the way of what should be a fairly natural thing . All the mentors that I've had throughout my career weren't formally my mentors. They were just people with skills that I admired, so I spent time with them and they were kind enough to share with me how they did things. I listened, and I practiced, and now I'm in a position where I can pay that favor forward on behalf of my previous mentors, and so I do it. -  Zac In some situations, we discuss what it takes to get to the next level in the person's career. Throughout the mentoring sessions,  I try to spot opportunities to help them grow faster in their career , based on what worked for me. So I might suggest \"I think you could lead this project end-to-end\" or \"what would it take for this tool to be adopted by multiple teams?\" or other things\" -  Willem I don't expect the mentee to come to me with questions all the time; it's a two-way relationship . It's easy to get trapped in the mindset of \"Oh I'm the mentor. Why should I do all the work?\". I did this for a bit, but ultimately, the mentee is working hard learning, and I volunteered my time so I can and should help. -  Zac This community  in general is amazing and incredibly supportive . No one will straight up give you the answer (usually) because you learn nothing that way, but they will point you in the right direction, give you hints, show you reading material, and always boost your self-esteem when diving into the unknown -  Ryan Special thanks for the discussions on mentorship from  Aurore ,  Brent ,  Le Digabel ,  Ryan ,  Zac  and  Willem  in the making of this article. Further articles  related to developer mentorship: The tech tribe of mentors  by  Nielet D'mello . The importance/approach on having multiple mentors. Mentoring from privilege  by  Will Larson . A more thoughtful approach when mentoring people from different background to you. Places to Find Mentors Mentoring is a fantastic way to grow. But where can you find mentors who might help you? Here are some ideas. Note that none of the below links are affiliate links or sponsored ones and I have no affiliation with either organization. See  my ethics statement  on the lack of such links. If you are employed with no mentorship available within your organization, I do recommend asking your company to pay for mentorship, as it's an investment in your professional growth. At your current company . Are there people you can learn from? Connect with them directly, and set up a one-on-one. Join an online community  like  CS Career Hub  (for people starting out)  Hangops  (devops community)  Rands Leadership Slack  (engineering leadership),  Engineering Managers Slack  (engineering managers),  CTO Craft Community  (engineering leadership), or  Coding Career Community  (one-off payment as the Community package). You'll find interesting discussions and a great place to ask for guidance on your current challenges. There are several local groups like  CTOs Portugal  and many others you can find. These communities are also a great place to connect directly with people for mentorship and advice. Connect with someone local  you could learn from. Similar to the life hack of  grabbing coffee with an experienced engineer you don't know , you can reach out to people in your local area and ask if they offer mentorship. Do this over Twitter DMs, meeting people at meetups and local events, or reach out to people local to you. Alumni groups . If you're a university or a bootcamp graduate, several of these places offer programs to connect with previously graduated members who can mentor you.  Mentoring Club: software engineer mentors  (free) : pro bono mentorship for software engineers and engineering managers. The best resource to find experienced mentors. Coding Coach  (free) : pro bono mentorship for software engineers. Mentors in Tech (free) : mentorship for community college students in the US who want to break into the tech industry. Meet a Mentor  (free) : a Slack community matching up with mentors in the UK tech community. Merit  (free) : tech mentorship, focused on under-networked tech workers. MentorColor  (paid) : mentors working at well-known companies. Mentors can choose to either donate the mentorship fee or keep it.  CodeMentor  (paid) : paid mentorship at reasonable rates, tailored for software developers. Most of the revenue goes to the mentor (mentors are charged a service fee). MentorCruise  (paid) : ¬†paid mentorship from senior engineers and engineering managers working at various companies. The platform takes a transparent, 20% cut from the rates you pay. Recommended coaches and mentors for engineering managers   (paid) : a list of people in tech people in my network have recommended. I personally do not recommend  Plato  (paid)  due to  their business model that hides how mentors are volunteers , charging high fees as if they were not. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/good-code-reviews-better-code-reviews/", "title": "Good Code Reviews, Better Code Reviews", "content": "\n             I've published an updated and re-edited version of this article on the Stack Overflow blog -  check it out ! I have been doing day to day code reviews for over a decade now. The benefits of code reviews are plenty: from someone else reading through the change, through knowledge sharing all the way to tooling and automation improvements. If you are not doing code reviews, take the advice from  Jeff Atwood  shared in 2006 and  just do it . Plenty of people and organizations have shared their code review best practices and what the definition of good code reviews mean to them. Guides from the  SmartBear team , the  Palantir engineering team  and  from engineer Philipp Hauer  are all great reads. Below is my personal take on what good code reviews look like and what great ones - better than good - are. This is in the context of the tech environment I have been working at - currently at Uber, before at Skype/Microsoft and Skyscanner. Areas Covered by the Code Review Good code reviews  look at the change itself and how it fits into the codebase. They will look through the  clarity of the title and description  and  \"why\" of the change . They cover the correctness of the code, test coverage, functionality changes and confirm following the coding guides and best practices. They will point out obvious improvements, such as hard to understand code, unclear names, commented out code, untested code or unhandled edge cases. They will also note when too many changes are crammed in one review, suggesting keeping code changes single purposed and breaking the change into more focused parts. Better code reviews  also look at the change in the context of the larger system, as well as check that changes are easy to maintain. They might ask questions about the necessity of the change or how it impacts other parts of the system. They look at abstractions introduced and how these fit into the existing software architecture. They note maintainability observations, such as complex logic that could be simplified, test structure, duplication and other possible improvements. The way engineer  Joel Kemp  puts it is these code reviews do a  contextual pass following an initial, light pass . Tone of the Review The tone of code reviews can greatly influence morale within teams. Reviews with a harsh tone contribute to a feeling of a hostile environment with their micro-aggressions. Opinionated language can turn people defensive, sparking heated discussions. At the same time, professional and positive tone can contribute to a more inclusive environment. People in these environments are open to constructive feedback and code reviews trigger healthy and lively discussions.  Good code reviews  ask open-ended questions over making strong or opinionated statements. They offer alternatives and possible workarounds that might work better for the situation. These reviews assume the reviewer might be missing something and ask for clarification instead of correction, at first. Better code reviews  are also empathetic. They know that the person writing the code spent a lot of time and effort on this change. These code reviews are kind and unassuming. They applaud nice solutions and are all-round positive. Approving vs Requesting Changes Good code reviews  don't approve changes while there are open-ended questions. However, they make it clear which questions or comments are non-blocking or unimportant, often called \"nitpicks\" or marked with  \"nit\" . They are explicit when approving a change - e.g. giving it a  LGTM . They are equally explicit when they are requesting a follow-up, using the code review tool or team convention to communicate this. Better code reviews  still don't approve changes until there are important questions that need to be answered or addressed. ¬†These reviews are firm on the principle but flexible on the practice: sometimes, certain comments are addressed by the author with a separate, follow-up code change. For changes that are more urgent than others, reviewers try to make themselves available for quicker reviews. From Code Reviews to Talking to Each Other Good code reviews  leave as many comments and questions as are needed. If the revision does not address all of them, they will note those as well. When the conversation gets into a long back-and-forth, reviewers will try to switch to talking to the author in-person over burning more time using the code review tool. Better code reviews  will proactively reach out to the person making the change after they do a first pass on the code and have lots of comments and questions. These people have learned that they save a lot of time, misunderstandings and hard feelings this way, over going back-and-forth on the new revisions. The fact that there are many comments on the code indicates that there is likely some misunderstanding on either side. These kinds of misunderstandings are easier identified and resolved by talking things through. Nitpicks As mentioned before, good code reviews make it clear when changes are unimportant nitpicks. These could be things like variable declarations being in alphabetical order, test structures following a certain structure or brackets being on the same or the next line. Good code reviews  usually don't have too many nitpicks. Too many nitpicks can become frustrating and take the attention away from the more important parts of the review. Better code reviews  realize that too many nitpicks are a smell of lack of tooling or a lack of standards. Reviewers who come across these frequently will look at solving this problem outside the code review process. For example, most of the common nitpick comments can be solved via automated linting. Those that cannot, can usually be resolved by the team agreeing to certain standards, following them - perhaps even automating them, eventually. Code reviews for new joiners Good code reviews  use the same quality bar and approach for everyone, regardless of their job title, level or when they joined the company. Following the above, code reviews have a kind tone, request changes where needed and will reach out to talk to reviewers, when they have many comments. Better code reviews  pay additional attention to making the first few reviews for new joiners a great experience. Reviewers are empathetic that the recent joiner might not be aware of all the coding guidelines and might be unfamiliar with parts of the code. These reviews put additional effort into explaining alternative approaches, pointing to guides. They are also very positive in tone, celebrating the first few changes to the codebase that the author is suggesting. Cross-office, Cross-timezone Reviews Code reviews get more challenging when reviewers are not in the same location. They are especially challenging when reviewers are sitting in very different timezones. I have had my fair share of these reviews over the years, modifying code owned by teams in the US and Asia, while being based in Europe. Good code reviews  account for the timezone difference when they can. Reviewers aim to review the code in the overlapping time between offices, assuming there are a few hours. For reviews with many comments, reviewers will offer to chat directly or do a video call to talk through changes. Better code reviews  notice when code reviews repeatedly run into timezone issues and look for a systemic solution, outside the code review framework. Let's say a team from Europe is frequently changing a service that triggers code reviews from the US-based owner of this service. The system-level question is why these changes are happening so frequently. Are the changes done in the right codebase or should another system be changed? Will the frequency of changes be the same or go down, over time? Assuming the changes are done in the right codebase and the frequency will not go down, can the cross-office dependency be broken in some way? Solutions to these kinds of problems are often not simple and could involve refactoring, creating of new services/interfaces or tooling improvements. Solving dependencies like this will make the life of both teams easier and their progress more efficient. Organizational Support How companies and their engineering organizations approach code reviews is a big part of how efficient they can be. Organizations that view them as unimportant and trivial end up investing little in making reviews easier. In cultures like this, it might be tempting to just do away with code reviews, in some cases. Engineers advocating for doing better code reviews might feel isolated, not getting support from above and eventually give up. Companies that treat code reviews as a key part of good engineering make for a more empowering place for engineers to work at. Organizations with good code reviews  ensure that all engineers take part in the code review process - even those that might be working on solo projects. They encourage raising the quality bar. Teams facilitate healthy discussions at the on code review approaches both at the team and org level. These companies often have code review guides for larger codebases that engineers initiated and wrote. Organizations like this recognise that code reviews take up a good chunk of engineers' time. Many of these companies will add code reviews as expectations to the developer job competencies, expecting senior engineers to spend a larger chunk of their time reviewing the code of others. Organizations with better code reviews  have hard rules around no code making it to production without a code review - just as business logic changes don't make it to production without automated tests. These organizations have learned that the cost of cutting corners is not worth it: instead, they have processes for expedited reviews for urgent cases at the team and org level. These organizations invest in developer productivity, including more efficient code reviews and tooling improvements. Executives in these companies usually were software engineers themselves who don't need convincing on the benefits of code reviews and other engineering best practices. Instead, they support initiatives on better tooling or more efficient code review processes that come from teams. ¬† When people come across reviews that feel hostile, they feel they can speak up and have support all-round to resolve the issue. Senior engineers and managers consider code reviews that are not up to the bar just as much of an issue as sloppy code or poor behaviour. Both engineers and engineering managers feel empowered to improve how code reviews are done.  \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/growth-hacks-coffee-with-an-engineer/", "title": "Growth hacks: coffee with an experienced engineer you don‚Äôt know", "content": "\n             While I do my best to keep doing networking, I have to admit that I don't think I'm that good at it. At least the traditional sense of go-to-a-meetup-and-talk-to-people type of networking. This is despite me being an extrovert and having attended many meet-ups and tech conferences, doing small talk with lots and lots of people. Still, I rarely felt that I got much out of a five-minute lightning conversation, beyond saving contact details for later or adding the person on Twitter or Linkedin. A surprisingly efficient networking method I found was doing cold reach-outs  to more experienced software engineers, offering to buy them coffee or lunch. In exchange, I asked them to share their advice on  {topic they are experts on, and I'd like to get better at} . This is kind of like  cold sourcing for hiring . Except it's not about hiring and you're not a recruiter. You're not selling anything, but asking for advice on something they are busting with advice on. These are the things that bring the chance of getting a response from a developer from zero to quite likely to respond. I started doing this when I started at Skyscanner in London. It was a new and small office at the time, and I missed having people around me to learn from. I set myself the goal to meet one person per month. I started by both asking around friends for recommendations of the best people they've ever worked at. I also browsed my second-degree Linkedin connections, then shooting off a message to them, being clear on TODO. Here's the type of messages I would send out: Hi X, Y recommended I reach out to you as one of the best iOS engineers he's worked while at CompanyY. At Skyscanner I'm the first - and currently, only - iOS engineer in our new London offices and a relatively new tech lead as well and I'm looking for people to learn more from.  If you have time, love to buy you a coffee or lunch at a time and location that works conveniently for you. I'm really interested to chat about your experience on leading a team while being a top individual contributor, as well as any advice you might have about balancing tech work, recruiting and mentoring others. In return, I'd be happy to share my views on iOS, how I'm approaching building a new app and anything else that you might find interesting. I also understand that you might be busy, so no worries if you wouldn't have the time! To my surprise, almost all engineers accepted, and we set up coffee or lunch, having a great conversation. I met many interesting people this way, some of whom I'm still regularly in touch with. What I did not expect was this approach to be far more valuable than just a one-off networking session . In all cases, I had fascinating conversations on problems they were facing and found myself explaining the biggest challenges on my plate. Sometimes, these were problems that I've been working on for weeks. After this conversation, I always came away filled up with ideas, inspiration, and often with a new solution in mind for the difficult problem I was facing. I also came away learning a  lot  about how other companies work, how another person approaches problems, and what they think about different technology topics. Another thing I got out of these sessions was validation. Either myself or the other person would talk about an unconventional thing I was doing, that few people talked about online. Quite a few times, I found out that it wasn't all that unconventional - they were either doing, have done or planning to do the same thing. For example, this was the time when the internet was full articles on how moving fast and breaking things works so well for Facebook - and all startups would be wise to follow. I worked at a startup, on a small product, but had my own reservations. In these conversations, I got validation that others feel the same way, which led me to writing down my thoughts on the  dilemma of moving fast without breaking things . These sessions were far more of a refresh than I expected them to be. It was so nice to step out of my day to day work bubble and talk about professional things about someone who works in the industry but in a different place. Developers buying coffee and having a chat with other, local developers is an underrate hack for professional growth. It is also under-used . I know this because although I reached out to many experienced engineers to meet them and learn from them, I've had very few people reach out to me this way. On one end, I'm not surprised: cold reach-outs are weird to do, and it takes guts to do this. On the other hand, I'm telling you: you do it. Do it to learn about what it's like to work at another company. Do it to get tips from them on how to become a better engineer or other things you admire them for. Whenever I get a reach-out from a person in the local developer community, I make a point to try to make time for this. I do this, frankly, because it's a lot of fun. It's also learning something new for me. It might help with career opportunities for either of us, down the line. I find catching up like this also to be inspiring and something different from my day-to-day. Just how inspiring? This post would not have been written if a developer in Amsterdam had not reached out me this way. They wanted to chat more about what it's like to work at Uber and how it's different to freelancing and agency work, that they have experience with. It was a great chat. We need more of these. Did you get inspired to reach out to others? Here are a few, useful ground rules to increase the likelihood of replies  when you ping people this way. Shared connections  help with these kind of reach-outs. The software development industry is small and assuming you know a few people local people, and probably already have hundreds of second-degree connections in your local area. It's nice when the reach out does not come from a complete stranger. You're the one asking for a favor  - be clear on this to yourself. This means you'll want to accomodate around the other person for time and location. Make it easy for them. Think of what you can offer, in return . You might feel that you have less to offer, but do some research on what this person does. Especially if you are meeting someone who is more of a peer - like I had, in many cases -, offer to share your experience on the field. Be early and come prepared . You want to get the most out of this time, so draft up topics you'd like to get their input on. Try not to be late. Pick up the bill , no matter what the other person suggests. Again, it was them who volunteered the time and did the favor. This is more about the gesture, than the price. Pay it forward/pay it back . The next time someone reaches out to you, try to think of ways of having a conversation that fits into your already busy schedule. If you already used this method, you're just paying back. If you're being reached out of the blue, try saying yes and see what happens. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/software-engineering-promotions/", "title": "Software Developer Promotions: Advice to Get to That Next Level", "content": "\n             I've had a pretty good run with promotions lately. When  I transitioned from being an engineer to management , I had eight people report to me. Two years later, all of them got promoted to the next level, as well as a few other developers, who joined my team later on. I've since helped people outside my team put together successful promotion cases and have been a member on a few promotion committees for engineers. Recently, I also got promoted to the next level of engineering management. Promotions become a sensitive subject for engineers, sooner or later. When joining a company, few developers have this on their mind - rightfully so, as people are focusing on getting up to speed. But as time goes by, and as more and more people get promoted around them, promotions become top of mind for many. As a manager, it naturally became a topic I frequently found myself thinking about. This article collects advice on promotions that I've been giving to engineers on my team  - many of whom have since been promoted to that next level. Do your preparation Set your sight on the promotion Get help & frequent feedback Put in the work Stay grounded Help others Read a more detailed article I wrote on üîí  Preparing for promotions ahead of time: for engineering managers and senior+ engineers . Do Your Preparation Once you decided you have some interest in being promoted, start with gathering information on the basics, and assess how realistic a promotion for you is. Understand the promotion process at your company. Every company has a different process for promotion. While similar companies might have similar processes, but don't take this for granted. If there is information written down on the process, that's a great start. The best place to start with is asking your manager. As companies grow and mature, promotion processes change. The most common types of promotion processes I've observed are these three ones: Informal promotions: managers decide who gets promoted . Several managers getting in a room, then coming out with a list of people promoted is the typical process for smaller startups and companies. In the meeting, managers present people on their team, and the group decides if they are ready for promotion. Semi-formal promotion process with a manager-heavy promotion committee . As the company grows, getting all managers together becomes difficult and overly time-consuming. Also, the biases of the previous process start to be a lot more visible. Leadership will aim to put a process in place that is more scalable and fairer. This usually begins with writing down basic expectations for each engineering level and requiring managers to submit short documentation on why the engineer on their team is ready for promotion. Formal promotion processes: promotion packages and committees . This is the type of process companies like Google, Uber, and several large tech companies follow. It requires having clearly and extensively defined job ladders, with clear expectations at each level. The idea is to make promotions as unbiased as possible. In return for a more fair and transparent process, far more documentation is produced. Extensive self-reviews, peer reviews, and manager reviews are written. A promotion committee formed of senior engineers and managers decides on whether the promotion can go through. All approaches have their benefits and drawbacks. Know what your organization is following, so you have a better idea of how you and your manager will have to prepare for it. Assess yourself Most tech companies follow an approach of promoting people to the next level, who are already performing there. Promotions are usually a recognition that your impact and skills are consistently exceeding what is expected of you, and they are in line with what is the norm at the next level. So how are you doing, compared to the next level? Answering this question is a lot easier when you work at a company, where competencies and levels are clearly defined in a document, that you can reference. Some good examples of well-defined competencies include the likes of  Monzo ,  Square , or  Rent The Runway . If your company has well-defined competencies, read through the expectations at your level, and the next level. Make a list of skills that you've demonstrated and the impact you've delivered and how it matches those expectations. If your company doesn't have clear competencies and expectations, you still need to figure out how you are doing against current expectations. You'll also want to know what is expected to get to the next level.  As a rule of thumb, to be considered for promotion, you're expected to do very well at your current level.  So you can start with getting feedback on your current performance, talking with the person who is in the best position to give this feedback to you: your manager. Get your manager on your side No matter what process your company follows, if your manager does not support a promotion, you have very slim chances of getting there. So make sure to get your manager on your side. How do you do this? Ask them about how promotions work, what their philosophy on promoting is. Ask them how they would rate your current performance, compared to the current and the next level. Depending on your manager, you might decide to bring this up step by step, but you'll need to have an honest conversation about this, sooner or later. This kind of conversation always felt awkward for me, as an engineer, and I avoided it for a long time, in my career. Looking back, I wish I hadn't. There's a simple reason why. It is in the best interest of your manager for you to be promoted -  when  you are ready.  Managers are judged by their ability to have their teams deliver better outputs. They do this by having their engineers be more efficient as a team. For the team to be more productive, engineers on the team need to grow to be more efficient, reliable, and senior. One of the externally visible indicators of growth is promotions. A promotion implies that the manager helped this person grow - either by mentoring, coaching, or just getting out of their way. A manager, whose team is becoming more senior indicates they are doing an excellent job cultivating talent. So we know that promotions make managers look good. Still, there are plenty of developers who think  \"my manager would never promote me.\".  Ask yourself: why is that? A manager whose directs are stagnating starts to draw unwanted attention, both from above and from their team. If people keep getting average or poor performance reviews, never being up for a promotion, that also doesn't look good on the manager. So after you've asked yourself why your manager doesn't seem to want to promote you, ask your manager as well. It is in their best interest to tell you what the areas are that you can and should grow. Be realistic in promotions above the senior bar Typically, being promoted up to the senior level is mostly based on gaining skills, demonstrating those, and delivering impact. However, above the senior engineer level, other factors come into play. First, there might be a budgeting limit to how many people can be promoted to higher levels. Some places require a business case on why a lead, staff or principal engineer is needed for a given team or area. If there's no business case, you might not be able to be put up for promotion. This is true even if you might have a fair chance of being promoted otherwise. Second, above the senior engineer level, you might find it challenging to find projects that are large and impactful enough to warrant a promotion. For example, your team might be busy shipping small, incremental features, that have little complexity, but decent business value. You almost certainly won't be promoted beyond the senior level by just doing great work here. This is a case where you need to take ownership of your career and decide how to move forward. Do you wait around for a new opportunity to come by? Do you move teams, to lead work on a complex and impactful greenfield project? Do you propose a new initiative that has a massive business impact, convince stakeholders to kick it off, and end up leading it? There are no simple answers: you'll have to take the initiative, gather support, and ultimately take smart risks in your career. As you move up the career ladder, it gets harder and harder to get to the next level.  It's a similar challenge on the developer ladder, as it is with management. Going from manager to director is usually similarly difficult, as it is going from senior engineer to staff or principle. Set your sight on the promotion Once you know how the promotion process works, have assessed yourself, and have your manager on your side, it's time to focus. Set goals to close the gap on areas you lack for the next level There will undoubtedly be several areas you need to either get better at or demonstrate impact. This might be ranging from areas like software engineering, executing with impact, designing solutions to complex problems, collaborating better with others, and many more. Set S.M.A.R.T. goals that will help you get there - specific, measurable, attainable, realistic, timely. Set goals that are only dependent on you, not on external factors, like being given an opportunity. For example, if an area you've identified to improve is to get better on architecture, don't set a generic goal of you architecting a complex project. But you could set a goal of thoroughly reviewing at least one proposal per month, mentoring at least one junior engineer for 3 months on this area or reading a relevant book and presenting learnings to your team and organization the next 2 months. If you are confirmed to lead a project, you could set the goal of getting your proposal reviewed by two people senior to you, who are outside your team. Act and take responsibility like you're already at the next level There are two kinds of promotion cases. One is a dead-simple one: the engineer has, without doubt, been executing at the next level for a long time. The other one is more challenging: the person shows lots of promise, but there are a few areas where they fall short from the next level. This second type of promotion case is the coin-toss-type, where the outcome could go either way. When you're working towards a promotion, aim to consistently perform at that next level: don't limit this only to your focus areas. If you're aiming for the senior level and your team's project is at risk, set up and help the whole project succeed. If your manager is asking for volunteers for a chore that is boring, but important and no one is stepping up, consider putting up your hand. On top of smashing this work, automate parts of it, to make it easier for the next person on the team to do it. Keep a log of your achievements and impact When the time comes for your manager or you to put together a promotion case, the first question will be on what you've achieved, that warrants this promotion. By that time, you will have forgotten much of the great work you've done. So get ahead of this and start writing up all the work you're getting done. Start a  work log document  or something similar, that you continuously keep up to date.  Here's a Google Doc template I created . Share this with your manager, so they also are aware of all the work you're doing. No one knows the work you do better than you do. You'll likely surprise your manager with how many additional things you're getting done. And you'll make both of your lives easier when you do get put up for promotion. Consider  doing a self-assessment  against the next career ladder level, listing out examples that you believe prove you've demonstrated working at the next level. Ask your manager for feedback, and use this review to identify gaps towards the next level that you can work to close. Get help & frequent feedback Working towards a promotion is no short process: it can range from a few too many months. It's easy to lose track of how you are doing and if you are still on target for demonstrating that you are at the next level. Get a mentor in the company, to help you While your manager is probably on your side with working towards a promotion, there is only so much feedback they can give you. You can speed up your professional growth  by getting a mentor, who is another engineer . Try to find a developer who is already at the next level. Even better, if they have been promoted within the company. Ask them for mentorship specifically on growing to the next level. Share your assessment and goals with them and ask for feedback and help on helping you grow to that next level. Within my company, I've noticed that developers who proactively set up these kinds of mentorships saw multiple benefits. For one, they became a lot more strategic about how they wanted to grow based on feedback from their mentor. These mentors usually have been with the company for longer and helped the engineers navigate some of the not-so-well-documented parts of promotions. Second, even when they were not promoted, developers with mentors bounced back a lot easier. They had their mentor on their side, who were invested in them getting to that next level. This made it easier for these developers to pull themselves together, keep being great at their game and land that promotion the next cycle. Ask for regular, explicit feedback Setting goals and working towards them is one thing. However, especially when you're working towards a major milestone like a promotion, getting regular feedback on how you're doing is just as important. Make a point to regularly present progress you think you've made to your manager. Ask feedback from them about your progress towards that next level. Have conversations early, on whether they support you being up for promotion at the next cycle. Even if the answer is \"not yet,\" get them to help define actionable things, that if you complete, you will be ready for that next level. Put in the work If you've made it explicit to your manager and mentor that you are working towards a promotion, put in the work. In the months leading up to the nomination, double down on performing at the next level, getting things done and helping others. Don't alienate your peers A mistake I sometimes see engineers do is being so focused on  their  promotion is they end up damaging the team. Come promotion time, and they often end up not being promoted, as it's clear that they were the opposite of a good team player. More and more companies are careful - rightfully! - to not promote people who pull the team down. Elbowing people out of the way to reach the goals that you set for promotion is a bad strategy. First, it's very short-term thinking. The same peers you might walk over might be asked for feedback at promotion time. But even if they aren't, it's a sign of immaturity. The more senior you get, the more you are expected to be a great team player  while  delivering solid results. It's not always an easy balance to strike. But if you catch yourself pushing ahead with your goal, in a way that upsets people on your team, consider changing your approach to be more collaborative. Don't kick back, even when you feel things are in your pocket Once, a developer set the goal with their manager, that if they successfully lead and ship ComplexProjectX, they will be up for promotion. The project went well, and the person went up for promotion. As this person heard the good news, they kicked back, letting go of the project, without delegating anything to others. As the project was rolling out, more and more issues surfaced, with no one taking action. Eventually, the rollout had to be reverted.  This happened right before the promotion committee met to discuss the case of this engineer. In the discussion, they agreed that while this person showed great skill in many areas, they displayed immaturity by disappearing the eleventh hour from the steering wheel. There was no communication and no good explanation of why this happened. The person was not promoted that cycle. Stay grounded Don't believe anyone who promises you a \"sure promotion.\" The first thing I tell all engineers on my team is that neither I nor any manager can guarantee a \"sure promotion.\" If anyone tells this to them, don't believe it. I've seen too many developers getting burned by promises like this. Even with the best meaning manager, there are many reasons why that \"sure\" promotion won't materialize. First, any manager can unexpectedly leave. The most common bitter story goes like this:  \"Manager X promised I'll be promoted, based on the great work I did. Then they left. My new manager did not honor this promise and decided against promoting me\".  The second reason is that any manager can misjudge either how well their direct is doing, or the political situation around promotions in the company. As tempting as it is to believe good news around \"already in the pocket\" type statements: don't. You're setting yourself up for disappointment if you take promises like this at face value, however sincere they might be. Don't have promotion be your only goal However well you might be displaying performing at the next level, and however much your manager supports you, you might not get promoted. If your only goal was the promotion itself, you'll be demoralized and might consider quitting and looking for a new job, just because of the outcome itself. I once had an engineer who I strongly supported, and I was 100% convinced they would get that promotion. They still didn't, despite me fighting for this person, going high up the chain to make my case for them. After this, I became even more committed to helping this engineer be recognized in the next cycle. Luckily, this developer was not only focused on the outcome but cared just as much about growing in other areas. The next time, they smashed the promotion process and continue to have a high growth trajectory. If your primary goals are about professional growth, even if you are not promoted, you will have gained valuable skills.  These skills might be things like conveying engineering best practices, mentoring others, leading projects, sharing knowledge, and others. Focus on these skills over just the promotion. Promotions will a hit or miss, based on the process your company follows. But no one can take away your growth from you. Promotion is not the only way to get positive feedback Many people look at promotions as a validation of having done a great job. However, while a successful promotion does mean stellar feedback, most of the positive recognition you'll get won't be via promotions. You'll get feedback every day from people who work with you, people saying things like \" thanks ,\" \" you really helped me \" or \" I would have been stuck a lot longer without you .\" You'll get feedback from your manager and mentors. And, of course, there's that formal performance review, where your manager will also summarise the great stuff you did - along with areas to improve. Getting a bonus or a pay rise is also all positive feedback - and all of these will happen far more frequent than promotions. Stay patient and be positive. It's a long game. I've had a talented developer with a few years experience join my team, who was itching to get to the senior level. They had a friend who had been promoted to this level recently, and they felt that this friend was ahead of them. This person was frustrated when, after going through their self-assessment, I told them they have far too many gaps compared to the next level to go for promotion this cycle. I said that even if they put in the work, I can't see them going up for promotion before the next cycle, which was 9 months away. I suggested we put a plan together to make this happen. First, this person was upset and thought I had it out for them. Slowly, after calming down, we put together a plan. Step by step, we made progress, and they started to realize just how much work they have to do. In the end, 9 months later, they got promoted. They still barely have 5 years experience and are already the senior level. For reference, it took me far longer time to get to the same level. Still, unlike them, I never felt behind. Does an extra 6 or 12 months make a difference in your career? The earlier you are in it, the more you think it does. However, after a while, you might realize that it's not a sprint, but a marathon.  While you might get promoted a few years into your first job, promotions will slow down over time: they'll be a lot more challenging to get. Play the long game. Be positive and focus on your continuous professional growth. Treat your growth like a journey, not a competition of promotions. You'll be a lot more balanced by doing so. Help Others Getting promoted within a company is never an easy achievement. When you succeed with this, consider giving back and taking someone under your wing, helping them grow. Let others know you're open to mentoring others. If you see someone in your team, who has good potential to grow and you feel you can help, offer to mentor them. Even if you've not yet been promoted, do help others grow and get recognized for their growth. If you work in a company that has a more heavyweight promotion process, with peer reviews, you might be asked by others to give peer reviews for their promotion. If you joined at a higher level, other engineers might approach you for advice on growth. Don't forget that promotions are a recognition of your growth. And one of the best ways to grow is to  teach others, via mentoring .  Keep being approachable and helpful, and pay it forward. You'll learn more, make many allies, and your career will be a far more enjoyable journey this way. Looking for more advice?   I wrote a longer, more detailed and actionable article relevant for those working in big tech, for engineering managers looking to promote people on their teams, and for senior and above engineers. Read it here:üîí  Preparing for promotions ahead of time . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/working-at-silicon-valley-tech-companies-in-europe/", "title": "Working at Silicon Valley Companies - in Europe", "content": "\n             I've recently been talking with several other people working in the European offices of Silicon Valley tech companies: Databricks in Amsterdam, Facebook in London, Google in Zurich and a few of my long-time colleagues at Uber, in Amsterdam. Most of us joined these places after spending a good amount of time working at other places in Europe. We talked about how the work environment is different compared to other software companies in Europe we've worked at, previously. We all came to similar conclusions on what we loved about the switch, as well as what the tradeoffs were. Engineering Culture and Autonomy The Silicon Valley engineering bar is still second to none. Not only does the Valley  pay the highest compensation packages  for software engineers: it also offers the largest professional autonomy for them. As a result, it hires people as good as it gets and fosters a culture of excellence. Want to work at a place with a great engineering culture? Work with Valley engineers, daily . At companies with Silicon-Valley sister offices, you get to do this. It's not just about engineers, but the organization's culture. For hypergrowth tech companies, this culture needs to be solid great, to sustain this kind of fast expansion. And the recipes on how to do it are coming from similar Silicon-Valley companies. Working at Uber, let me take the engineering culture here as an example. Does your company openly share architecture proposals across all of engineering?  At Uber, we do . Does your company have a dedicated team for developer tooling?  At Uber, we do . Do you release your work as open source?  At Uber, we do . Do first-time engineering managers go through a thorough apprentice program?  We do this here . Do you publish whitepapers on innovative software solutions?  Also happening here . Are posts from your engineering blog regularly on the front page of Hacker News?  Happens quite frequently. Impact, Scale, Complexity Many of the Silicon-Valley companies operate globally, reaching a large number of customers and are heavy on data processing. And at the same time, engineers usually often have a disproportionally large impact, day to day, at all parts of tech.  It's pretty common for an engineer to impact millions of customers daily, when shipping their code. Throughout my time at Uber, I've pushed code that was run by tens of millions of people on their phones. I took part in designing systems processing billions of dollars per month. I also proposed and shipped features that resulted in tens of millions of dollars in impact. While the impact sounds impressive, the scale and complexity of this work was even more interesting. Before Uber, I rarely worked on large systems hands-on. Here I learned far more about  building distributed systems  and how to  operate them in a resilient way , than I expected to do so. And even seemingly simple projects, like adding Google Pay as a payment method,  has been remarkably complex under the hood . Professional and Career Growth Many Silicon Valley companies have good access to capital and deliberately scale quickly. This makes them a high-growth environment. Lots of products and features are launched, many systems are built and people keep being hired at a fast pace. In an environment like this, both professional and career growth happen much faster. Professionally, there are more greenfield opportunities to build highly impactful products and platforms. Career-wise, there are a lot more opportunities to lead and to move up on either the engineering ladder or to move over to engineering management. It's not uncommon for the European tech offices of Silicon Valley companies to double every year - for years straight . Three years ago, the Uber Amsterdam office was around 25 engineers - we're now at almost 150, growing faster than ever before. Databricks in Amsterdam has tripled in two years, and that's before their latest investment and recruitment drive of ¬† ‚Ç¨100M in the Amsterdam office . In their early days, Facebook in London and Google in Zurich grew at a similar scale. Fast growth means quick learning. It also opens many career opportunities for those already at the company. I  transitioned to engineering management  soon after I joined, when an opportunity opened up that made a lot of sense for me to take on. All people reporting to me at the time have grown fast and have  been promoted since . Professional growth is also a big deal at these tech companies. The success of a fast-growth tech company depends on the people working there continuously leveling up. Best practices, like career ladders with clearly defined roles and managers coaching engineers, are a given. The fact that  engineers mentor engineers regularly within the company , and that engineers in Europe often have Silicon Valley mentors is a big part of this. Compensation and Equity Steve Yegge working at Grab has summarized this one in his  Get that Job at Grab post  well:  \"Global demand for software engineers has competely outsripped supply (...) recently the demand had gone straight to crazy-town. (...) Compensation packages have gone through the roof.\"  This is pretty accurate.  Silicon Valley companies in Europe no longer compete with the local market - they compete with each other.  ¬†They compete with good base salaries, target bonuses, and stock that is either liquid or would become liquid, after an IPO. Look to places  like Levels.fyi  to see what employees in different locations record as packages at these places. And we've then not talked about perks that are also often more extensive than what local companies offer. Perks like a four-month, paid paternity leave, that  I just took in full . Also, let's talk about equity for a moment . In Silicon Valley, it is not uncommon for a senior engineer would to get around 60-100% of their annual salary as equity. In Europe, this was rarely a thing for software engineers. Equity started to be part of packages at the executive level, engineers receiving little to none of this compensation. For Silicon-Valley based companies, equity is a given for all engineers. It's the recognition of being an owner, and meaningful stakes are awarded to engineers. Remember, these companies compete with each other across Europe. The equity numbers, of course, will be lower than Silicon Valley, but even the most junior engineers get a share in the company. Tradeoffs Working at these companies is not for everyone: there are tradeoffs that come with scale, working with US offices, and with autonomy. Late-evening calls  are sometimes a thing. In general, the smaller the office and the more you are dependent on working with Silicon Valley, the more you'll need to have meetings in the evening. And expect to have oncall. If your main preference is work-life balance and fixed hours, local companies with local customers will offer much more of this. Work-life balance  is not always 9-to-5. While I've found the work-life-balance in Europe at these companies to be quite good, the office is not empty at 5:30 pm, like it is at other local companies. At Uber, about a third of the engineers and almost all managers have kids. Balancing family and work is possible, but much of it comes back to the frequency of those late-night calls. As a manager, I have more of them - about two evenings per week - and for engineers, it depends on the team and project. Continuous growth, continuous change . It's not uncommon for the size of an office to double every 12-18 months, for years: both Uber and Databricks have grown, and continue at this scale, in Amsterdam. With this kind of growth, change is constant. Teams grow, then split, processes change to scale better and tooling needs to be continuously updated. What works now will not work well in a year or two. Travel . Depending on the role, people might be encouraged to travel every now and then to headquarters. The smaller the office, the more likely you'll travel. However, travel is rarely mandatory, as remote collaboration via video calls is a good alternative most of the time. More Silicon Valley Opportunities Across Europe Great engineering culture + solid compensation + vested interest in the company = great people who stay longer.  Before joining Uber, my longest stint at a company was just above two years. It was at Microsoft/Skype, in London. People rarely stayed longer at that company. It was already a large office, compensation was decent, but it was not hard for anyone to get a 20-40% higher offers, especially with local offices of Silicon-Valley startups. It really came down to equity. Microsoft gave very little of that to engineers below the principal level. So the best people ended up hunted down by places that did. We lost people joining innovative teams as founding members at Facebook and Twitter, in their early days. It's hard to keep great people for more than a few years when others in the market can offer more exciting professional opportunities with better compensation. At Uber, many of the first engineers in the Amsterdam office are still here. When you work on interesting problems, with great people, have continuous career growth, and there's little compensation upside elsewhere, why would you leave? Within Europe, Amsterdam is a hub that seems to be attracting more Silicon-Valley tech companies at a fast rate. The Netherlands being the most  competitive economy in Europe in 2019 , one of the  best work-life balances in the world , a  5-year tax break for expats  and Brexit making  Amsterdam the #1 destination for businesses  moving from the UK all contribute to this. Silicon Valley companies with large offices in Amsterdam include  Uber ,  Databricks  and  Messagebird . Notable mentions go to  Getaround  and  Flexport  - with more companies considering opening overseas offices, and expanding heavily in Amsterdam. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/talk-first-code-later/", "title": "Talk First, Code Later", "content": "\n             An engineer from another office and different timezone raises a pull request for a service/library my team owns. The pull request has little to no description and makes no sense from our perspective. We write a long message explaining why this change can't happen. Then we block the change. The next day, this other engineer adds some more comments, arguing why the change should go through, after minor modifications. We still disagree. Later, we get an email escalation from their team with a few more people on the thread, asking us to allow the change and unblock them. We are stalling, getting nowhere. Then someone on our team asks the other engineer:  Why  are you making this change?  What  problem are you trying to solve?  We talk over chat, then do a video call. Suddenly, everything becomes a lot more clear. We've been talking over each other. The other team had a problem with our system. We had no clue this was the case. This other team then coded a solution to scratch their itch. We follow an  internal open source model  with strong code ownership, where any engineer can put up pull requests for codebases. The owning team of that system sets up blocking code reviews. This means that at least a member of the core team needs to approve it before it can be merged. The problem was, the developer proposing the change was focused only on their use case. They also didn't have an in-depth overview of how our system works. They even had less understanding of how to extend the system and all the other customers we need to worry about. Had they told us about the problem, we could have offered them either a workaround or let them know of a feature we were building already, that solves the same category of problems. Everyone would have saved so much time, if only we communicated first and wrote code only after.  The developer with the problem spent a lot of time understanding our system, figuring out what changes to make, and making that code change. Yet, with all this work invested, they spent no time describing the \"why\" of the change or reaching out to our team to get feedback. This was despite there being chat groups, email lists, and how code maintainers are pretty easy to track down. After we all got on the same page, we made a plan, the other team abandoned their original change, and we agreed on the way forward. In one case, we shipped the new feature that unblocked the other team. In the other case, we coached the other team on how to implement the change in a way that we could accept the pull request. The takeaways from both cases were the same.  When making changes to a system you are not familiar with, follow these steps to reduce churn : Summarize the problem  you're trying to solve. Talk with people owning the system, sharing your problem. Share and validate  the fix you're thinking of. Reach out to engineers on the owning team: in-person, over chat/email or a call, and talk Describe your code changes clearly , following  pull request best practices . Especially when working across timezones, you might not be able to verify your fix: a clear description will help in this case. Do the above,  especially  when working with remote teams or across timezones.  It's tempting to think,  \"oh, the owning team is another timezone, I'll just write the code while they sleep.\"  Still, it's far more efficient to shoot an email summarizing the problem and your approach first. If you're in a hurry, you can also write the code and submit a pull request at the same time: you already are offering a lot more context this way. However, in the majority of cases, getting that initial validation can save many revisions of back-and-forth. It's interesting how problems like this are mostly nonexistent when the whole team is colocated. However, when working across locations, the \"t alk first, code later\"  approach is an un-intuitive tool that speeds development up and leads to better communication between engineers and teams. This is despite how it feels like it will slow things down by delaying writing code. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/stretching-executing-coasting/", "title": "Stretching, Executing, Coasting - and Pacing Yourself to Avoid Burnout", "content": "\n             If you worked as a professional athlete over being a software engineer, how would you approach your main job: training? Every day, you would train most of the day, supervised by your coach. Your coach would adjust your training according to your goals and your physical wellbeing. There would be weeks or months where you do endurance training, ones where you build up speed. Before a major competition, you would taper off. After a competition, you would take time to recover, doing very light training. Athletes pace themselves to optimise for peak performance, and for the longevity of their athletic career. What about software engineers? Our average career length will be much longer than the average athlete -  up to 40 years in software , over the 10-15 years of professional athletes. At the same point,  burnout is high among software developers , just like career-threatening sports injuries are common among athletes. Can we take parallels from sports on how to have a good professional career, keeping up with the pack, but without burning out too soon? Stretching, executing, and coasting  is a model I've found useful to think about how we pace ourselves at work as software professionals. This pace can vary based on many things: the environment, the project, motivation, externals, and many others. Stretching  is the most fun mode of all - at least, initially. This is when you are learning new things very quickly, and applying them as you go. It means having new challenges that require you stepping up. As a manager, I actively look for opportunities to stretch people, get them out of their comfort zone, and accelerate their learning. Starting at a new company and picking up the pace is always a stretch. Joining a project that uses a different language/technology than what you're used to is a good challenge. Taking the lead on a project, when you've not led similar projects before is also a good example. The same way, working on a project with a tight deadline that forces quick, pragmatic decisions. While stretching helps you grow faster, being in stretch mode too long can backfire, from slower pace to burnout.  If doing stretch work comes with overtime, you will get physically and mentally exhausted. If being stretched means you are falling behind in parts of your work; anxiety can build up. Without a way to relax and get back to normal, mental, and physical exhaustion and anxiety can lead to burnout. Even if it's not burnout, your motivation and output can drop over time - despite you working  more  than before. As an athlete, your coach would notice when you are over-stretching yourself. They do this by observing your movement, times, and output. When they determine you're overstretched and are at risk of an injury, they will order you to take it easy: do some coasting, before you get back to normal speed. Look to coaches in your life who can also give you similar warnings of being overstretched. This can be family, friends, or even an engineering or leadership coach. Executing  is the \"normal\" way of working. It's using your existing skills and experience to get things done, and getting those done well. You pull your weight - and often, even beyond - but in a way that does not continuously stretch you. You will keep learning new things, but at the normal, not an accelerated pace. Coding in a language/framework you're an expert with, on a project with reasonable timelines, is an excellent opportunity to execute. You get your work done, help others, and can do this without feeling the need to do overtime. In general, doing similar work than before, with few surprises on the way, are environments where \"just\" executing is pretty straightforward. Scaling back to heads-down executing after some time of stretching  is a common tactic to get ahead of burning out. Usually, I see people who are stretched make a list of all the additional things they are doing, which are adding up to be too much. Then, they find others to take over these responsibilities or stop doing these things, saying no to them. They let their managers know they intend to stop or hand over this work to keep executing well, without burning out, and ask for support. Coasting  is when you're doing less and lower quality work than you're capable of. It might be a temporary, short-term breather after getting through a tough project, catching up on other things, or taking a mental break. Coasting might also be triggered by personal circumstances that distract outside work. If none of the previous apply, then coasting usually has to do with low motivation. People coasting are rarely proactive, and often need nudging just to get their day to day work done. Beyond a few days of coasting is counterproductive for everyone. It's not good for the person doing so, their project, or their team. People on the team will notice the person is \"checked out\" and start to assume they can't count much on them. Others on the project will have to step up and pull above their weight to get the project done on time. And the person coasting will experience little to no professional growth, becoming rusty at even their current skills. If you find yourself coasting beyond a short timeframe and low motivation is the reason, ask yourself what needs to change and be proactive in changing it.  Why are you not motivated? Are you in the right environment - the right team, the right company? Do you have the right skills to get the work done - and if not, can you invest in getting better at the things that are missing? Can you set yourself more challenging goals, take on more ambitious work? If you don't change anything, your motivation can keep dropping, every day, until your manager sits down to have a hard conversation on whether you should be on the team, or at the company. Get ahead of this, catch yourself when you're coasting too long and look ways to get back to stretching yourself. Mix up stretching, executing, and the occasional coasting to optimize for long-term professional growth and to avoid burnout.  Do this the same way professional athletes mix up their pacing to optimize for long-term performance and to avoid injuries. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/yes-you-should-estimate/", "title": "Yes, You Should Estimate Software Projects", "content": "\n             I hear more voices  saying  there is little point in doing time-based estimations on how long building software will take, and thus we should just stop doing it.  \"Let's just use story points and estimate complexity, but not the time\"  and  \"Let's just try #noestimates\"  are suggestions people around me recently brought up. I'm personally skeptical of both approaches. While I do think that doing time-based estimates is  really  hard, it comes with so many benefits for those who keep doing it. Time is of essence I attribute much of my success in engineering to giving estimates on software complex projects - then also delivering on those timelines.  When I was working on Skype, I was part of the Xbox One launch team. Microsoft finalized the Xbox One launch date based on estimates from the 100+ teams working on Xbox One, including ours. A year later,  we launched  on the pre-announced day without significant hiccups and with major fanfare. After Xbox One, I worked on launching Skype for Web. Here, we ended up beating our original estimates, leaving more time for experimentation before  the worldwide launch .  When I joined Uber, we had an internal deadline to rewrite and launch the new Uber rider app by the end of 2016. We also pulled this off after a few months of development, hitting our  previously set launch date . Since working at Uber, my team has committed to launches with several external partners, based on the time estimates we provided. Launching  paying with Venmo  or  Google Pay on Uber  were examples of these - and these projects had plenty of complexity that is  hard to appreciate from the outside . Estimates matter because most people and businesses are date-driven.  Have you noticed how Apple ships most of their big bang projects at WWDC, a date they commit to far ahead? How Facebook unveils many new features at F8? How Google launches new products at I/O? All of those launches are date driven because that's a great way to grab people's attention and to get extensive press coverage.  Publicly traded companies plan and budget based on quarters. They also decide how much to invest in projects and people after asking,  \"how long does it take to launch?\"  Private, venture-funded companies try to get new features out in time to help with the next fundraising round. Yes, some businesses are not very date driven: but they are rare. Private, profitable lifestyle-businesses and some governments are perhaps the best examples of entities that don't care  as much  about dates. Good communication is more important than good estimation I have missed many of my estimates, and it was rarely a big deal.  While people and businesses are date-driven, delays are common in any part of a company. If you think delays only happen in tech parts of a business, talk with people on operations, marketing, recruiting, and other functions. Regardless of the org and function, people tend to be overly optimistic in their estimates for work they've not done before. Ever heard of a building construction project overrun? A government initiative be late? Brexit being delayed,  again ? Where there are people, there are delays. How and when the delay is communicated matters far more than the delay itself . In my case, the projects where the delay was not a big deal were ones where we communicated well ahead of time. We worked with the business to decide what to do. Cut a feature and make the launch? Bring in more people, risking other projects? Or push out the date, informing everyone else involved? When done like this, a delay is just business as usual. However, when a delay is communicated only in the eleventh hour, that's what leads to frustration, escalations, and unpleasant conversations. Estimate and commit - the way to get things done faster Pushing back on estimates also misses the bigger point about engineers staying focused on delivering the largest business value . Remember how I said how I'm pretty good at estimating, then delivering on them? I was not telling the truth about delivering.  For every major project, we shipped something different on the launch date , than what we agreed to originally. For Skype on Xbox One, we didn't ship group video calling on launch day. While playing games, the platform turned out to not leave enough CPU processing to decode more than two streams, reliably. And we did not have time to optimise our stream decoding further, so we cut this feature. In the end, it made little to no difference for the success of the launch. Similarly, for every project with a fixed deadline, we shipped different functionality to what we planned, when we gave the estimates. But the stakeholders were never surprised. We had continuous conversations with the business, as we kept hitting our milestones. Should we keep this feature, that is turning out to be complex to build? Does it add enough business value? If we keep it, do we move the timeline, or do we pull in more people to help ship it? Can we ship a simpler version that would result in a similar business impact?  We would not have had these tradeoff and prioritization conversations without the time pressure our estimates created. We shipped more business value in the same span of time. Because as we got squeezed by deadlines, we had to confirm again and again where we put our focus on and what we throw aside.  Estimates and deadlines are great for getting things done. They heavily incentivize teams to focus.  We built Skype for Xbox one in 16 months. We knew the final launch date a year before it was due and had a full team working by then. It seemed like a walk in the park. However, Murphy's Law caught up with us. We spent most of the 16 months in a way similar to what the #noestimates philosophy promoted - even though this was not a thing back then. We worked on sprints, tracked our velocity, followed the usual Scrum rituals. Looking back, we were doing light jogging at a leisurely pace, making cases for unimportant, but fun work. We spent weeks building a sandbox app that we played on, but never really used later. We did week-long performance optimizations on things that turned out to be pointless, following the launch. We built Easter eggs that never made it into the app. Looking back, we were the too-much-time-on-their-hands type of team. Our pace picked from jogging to the running pace in the last four months. Two months to the launch, we realized we were behind and started sprinting. We were more productive and produced about the same value in those last four months than we did the previous 12, combined.  Why the sudden productivity change? We had a big deadline coming up, and there was no option of not shipping . Suddenly, the whole team became focused, distractions were all gone, and we moved at a faster pace than I've ever felt the team do so. Learning to estimate different types of unknowns Giving estimates, than missing them forces deeper reflection and faster learning about the types of unknowns in the software world.  When it comes to why estimates are difficult, most engineers and engineering leads throw their hands up in the air and say,  \"Software has too many unknowns! We can't tell what unknowns we'll find, even with the simplest task!\"  This is how I thought, when I started out. But when you end up giving estimates, then miss them by a large margin, you cannot avoid having an honest conversation with yourself and your team.  What  did we miss?  Why  did we miss it?  How  can we try to account for it, the next time? If you don't have estimates, you'll end up asking these questions far fewer times, if even. I've been burnt by my estimates countless times. After every time, I understood more about the type of unknown that I was not aware of. I started to see technology risks, early adopter risks, integration risks - and built up a toolset on how to mitigate these. Do early prototyping. Talk with the team who owns the integration. Do timebox researching. Do this long enough, and many of the common unknowns go from wild and unpredictable to tame and domesticated. But what about tech and architecture debt? Estimates also help to pay these down.  Every business stakeholder working with engineers has heard \"tech debt\" more times than they care to remember. And most stakeholders also associate this term with an endless pit of work.  \"I won't allow this team to work on this 'tech debt' as they always end up taking months doing nothing I see value in\"  - they think to themselves. But what if you can estimate, or at least time box the time spent on tech debt? My team estimates tech debt work with time-based measurements. Because we have a perception of being timely in shipping, we get buy-in from the business much easier. When there's trust, everything is easier to agree on. And speaking the same language - time-based estimates - is a good way to earn the trust of the business. Yes, you should estimate Yes, it's ridiculously hard to do good estimates on software. Yes, most engineers are bad at it. And yes, being good at this will make you stand out.  Saying that \"software is just too complex\" is an easy way out over asking the hard questions on  why  estimating is hard and  how  you can get better at it. Start with  sensible project management , focusing on  principles to reduce risk , over one-size-fits-all practices like Scrum. Reflect on why you under- or over-estimated. Adjust for next time. Rinse and repeat. I could write a post about just on this - wait,  I actually did  - but this is the gist of it. If you never give estimates, you'll never become good at them. If you practice and learn from how things went, you'll keep improving and slowly build up the reputation of that person who's pretty reliable on how long things take. Estimating and being deadline-driven  is  a lot less comfortable than choosing not to estimate. But this is not an excuse to not grow your estimations skill.  I've seen teams burn out after sprinting to make deadline after deadline. Too much of this is stressful. This is similar to how teams get unmotivated after doing sprint after sprint without the slightest pressure of shipping. Too much of the same is never good. Mix things up - and use estimates/deadlines to keep the focus and move faster. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/bad-code/", "title": "Stop Calling it Bad Code", "content": "\n             ‚ÄúThis code is bad. We should refactor it.‚Äù  is something I still hear frequently. ‚Äú Bad code‚Äù  has become the common way to refer to any code that's not up to our quality bar. I'm seeing it become a defacto description across the industry, blog posts and in  software engineering literature . The summary of the classic book  Clean Code  starts like this:  ‚ÄúEven bad code can function.‚Äù  But while books and blog posts untangle what they mean by bad code, us, engineers, we rarely do. I‚Äôm just as guilty of this behaviour, often just calling code that is not good as bad or sloppy. But  \"bad code\"  is a lazy expression. It‚Äôs not specific and means different things to everyone.  Take this code sample that is an implementation of FizzBuzz. Is it bad code? var fizzBuzz = function(n) {\n    var outputs = [];\n    let fizzDiv = 3;\n    let buzzDivision = 5;\n    for(let counter=1;counter<=n;counter++) {\n        let currentNumber = counter;\n        let FIZZ_OUTPUT = \"Fizz\";\n        let buzzOutput = \"Buzz\";\n        if(currentNumber % fizzDiv == 0 \n           && currentNumber % buzzDivision == 0) {\n            outputs.push(FIZZ_OUTPUT + buzzOutput);\n        } else if(currentNumber % fizzDiv == 0) {\n            outputs.push(FIZZ_OUTPUT);\n        } else if(currentNumber % buzzDivision == 0) {\n            outputs.push(buzzOutput);\n        } else {\n            outputs.push(currentNumber.toString());\n        }\n    }\n    return outputs;\n};\n \n Most  people will call this bad code, indeed. But what if we banned using the term ‚Äúbad‚Äù and started to be more specific? Then this code could be called inconsistent in naming, overly verbose and hard to maintain. If it was lacking tests, it could also be called untested. Take this piece of code: var fizzBuzz = function(n) {\n    var o = [];\n    for(let c=1;c<=n;c++) {\n        o.push(c%15==0?\"FizzBuzz\":c%3==0?\"Fizz\":c%5==0?\"Buzz\":c.toString());\n    }\n    return o;\n};\n \n How could this be described without using generic terms like bad? You could say it‚Äôs hard to read, the variable names are non intuitive. But some might also it concise or note the (overly) clever use of the ternary operator. Depending on the environment the code is being written, either of these code samples might be described as following or not following coding conventions. Beyond just ‚Äúbad code‚Äù  Instead of sticking to a lazy term, put some more effort to describe flaws of the code you see, and improvements you could think of. Be specific  on the flaws you see, even at the cost of being more verbose.  ‚ÄúI find this function too complicated‚Äù.   ‚ÄúThis class has multiple responsibilities‚Äù. ‚ÄúThe variable name does not describe its purpose clearly‚Äù. Give a specific suggestion  on how to improve the issue, if it not obvious from your description. Thins like  ‚ÄúThis class has multiple responsibilities. What would you think of breaking it into two parts, one being responsible for serialisation, another for price calculation?‚Äù  or ‚ÄúI find the name calculate hard to understand. How about calling it getPriceWithoutVAT instead?‚Äù Talk about the future implications of the code you see, if not changed . Things like  ‚ÄúI think the class would probably be hard to reuse, because it has many things hardcoded.‚Äù  or  ‚ÄúI‚Äôm pretty sure newcomers would find this code hard to comprehend, as it does not follow conventions used across the codebase.‚Äù Ask the person writing the code , what they think about your comments. Say thinks like  ‚Äúwhat do you think about this?‚Äù  or  ‚Äúdo you think this would make sense?‚Äù. From ‚Äúbad code\" to ‚Äúhow to make this better‚Äù code By not using generic and negative terms like ‚Äúbad‚Äù, conversations about code become constructive. Instead of starting with an emotional statement - this code is bad! - you‚Äôre now starting with observations and suggestions. Using this approach, people who you give feedback to will not feel threatened and act reflexively defensive, pushing back on your comments. That is what would happen if you started with vague and judging terms, like ‚Äúbad code‚Äù. Even if it is bad code, take the time and energy to describe  what  is bad about it. This will help you grow your ability to verbalise of practices that make good code. It will also challenge your own assumptions on what good and bad code means to you, improve your ability to give constructive feedback and it will also help with  mentor other developers better , helping them improve their code. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/a-philosophy-of-software-design-review/", "title": "A Philosophy of Software Design: My Take (and a Book Review)", "content": "\n             I was somewhat skeptical when starting to read a  Philosophy of Software Design , despite having it recommended by a friend. The book does a delightful job underselling itself. It is odd-shaped, published by a university press, and the preface mentions,  \"At this point, you might be wondering: what makes me think I know all the answers about software design? To be honest, I don't.\" However, the fact that the book was written by someone who's been writing code for decades, the university press being Stanford press, and the book covering lessons learned during the first software design class at Stanford gauged my interest. Still, I wondered just how much I would learn about software design from experience partially distilled from a classroom - even if a Stanford classroom. A lot, as it would turn out. This post summarizes key takeaways of the book and my take on these principles , drawing from my professional and industry experience. If you're interested in whether to read this book, my recommendation is that you probably should, for a few reasons I list  in my conclusion . Note that none of the below links are affiliate links or sponsored ones. See  my ethics statement  on the lack of such links. Interested in a no-time-to-waste book video review? I made one, watch it  on YouTube , then read further: \n \n \n \n The problem with software architecture: it's not repeatable in the real world. Or is it? There is a significant difference between most books written on software design and John Ousterhout's one. It's repeatability. While almost all software architecture books are based on real-world experiences of experienced developers and consultants, those are not repeatable experiences. Those people solved challenging problems using certain methods: but they did not have the opportunity to do the same with a different approach. Even  my views on software architecture  are based on one-off projects and their aftermath. John, on the other hand, had the vantage point of having multiple teams solve the same design problem during a semester, with him observing. He also had the luxury of repeating this experiment multiple times. With each repeat, he was able to both validate and tweak his observations. So what is software design , according to John? He says it is a means to fight complexity. The greatest limitation in writing software is our ability to understand the systems we are creating. (...) The larger the program, and the more people work on it, the more difficult it is to manager complexity. Good development tools can help us deal with complexity. (...) But there is a limit to what we can do with tools alone. (...) Simpler designs allow us to build larger and more powerful systems before complexity becomes overwhelming. So how, exactly, should we fight this complexity? By encapsulating complexity via modular design and making code simple and obvious, like eliminating special cases or using consistent coding styles. The first part of the book focuses on good, modular design practices, while the second part of the book touches on techniques to make the code simple, as well as goes in-depth on commenting best practices. Solid recommendations I agree with Tactical vs strategic coding : deciding when to invest for the longer-term isn't easy. Be aware if you are putting out a fire, or building for the long-term. This observation matches my experience: \"hacking\" something together quickly, just to make it work, versus platformizing (making it reusable, extensible) is a tricky tradeoff to make. While this advice sounds simple, it is the one that requires experience and times of being burnt, to get it right. The challenge here is similar to the  software development dilemma of moving fast, without breaking things . Designing things twice  (Chapter 11) is a suggestion that hits close to home. This is advice I've been  suggesting to people to get better at designing systems , well before I read this book. Deep vs shallow modules and smart usage of layers  (Chapter 4 & 7)   are chapters, where John notes how abstractions that have simple interfaces (deep modules) but hide complex functionality help reduce the complexity of programs. They do this better than shallow modules do - modules that have a simple implementation, but complex interfaces. This was something I've not given much thought before, but it certainly rings true. The depth of a module is a concept I've previously not thought to use, but I'm adding it to my toolset. Much of the book builds on this concept of module depth: It's more important for a module to have a simple interface than a simple implementation  is a thought introduced in Chapter 8. While my experience confirms this - especially when talking about  distributed systems  and microservices. I did find logic and examples that John used to get here as interesting. For the theory, he builds on the logic that deep modules encourage information hiding and reduce complexity. For the practice, he takes examples from students implementing a class that manages files for a GUI text editor assignment. Students who chose a simple implementation, but complex interfaces - exposing the concept of lines - ran into far more trouble and complexity. They struggled more with this interface than those who went with a simple interface, with a complex implementation: a character-based interface. Layers should remove, not add complexity to a system  (Chapter 7). The book refers to this as \"different layer, different abstraction,\" arguing against the usage of call-through methods or decorator classes. While I agree that pass-through layers add complexity to the system and are best avoided, my experience when working in production systems tells me it's not that simple. Working within one application or codebase this complexity is more trivial to spot and eliminate. However, when working with standalone services, it's a more labor-intensive and process. It is a good reminder to both resist the urge to build services that do too much wrapping, as well as to keep track of this kind of architecture debt. Information hiding and information leakage  (Chapter 5) is another take on what good abstraction is and how efficient interfaces should behave. Those who have designed APIs have probably had first-hand experience with why leaking information beyond the bare minimum leads to tech- and architecture debt later on. John also mentions a glaring example of bad API design: over-exposing internals. Information leakage correlated to shallow classes  was an interesting observation: the first of several based on the book not based on John's own experience, but about his analysis of the student's work. He noticed how students who divided their code into many, small classes, that were shallow, ended up with much duplicated logic, caused by information leakage. Generalizing leads to better information hiding . General-purpose/reusable modules are deeper - they have more complex internal logic, but simpler interfaces. Not surprising to anyone who's attempted to build more generic APIs. However, taking the previous argument further, it also means generality leads to better information hiding. Want to have simpler architecture? Consider generalizing components. The example of building a text editor during the semester is used to prove this point, with examples. Tradeoffs when combining or separating implementations within modules or interfaces  (Chapter 9) is an interesting debate that I don't know of a single best answer. We share this view with John, who also agrees the best solution will be context-dependent. John collects a few rules of thumbs he suggests to use when deciding to combine or separate. Combine when it makes for a simpler interface, to reduce duplication or when implementations share data/information. Separate general-purpose and special-purpose code. While all of the above is sensible, personally still prefer single-purpose interfaces, even if that might leave some implementation separately, that could technically be combined. In the case of microservices, an important guiding principle is to avoid separating services while they use/modify the same data source. A larger service that is cohesive results in less complexity than several smaller services, manipulating the same data source. The importance of good and simple naming  (Chapter 14) mirror my experience on how simple names often mean simple functionality. Complex names - or difficulty to name something - is usually a code or architecture smell. John mentions that consistent naming contributes to less complexity - something I wholeheartedly agree with. Recommendations I don't necessarily agree with A strong stance against exceptions  (Chapter 10) was an interesting read. John argues that exceptions introduce one of the worst sources of complexity and advocates for writing code that needs no exceptions to run. This is a section that seems to build on John's own experience, and him analyzing Windows APIs and does not bring classroom examples. For backend systems, I view exceptions as a good thing: as long as they are  thoroughly monitored and alerted on , targeting a zero exceptions policy. For client-side software like mobile apps and desktop apps, I agree that exceptions make for more complex logic. In these cases, exception masking - and logging - that John suggests in Chapter 10 can be a good solution. He lists the option of deciding that it's fine to crash the application on an exception: which would not fly in areas like mobile development. Calling out event-driven programming as something that makes the code less obvious  (Chapter 18) is an interesting take, that I would have hesitated to phrase as such. While event-driven programming is certainly more complex, due to no clear flow of control, in real-world scenarios, this is a necessity. Both in the case of distributed systems, as well as multi-threaded environments, there is no other option. John's suggestion to add a comment for event handlers doesn't cut it in my book. Instead, monitoring errors, alerting (for backend code) and logging, uploading, and analyzing logs (for client-side applications) is one way to stay on top of the system working correctly at all times. Much of modern programming, from messaging services to frameworks like Fx is moving towards an asynchronous model, where dealing with this complexity is part of the job. John is quite in favor of writing comments , an approach I have less love for. Three chapters - chapters 12, 13, and 15 are dedicated to this topic, looking at it from different angles. In general, I like to think of inline  comments being an invitation for refactoring . This is especially true for code that is well-tested with unit and other automated tests. For junior engineers, the advice of writing comments first (Chapter 15 on) is solid. The part I do agree with John is how comments should describe things that aren't obvious from the code (Chapter 13). After exchanging emails with John, we both agreed that  if there are important ideas that cannot be conveyed through the code, then comments are appropriate for them . Still, I like to challenge the code instead, asking if  refactoring would help eliminate the need for a comment . Topics I missed While the book does a good job covering architecture concepts when writing code, there are several areas that it does not touch on. Most of these are outside the scope of the software design course itself. However, some reference to these would have been useful. Writing up, sharing, and debating design with other peers  is a practice more and more common in tech companies. This includes both whiteboarding and presenting to a group of peers, as well as  more formal RFC-like design processes . While it might be less applicable to the course John taught, it's a practice that comes with many benefits. These days, as shared editing and commenting tools are more common, with editors like Google Docs and O365.  Sharing design ideas upfront  and opening a debate using these tools is a great way to build more sturdy architecture. Especially when applying the \"design it twice\" principle, and writing up alternative designs considered, and the tradeoffs why the other design was not chosen. Testing  was absent from the book, save for the last part, mentioned at the end of the book, in 19.3, as part of software trends. In my view, good architecture and testability go hand-in-hand and would have welcomed this topic mentioned earlier. John dedicates discussing strategies to modify existing code in-depth in Chapter 16. His two pieces of advice are on staying strategic in modifying the design and maintaining the comments. This does not match my reality. The surest and safest way I know to modify existing code is to have tests. With tests in place, go ahead and make whatever change is necessary - and sensible. If there are no tests, start by writing tests. If there are tests, major refactors that wildly modify the existing design can also fly - the tests should give a safety net to do so. And with tests in place, comments become an afterthought: if there is a test for it, a comment is not that necessary. Note that after exchanging emails with John, he pointed out he focused the book on architecture, treating other topics deliberately out of scope. Conclusion The book is an easy read, thanks to its short sections and good bolding. It lends itself to both skimming through, and in-depth reading. The concepts are fresh and a welcome read. Most importantly, the book stays humble, does not try to convince, but offers perspectives backed by easy to follow examples. I very much recommend the first half of the book - chapters 1-9 and chapter 14 - for all software engineers to read , digest, and consider applying. Concepts like depth of modules, layers adding complexity - or keeping complexity at bay - and information hiding are pragmatic tools to use when designing software. The book offers a fresh take on the concept of abstractions, and nicely complements principles like simplicity, KISS (Keep it Simple, Stupid) and YAGNI (You Ain't Gonna Need It). The book does leave a glaring gap on testing and how testability and good architecture go hand in hand. I would recommend a book like  Clean Code  or  Working Effectively with Legacy Code  to augment the topics written here. Technical debt and architecture debt also don't get much mention or discussion, which is in contrast to my day to day work. It would be nice to see a later version touch on these topics, as well. For people who have less experience in software development, the remaining of the book will also be practical. Naming is an especially useful section. The parts on writing comments before coding, and comments complimenting the code are decent strategies to start with. Those with more experience under their belt my disagree with some of the recommendations. Still, they all present interesting viewpoints, backed with examples. They also make for potentially sound advice to give, when mentoring less experienced engineers. There are few books that discuss software design in a simple and approachable way, while leaving the reader novel and practical concepts to use .  A Philosophy of Software Design  is a standout and recommended read for this reason. We need more resources to remind us  not overcomplicate software architecture . It will become complicated enough, module after module, layer after layer. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/seniority-tech-talk/", "title": "Seniority for Software Engineers: a Tech Talk", "content": "\n             Together with agile coach  Balint Farkas , we recorded a conversation hosted by  Iseeq recruitment  in Budapest. We explored what seniority means for software developers. This 30-minute session explored my experience on career paths for software engineers, the difference in impact at various levels and more advice on growing, as a developer. Listen to the recording here,  on Soundcloud  and read a short summary on topics discussed, below. What are the typical career paths for software engineers?  (01:35) Talking about how I generally think about career progression, from engineers starting out, all the way to staff/principal engineers. And how management comes into this. Differences in scope and impact between different software engineering levels  (04:20) Talking about how the expected impact is a big differentiator between levels like software engineers, senior engineers or staff engineers. The staff/principal level is especially interesting on what it means to have organization-wide or company-wide models. Why is both scope and impact important, at this level? As an engineer, when you have a great idea, how can you make this a reality? Even if this idea is in disagreement with views of more senior members of the team.  (09:35) How experienced people should be supportive in healthy working environments. And how staff/principal engineers often will step out of projects, when things are looking good, moving on to the next, most challenging thing in the organization. Why is autonomy important for software engineers?  (14:00) And why software engineers are non-productive at places, which are hierarchical and they are treated as replaceable resources (and often called \"resources\"). Taking ownership of your career: why it's important and what can I do to get in control?  (16:10) Stepping back: before you decide to change companies, why it's important you take ownership of your career and vocalize what is important for you and where you want to go. A story about how I changed teams because I didn't like my manager... to not like my manager at the next team either. And realizing that I was expecting both my managers to read my mind and help me reach my career goals that I never told them. Goals . Have an honest conversation with yourself on your goals, write these down and share them with your manager. Your manager will try to create opportunities for you to grow.  Creating opportunities . Instead of just waiting on your manager to create opportunities to work towards your goals, create these yourself. Step out of your comfort zone and volunteer to do some work that is challenging. Pick up work that might not be as fun or shiny, but the work that no one else wants to do, but is important. Get to know your professional self.  What are things that motivate you, what are things that demotivate you? As a manager, how can you foster a more collaborative environment, with more learning happening?  (23:20) Get to know people on your team . Spend time with people and get to know people's background and motivation. Help people grow . Give actionable feedback - both positive and constructive. Mentorship and coaching . Mentor people and find mentors for them:  engineers mentoring other software engineers  is also a fantastic growth tool. Coach people to grow. Mentoring and teaching as a growth tool, as an engineer  ¬†(26:15) We talk about how teaching is an important tool to become an expert in something, while also helping others around you grow. You can also see a longer summary on the content  here  and listen to the Soundcloud recording on the  Iseeq blog . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/a-team-where-everyone-is-a-leader/", "title": "An Engineering Team where Everyone is a Leader", "content": "\n             Having worked for a decade as an engineer at various companies, I noticed how most teams in software often have \"the\" manager and \"the\" tech lead or \"the\" senior engineer. These are the decision-makers and ones that lead all projects. Many engineers go to these people asking,  \"What do you think I should do?\"  or  \"Can you tell me what is next?\" . People would ask for permission, over forgiveness - and get scolded when they went ahead without involving these people. In an environment like this, becoming a tech lead is challenging for others - especially as long as the existing tech lead is on the team. At bigger companies, I saw talented engineers switch teams internally, to get this opportunity, on another team. When I  moved from engineering to engineering management , I wanted to build a team where everyone can be a leader - and everyone would act as an owner . A group where every member has the skills, confidence, and empowerment to take initiative, make decisions, and lead others. Where, when people saw problems, they would think, \"let me take the lead in solving this issue.\" I wanted to do this because I believed it would lead to better execution, faster professional growth, and people staying with the team longer. Initially, my team was a team of eight engineers, from juniors to more senior members. Two years later, I have a team of triple the size, where most people have led a significant project, with mentorship/coaching support from a more experienced leader. Professional growth followed, with all the original eight people  promoted to the next level , alongside a few others. Attrition has been low, and people seem to like being on the team. This post is a summary of the approach and tools I've used to build an engineering team, where everyone is a leader by rotating project lead responsibilities within the team.  It includes sharing of the  project management expectations Google Docs guide that my team uses . It's also a reflection on the pain points that came with this approach. I can't advocate for how universally this approach could work. However, based on my results, it is something I suggest engineering leaders - especially frontline managers - consider as an option. Inspiration My inspiration for having more people lead a team came from three main places: a personal itch to scratch, a book, and a podcast. My personal itch to scratch  was that I started to become the bottleneck for project management on my team. When I joined the team in 2016, we had few engineers who have led larger projects before. I joined with lots of experience behind my back: I was a scrum master at Skype, and a team lead at Skyscanner. I became the person who set up a  basic project management framework  that worked well enough for our environment. However, I found myself running too many projects at the same time. At Uber, we had no project managers at the time, so I decided to get other engineers involved. As a first step, I put an engineering project management guide together; then, I started to mentor a few first-time project leads. The book that inspired me  to break the status quo of one \"main\" tech lead per team was  Turn The Ship Around.  It's a story about how a captain at the navy flips the traditional top-down operation mode upside down to bottoms-up initiative-taking - and gets better results than any other team in the army. It is an easy read, based on a true story and involves intricate details on nuclear submarines. The captain started a cultural shift with a seemingly small thing. He asked people to start all their sentences with  \"I intend to do {this and this}, because‚Ä¶\"  over waiting for orders to be given and following those orders without thinking. The podcast that hit a nerve with me  was the  HBR IdeaCast  interview with  Sue Ashford , professor at Michigan's Ross School of Business, titled  Why everyone should see themselves as a leader . She talks about what she's learned about shared leadership and how organizations that adopted this model were efficient. A quote that particularly struck me was,  \"The more you have a leader identity, the less risk you see in leading. The less risk you see in leading, the more you develop a leader identity.\" Sue went on to say that shared leadership has a lot of payoff in places where things are moving fast, are complex, and have many dependencies. In places like this, people who take leader-like actions are more efficient than those who wait to go up and down the chain. What she was talking about sounded exactly like software development. She suggested ways to encourage this behavior:  \"Every manager could be growing the leaders around her. One strategy for a boss is granting the identity in a public setting.\"  Which reinforced the approach I was planning to take. One project, one engineering lead My team of 8 engineers, was running 2-3 parallel projects, at the time. The first thing I settled on was to have one publicly announced engineering lead per project. I did this to make ownership clear - similar to how Sue Ashford was suggesting to grant a leader identity in a public setting. I wanted to give autonomy to make decisions to the project lead - but at the same time, have them take responsibility for these decisions. As an engineering manager, I am the one accountable and responsible for my team delivering projects. I delegated the responsibility - deciding  how  to do things - but kept the accountability. If the project would fail, and someone would get in trouble, it would still be me, not the project lead. Setting expectations on leadership Up to this point, I was \"the\" project lead on the team. When I sat down with one of the experienced engineers, asking them to head up the next project, their first question was what I'm expecting from them. I didn't have a straight answer, so I asked for some time to collect my thoughts on what I really was asking. I ended up  summarizing expectations in a document , editable by the team. I wrote the first version. Then the team ended up modifying this document after each project. Most of the modifications were additions and tweaks. These were the seven expectations I asked project leads to go by: Collaboration . Set up a framework for collaboration. Milestones . Break down the project into milestones & provide estimates on these. Communication . Communicate project status to stakeholders. Risks . Manage and call out risks. Delegate . Help the team ship and delegate (both to the team and upwards). Motivation . Motivate the team on the way. Quality . Ensure the overall quality and reliability of the shipped product. I aimed to set expectations to avoid micro-managing . I tried to define outcomes I was looking for, but not the specific implementations. For example, I like to run daily standups and have always done this with my team. However, this was not the outcome I was expecting from a lead: I merely expected them to have regular updates with the team. The format and cadence are up to them. Some teams prefer async updates; others like to do three-times-a-week standups. I added ideas they can consider but made it clear that they can choose whatever they would like to. Mentoring, then coaching the first few leaders The first few project leads were experienced engineers, who either have led projects before or have observed others do so. I joined all team status updates, observing how things were going. I often had post-standup catchups with the project leads, giving feedback and suggestions. I had more frequent 1:1s with the project lead in the initial phases of the project and gathered feedback from other team members. After the first few weeks of a project, the new leads started to feel more comfortable in their role. They took more initiative, and my role slowly changed from mentoring - giving advice - to coaching - asking open-ended questions. Transparency and accountability via weekly, written updates A challenge that leaders like myself have when delegating project leadership is being certain that things are going the right way. I was still accountable in the case the project went south. However, I was keen not to get too involved in the day-to-day, giving space for the project lead to grow. I wanted to observe but not interfere. One of the powerful tools I've found leads and teams to hold themselves accountable was a short email status update sent out by the team every week. The update would summarise progress towards the next milestone, how this process changed from last time, and progress the previous week. Risks and delays would explicitly be called out, along with plans to mitigate. This update would be emailed to me, key stakeholders, and all of the team members. This written update turned out to be a vital tool in growing strong project leads . First, it requires concise and good writing, keeping the target audience in mind - the stakeholders. For any engineering leadership position,  good writing is a key skill . Second, it forced the project lead to step out of the engineering mindset, and empathize about things stakeholders cared about. Stakeholders typically care about  milestone estimates , evidence on the progress being made towards those estimates. In the case of risks and scope changes, they care about what changes in scope mean for the business. Finally, stakeholders ended up often pinging the project lead directly. This forced the lead to strengthen their stakeholder management skills. Preparing junior members to lead a project As the first few project leads shipped their projects, more team members expressed interest in leading. I was generally supportive of giving people a go, who had some past tech lead experience. However, many of the team had none. Would I be setting them up to fail, if they started to lead a project, with no previous experience? First-time project leads needed to strengthen leadership skills before being thrown into deep water.  There are multiple things a project lead needs to do, from facilitating meetings, reporting, calling out risks, coming up with mitigation strategies, and others. Could they start to practice a few of these skills on a project they are not formally leading? Working with the existing project leads, I suggested areas they delegate to more junior members, showing them ways to do it, then mentoring them. For example, a more junior member started to facilitate the regular standup, getting feedback from the project lead afterward. Preparing for planning meetings, or leading certain stakeholder meetings started to be done by less experienced members - after plenty of preparation, and the project lead being present to support. Even though these engineers were not yet leading the whole project, they were building up the muscles needed to do so. Even better, the project lead was strengthening their ability to mentor well, while also delegating some of their responsibilities, allowing them to focus more on coding, or other, high-leverage activities. First-time leaders: directing, then mentoring After many months, the first engineer, who had never led a project before, seemed ready. I announced this person would be leading the project, gave them the same high-level guidance as I did with past project leads, then sat back to observe. The project went badly. It went so south that I had to ask a previous project lead to step in, to get the project back on track. Going through what went wrong, it turned out that the first-time project lead found the expectations on leading too vague. I put together these expectations for someone who'd led projects before, and wanted to avoid telling them \"how\" to do things. Yet, for people with no experience, telling them \"how\" was important. I took a more \"prescriptive\" approach with first-time project leads , going forward.   I suggested them to follow certain processes to the T - kickoff meeting following a template, daily standups, weekly emails based on a template. I asked them to humor this for the first time, and that on their next project, they will be free to choose their tools more freely. Just experience out how these \"standard\" tools worked, for the duration of the whole project. I put the  Checklist for first-time projects  part in the guiding document in place at this time. I made sure to have an experienced project mentor and support the first-time lead,  helping them succeed. I made it clear to this experienced lead that the first-time project lead's success is their success. By this time, several had successfully led projects, so finding mentors was not hard. In hindsight, this mentorship setup was more important than the \"prescriptive\" project management approach. A team of leaders - a high-performing team About 1.5 years into starting this process, 10 of the now 12 people on the team had led complex projects, heading up teams of multiple engineers. And the payoffs started to be more visible. The perception of the team improved greatly . Stakeholders started to appreciate - and depend on - the weekly status update emails, and loved the transparency these updates provided. Turns out that unexpected delays are easier to work through, when stakeholders trust the team, and understand what happens under the hood. The approach of engineers owning features end-to-end became more sustainable across the team.  In a sprint-based environment, most engineers tend to \"forget\" about a feature, after development is complete. They move on and pick up the next piece of work. This is despite the project far from being complete: rollout, A/B testing and user feedback are still to come - and all these parts carry additional project risk. We adopted the  \"project lead is the first one on the team, last one off the team\"  mindset. As much of the team transitioned to the new project, the project lead was still engaged, looking at usage numbers, figuring out if something needed fixing. In the traditional model of one tech lead per team, this setup would have burnt out the one lead. However, an ongoing rotation made this kind of responsible ownership far more sustainable. Members of the team saw themselves as leaders, even when not being assigned a project lead role . When interacting with stakeholders, they made decisions on the spot, informing relevant parties. Asking for forgiveness, not permission, became the norm. This itself should not have been a big deal, as acting like owners is an Uber culture value. What I found interesting was how quickly new starts adopted this leader mindset. Finally, professional growth on the team was consistently high , and attrition consistently low. I mentioned how I had a great run with promotions - all of the  original team members were promoted  in the first two years of working together. In many cases, demonstrating quality leadership and mentoring others to become efficient leaders were key reasons these promotions went through. Likely related to professional growth, very few people decided to leave the team. Those who did, moved to teams owning domains they had more interest in, quickly becoming a goto person on their new teams as well. Tensions and challenges This process was not all roses and butterflies: difficulties also came up on the way. Engineers being anxious to lead  was the first challenge I had to face. As I shared my plan on how I'd like to see everyone eventually lead a project, more people expressed an interest than there were opportunities to lead. Even though I made it clear, that not everyone can lead, at the same time, some people started to get impatient. This was the point where I began suggesting that people take on ownership on parts of the project: specifically, project leads delegating smaller parts. Smaller, one-person side-projects were also an area I experimented with. For those who were eager to lead, I suggested we treat one of the smaller things they worked on as a project. I assigned a mentor to them, to make it a two-person team, and asked them to follow the usual expectations, from having a kickoff, incremental milestones, and weekly updates. You might think this was an overkill. Perhaps so, but the people doing this loved it - and improved their leadership skills on a small, non-critical project. Too many parallel, small projects  also became a problem. There was a point when my team was working in pairs, across several projects, working disconnected as a whole. To solve this, we started to plan more ahead. I also tried to \"mix and match\" parallel projects, so larger and smaller efforts would be better balanced. The time-consuming part of planning and resourcing projects  was the main downside of this approach. I found myself and our product manager becoming the bottleneck in planning out who will work on what project, next, and who will be the lead. Initially, I did not mind: the payoff and professional growth for team members made up for a bit of extra time spent here. As the team is growing, we'll have to decide if we keep this structure, with smaller teams, or not. \"But I want to code, not do project management‚Ä¶\"  Early on, a few engineers expressed worry that I'm asking them to do project management.  \"Isn't that what project managers are for?\"  - they asked. While we do have  technical project managers  at Uber, they manage really large projects that span tens of teams, and just getting a status update can take days of poking different people. For projects in scope of the team, we are left to our own devices. I suggested two options to them: Either we have another person do the project management - and they have no say in how this will be done . Perhaps we even entertain the idea of an external hire - who is not an engineer. They won't have the engineering context, so they'll ask for more frequent updates, and have more regular check-in meetings. Also, anytime something seems to be delayed, they will have to come to the engineers to ask them how and what can be mitigated. Or they do the project management - doing so with autonomy, and learn a new skill . Do as little project management they'd like to, as long as we have a way to know where we are, and if we are on track. While doing so, they build skills that could be pretty useful - universally. If they join a tech startup, the first few tech hires will all be software engineers, who will need someone to help them with getting projects done. Or if they move up the ladder, later, there will be times when someone needs to fill in for the technical project manager. It would be nice to know how it's done, no? After this chat, everyone went with option #2. Back then, all our projects were small enough to manage ourselves. As of today, we do lean on technical project managers for some of the cross-office, cross-team, cross-organization projects, where there are far too many stakeholders for an engineer to manage alongside the engineering work. More efficient and engaged engineering teams: teams where everyone is a leader I personally had great success in building an engineering team, where everyone saw themselves as leaders - and has the opportunity to exercise this skill. Beyond the additional logistics load on the manager, to have enough, good-sized projects to lead, I saw little downsides to this approach. What worked for me, in my environment, might not work for you. But do keep in mind what Sue Ashford had to say on shared leadership:  \"In a world, where things are moving much faster than before, things are more complex, things are more ambitious. Where work is inter-dependent and coordination and cooperation is required, then shared leadership can have a lot of payoff. (‚Ä¶)  We need people taking leader-like actions in more places .\" \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/dont-work-alone/", "title": "Don't Work Alone When You're a New or Junior Engineer", "content": "\n             One of the recurring things that come to bite me and my team is having a less experienced engineer or new joiner work completely alone on a project for weeks or months. We‚Äôve done this multiple times, and the results were always similarly dire. The engineer ends up building something slightly - or very - different than what we intended to. They took a  lot  longer to do it - and their morale was down, due to feeling lonely and unproductive this time. They did make mistakes, but did not have anyone give them feedback, to learn from it. Every time we sat down and did a retrospective on what to do different, next time, we agreed on the same thing: have someone to work with from the start. Now, as a practice, I always make sure non-senior engineers don‚Äôt work completely alone, no matter how small the project at hand is . This often means that second engineer is a ‚Äúpart-time advisor‚Äù or buddy. This setup has worked far better. Now, the less experienced engineer has someone to bounce ideas off and plan with, someone to consistently review their code, and someone to hold them accountable to their progress. If they are a really productive and autonomous developer than the second engineer doesn‚Äôt have much work to do. However, if they are going down the wrong path, the other developer can help them out much earlier. Also, this setup is great for  informal mentoring and faster professional growth . If you find yourself working alone - and don‚Äôt have a manager who sets up some kind of pairing - then take steps to fix this. Ask another engineer on your team to be your buddy for the project, doing a quick check-in with you every day, and reviewing your planning and doing code reviews. If they politely decline, talk with your manager, and try to convince them of the productivity benefits for the team. Sure, the more experienced developer will need to spend more time with you, but in return, you will not only get things done quickly but also grow faster. Soon, you‚Äôll be able to help others on the team, in a similar way. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/im-writing-a-book/", "title": "I'm Writing a Book on Growing as a Software Developer", "content": "\n             2019 was an eventful year. At work, I had another  good run with promotions with my team  and I became a first-time manager of a first-time manager. This means that I now have skip-levels: people I don't directly manage. I also had a few dozen  coffees with developers in Amsterdam that I did not know before , which mostly turned into career discussion sessions. Increasingly, I started to feel that I though I have a lot of experience and advice to share on career growth for software engineers, I'm having less time to do this in-person. For every coffee I grabbed with people outside Uber, I had to say no to more of them. And while there are  many great books on engineering and leadership , I found few good resources specifically on career growth. So I decided to scale myself better and set the ambitious goal of writing a book on professional growth for software engineers at tech companies. This post is about the validation I've done so far and how you can help shape the content of the book, and  how you can sign up for updates . Validating the book topic with senior/staff engineers Writing a book is a substantial time commitment. Before going all-in, I decided to validate my ideas with my network. I reached out to 70 engineers whom I worked together with at some point in the past decade and who have gone on to have successful careers. Most of them are now senior/principal/staff engineers or engineering managers. I asked  these questions  about what they found the hardest things about software engineering, the best feedback they've gotten to grow, and things they wish they'd have learned earlier. I also asked the most important traits they see in people they consider great software developers. Finally, I asked what content they would expect to see on a book on growing as a software engineer. The responses were interesting. From the feedback, the hardest things about engineering - according to these engineers - are dealing with change and with people. Something they wish they'd learned earlier was to test more, to lean on others more, and to keep learning even when feeling like an expert. They saw great software engineers as humble, empathetic, competent, good communicators, and servant leaders. Most of their expectations from the content were covered as part of  my draft table of contents . Validating the book content via blog posts I started to publish blog posts on a few topics I would eventually write about in the book:  code reviews ,  writing well ,  operating large & reliable systems . In August, I did a month-long sprint of writing 50,000 words on the topic and started to publish \"blogified\" versions of my writing. Almost all of the posts I originally wrote for the book were picked up and discussed on places like Hacker News and Reddit. I saw more traffic to my blog the past three months than the previous three years: I published the first post related to the book topic in May 2019. Views have spiked since then. Numbers-wise, my blog traffic for the past three months has been 70,000-90,000 unique visitors per month. This year, I've had 11 articles with more than 10,000 unique page views. The most popular articles this time have been  Software architecture is overrated ,  The product-minded engineer  and  Developers mentoring other developers . I've also gotten - and said yes to - translation requests to Russian and Chinese. Curiously, the  Russian translation of Software architecture is overrated  has seen half the traffic - 35K views - as the English version. 3 months traffic from Sep 2019 to Dec 2019 The source of traffic is quite diverse and seems in-line with technology hubs across the world. The top 7 cities I got traffic from, in order, were San Francisco, New York, London (UK), Bengaluru (India), Seattle, Berlin (Germany), Amsterdam (Netherlands). The top 20 include Toronto, Sydney & Melbourne (Australia), Paris (France), Warsaw (Poland), Stockholm (Sweden), and Moscow (Russia). If Google Analytics is to be trusted, there are 95 cities where this blog has seen 500 or more unique visitors the past quarter. Number of unique users per city to the blog, Sep 2019 to Dec 2019 If I was looking for validation of people being interested in the content I'm writing, I've gotten it. Both in a quantitative way - number of visitors - as well as in a qualitative way. I'm having more people add me on Linkedin, saying thanks for the blog posts. Some people are also asking for career advice, which is an inspiration for my book content and future blog posts. And my  monthly newsletter  has grown to over 3000 subscribers in 3 months. Validating the idea with publishers Publishing a book can be done two ways: self-publishing or going through a publisher. The main pros of self-publishing are a larger share of royalties. The main pros of going through a publisher are more thorough vetting, better editing, and a larger reach, with more channels, like being included in Safari Online. Going with a publisher also involves a contract that can provide additional motivation to finish the book on time. I was lucky enough to work with a professional editing team at Stack Overflow and saw the difference great editing makes. Read my  original blog post on code reviews  and the  re-edited one on code reviews on the SO blog . The content is the same, but the result is different - and for the better. For this book, quality and reach is a more important consideration than a large cut of royalties, so I'm currently in the phase of looking for a publisher. Going through a publisher is a more time-consuming process. It involves getting through to an acquisitions editor, putting a formal proposal together, that the publisher then vets through their proposal process. Publishers are in the business of making a living through publishing profitable books, and they approach book ideas like an investment. Is it a good investment to make for money and their resources (editors, marketers, prints)? They look at potential sales numbers, based on their experience, and the likely profitability of the book. They compare the content with other books in their pipeline. If it is a lucrative enough proposal, they will say yes. Else, they will likely pass. I'm talking with publishers and the feedback I've gotten was the idea is interesting, and the topic not very conventional. Most publishers I'm talking with publish the majority of their books on specific technologies, and take on few projects that are outside of this format. I've put together a few proposals, which also helped narrow what I'm planning  the book to be about . I'm hoping to lock down a publisher/editor in a reasonable timeframe and have an estimated publish date beyond just \"sometime in 2020\". Sounds interesting? Sign up for updates & help shape the content. You can  read details on the book and the table of contents and sign up for updates  on the release date and other relevant information. You can also help shape the content of the book,  in two ways: Fill out this survey on your experience as a developer . Feel free to provide as little or as much detail as you see fit. Email me  questions you have on growing, as a software engineer, or topics you'd like to see in the book. In the meantime, expect more posts on software engineering growth on this blog. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/distributed-systems-learnings-in-2019/", "title": "Distributed systems learnings in 2019", "content": "\n             With the year closing, I'm looking back at things I've learned while my teams were  building  and  operating distributed systems . Building a new distributed system is easier than migrating the old system over to it.  In the past two years, I've been part of a  few rewrites of distributed systems  and observed some more. While planning, architecting, writing, and deploying these systems is an interesting challenge, it's not the hardest part. Migrating the existing systems over to the new one has been more time consuming and just as challenging as writing the new system.  Why was this? For one, we tended to underestimate how much custom monitoring we need to build to confirm the two systems work the same way. Second, the new system was built in an elegant way, without any workarounds. However, the legacy system it replaced has a lot of edge cases: edge cases we discovered during the shadowing/rollout phase. In some cases, we needed to make tough business decisions whether to support an edge case or drop it. Related to this, Will Larson has a good article on  running good migrations . A better way to improve reliability: measure, report, repeat. Start simple.  For the past three years, the reliability of our systems was top of mind. However, we seemed to be threading water: for every improvement, we later had regressions, and I was never really clear on how reliable the system was over a longer period of time. This year, we took a step back: agreeing on simple SLOs (Service Level Objectives) and a \"low bar\" reliability number, like 99.9%. We then started to measure this on a weekly basis and report on it. Whenever we did not hit it, we dug into the root cause and fixed the systemic issue.  For the first time in three years, I feel a lot more confident in what the actual reliability of our systems is. Now that we're walking, we'll start jogging next year, with stricter SLO definitions and/or stricter reliability targets, like 99.99%. Idempotency changes should be treated as breaking changes - even if they technically don't qualify as such.  In one of the most interesting outages I've been part of this year, a system made a change, that changed a previously idempotent endpoint to behave as non-idempotent. The thing was, the idempotent behavior was not documented as part of the contract. However, clients assumed this was always the case: it always has been. The change caused clients to fail in ways that were not tested, causing an outage in parts of the system.  The team making the change argued that the change was non-breaking, and consumers should not assume idempotency. I strongly disagree. Idempotency, consistency, or durability changes for services should be treated as breaking changes: both in communication, rollout, and API versioning (in the end, we resolved the issue by agreeing to treat future changes as such). Reliability & postmortem reviews are more impactful when going further and looking at systems issues that are hurting multiple teams.  I've had far too many reliability and high-impact postmortem reviews the past year. We have a mature process around this, and teams come well-prepared, having done good analysis on the postmortems. Still, most postmortem reviews were very much about the team itself.  However, towards the end of the year, we started to focus less on the team-level learnings, but more on cross-team learnings. As we started to ask questions,  \"Could this issue impact other teams?\"  and  \"Is any team or tool blocking you from detecting or mitigating outages like this faster? \", we started to dive into interesting topics. It turns out, many of the outages have similar pain points and root causes, that teams, individually struggled to address. Unique and unexpected challenges when running your own data centers . Uber is one of the few places where we  do run our own data centers , on top of using cloud providers. I have seen some interesting challenges around power failures, connectivity issues between data centers, service storage being split between two data centers failing over between a cloud, and a private data center. Unfortunately, I can't share exact details, but there have been a few  \"I had no clue this can go wrong - but it did\"  moments throughout the year. Suffice to say, I have a newfound empathy for teams at Google, Microsoft, and Amazon who are building data centers at scale. Deploy on Fridays, Saturdays, and any day - but think about when code chills are sensible tradeoffs . Towards the end of the year, Twitter exploded on the \"should we deploy Fridays\" debate. If you are running distributed systems with distributed teams, you should deploy all the time. At Uber, I recall we do a few hundred deploys per hour - including the weekends. On the weekends, it's either because of outage mitigation or because of timezone differences (Saturday 7am in India is still Friday evening in the US).  The tooling, alerting, monitoring, and oncall should all make deploys a confident process, at any time. However, at Uber, we do have code chills for the very few critical times of the year, when our traffic surges and a large majority of the workforce heads to holidays. Specifically, around the end-of-year holidays. This is a conscious tradeoff teams make.  For example, 95% of my team is on holiday during some of the highest load days of the year. I'm perfectly happy trading off some deploy debt and a few days in January to sort merge conflicts to ensure a lower-than-average outage rate this time of the year, through a code chill. Again, your mileage might vary: if you are seeing less load during this time, a code chill or freeze is probably not necessary. Financial / end-user impact of outages is just as important as the systems impact.  A lot of outages I've seen during the year have been quite abstract in their impact. For example,  \"Service X was degraded for 10 minutes, and 50,000 requests were dropped\".  The impact of these outages was hard to determine. My team also had a few outages where we knew we were down, but the impact was hard to map to actual users - so we did an upper bound estimate, and called it a day.  For large systems, this is often not simple to make the connection between a downstream service and how its downtime hits consumers. It takes a lot of talking with consuming teams - listening, collaborating, and proactively reaching out after outages. The payoff is great, though. If an outage doesn't have a real financial impact: was it really that bad? If no user notices the outage, was it really a high severity? What is important is to be clear on the long-term user impact and measure this.  For example, an outage that slows down, paying for 10% of users by 10 seconds might sound like something that has no user impact, on the surface. But is that true? Did 100% of the users finish payment? Or did some churn, not coming back to complete their order? Did any of the users churn for good, meaning losing all the business with them? If you dig deep enough, you can put a price tag on all outages, which makes reasoning about how much time to spend on prevention all that easier. A simple way to determine who owns a service: who owns the oncall?  This year, my team transitioned several of our services to other teams. We had several debates on how to determine when a transition is complete. In the past, if you asked me how I determine service ownership, I might have mentioned things like code ownership, oncall, expertise and the lot. Now, I believe whoever owns the oncall - the operating of the system - owns the system itself. Everything else needs to follow: code ownership, understanding of the system and so on. This approach made the transitions much more straightforward. It also reinforced my belief that shared oncalls between multiple teams can be a bandaid solution, but they are not healthy, on the long term. This year, my team went from owning most of what is payments in Uber's Rider app - 10+ payment methods and all payments experiences across mobile, web and backend - to building and launching  Uber Wallet  across multiple Uber apps. We've migrated to our new distributed systems and built new, high QPS ones. Next year will be about scaling these up, operating them reliably and onboarding more teams on them. Hopefully a lot more learnings to come that I can share. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/readable-code/", "title": "Readable Code", "content": "\n             Good code needs to meets two key requirements. First, it should be correct: when executing, it should produce the result that is expected. Second, it should be easy to read for other developers. Coding is a social activity. Your code does not exist in a vacuum, just implementing a lone task. The code you write will be re-read by many other developers, who want to either understand or modify how your code works. Why readable code matters Why is readability so important? It's because checking if the is correct is relatively straightforward. Unit tests are excellent ways to do this, but manual tests or  monitoring the system  also help catch incorrect code. While incorrect code cannot hide for long, unreadable code can go undetected for a long time. It keeps silent in the codebase until another developer comes along and tries to understand what the code does. They might be trying to fix a bug or adding a new feature. They might want to understand what this unreadable piece of code does and perhaps also need to change it. When the code is not readable, the engineer changing the code next will burn a lot more time on what should have been straightforward work. They might misunderstand the code and use it in ways it was not meant to be used. They will then spend multiple iterations getting the change right. Or they might change the code, unintentionally breaking functionality elsewhere. If there are automated tests for the breaking functionality, this is only a minor annoyance. If there are no tests, this will lead to more problems and more time spent on making this change correctly. In some cases, the other developers might spend so much time, failing to understand the code, that they might completely rewrite it: deleting the original code and writing a new implementation. Of course, when rewriting something completely, perhaps not all edge cases will be covered. This will result in more time spent on the rewrite than the time it took to write the original code. The biggest risk that non-readable code brings is that it starts a pattern of poor readability . The engineer making a change burns a lot of time to figure out how the code should work. Instead of making the code more readable, they make the smallest possible change possible, resulting in even less readable code. And the person coming next will spend even more time understanding the code, unintentionally breaking the system, or just giving up, deleting the code and rewriting the whole thing. Non-readable code is a large contributor to technical debt. While tech debt can build up for a variety of reasons - a lack of automated testing, lacking processes like CI or CD or poor onboarding and documentation - non-readable code is a major driver of the tech debt that slows teams down. Readable code, together with well-tested code, are the two most important principles that pragmatic engineers follow. Readable and well-tested code is what makes refactoring, extending, and modifying parts of the system straightforward. Readable and well-tested code is the foundation of a solid codebase, where engineers are confident and quick to make changes. What is readable code? Readable code will mean slightly different things to each person. It varies between teams, companies, and programming languages. There are two groups of important people who are judges of how readable the code is: yourself and everyone else who will later read the code. Readable code starts with code that  you  find easy to read . When you finish coding, take a break to clear your mind. Then try to re-read the code, putting yourself in the mindset that you know nothing about the changes and why you made them. Can you follow along with your code? Do the variables and method names help understand what they do? Are there comments at places where just the code is not enough? Is the style of the code consistent across the changes? Think about how you could make the code more readable. Perhaps you see some functions that do too many things and are too long. Perhaps you find that renaming a variable would make its purpose clearer. Make changes until you feel like the code is as expressive, concise, and pretty as it can be. The real test of readable code is others reading it. So get feedback from others, via code reviews.  Ask people to share feedback on how clear the code is. Encourage people to ask questions if something does not make sense. Code reviews - especially thorough code reviews - are the best way to get feedback on how good and readable your code is. Readable code will attract little to no clarifying questions, and reviewers won't misunderstand it. So pay careful attention to the cases when you realize someone misunderstood the intent of what you wrote or asked a clarifying question. Every question or misunderstanding hints to opportunities to make the code more readable. A good way to get more feedback on the clarity of your code is to ask for feedback from someone, who is not an expert on the codebase you are working on. Ask specifically for feedback on how easy to read your code is. Because this developer is not an expert on the codebase, they'll focus on how much they can follow your code. Most of the comments they make will be about your code's readability. If both you and other developers are happy with how readable the code is, you're on the right track. Many principles can help the code become even more readable and more clear. But before you go too deep on these, focus on what matters. Focus on the code being easy to read for you, and for the people you work with. Principles of readable code There are numerous principles on what readable code is. For me, readable code means following these principles. Single responsibility.  All building blocks - classes, methods, variables - follow the single responsibility principle: every building block does exactly one thing. This makes it easy for the person reading the code to understand what this responsibility is. It also makes it clear what part of the code needs to change. Well-structured . The codebase is easy to navigate around, as functions, classes, modules follow a logical structure. Formatting is consistent across classes and the codebase. Thoughtful naming . Class, function, and variable names all help understand what is happening, and making reading more seamless. Code that has good names often had developers spend multiple iterations coming to these clear names. Simple and concise . The code tries to be as humble and simple as possible. Developers don't use fancy tricks and also avoid over-complicating things. Functions are mostly short, making them easy to read. Classes are also not overly large. Comments explain the \"why,\" not the \"how.\"  Most of the code can be understood by itself. Comments fill in the remaining gaps. Continuously refactored to keep being readable . Codebases grow. As a simple class gets more responsibility, it grows in size and complexity. Readable codebases stay readable due to continuous refactoring. The new, complex class might be broken into multiple parts or changed other ways to stay easy to read. Well-tested.  Well-tested code can be modified quickly and without fear of breaking things. Having the code tested via automated tests is important for the code to stay readable. Without tests, refactoring the code becomes risky, and developers eventually stop doing it. With tests, there is no excuse on why not to make even large and risky refactors, that keep the code easy to read. There are many great books and other resources that go into far more depth on what readable code is and ways to make code more clear. I especially recommend the books  The Art of Readable Code  and  Clean Code . What does readable code mean to you? \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/performance-reviews-for-software-engineers/", "title": "Performance Reviews for Software Developers ‚Äì How I Do Them In a (Hopefully) Fair Way", "content": "\n             Note: if you're just looking for performance review templates and examples, head  to the templates page  to download them. I've had about a dozen performance reviews during my decade-long software engineering career. Some of them were unmemorable, some okay, but a good chunk of them were just... plain bad. Often, these bad ones marked my  \"shields down\" moment . The point I lost trust in my manager and decided that I need to change teams or companies. When I became a manager, I silently vowed to do whatever I can to not have those awkward and bad performance reviews. This post summarizes my approach to preparing for and delivering performance reviews that are fair, build trust and motivate people.  I also share some examples at the end of the post.   I've delivered more than 50 reviews with this approach over 3 years, most of them well-received. I decided to write this post after presenting some of the concepts internally and on a local meetups, with a few requests to share it more broadly. The post also comes with performance review templates  and examples: Template and example for software engineers  to write your self-review Template and example for engineering managers  to write the reviews for your directs As with any topic that's around management: take it as inspiration and a source of new ideas, not a recipe to follow. And take it as a way to challenge yourself: where can you improve on how you do performance reviews? Note : this article is primarily aimed at managers delivering reviews. I'll be writing a follow-up post for tips to prepare better for your performance review, as an employee.  Sign up to the newsletter  to get notified of this. What this article covers: Prerequisites for fair perf reviews: levels, competencies, expectations Bad performance reviews Three observations about perf reviews at tech companies How I do performance reviews : preparation, writing the review, removing bias & delivering it Example performance reviews - and templates What do the \"pros\" say about good performance reviews? Principles for fair performance reviews Prerequisites for fair perf reviews: levels, competencies, expectations For a performance reviews to be fair, levels and expectations need to be well-defined.  If they are not, you can still get good feedback - but it will be subjective feedback. All good tech companies have clear levels and expectations/competencies explicitly defined. These are usually kept as internal resources, visible to all engineers/managers within the company. This was the case at most companies I worked at. Luckily, some companies are making their definitions public. A few examples are these: Monzo's progression framework  for a variety of disciplines, not just software engineering Rent the Runway's career ladder , shared by  Camille Fournier , author of  The Manager's Path Square's software engineering career ladder . See  their blog post  to put this framework in context. Buffer's engineering career framework For an idea of levels within companies, see my article  Engineering Career Paths at Big Tech and High-Growth Startups   Take a look at  Progression.fyi  for more examples. If your company doesn't have levels and expectations clearly defined for developers: this is a blocker to fair performance reviews.   If you're a manager, make it your job to fix this and put together one, pulling together experienced managers and engineers to build the first version. Bad performance reviews A good chunk of my approach to perf reviews is driven by the bad reviews I've had. I made a list of the characteristics that were the bad thing about them: Zero specifics.  The type of reviews where there are some fluffy sentences and zero substance. On the surface, the review might look good, with feedback like  \"Good work\"  or  \"Keep doing what you're doing\" . But when you ask for specifics, your manager cannot give a single example, or constructive feedback. While you might treat this review might read as a supportive message from your manager, think again. You've gotten no specific feedback on where you could grow, and your manager did not seem to spend as much as five minutes compiling your review. How much does this manager care about you? My manager is disconnected from what I've been doing.  You've had a great period, shipping several impactful things. Yet, on the review, none of this is mentioned, only small, sideline things. How is it that they did not call out the big items? And since they never mentioned them, do they even know what you've worked on? In my experience: they likely don't. And since they don't, don't expect they will vouch for you when it comes to the  promotion to the next level . The \"let's skip straight to the numbers\" review.  On the meeting, you're excited: finally, a manager who doesn't keep you waiting, and gives you what you're waiting for: the bonus and pay numbers, then ask you if you have any questions. You are still thinking about how to spend that money - so you probably won't have questions, especially if the numbers look good. After the meeting, you re-evaluate if this is the review you really wanted. It was called a performance review, except you did not talk about one thing: your performance. And the next day you might feel too awkward to bring this up. This type of review is no better than the \"zero specifics\" review. The unfair, one-sided review.  The kind of review, after which you walk out, with your blood boiling. During the review, you get some negative feedback, which your manager tries to deliver in a civilized way. So they accompany it with examples. Except those examples are one-sided, miss key details and are mis-interpreted. You might challenge this - only for your manager to get defensive. And, to be fair to them, they kind of have to, right? The rating determined your bonus, which cannot be changed any more. ‚Äå‚Äå‚Äå‚ÄåSo after the meeting, both of you are frustrated. You are upset at how you've been treated unfair, and then ignored, when you pointed out missing facts. In the worst case, your manager is just is upset, but at you, thinking your concerns are baseless and that you were being unnecessary combative. What are the chances that you'll mend this broken relationship? The biased review.  I'm not talking about the positively biased, but the negatively biased ones. There could be a recency bias, focusing on a near-term hick-up, but ignoring lots of great work from before. There could be gender bias, especially if you're female, with more focus on your behaviour than your accomplishments, or downplaying of these. Or there could be  several other biases  that can make you feel that your contributions are devalued. The \"took me by a huge surprise\" review.  I left the most important one for last. If a review takes you completely by surprise - usually not in a good way, that's a fail on your manager delivering feedback on a continuous basis. Good reviews will bring lots of new information, but very little surprises. Period. Three observations about perf reviews at tech companies After having received over a dozen per reviews, talking with many others, and now being on the other side of the table, having reviewed or delivered close to 100 reviews, here are three observations I have of the process. Trust between employee and manager is the most likely to break as a result of a poor perf review.  Bad perf reviews break trust, and are the first step to the employee looking for other opportunities. This was the case with myself and with several people I talked with. Too few engineering managers put meaningful time into writing perf reviews that have feedback of substance.  Many managers I've had and ones I know cut corners on this activity, making up excuses why they don't have time for it. Lack of time is also often used as a poor excuse for the lack of thoughtfulness. Acknowledgment of achievements are just as important as a numeric rating and the numbers.  My biggest disappointment with perf reviews were never with the numbers - even if they were below what I expected. They were because of the lack of acknowledgment of my work, and lack of reflection on my achievements and growth. While managers don't always have control of the numbers, they always have full control of how they say - or don't say - thank you. How I do performance reviews As I was writing my first-ever performance review, I wanted to avoid the bad performance reviews I've seen, as well as keeping in mind the impact these reviews have on people. But it wasn't just anti-patterns I wanted to get around. I set goals on the outcome of the performance review: Fair, unbiased and clear feedback.  The feedback should be based on expectations previously set - hence the important of levels and competencies - it should be calibrated and clearly state if the person was meeting, below or above expectations. Motivate . I aimed for both of us to walk out of the room motivated. How is this possible? Starting with acknowledging all the good work, and talking through what to focus on next. There is a tricky part here: what if the numbers don't support the message I'm trying to give? Build trust . As perf reviews are the biggest risk in trust between manager and employee, my goal was to turn this around, and strengthen the trust between the two of us. This requires, at the very least, the review to be an honest and two-way conversation. With the goals set, let's get into how I deliver them. But before we get to the meeting, preparation is key. And when I say prepare, I mean preparing from the very start - months before, or as early as when the employee joins my team. Preparing for the review: months before You can't do good performance reviews without understanding the person, and setting baseline expectations early on. So as soon as someone new joins my team, I start with a few things: Understanding their goals and motivations . What are they hoping to get out of working here? What things do they care most about professionally: growth, titles, leadership, impact? What are their priorities outside of work? I also ask people what their dream would be to do after this job - we all know this is not their last job, or my last job, and I'd like to help them reach their goals beyond just this company and position. Clarifying my role, as a manager, and what they should expect from me.  I always make it clear that their career is in their hands: that is, don't expect someone else to drive this. However, as a manager, they should expect from me - and hold me accountable - to give regular feedback, create opportunities for growth and mentor/coach, when there is an opportunity to do so. Regular 1:1 meetings  which is time dedicated to them, and are places to share feedback both ways and talk about important things on their mind. If there's ever an issue on performance, I aim to bring them up here, discussing and resolving them. Clarifying the difference between promotions and professional growth . Especially for engineers early on in their career, many assume that the only way to grow is through promotions, and some decide to optimize for this. I have  many thoughts on promotions , and this kind of thinking misses many parts of professional growth, so I make sure to talk it through, early on. Preparing for the review: weeks before I believe in the need to prepare for important meetings. The more important they are, the more preparation is needed. Performance reviews are perceived as one of the most important meetings for engineers - at least, when it's the first one with a new manager. So I prepare accordingly. Collecting the substance of \"what\" and the \"how\"  is where I spend most of my time. I want to make sure I get the facts right - and working with software engineers, much of the work of people is readily available. Here's the things I go through: 1:1 notes. Projects the engineer worked on. What did they contribute? Output produced: code, documentation, emails. Feedback they received: peer feedback, thanks they received over email or other means, and other feedback I can find. Feedback they've given: code reviews,  planning documentation reviews , interactions with others Self-review: what have they collected on their work? I try to leave this last, to collect anything they might have missed out. This part is one I spend a  lot  of time on, especially if it's the first time doing a perf review for a person on my team. My goal is to uncover all the great work people have been doing - even if it's something they might have forgotten. I keep a checklist that used to look like this - I update this at before every cycle: Writing the review Performance reviews have a recommended format - which I ignore, until it's time to fill it in the tool. Here's how I write my reviews, in a separate document: Listing out \"what\" was done I start with the summary of the work done in the past period, based on my preparation. I usually list in time order, calling out the more impactful or challenging contributions. This list has three purposes. First, it acknowledges the work they did. Second, I make sure to pause on delivery and ask them if I left anything of impact out. If I did, we add it. Third, it usually reassures people that this a fair review - and people are often surprised at the details this list contains. It's a reflection of how much I've prepared for this meeting. Competencies I re-read all competencies, internalizing the expectations for meeting them. Using the work done, and the \"how\" of it was done, I determine if this person met, exceeded or was below the given competency. I always provide examples, and specific feedback for improvement.  This is especially important when someone did not meet expectations: the feedback needs to be specific, and actionable. It's just as important when people met, but did not exceed expectations. For people exceeding, I sometimes give more stretch ideas. Finalising the review Short summary: I add this summary to the bottom, making it clear where this person is against their level, and how close - or far - they are to promotion to the next level. Top 3 focus areas : I summarize three things I would focus on for faster growth, if I were them. I try to make these suggestions specific. This will be the main - hopefully motivating - takeaway of the review. I re-read the package, and make remove duplicate examples. I also make adjustments, so the overall message supports the summary, across all competencies. Calibration and removing bias We are all biased, I am no exception. To reduce the bias, I do a couple of things. Comparing pref reviews of people, side by side  - with special focus on high- and low performers and people who are different to me. Did I hold the same bar? Am I using similar language and tone to call out achievments, or shortcomings? Sharing the reviews with my manager , asking for feedback on both calibration, as well as biases. Not only is this a good way to get feedback, but in increases visibility for people with my manager. Preparing my direct for the review As I'm done with the review some time before delivery is due, I make sure to prepare people - especially if I've found examples on not meeting expectations, that was not communicated before. I check these examples, and give a heads up on what kind of feedback they should expect during this session, and what growth areas we'll talk about. Delivering the review I always have a separate performance feedback, and a separate compensation meeting.  I've tried different setups, and this is the one that worked best for quality discussions, and feedback. As soon as people hear their compensation numbers, their brain re-focuses and any conversation about improvement is moot. This is the case for myself, and it was the case for all my directs. So as much as people would love to know those numbers, I don't do it in the same meeting. I start the meeting by setting expectations: what the format will be, that they'll get all of this in writing. I also make it clear that I'd like to have this be a two-way conversation and how I'll pause after each section/competency to hear their feedback. I start by going through the achievements for the period - which is a good way to establish trust, and show that I've done my homework as well. Then, I go through the feedback on each area. I avoid the feedback sandwich, sending one message. I then pause and encourage people to share their thoughts by questions like  \"What do you think?\" ,  \"Are there parts you disagree with?\"  or  \"How realistic did this assessment feel?\".  I pay attention to body language - when people tense up, they are likely disagreeing, and I try to have them voice why. Better talk about it now, than later. Wrapping up, I ask them to reflect on the review with questions like  \"How do you feel?\" ,  \"What was the most surprising part?\" ,  \"What part do you disagree with?\" . What if people disagree?  I was vary of openly inviting people to voice their concerns, and sure enough, I had a few people tell me they felt a small or large part of the review was incorrect or unfair. I do keep an open mind on me not necessarily having all the context. So if I have missed information, facts or feedback, the review might not reflect their performance, indeed. This is another reason I start the review with their achievements - anything relevant I missed might impact the review. When it's clear that I missed or might have mis-interpreted key parts, I ask for them to gather these examples on short term and do a follow-up meeting the next day. I have revised my rating in the past, when I missed important details, and the person rightfully called this out. What if people disagree of my interpretation of meeting expectations? This is trickier, but resolving this is key, to keep trust between the two of us. This is the reason I have specific examples of not meeting or exceeding expectations and actionable feedback on how to improve, to get there. Either way, I find it important to know as early as possible - during the review - if people are unhappy with their qualitative assessment. And this is also why I always decouple the financial conversation from this kind of feedback. People might be happy or unhappy with the qualitative feedback, but feel different about the financial numbers. One is easier to resolve, than the other. After the review The performance review is not quite over - there are a few more things to close it off. Sending over the written review . I shoot the review we talked through, over email. I know some people take plenty of time to read through this. I like to send my document over, even when we have a separate perf system, as in my document, I can highlight key growth areas in a more clear form. When people don't agree with parts of the feedback , we do follow up-meeting very soon. On this meeting, we stick to the specific areas in question. In almost all cases, I've found the disagreement to be on either missing information, or interpreting of specific examples. Bonus and salary numbers on a separate meeting.  People might be happy with their performance review, but unhappy with the numbers - and that's a different problem. It's good to separate the two. I've even had a person who was unhappy with their perf review - and we spent time untangling this - but was ecstatic rise they were given by the central team. Had we done the two meetings at the same time, I might have not learned that he was unhappy with my feedback. Forward-looking goal setting . Especially important for anyone who was below expectations in any of the areas. It's useful to also start early for those exceeding expectations, who could start to prepare for  promotion to the next level . Example performance reviews - and templates I've had several people ask for examples of performance reviews. Performance reviews will be different for each company, and can be specific to each manager. Still as inspiration, I thought to share what I have seen, and what I use. For self-reviews for engineers to use as performance reviews , you can  find these here . Here is how this example appraisal or evaluation looks like: For performance reviews that engineering managers deliver , see   a template for performance reviews that I use  - I'm sharing it here as inspiration. If you're someone who does performance reviews, I encourage you to build your own. Putting one together can make focus points clear, ensure consistent delivery between people, and also reduce bias. Especially writing the feedback ahead of time, over making it up as you go is a powerful tool to deliver more objective and less biased feedback. The performance review template I use -  see it here on Google Docs What do the \"pros\" say about good perf reviews? Needless to say that the above was my approach: your mileage might vary and what worked for me, might not work for you. I was curious though:  what are leading thoughts on good performance reviews  in the management industry? So I turned to an authoritative source, the Harvard Business Review and reviewed some of their most read pieces on perf reviews. Here's what they have to say: In  Delivering an Effective Performance Review  (HBR, 2011), Rebecca Knight suggests the following: Before prepare . Set expectations early. Lay the groundwork: prepare a few weeks ahead of the review. Set a tone early on and don't use the feedback sandwich. During: coach constructively . Ask them about how they are feeling. Talk about behaviours, not positions/ranks. Hold your ground . Separate perf review and compensation discussions. Hitting goals should be meeting expectations: don't inflate this by giving feedback that it's above expectations. In the article  Why Most Performance Evaluations are Biased, and How to Fix Them  (HBR, 2019), Lori Mackenzie, JoAnne Wehner and Shelley J. Correll bring some specific suggestions for less biased reviews: Open box feedback (one with no structure) is a biased approach  both for men, and for women. Constrain the form of feedback to remove bias: competencies help a  lot . Evaluate against competencies or a rubric, ask more specific questions (e.g. \"describe the way the employee met expectations). Run a consistency check across all your reviews , after you wrote them down, to remove bias. Unbiased feedback leads to better performance. The key takeaway from their article is this: What we learned is that ambiguity in assessments can lead to bias. They take this insight and  find ways to use rubrics and prompts to be consistent and fair . It might be tempting to think we can just trust our instincts. But the challenge is that implicit bias creep in, and it‚Äôs really difficult to see and therefore stop it in its tracks. Principles for fair performance reviews Based on my personal experience, approach, and success, and cross-checking it with recommendations from experts publishing in HBR, here are a few principles worth considering for writing great performance reviews: It takes a lot more time to do it right. Find this time.  Not enough managers put in the time, even though it's such a big win, when you do. Find the time for a proper, in-depth review, especially in the phase of building up trust with your direct. Engineering work is specific - use it for specific feedback.  Engineers spend a lot of time writing code, documents, emails. We also communicate and work together. What this means is there is a lot of specifics available for the work of an engineer. Use these specifics when giving feedback. Instead of giving feedback on the person writing  bad code , be specific. If collaboration could be better, use a specific project example. When praising, do the same. The more frequent the feedback, the better. Perf reviews should be a \"not surprises\" conversation.  This article focused on preparing for the \"major\" perf review. The one that happens every 6-12 months. But to have a productive conversation at this event, you need to gather and give feedback continuously. Continuous feedback and well delivered formal performance reviews go hand-in-hand for helping people grow. People  really  appreciate getting  quality  feedback.  Your directs will see if you put time and energy in a thorough performance review, and they will be very thankful for specific and actionable feedback. Most developers have yet to receive quality performance reviews. By doing so, you build trust, help them grow, and you also grow in becoming better at giving great feedback. Good perf reviews lead to more trust, faster growth and less attrition.  I have seen good performance reviews pay off in the low attrition across my team, high trust and people growing and  being promoted faster . I've gotten similar feedback when sharing my approach with HR professionals, many of whom were surprised by the larger-than-usual effort I put into this process. And the effort gets smaller, over time. Once you master some of these techniques, gathering feedback becomes easier.  If you're a manager, challenge yourself to improve at least one aspect of how you do performance reviews, taking inspiration from this article . There is very little excuse for managers to do poorly prepared, unfair or biased performance reviews - the upside is saving of some time, but the downsides are far more impactful. Let's change how we approach reviews and turn these stressful conversations to ones where trust is further strengthened, and people come out feeling motivated and determined to grow further. Related to this topic, see the article  How to spot and counter manager biases on performance reviews  and watch my  videos on performance reviews on YouTube. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/how-to-to-become-an-engineering-manager/", "title": "How Can I Prepare to Eventually Move into Engineering Management? - Ask the EM", "content": "\n             I've been a software developer for all my career - however, I'm thinking of changing to a leadership/management path down the line, when there will be opportunities to do so. What are things I can do now, while still an engineer, to prepare to move into engineering management, eventually? Resources (books, blogs) to dive into? I get this question reasonably frequently. While I could cut the answer short by recommending a book or two on engineering management, that won't help you as much - not even to start. While reading (theory) has its use, it's far from sufficient to become a decent manager and won't help in preparing for a transition as much as most people hope.  I've known managers who have read a vast amount of management books and could recite parts of them. They were still poor managers. On the other end, I've known great managers who had limited theoretical knowledge, but had naturally great people skills and ran laps around the former ones. So how can you prepare for a potential future management role? Put yourself in situations that managers deal with, day-to-day, and get better at handling these. Build your leadership muscle Make the team better Pick up the ungrateful tasks that no one else wants to do Give credit to others, selflessly Teach, mentor others and learn to delegate well Be the mentor/\"intern manager\" for an intern Give candid feedback to others and don't shy away from difficult conversations Network with others and build good relationships Observe and learn from good and bad managers Do your homework: read books, autobiographies, newsletters 1. Build your leadership muscle Leadership is a skill you'll need, whether you move into management, or if you continue growing as an individual contributor. While it's an abstract skill, it's pretty easy to see if you can practice it. Can you lead a group of people, to achieve an outcome successfully, in a way that others appreciate? Find opportunities to lead people: this can be both at work or outside of work. Focus on completing the project, then find a way to get honest feedback from others. What did they like about how you led the project? What were the things that they thought you could have done better? How clear did the project feel? When things did not work out, why was that? If you are leading a project at work, even with a team of a few people, you can try using something like the  project lead guidance  I've put together, from having kickoffs to communicating with stakeholders. Here are other activities that you could do: Lead organizing an event  within or outside the company. For example, organize a meetup, a hackathon, a coding event, or a bring-your-kids-to-work day. Perhaps before leading the organization, you can volunteer to join in, then step up to take more responsibility. But you'll want to prove to yourself that you can lead non-trivial things involving several people, end-to-end. Take ownership of a problem area  within the team/company. It could be the CI/CD system, QA, coding standards, interacting with customers, or something else. Choose something that seems important, and no one owns it. Step up and take the lead, collaborating with others. Draft a plan on how to fix the problem, involve your manager and other engineers, and make things better. Make sure you always finish what you start . When you take the initiative, or take ownership of a project, don't stop halfway. If you have too much on your plate, consider delegating, or making it clear to your manager and team, that you are stopping work. 2. Make the team better The manager role exists because, with managers, teams perform better . Turning this around, one of the main roles of a manager is to make the team better. So look for opportunities to do this, even while you're not a manager. Look for bottlenecks the team is facing that slows work down. This could be too many bugs making it into production, too slow build times, the upcoming work being unclear, and many others. Identify a major problem area and take the initiative to fix it. 3. Pick up ungrateful tasks that no one else wants to do The job of an engineering manager is ungrateful, a good part of the time. Good engineering managers are servant leaders, often doing the work that no one wants to do, but it still needs to be done. How well do you deal with this kind of setup? Look for work that is non-sexy, and people kick it down the road, like an empty can. Pick it up and fix it, knowing you won't get much credit for it. It could be making oncall less noisy. It could be writing better documentation - and many others.  Learn how you'll react when you do important work that is invisible, and you get little to no recognition for it.  If you don't like this feeling: ask yourself if management is what you'll really want? Many of your days will be spent feeling similarly. 4. Give credit to others, selflessly Everyone loves getting called out for great work. Good managers make sure no result goes unnoticed. So start building this habit. If someone does good work, tell them - both privately and practice doing so in front of the team. Do it because you believe the work was good. And do it without the expectation that others will call out your work - that's not the point. As a manager, you will rarely hear anyone tell you that you've done a good job: like now, it will be others on your team who will get the praise. To build this skill, you need to build more awareness of what is happening within the team and the organization. Talk to people, ask them what their challenges are and what tricky problems they've solved recently. When you see great work, call it out. Do this in-person, like on standups. Practice doing it in written forms, sending praise to the person, perhaps their manager included. Do it because you genuinely think the other person did a good job, that otherwise could have gone unrecognized. 5. Teach, mentor others and learn to delegate well Good managers are great mentors. Some are also efficient teachers and coaches. You won't be good at management if you're not good at helping other people grow. Luckily, you don't have to wait until you become a manager to start practicing this skill:  as a developer, mentoring other developers  is something you can start right away. Activities you could do to grow this muscle: Pair with others: coding, planning, brainstorming . When you notice someone on the team stuck, offer to pair up with them. Sit next to them and help with brainstorming, pair coding, or drawing out their architecture. Ask open-ended questions and help them come up with solutions. Coach them as much as you can, and give them space to learn. Use code reviews as a teaching tool . When you see code that could be improved greatly, resist the urge to leave a huge number of comments. Instead, offer to pair with the developer whom you could help. When you do end up reviewing the code, aim  for great, not just good code reviews . Start having one-on-ones  with other developers. One-on-ones are an essential toolset for managers to help their directs grow. Start doing this yourself, especially with new joiners or more junior developers. Read about what makes a good one-on-one, and start doing them. Do this both to help others grow and set up ones where you can learn from other experienced leads or managers. If you don't have more junior developers to mentor at work , sign up for online mentoring platforms like  Coding Coach , and help more junior engineers level up. Speak at local meetups or conferences , sharing your expertise on a topic in a way that others can learn from you. Volunteer to teach  people how to code, or how to get better coding on various events. There are countless places where you can volunteer on topics like this. Take inspiration from Stripe engineering manager  Kate Taggart , who, before switching to engineering management,  spent a year tutoring university students . Delegating well  is an important skill to learn - even as an engineer. Good delegation sets a clear context but leaves the approach up to the person you delegate to. You specify the \"what\" but leave much of the \"how\" up to the person. People learn best from their own mistakes   and good delegation recognizes this, balancing allowing people to fail and learn, but stepping in before things get too overwhelming for the person you've delegated to. Good delegation means setting the right detail of context and checking in. Take the skill level of the person you delegate to into account when you hand over a piece of work. If they've never done anything like this before, give more detailed instructions and check-in more frequently than if they're more practiced. And always ensure to check-in on the result and do a small retro on the result. Did they complete it as expected? What went well? What was hard? What did they learn? Are they ready to take on this work by themselves the next time? 6. Be the mentor/\"intern manager\" for an intern Internships are a win-win situation for companies: they bring enthusiastic people to the team and are a cost-efficient way to hire great talent. If your company has internships, volunteer to be a mentor or an \"intern manager\" for an intern. If your company or team doesn't yet have a program like this, propose it as an idea for your manager. As a manager, having people interested in management mentor an intern is a dry-run I like to do. People can learn a lot about management and growing a less experienced person a lot from this exercise. 7. Give candid feedback and don't shy away from difficult conversations Giving feedback is something managers frequently do with their directs. When was the last time you did this, though? Start by gathering and giving feedback to your manager. What is something they could do better? What is something you appreciate them doing? You can also do this for your colleagues. When you see something positive, pull them aside, and reflect on why it was great, how they did it. Giving negative feedback is tricker to do well. Avoid  negative feedback antipatterns . Follow patterns like the Observation, Feeling, Need, Request pattern. Be constructive and nice, and listen to how the other person reflects. Difficult conversations are easy to navigate away from . As a manager, however, you won't be able to do this. Giving negative feedback is one type of difficult conversation. Disagreeing with your manager, or someone senior to you, and being constructive about it, while standing your ground, is another one. When you notice a difficult conversation coming up, don't shy away from it, but embrace it. The more you put yourself in these kinds of situations, the better you will get. 8. Network with other professionals within our outside the company Managers need to be great at building strong relationships across the business: with other engineering managers, product, design, and external teams. If you struggle to do so, you will struggle to be a well-connected manager, and you'll have a hard time in this role. As a developer, start building good relationships outside your team. Activities you could do: Meet other leads outside the company . Have  coffee with tech leads or recent engineering managers , connecting with them and learning about their transition and challenges. Connect with non-engineers,  learning about their work. Meet people working in product, design, and other business functions in tech companies. Learn about their work, how it relates to the business, and what challenges their role has. This will help to build both empathy and your business sense. 9. Observe and learn from good and bad managers I started to observe my managers in-depth well before I decided to give management a shot. I kept a shortlist of bad and good things I saw my managers do. I wanted to make sure I don't do the bad things but will be doing the good things. The bad things on my list were my manager micromanaging and being disinterested in my work. I had managers who did this frequently - and I ended up leaving the team as a result. For the good experiences, I loved managers who gave me lots of autonomy but provided frequent feedback. I also liked this manager, as on a positive performance review, he still came up with specific ideas on how I can further stretch myself. Everyone has different experiences with managers: the more managers you worked with, the more you can dig into these experiences. Analyze what behaviors made you like, or dislike a manager and why. 10. Do your homework: read books, autobiographies, newsletters Finally, invest in your own education. There is an overwhelming amount of resources available on management. Make a list of ones you'd like to get through. Here are my personal recommendations. As an important note, try to avoid one-way information intake.  When you read books, articles, challenge yourself to apply the content you took in, very soon.  That is the way to grow: else you're wasting your time with theory that you will very soon forget. Read a  longer list of books and newsletters on engineering leadership I recommend here . A few highlights: Leadership/management books Become an Effective Software Engineering Manager  - my #1 recommendation for anyone looking to move from an individual contributor role into engineering management. Hands-on details on what the role is like, in an easy-to-read format, with stories spicing it up.  Read my longer review here. The Manager's Path  - a short reference handbook for managers at all levels. An Elegant Puzzle  - a long overdue read for engineering leads. The most hands-on read on  engineering  management I've picked up. See my  in-detail review and book notes . The Goal  - written in the '80s, yet a timeless novel on what management is about, may that be a manager of a team, an organization or an industrial plant. The Five Dysfunctions of a Team  - an engaging story about a company struggling. It tells the tale ofhow the leadership team comes together under a new leader, doing small things that end up making big differences. Turn the Ship Around  - a novel on empowerment, teamwork, and breaking down the hierarchical structure. All of it taking place onboard a nuclear submarine (really!). The Feiner Points of Leadership : a generic, but good management book from the former chief people officer of Pepsi. Autobiographies Autobiographies are always a nice mix-up to read. All of them are very different, and as they are personal, each one will resonate differently with each reader. Here are a few that I recently read and liked. Hit Refresh  - the story of Satya Nadella, and an insight into his servant leadership style. Shoe Dog  - from the founder of Nike. Light on management, heavy on leadership - and how leadership from the outside can feel very different, from the inside. Winning  - the autobiography of Jack Welch, CEO of GE. Interesting insights on career growth and winning in business. Losing My Virginity  from Sir Richard Branson, founder of Virgin records, airlines, media and countless other ventures. Newsletters Software Lead Weekly  by  Oren Ellenbogen , VP of engineering at Forter. Five articles per week on technology and leadership - all of them recommended reading. Level Up  from  Pat Kua , Chief Scientist at N26. 15-20 interesting links on leadership, tech, organizations, and processes. \n\n               \n                 \n                  This post is part of the  Ask the Engineering Manager series . Have a question on career growth, as a software engineer or engineering manager?  Ask it here . Read other parts of the series  here .\n                 \n               \n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/refactoring-typescript-book-review/", "title": "Refactoring Typescript: My Book Review", "content": "\n             I'll start by saying the book  Refactoring Typescript  ( paperback ,  ebook ) by  James Hickey  was named incorrectly. Having read it, I would have called the book something like the Refactoring Toolset or Refactoring Pearls.  The book is an honest refresher on ways code becomes messy and offers tools to clean this up.  It uses the pleasant to read language Typescript to showcase techniques, and the author also occasionally mentions C# and Java as examples. I enjoyed reading the book and took some learnings from it. This is despite not having used Typescript and not planning to do so in the future. Most of the capabilities the book mentions exist in modern OO languages like C#, Java, or Swift - languages that offer more advanced features beyond what the book dived in. The structure of the book  is walking through problem areas, one by one. It starts with messy code that you might see in the real world, takes a hard look at it, refactors it, and reflects on the results. This simplicity, the focus on the code, and on how the code is refactored is refreshing. I often found the code is more interesting and engaging than the surrounding content. I found myself debating several times ‚Äúhmm, how would I refactor this, and why?‚Äù, before reading on. So what is refactoring?  James kicks off the book with a straight-to-the-point definition: Refactoring is just a fancy term that means improving your code without changing how it behaves.  I liked this start. I was also okay with the next part, where it mentions It‚Äôs important to have your code under test (unit, integration, etc.), which will give you a safety net to ensure any code changes won‚Äôt also change the behavior and cause bugs.  However, I was somewhat disappointed that this was the first and last mention of testing related to refactoring. The two go hand-in-hand to the point that good testing might make some refactoring practices less relevant. Situations, where refactoring could be helpful , is covered pretty well in the book. Almost all examples are looking at a class, or a part of a class. It takes problem areas from null checks through issues with conditionals, verbose methods, and other, common problem areas. The book doesn‚Äôt try to go beyond the function- or class-level problem space, into some of the more hairy problems of complex systems, and it keeps for an easy read because of this. Refactoring and untangling large systems and services is its own, much more messy topic, where architecture and the people who wrote the code are both hard to ignore. Parts I particularly enjoyed  about the book was mainly, the simplicity of the structure, and the plenty of ‚Äúmessy‚Äù code samples, that got cleaner, step-by-step. While the book is fine to read on a Kindle, I quickly switched to a laptop and tablet to scan the code quicker. I liked how all problems and refactor approaches were applicable to all strongly typed OO languages I know and use, like - Java, Swift, Go, or C#. Where I would have enjoyed seeing more content and depth  are: Testing . Testing and refactoring go hand-in-hand, and I would have enjoyed reading some firsthand examples of why this approach is key. Engineers who refactor without testing are playing some level of Russian roulette. Semantic meaningfulness and correctness . The book touches on clarity and semantic meaning a few times. Expanding this topic, with examples, could have been an interesting one. Naming and naming conventions . Much of the book is about slicing and dicing code, introducing semantically meaningful variables, functions and classes. However, there was no discussion about what good naming can be and how different teams and projects might agree on different naming standards. And it would have been nice for the book to explain the naming standards it follows. For one, I felt a little jerk every time I saw a boolean variable that did not have a ‚ÄúhasXX‚Äù, ‚ÄúisXX‚Äù, ‚ÄúcanXX‚Äù semantic prefix in front of it, as this is the naming style I usually follow. Language features  that make refactoring easier. The book goes into detail on guard statements and classes. Swift 2.0 introduced  the guard statement  to make this setup easier. New things I learned,  after reading the book: The special case pattern : the approach of recognizing special cases, and considering making this logic the responsibility of a class, instead. Piping classes for conditional checking  as a means to refactor too many ‚Äúif‚Äù conditions. The whole piping approach was interesting, but it goes too far for me to use. I see it as one of those ‚Äútoo clever to be useful‚Äù cases. CQRS and splitting classes based on ‚Äúread‚Äù or ‚Äúwrite‚Äù functionality . CQRS stands for Command Query Responsibility Segregation. James suggests creating two different presenter/model classes, based on if they are only displaying data (e.g. displaying payment information for a user) or also used to write/persist data. In this example, he'd suggest having a  PaymentUser  and a  PaymentUserForWrite . I still have to decide if this is something I'd definitely want to use, but it's something interesting to chew on. Overall , I can see the book being a nice and easy read for both beginners and experts, with takeaways for both groups. Beginners in coding, or in Typescript will find practical advice on refactoring code, and an overview of a few Typescript features like nullable types and optional parameters. Unfortunately, beginners will not have experienced much of the pain points of legacy code - but when they do, this book can be a good start on ways to deal with them. Experienced engineers will find this book both a little refresher and will likely find one or two refactor approaches they didn‚Äôt know about. In my case, the CQRS approach was new. Also, for experienced engineers, the book is a light read, but also a nice brain teaser. As you‚Äôre reading the book, ask,  ‚ÄúHow can I summarise what is wrong with this code?‚Äù  and  ‚ÄúWhat tools could I use to make it better?‚Äù . I consider myself in the experienced engineer group and enjoyed going through the code samples, one after the other. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/ask-the-em-acting-as-the-team-lead-but-not-actually-being-on/", "title": "I'm Acting as The Team's Lead, But I'm Not Actually One - Ask the EM", "content": "\n             I feel like I am acting as the lead of our team as my manager completely took the back seat. Some things need to be done - but my manager doesn't do these. It's frustrating: it feels like apart from a few admin tasks my manager does, like holidays acceptance, I am leading our team. I am doing this because I feel it's the right thing to do, and also because I cannot stand aside, knowing that thing needs to be done for the project to succeed. But it's been too long. I signaled to my manager and my skip level that I want to grow as a leader. They told me that when there is an opportunity, I will have a shot at engineering management and could have my own team. However, the company isn't growing, so I can't see this happening. The two options I can think of right now is to lay this all out to my skip level on our bi-annual check-in or to leave and find a new job. But I'm hesitant to switch as I really like the team and the type of development that we do. You are already doing a lot of things that I recommend  people who are thinking of one day moving into engineering management . You're leading the team, doing thankless work, and are proactively stepping up. You're probably doing a few things, though: creating visibility of your work, building trust upwards and having hard conversations on your career growth.  Let's start with the first one: creating visibility of your work. You say you do all this work for the team that just needs to get done. How much of this do you think your hands-off manager notices? If I had to guess, I'd say they know less than half of it. How often do you talk with them and share all this hard work you are doing? Start with having regular 1:1s with your manager.  If you don't have weekly or bi-weekly 1:1s - half an hour sessions when you talk with your manager, just the two of you - then set this up. If they push back, tell them that you feel you're doing a lot of lead responsibilities, and you need this support and this time. You can list all the things you do - like managing the project, assigning tasks, mentoring people - and tell them you really need their feedback, so you know if you're doing a good job. If they still resist, that's a flag. I would still push more, but perhaps getting creative, like saying you'll hand these responsibilities back to them if you cannot get 30 minutes every two weeks. If they can't commit to this much, you have a bad manager on your hand and run away. But they'll probably give you the time. Use your 1:1s to start to manage your manager. Bring visibility, build empathy on their work, and clearly state your career goals. For bringing visibility, come prepared to the 1:1s. Start a \" brag document \" of all the work you do. List out the additional responsibilities you are doing: the project management, the problems you faced and solved everything. I suggest doing this in a document, sharing it with your lead. Do this with two goals in mind. First, you visualize all this work. Second, you can gently bring up the question of whose responsibility this work is. Let's talk about building trust and empathy - upwards.  You mention you'd like to take on the team lead role and that your current team manager seems not to do anything meaningful. Are you sure about this? How often do you talk with this person? How curious are you about their work? Have you asked things like,  \"Can you tell me what things are your main priorities, and what is keeping you busy? I'd love to learn about what your role looks like.\" or \"What were the most challenging things this week? What are things that eat up most of your time?\" For building empathy, use part of your 1:1 to ask targeted questions about what your manager does. Ask how they spend their time, what their challenges are, what their recent successes were. Do this with genuine curiosity - there might be less mature managers who view very direct questions like this as challenging. Make it clear you're interested so you can better help and empathize with them. Also, if they are absent from the team, you can ask them to join meetings, then give you feedback after. This is a good way to draw them into the day to day. Just so you know: I've had stretches of up to a month and a half when I was absent from my team. Things like I had a bunch of \"bombs\" coming from upper management to deal with, I needed to protect my team from a reorg, I needed to work with a specific person to improve their performance, and bang heads with other team leads to come to agreements on long-term roadmaps. Some of these, I couldn't tell my team. All they saw was a manager who stopped attending meetings and wasn't at their desk. This was despite me working just as hard - doing work invisible to the team. I did share that I'll be more absent, but not all managers do this. I'm only saying, so you see the other side. Ask, then confirm, then judge. Start a hard conversation on your career growth  with your manager. Many engineers I know avoid this, as we feel it's a sensitive topic. But who will advocate for your career growth, if not yourself? I've learned this the hard way: when I didn't bring this topic up with my manager, they didn't think it was important enough to focus on it. And this is clearly starting to be important enough for you. Once you have had a few 1:1s to build trust, put this topic on the table. Share your longer-term goals, summarize your additional responsibilities, and ask your lead what they think and how they can help. Don't stop at your lead: set up a regular 1:1 with your skip level.  After you've had 1:1s with your lead, start with asking them to have a 1:1 with you. You shouldn't wait until the bi-annual review. Hell, if you only talk with your skip level once or twice a year, I can tell you that you won't get into a lead position in the company. Ask for a 1:1 with your skip level, come prepared. Be concise and know what message you'd like to deliver. It sounds like it would be wise to summarize the responsibilities you're doing, verbalize your goal of growing, and ask for feedback. Listen to what they have to say. Then, state what you'd like from them. Figure out if your manager and skip level think of you as a high performer.  If you think you're amazing, but both your lead and director thinks you're \"meh,\" it doesn't matter what you'd like: they will not go out of their way to help you. They won't even be bothered if you quit. It doesn't sound like this is the case, but you want to confirm this. This is why it's important first to show all the work you are doing, then ask for feedback first. And it's why it's important to build up trust first, so you can show all the work you are doing. Ask your lead, and your director on your 1:1, what they think of your contribution to the team. How do they see your performance? Do they see you as someone valuable they want to invest in? Or do they think you have a lot to grow? Perhaps they might even see you doing a poor job? The more they value you, the more social capital you have. If they don't see the value you add, they won't fight to keep you. Once you know you are valuable, know that you need leverage for people to take you seriously.  When a great engineer from my team comes to me and says  \"I'm unhappy, I'd like you to help me with X, but if you don't help... don't worry, I'll stick around\",  I listen, but I know that the situation is not a timebomb and prioritize dealing with this as lower than some other pressing issues. Think through what would happen if your lead continued to do nothing, and if neither your lead or director helped you. Would you change teams? Start interviewing? Or quit, even if you had no offer? Tell them what would happen if nothing changed and avoid empty threats. I followed this tactic when my manager did not want to put me up for promotion, despite us previously verbally agreeing and me feeling ready. I told them calmly:  \"I understand if you don't support this promotion. Just know that if this is the case, my trust will be broken in you. I will start to actively look for opportunities at another team within the company. If that fails, I would very likely start to interview externally. I would prefer to stay and keep helping this team: however, I need to know that my manager is unafraid to put trust in me.\"  I was put up for promotion. If I had not been, I would have followed through. And I would have done so, keeping my integrity. To get a be able to move into a leadership position in the company, you need to build trust with your skip level and have them take a chance on you.  Insist on having a 1:1 monthly, but the very least once every two months. If the skip level is not open to this, think of leaving. In good tech companies, managers meet with their skip levels one every month or two: I aim to do this as well. Not all companies have this culture: but there's always a first, and change needs to start somewhere. You just need to figure out if you can be this first. Finally, do look around the market for opportunities.  There is a chance things won't work out. Interviewing is hard, and you're probably a lot rustier than you think. Since you like your job, you can be picky about what companies you talk with, and you can tell the companies your priorities. Perhaps you could interview for team lead positions, or to companies that are high-growth. You can tell hiring managers or recruiters your goal to either lead teams, or to work with a hands-on manager who takes on the project management - assuming you'd be okay with this setup. You have little to lose and a lot to gain by looking around on the market. You might realize that other companies are a lot worse, or that they are a lot better. Either way, you will have a plan B if things don't work out. I hope you can build trust with your lead, and especially your director: but with people, sometimes things just don't work out, even when you try hard. Good luck! \n\n               \n                 \n                  This post is part of the  Ask the Engineering Manager series . Have a question on career growth, as a software engineer or engineering manager?  Ask it here . Read other parts of the series  here .\n                 \n               \n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/unit-testing-benefits-pyramid/", "title": "The Pyramid of Unit Testing Benefits", "content": "\n             I have had several \"aha!\" moments with unit tests, and have been burned several times by the lack of them. I have experienced how automated testing, especially unit testing, is a key building block for teams to iterate quickly and move fast. It's little wonder that all of the fast-moving tech companies I've worked at used this toolset company-wide - including Uber, Microsoft (the frequently-releasing teams), and Skyscanner. While writing a testing section  in my developer's career path book , I paused to think about the main benefits of unit tests, and how I see these build on top of each other. The first few benefits take short time to experience - validating your code is immediate - but other benefits take time.  It makes me wonder if the reason unit testing is more popular with more experienced developers is that they've worked long enough with codebases to experience the longer-term benefits, that compound  with the short-term ones. Here's the list, with the stacked benefits of the unit testing approach. Validate your work . By writing a test, you double-check what you did. I caught  so  many mistakes this way - and I learned not to trust my own code, unless I double-check it. Separate concerns in your code . Unit testing your code requires you make it testable. Making code testable often means declaring dependencies upfront. This kind of structuring of the code usually leads to a cleaner design and better separation of concerns. With code that is not tested, it's easier to miss implicit dependencies and classes silently taking on multiple responsibilities. An always up-to-date documentation . While documentation will get out of date, unless you update it, tests that run and pass with the code will not get out of date. If you write clean tests, these tests can serve as evergreen documentation for the code. Fun fact: I usually start code reviews by reading the tests added/modified, to see if I can understand the changes just from the tests. If I cannot, that's usually a smell for me. Fewer regressions . I cannot count the number of times I made a code change that looked good to me - yet unit tests someone else wrote started to break because I introduced a bug. I also cannot count the number of times when we did not have unit tests for the code I changed, shipped the code, and discovered I've introduced a regression - weeks or months later. Unit tests do a remarkable job of catching regressions as long as they are in the codebase. Which brings me to the last point: A safety net for refactoring.  While unit tests can catch regressions for small changes, they shine with large refactoring. In codebases with little unit test coverage, I have never felt confident making large refactors: simply because I have been burned by regressions upon regressions upon regressions so many times. On codebases with high test coverage and good tests, refactoring is much higher confidence work. What are the benefits you've seen with unit tests short-term and long-term? \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-decade-in-review-in-software-development/", "title": "The 2010s in Software Development", "content": "\n             As I am doing a lookback on 2010-2020, here are the major changes I've observed on software engineering. If this decade proves anything, it is that technology keeps changing and evolving. But, there is still some stability: Java and JIRA. Let's see if they will survive the next decade as well, and where the trends of 2020 will end up that time. What changed the most between 2010-2019 Javascript popularity . I would have never anticipated Javascript not only to be popular but be used across backend and cross-platform mobile development. Additionally, who would have thought junior developers (bootcamp grads) start with Javascript as their first language? Dev expanding into ops and QA . In 2010, SDETs were a thing at most companies, and developers rarely deployed to prod. By 2020, engineers deploying straight to prod - devops - is growing, and with it, automated testing. QA still exists but is increasingly specialized. Microsoft no longer has an SDET track, that they have had the previous two decades. Cloud usage . Especially with the cloud being quite expensive, the amount of usage is staggering. Many smaller companies start off on the cloud and don't consider running their own servers even when cost savings would be significant. I also would have bet Google being the market leader, not a distant third. And Amazon being the #1 cloud provider...? What did not change the past decade Java . A mature, solid, and sensible choice for backend development in both 2010 and 2020. JIRA . Complain as much as you want; I've yet to see a company above 500 people who don't change to JIRA for project management sooner or later. There is only competition on what to use for project management for smaller orgs and teams. Companies re-discovering engineering best practices through trial-and-error . Unit testing, code reviews, having a spec before writing software. All make perfect sense, have been proven to work, whitepapers and research published on them. Yet, new companies with proven business models often don't use them, until they accumulate so much tech debt that they discover their value through trial-and-error. Developers with the \"senior\" title in some companies often see little value in these practices. I hope this changes by the next decade - not the least why I'm  writing a book  that will hopefully raise awareness on these topics. Mobile development Windows Phone . Born and dead in the same decade. If Windows Phone had a gravestone, it would have a live tile that reads \"2010-2019. RIP.\" It's a bittersweet part of history for me, as I was a prolific developer at the peak of the platform, clocking a few million downloads on my free apps and tens of thousands of paid app purchases. These apps also opened up a lot of doors in my professional career. iOS/Android split . iOS is where the money increasingly is, but Android has users - who are more and more reluctant to purchase apps or in-app. While both iOS and Android devs are in demand, I predict iOS getting more investment from companies, due to higher overall revenues and much higher revenue per user.  Smartwatches: Apple won . Apple Watch took the market, where both Pebble and Google Wear had the head start, but failed to capitalize. Developer experience: one step forward, one step back . For someone who has built Windows Phone apps 2010-2013 using Visual Studio 2013, Xcode and Android Studio is still years behind that 2013 Visual Studio developer experience. But time proved that Apple was right: focus on the customers, and developers will put up with Xcode. They won't have much choice. Cross-platform mobile development  on the rise. React Native took off from 2015 and Flutter in 2018. Cross-platform mobile development still is not a silver bullet and does not save as much cost as many teams hope, but adoption is growing. Web development The death of Rich Web Applications . Remember Silverlight, Flash or Java applets? They all had high hopes in 2010 and were retired a few years later. This was due to... The rise of Single Page Applications . Angular, Knockout, Ember, Meteor were the hot kids on the block and the way to build complex web apps 2012-2015. Many companies/teams who were building RWAs before moved over to this more web-based stack. React and Vue . Starting 2015, React, Vue and other frameworks have gained popularity over the first generation on SPA apps. Browser consolidation: goodbye multi-browser worries . In 2010, web developers had to cater for IE6+, Firefox, Chrome, Safari, perhaps Opera. By 2020, most developers will ensure it works on Chrome, and the rest will follow. The more thorough ones will test on Firefox and Edge - but Edge is also on Chromium. Food for thought: if JQuery did not exist already, would there be a need for something similar to be built in 2020? My take is that there wouldn't be. Developer tools: thank you, Google . As disappointing the developer experience is on mobile for iOS and Android, on web, Google has built quite spectacular tools. The debugging, performance and memory profiling capabilities of the Chrome dev tools are second to none. Backend development Devops . I did not know what oncall was in 2010, even when I was technically oncall on a key launch. In 2019, all fast-moving tech companies empower engineers to deploy. In return, they are oncall, responsible for automated tests, monitoring, alerting and  operating backend systems . Microservices . Together with devops and empowering smaller teams came smaller services. Initially thought as a silver bullet for faster development, teams quickly realized that hundreds or thousands of small services bring plenty of headaches. Been there, done that: and while thousands of microservices is something that sounds cool to brag about, most companies who have been here are now scaling back, having \"good sized services\", to a more manageable number. Distributed systems - the real-world use cases and the hype . In 2010, apart from Google and Facebook, who really needed truly distributed services? By 2020 the number has gone up, significantly, and the tooling to do so became more commoditized. The means to build highly reliable services is more common knowledge. There's a catch: it's expensive in many ways. And many startups and engineering teams are jumping on the bandwagon more due to the hype, than a real need. New languages, old languages . Pleasant new languages: Go, Rust. Not-so-pleasant new ones: NodeJS. Existing ones here to stay: Java, C#, C++, Erlang. Ones fading, though still plenty of usage: PHP, Perl. Languages struggling to break out of their niches: Haskell, F#. One that fades, then comes back: Python - Python 2 reached end of life, but Python 3 probably will see more adoption. If you don't agree: it's probably me, not you. For a more in-depth review of changes in distributed computing, including containers, NoSQL, streaming and CI/CD, see the  in-depth review of the last decade by Cindy Sridharan . Engineering Careers Diversity and inclusion . In 2010, tech had a large diversity problem and no one was talking about it. By 2020, everyone is talking about it. Some are talking about inclusion as well, and more individuals and companies are doing something about it. The problem is still here though. Bootcamps as a means to enter the industry.  In 2010, a tech bachelors was a de-facto requirement for most jobs, with a few being fine with self-taught applicants. Bootcamps, starting around 2015 are re-shaping this, offering career change opportunities to many. They are overselling how much they teach though, and underselling how tough breaking into and staying in the software industry really is. Engineering management evolving . 1:1s, servant leadership and coaching/mentoring directs might have been a thing in 2010, but I did not know anyone who experienced these - myself included. Managers were either non-technical or tech leads with no training and few ideas what to do. This is changing drastically. Starting 2017, high-quality  engineering  management books  have been published starting with the  Manager's Path . EM communities and good conferences are gaining awareness and popularity. Brilliant jerk developers fading away . In 2010, the industry was filled with \"brilliant jerks\" and 10x engineers - guys who were supposedly great coders, but had zero social skills. If you could not work with one of these people, the blame was on you. With more mature engineering management, managers (and teams) now realize how toxic these people are. Better companies don't hire people with toxic attitude. See also the  No Asshole Rule book .  Startup options are not always tickets to millions . Up to 2010, purchasing startup options seemed to be sure way to millions. 2010-2020, this was less and less the case, as downrounds and unicorns folding became more common than unicorn IPOs. The  note from Startup L Jackson  still stands, with its takeaway:  \"don‚Äôt join a startup for just the money\". \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/how-to-lead-a-project-in-software-development/", "title": "How to Lead a Project - as a Software Engineer", "content": "\n             On my engineering team, every team member eventually leads a project, no matter how junior (or senior) they are. This is a practice I've built up over years. We've shipped complex projects like  rewriting the Uber rider app  and the  Uber driver app  - our team of up to 20 engineers used this methodology to ship our parts, as part of larger projects that involved hundreds of engineers. We used this approach for smaller, but complex projects, like  launching new ways to pay .  This is the project lead expectations guide  I share with project leads, outlining guidance on the role, and expectations that come with it. View the  whole Google doc here . Tech lead / project lead expectations. See the document on Google Drive. I tried to put all of these as guidance: being clear on the expected output, but not specifying the ‚Äúhow‚Äù. Want to do this via Scrum? Fine. Adhoc? Also good. Some weird, new method? Go ahead. Having space for tech leads to experiment is so important for growing for leads - and it's something I embrace in  building an engineering team where everyone is able to step up and lead . Setup a framework for collaboration A key role I ask tech leads to take on is ensuring collaboration happens between team members and stakeholders. I try not to specify how to do this, in detail, but things I do expect are these: Stakeholders . Create a list of project stakeholders involved in this project. Kick-off.  Schedule a kick-off with the team - with all relevant stakeholders (like the PM, Design, DS and EM) included. Documentation : setup and maintain the documentation of the project. There should be one place where anyone interested in what this project is, can go and have access to planning, boards, rollout plans, and other relevant resources. Collaboration channels : setup the collaboration spaces for the team: may this be JIRA, a chat channel, email list, document storage etc. The larger the project, the more important it will be to clarify which channels people can use to reach all relevant team participants. Efficient project management . Choose a project management methodology. Make sure the team shares regular updates, there are regular progress demos, work is transparent and tracked and encourage face-to-face information exchange so everyone can quickly confirm that they are on the same page. Manage risks Managing risks is another key area. Have a way to track if things are on track (it doesn't have to be status reports - remember, we're talking about hands-on engineers). If something seems off, dig deep and come up with ways to mitigate it. If you see something, say something. Understand all parts of the project at high level  - from mobile to backend to business impact. E.g. if you‚Äôre a mobile engineer, get familiar with the backend stack and the other way around and build a good relationship with the engineers on your ‚Äúother‚Äù stack - and the other way around. You will be the person with the most context on the project - make sure you know what the top issues on each stack are. Create an inventory of knowledge  - list out the services and libraries that you‚Äôll touch. If you work with an unfamiliar codebase, assume the worst when giving time and risk estimates, and make sure the team does some research upfront. Call out risks honestly as they arise  - on standups, raising to the team/EM as soon as you spot them. Between project time, scope and people if one changes, we need to decide if and how we change the others. As a rule of thumb, the best time to call out a risk is when you first spot it. The second best time is now and not later. Communicate status to stakeholders Instead of others pulling information on how things are going, come up with lightweight ways of keeping stakeholders in the loop. It could be as simple as keeping the workboard of the team up to date or sending a weekly/bi-weekly update email. Keep the team and internal stakeholders aware  of how the project is progressing via the weekly team meeting and demos. Consider sending out a weekly update email to make sure everyone is on the same page.  Keep status tracking documents up to date  that the team and other stakeholders can get an idea of project progress. This could be the project board or other documents (like a feature readiness list) you choose to use. Identify any other stakeholders who need to be aware of the project,  working with the PM. Help the team focus - and don't be afraid to delegate Make the life of the team easier. With a tech lead, they should be able to focus more, not less. But don't put it all on your shoulders: delegate up, or to team members (especially when it's a nice growth opportunity for them). Help engineers focus  on the next important thing. We need to go one step at a time towards the next shippable thing. Remind the team what milestone you need to ship next. Delegate  where it makes sense. You can both delegate upwards (e.g. to your manager or PM) as well as to team members. You own a lot of responsibilities - it can be a win-win to `share these with some of your teammates. For example, someone else can be in charge of running standups. Be clear that you‚Äôre delegating or asking for help. Also be clear on what your expectations are for the person taking this on. Motivate the team Finally, be the kind of team lead people like working with. Motivate the team and don't forget to celebrate in the end. I always make sure we have budget to celebrate a job shipped and a job well done. And make sure others hear of the great work the team just did. Checklist for first-time project leads I found the above generic guidance to be a bit too vague for first time project leads. So I put together a more hands-on version for getting started with that first project. I ask that people who have not lead projects before follow these steps closely. Once they have led a project and have gotten experience with these techniques, they are welcome to experiment with different approaches, reverting back to the original guidance. Project setup Lead a kickoff meeting  with an agenda and all stakeholders present. Prepare for this meeting, getting feedback from the EM and other, experiences project leads. Break down milestones , assign estimates to them. Usually done on one or more planning meeting, with the engineering team. Follow the  RFC planning process . Send out the intent for RFC, do the planning, put the RFC together, send it for review and follow up with approvers. Regularity Weekly update emails . Send out weekly update emails to internal stakeholders. This email should have milestones, estimates and their status the very least. This should be sent at the very least to all team members working on the project, team EM & PM. Daily standup with an agenda & notes.  Use something like the sync notes template. Make sure the whole team and internal stakeholders (like PM, design) are present. Set weekly team goals .  At the beginning of the week, agree with the team what you aim to get done this week. Demo progress (bi)weekly.  At the end of the week, check if you made this progress via a demo. Demo even if you don‚Äôt have anything visible: show at least the code to each other. Do a retrospective  at the very least, at the end of the project. You can do it every few weeks as well. How this process is working Over the past three years, I've iterated on this approach with my team. Every team member has led at least one project with multiple people involved - including the most junior ones. While there have been a few  tensions and challenges , I'm very happy with the results, so far. I've summarized more detailed learnings in the post,  An engineering team where everyone is a leader . Feel free to check out the  more detailed project lead guidance document . If you are leading a team, perhaps you can put something similar together. And if you're an engineer, perhaps you can use this as a starting point for running your next project - however large or small it might be. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/tech-debt/", "title": "Tech Debt and the Pragmatic Middle Ground", "content": "\n             Blissful unawareness, denial, then acceptance, then resistance. And finally, a pragmatic middle ground. This is the typical journey engineers go through in their relationship with tech debt. It's tempting to get straight to the point:  how to remove tech debt, and how to keep it at bay . But that would be missing the journey. The journey without which you can't really appreciate the destination. So let's start with the time when you were not aware of this thing called \"tech debt.\" Blissful unawareness: tech debt? The blissful unawareness stage doesn't last for long, once you start writing software professionally. For some, it only takes months into the job to stumble across tech debt. For others, it takes years to notice. By the time you've got enough experience under your belt to be called a senior, you will know - and accept - tech debt all too well. It took me a year and a half to stumble on it - even though I didn't know what to call it at the time. It came in the form of spaghetti code   that was impossible to unravel. I was junior and got a short-term contract to improve the data mining software that my university professor was building. This code was written by a mathematician who left the project behind after building the v1 of the software. They estimated the work to take a few weeks. I dived in. However, there was no documentation, no tests, and the naming was hard to make sense of. I tried to add changes here or there, but the code just did not work as I expected and kept on breaking. In the end, I threw in the towel and walked away. I thought I must be missing basic engineering skills, not being able to understand the code. It wasn't me, though: the professor later told me I was the third person they hired who could not make sane modifications to the code. In the end, they rewrote the whole thing from scratch. It was tech debt - poor coding and lack of any practices - that suffocated this project. Denial: tech debt?! Product Manager:  \"Alright, let's add a button to this page. When people push it, they should be able to start chatting directly with customer service. How long will this take?\"  Developer:  \"Uh... about two weeks.\"  PM:  \"Two weeks? But we have the chat functionality. It's just a button. What exactly is taking two weeks?\"  Dev:  \"Uh... so making modifications isn't really that easy. We didn't really prepare for changing UI elements or directly opening the chat flow...\"  PM:  \"You know what? I don't believe you. You have four days. Or else.\"  Dev:  (Welp... thinking of ways to hack it...) Strange and not-so-funny things happen when you're working as a developer and your boss is someone who's never done software before. Even worse if they have done development at a basic level, but never got to understanding tech debt. Earlier in my career, there were many times when me or my teammates tried to explain what I would call as tech debt today. We just didn't know this was the term for it. All we knew was things are hard to do in the codebase. That the code clearly wasn't designed for those changes. That spending time to improve the architecture would be a smart thing to do. That we needed more time to get it right. We never got that time. We were also accused by going slow, not being competent enough. We were told the role model was the \"rockstar\" developer in the team who got everything done much quicker than us. Yeah - I knew the person and their code. They introduced the insane hacks, then conveniently stepped away from it, saying they got the main use case working, and asked someone else to finish it up. And finishing up was never straightforward. It would frequently mean rewriting their previous code, as it needed ¬†many fixes and was thrown together in ways that made little sense. Working at a place that is in denial about tech debt usually goes hand in hand with a grim engineering environment.  It doesn't matter if management just doesn't understand or doesn't care about tech debt. Management rewards hacks, short-term solutions, and the  people  who introduce these hacks. People who want to do more thorough work - thinking about maintenance, longer-term - are not valued. They might even be called out as slowing the team down, not focusing on the important things, or living in a bubble. It's stressful to work at places like this. You can still do good work - but you'll probably have to do a lot of the improvements in \"secret,\" or outside normal hours, to not be accused of not moving fast enough. On the flip side, the best engineers leave places like this for companies and teams that understand and accept tech debt. Acceptance: tech debt... The better the engineering culture of a company, the more aware and conscious you become of tech debt. It took me years to get here. Microsoft / Skype was the first company where we would ponder over tech debt, collect the different types of debt we had, and discuss how to pay it off. This was also the point where I finally understood tech debt enough to be able to call it what it is and explain it to others. Tech debt is the incremental cost of doing software development . Tech debt is what happens when more code builds up, and things become more complex. For a new codebase and a greenfield project, this incremental cost is zero. But the more complex the code gets, the more effort is to change the code while keeping things working. Codebases that are hacked together and have little to no automated testing or documentation become very time consuming to change. They accumulate a lot of tech debt. On the other hand, codebases where developers regularly invest time in maintainability will have lower tech debt and are less expensive to change. Investing maintainability includes investing in readability, testability, automation, and tooling. Tech debt is a fitting word in describing this additional cost to change code. Debt indicates that it accumulates over time. With real-life debt, if you owe money, you have options on how to repay this. You could pay interest only for a while, then pay off the principal at the end of the loan. You could pay off the interest and the principal in parallel. Or you could pay the whole loan off at once. If you delay paying off debt for too long, the interest goes up, and various fees might kick in. I extreme cases, the debt can grow so large that it could bankrupt you. Tech debt has similar characteristics in all regards. Debt used smartly can accelerate progress. When used poorly, it can become expensive to maintain. And bankruptcy through tech debt is also a thing: this happens when it's cheaper to delete and rewrite the codebase than it is to maintain or fix it. Resistance: tech debt! Not on my watch! Once you accept that tech debt is a given with any codebase that grows in complexity, you start to think. How can we keep tech debt to the minimum? While tech debt is a given, it accumulates much slower when following certain best practices around maintainability and ease of code modification. Things like readable code. Testing. Code reviews. CI / CD. Documentation. Sane architecture decisions. Let's say you are lucky enough to work on a codebase that is light in tech debt and follows many of the best practices. To prevent tech debt from growing, make sure to keep it this way. Beware of broken windows. Broken windows: where tech debt sneaks in A lot of tech debt I see in otherwise good codebases starts relatively small. It is often left behind by someone not paying enough attention and changes slipping through code review. These are usually easy enough to fix. They start to become a problem when these small pieces of tech debt keep growing without anyone addressing them. The codebase could easily fall victim to broken windows. The exception becomes the norm. People think, \"let me follow this pattern\". And the existing tech debt sets a pattern that spreads throughout the codebase. As a rule of thumb, if you can see simple ways to clean up bits of tech debt, just do it. The change should be fast enough, and you'll leave the code in a better state than it was before. Removing tech debt: where to start? Chances are, you don't have the luxury of the tech debt-light codebase. Let's take the more frequent of the codebase you're working on right, having a bunch of issues. How do you go ahead to address them? For small tech debt, just fix it as you go. Follow the boy scout rule of leaving the code cleaner than you found it - similar how scouts leave the campground cleaner than they found it. For larger pieces of tech debt, take inventory of tech debt and quantify the impact it has, and the effort it would take to remove it.  When there's a lot of something - like tech debt - you won't be able to tackle it all. Without gathering data on larger pieces of tech debt, it's hard to make good decisions on how to deal with it.   When we're talking about things that take weeks or months to fix, the team has to prioritize. How does this work compare to work that has business-facing impact? Sure, there is duplication across the code. What would the impact be if you moved things to a shared library? And what is the cost? The impact will be far higher with a codebase that's frequently used. On the other hand, a soon-to-be deprecated codebase might mean a large effort, and a small reward. Slow build times? If the build is run frequently by many people, the impact could be large. Heck, it can be large enough to justify a dedicated team spending months making the build faster - which  actually happens  at places like Uber, Facebook, or Google. Flaky tests? The impact likely high, the effort hopefully low. Verbose boilerplate code? Perhaps lower impact, some work. Naming you personally don't like? Probably small impact, and could be lots of effort. All of this will depend on your environment. Propose projects with clear impact to tackle tech debt with dedicated efforts . There might be parts of tech debt that are begging to be done: the impact is so clear. Say the team ships lots of bugs in production, and you don't have automated testing or CI in-place. The impact of cutting down bugs significantly, and needing less manual testing makes this investment a no-brainer. Something like proposing to write a new system that will have 99.9% reliability over the existing 98% reliability might translate to millions of dollars saved per year. If it does, you've just made your business case. Reliability, cost savings, faster development cycles, and fewer bugs are the most common impact factors I've seen people pitch to get larger tech debt removal or migration projects funded from the top. Pair tech debt removal with high-impact projects . Unfortunately, most of the time, it will be hard to make a case for an only-tech-debt-removal project. Why is this? It's because teams always aim to work on the most impactful project - the one delivering the most business value. Business value often being revenue, user metrics, and the like. These projects are usually ambitious. They are high-visibility. And to ship them, the systems that have the most tech debt, need to be touched. Touching systems that have high tech debt means they're much slower to change already. So if the team will already need to make several changes to a tech debt heavy system, why not spend a little more time and reduce the debt? Here's the dirty secret of teams who ship impact and remove tech debt at the same time: they rarely ask for permission to remove tech debt . Instead, they bundle the removal of tech debt to the high-impact project and just do it. Dev:  \"We'll ship this feature that generates $5M/year additional revenue and we'll also introduce integration testing on the way.\" PM : \"Can we just ship without the integration testing?\" Dev:  \"Sure. But it will probably take longer then and we might lose revenue on the way. We're seeing lots of bugs go out in recent features and we'd need to do more manual testing, and more releases. By doing automated integration testing, we'll be done faster. We're estimating it would take 4 months this way and 6 months without the integration tests.\" Why bother bundling with projects, though? It's to make sure they get done. While projects that only reduce tech debt but deliver no business value will often be de-prioritized, high impact projects almost never are. If you want to see your large tech debt reducing proposals through, couple them with high-impact projects. The pragmatic middle ground: just enough tech debt Is there such a thing as too little tech debt? If you pay off enough of tech debt, at some point, you realize that there is. The name of too little tech debt is premature optimization - and it can slow down teams and companies at critical times. Take an example of a startup. When the company launches, speed and iterating quickly is key to surviving and winning. Do you worry about clean APIs and nice data models or just dump everything in an unstructured JSON that any developer can modify? The startups I've worked at that grew to be successful all went for the tech debt-heavy approach in the early days. Uber was one of these startups. When I joined, there were still frequent reminders of the early tech debt, and the short-term decisions were haunting parts of the codebase. But that tech debt served its course. It allowed the company to move fast, when speed mattered the most, in getting product-market fit. After getting there, Uber invested in clearing all of it up. Tech debt is something you  want  to have for early-stage projects: for throwaway prototypes, for MVPs, and when validating the business model of a startup. Tech debt is something that can be fixed by throwing time and developers at it, later on - the same way Uber did. If a late-stage startup that is growing fast is not busy paying off early tech debt on the side, something smells fishy. If a team owning a mature product is not keeping check of their tech debt - investing here and there to keep it at bay - something is also probably off. Pragmatic engineers don't see tech debt as a bad thing: they see it as a tradeoff between speed and quality. They see it as the characteristic of a system . They put tech debt in the context of the goals of the project and don't try to pay off more than they need to. They also keep track of the debt and step in to reduce it before it gets too high - getting creative on the way when needed. So now, how much tech debt should  your  project have? And what are you going to do to reduce - or perhaps increase - that tech debt? \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-developer-culture-test/", "title": "A Software Engineering Culture Test", "content": "\n             See a shorter, and updated version of this test here:  The Pragmatic Engineer Test: 12 Questions on Engineering Culture . I've talked with dozens of software developers about what they like and dislike about their workplace - team, and company - professionally. I'm starting to see an interesting trend in the environments that make people happy and thriving - and have them stay longer - versus ones where people feel miserable, even when they're there. I've been paying special attention to people at the same company for 4-5 years and more, who are not interested in exploring other options. What makes them tick and want to stick around? And the people desperate to move, what is pushing them away? I'm surprised to see not much done to quantify these observations in 2020. We have  the Joel test  that is still attached to the Stack Overflow job listings, most job adverts claiming to have 11 or 12 out of those 12 points. But the Joel Test, written in 2000, feels too outdated and doesn't address things that are important for productive developers in the 2020s, like autonomy, code reviews, or continuous professional growth. So I took a step back and re-imagined what a test like a Joel-test would be in the 2020s: predictors of a workplace that has a great developer culture. With this, I give you the Developer Culture Test: 3 areas with 5 questions each for a healthy organization, where developers thrive. In my experience, any tech company you'd call decent company should have the 3 basic points nailed, and cover at least 4 out of the 5 points in each area. \n \n    .pragmatic-engineers-tech-culture-test ol {\n        margin-bottom:0px;\n    } \n     \n      The Pragmatic Engineer's \n     Software Engineering Culture Test \n     Basics : Safety, fair compensation & common-sense flexiblity. \n     \n Clarity, Autonomy and Collaboration \n \n     Understanding the \"why\" \n     Backlog / roadmap and engineers contributing to it \n     Direct communication in solving problems \n     Cross-functional collaboration \n     Celebrating taking initiatives \n \n Sustainable Engineering Culture \n \n     Functionally complete != ready for production \n     Code reviews and testing \n     CI and CD or developers deploying to production \n     Healthy oncall \n     Internal open source \n \n Career Progression \n \n     Technical managers who build trust \n     Career ladder \n     Parallel IC & manager tracks \n     A culture of feedback \n     Investing in professional growth \n \n     \n Basics These are things that  all  decent companies have in place. If your company doesn't have even one of these, you're probably already looking for a new job, and you definitely have  your shields down . Psychological safety and a blameless culture . Do people feel safe being themselves and voicing their opinions, even if they might disagree with others? Is paying attention and acting on microaggressions and unconscious biases part of the culture? When something goes wrong, do you run a blameless process, focusing on the systemic root cause over who caused it? This can be for outages, technical issues, or failed decisions. Fair compensation.  Does your company pay a fair wage, that's more or less on par with the local market? Common-sense flexibility on working hours . Can engineers work in a flexible way that works for their team, as well as for them? This might reasonable WFH guidelines, being flexible on short-term schedule changes and personal circumstances, focusing on the work getting done over what time people starting and end the workday. I won't waste too much time on the first two. On the last one, common-sense flexibility, some might wonder why I'm adding it here. It's because flexible work arrangement for software engineers are everywhere. There is an explosion of remote roles, WFH is mainstream since Coronavirus and any company that's hanging on to the 9-to-5 or something similar will find themselves being a minority. And people at these places will (and should) ask why they wouldn't change somewhere else where this kind of flexibility is present. Clarity, Autonomy and Collaboration Companies that get this right will have innovative and autonomous people thrive. Those who don't will see these people leave over time. Understanding the \"why\".  Do you have a process in place to share the business reasons for work to be done with engineers? This could be things like roadmaps, OKRs, company- and org-wide goals and others. Backlog/roadmap and engineers contributing to it.  Do teams have a clear backlog/roadmap, making it easy to answer \"what will we work on next, and why?\" Does the top-down planning also meet a bottoms-up planning? So can engineers bring suggestions to the table, that end up on the team's roadmap - either as supporting the \"why\" or as part of the engineering work budget? Do reasonable tech debt payoff suggestions get prioritized this way? Direct communication in solving problems . Are developers encouraged to solve problems directly by going to developers on other teams? Versus having to go through their manager, who talks with another manager, who talks with the manager of the team who talks with... Cross-functional collaboration . Do developers work directly with users, designers, product managers, data scientists, and other stakeholders without going having to rely on a proxy (e.g. their manager)? Celebrating people taking initiatives . Are people taking initiatives to make things better celebrated or rewarded over this seen as unnecessary distractions? Sustainable Engineering Culture Get this right, and developers won't burn out or get endlessly frustrated. Distinguishing between functionally complete vs. ready for production.  Do you differentiate between the prototype/MVP/functionally complete phase and production readiness state of code? Do you have a checklist on what additional quality bar it means for something to be production ready? Code reviews and testing . Are code reviews and automated testing (unit, integration, etc) part of the everyday development process, to the extent that not having them is a rare exception, for very well understood cases? CI and CD or developers deploying to production . Do you have CI process setup that runs before committing the code? After the code is committed, do you have a CD process to push it straight to production - and if not, can developers push the code they own to this environment? Healthy oncall . For teams where developers are oncall, do you measure oncall health and the impact on developers? Does fixing an unhealthy oncall have priority over any product work? Internal open source . Do you follow an internal open-source model, where any developer can read and contribute to any other codebase - with appropriate code ownership in place? All of the above are baseline practices that most tech companies where developers can move fast, with stability practice and expect. Turning it the other way around: if you are missing most of this, good luck hiring people from tech companies without them quitting in their first month - or them setting out to change the culture for something similar. Career Progression People who are driven want to keep growing throughout their career. Does your company have a track for senior developers growing outside of moving into management, and is professional growth supported in a variety of ways? Technical managers who build trust.  Are most engineering managers technical - meaning have a background of having done software development at some point in their career? Do managers do regular 1:1s in a way that builds trust (e.g. listening, giving feedback, discussing career goals)? Career ladder.  Do you have a career ladder, with levels, and expectations at each of the level defined, and a  clear promotion process  on how to get to the next level? Parallel IC & manager tracks . Do you have parallel IC & management career paths that run a few levels above the entry-level engineering manager role? A culture of feedback . Do you have at least two of the following three: 360 performance reviews (where directs also give feedback to managers), a culture of peers giving feedback to each other and regular feedback collected, shared, and acted on by the company via company-wide or org-wide surveys. Investing in professional growth.  Do you have at least two of the following three: an active mentorship program with  developers also mentoring other developers , professional development stipend for books/trainings, regular tech talks where people in the company learn from each other - or from outside experts. Managers being technical is one that I've talked a lot with people. While I understand how non-technical managers can also be empathetic and great managers: they will miss both the ability to both challenge the team, as well as to protect it from unreasonable requests. They will lack the ability to effectively advocate for sustainable engineering - both to protect the team from unreasonable request and to put practices in place for good team health. Without hands-on experience on why certain practices are important, advocating for either is very difficult. They will also struggle mentor people on their team for software engineering - which is especially important for people earlier in their career. Parallel manager and IC tracks - or the lack of - is another predictor of the engineering culture. If the only place for the best engineers to grow professionally, and impact-wise is management, this will be a grim outlook for developers who don't want to do this or are not very good at it. It also creates a culture of managers running the show, over acting as servant leaders, who are partners with developers, especially with senior ICs. How spot on is all of this? You might ask: Gergely, this is a nice list, but how applicable is all of the above? It's pretty applicable, based on my professional experience, and my talking with a couple dozen software developers across different regions and industries. It also mirrors how some of the most innovative and fast-moving tech companies work, from Microsoft, Google, Facebook and Uber, all the way to smaller, but successful startups, like Monzo, N26 and many others. Though I wrote it independently, the Tech-First Culture Test also seems to echo  some of the findings  of the book  Accelerate: The Science of Building and Scaling High Performing Technology Organizations . Thoughts on individual and team autonomy, sustainable engineering are points that come up in this book as well. Check out how  Flo Sports ranks themselves in the Pragmatic Engineer's Developer Culture Test . How does  your  current organization score on the Developer Culture Test? See the Russian translation of this article here:  –¢–µ—Å—Ç –Ω–∞ –∫—É–ª—å—Ç—É—Ä—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Pragmatic Engineer . (Post image  by David Rangel.)  \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/paper-debugging/", "title": "Paper debugging", "content": "\n             Paper debugging is a tool I really like using. It's arguably the most low-tech approach - yet, it is surprisingly effective. Take a pen and paper, or a whiteboard. Write up key variables and start to execute the code in your head. Write down how those variables change, one after the other. If you get stuck, ask someone else to follow things with you, to make sure you‚Äôre executing the code correctly, in your head.  This approach is especially powerful when you have access to a debugger. First, do paper debugging. Then, run the debugger and check if you ran the program correctly in your head. This approach not only helps you with debugging: it deepens your understanding of the code, and improves your critical thinking. One of the most efficient ways I‚Äôve found to help someone debug their code is doing paper debugging with them . I usually bring a pen and paper to their desk and ask them,  ‚Äúcan explain to me what happens with the code and what might be going wrong, by drawing it down? Using boxes and arrows, in a way I can understand?‚Äù  This simple technique forces people to take a step back from the details they are focusing on, and has them organize the big picture in their head - and on the paper. In the worst case, the problem is still there, but now I also understand what the problem is, and where things go wrong. In many cases, however, midway to explanation, the person debugging has the ‚Äúaha!‚Äù moment and finds the problem themselves. When was the last time you used paper (or whiteboard) debugging? \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/i-feel-stuck-as-a-staff-engineer-struggling-to-move-to-an-em-role/", "title": "I Feel Stuck as a Staff Engineer, Wanting to Move Into an EM Role - Ask the EM", "content": "\n             I've been in the industry for over a decade, being a senior engineer, promoted to a tech lead for a short time, and now I'm a staff engineer at another company. As a staff engineer, I help multiple teams deliver on time with reasonable quality, I partner with product, and I mentor engineers, and I get to do little coding. I am going broad in several areas, but not deep in either of them: e.g. I do some architecture, but less than most senior engineers, I do coaching, but less than EMs. I'm now at the point where I'd like to grow into an EM role , as I'd like to both have a bigger impact, and I find managing people and technology together, to be interesting. Unfortunately, my manager isn't much of a help in mentoring me, and the organization is quite chaotic. I feel stuck in my career: my organization doesn't have a clear career path beyond the senior engineer level, so I'm currently working in a kind void. I'm now unsure how to move forward. Forward meaning towards an EM role - or at least, how to figure out if this is for me. It's great that you recognize you're stuck, and are starting to put the finger on why you think it is. However, it's still unclear to me why you're thinking that an EM role is where you would be happy, beyond this being an area you've not done before. Are you looking forward to spend most of your time helping people? Would you be fine being even more hands-off than you currently already are? Are you ready to deal with people when things go south, and have those (very) hard conversations? Are you okay with  17 other reasons being a manager can suck  - even if it's the same salary, and less job security? Let's get back to the EM part in a bit. In general, if you feel stuck in your career and want to move forward, your options are to do so within the company, or outside the company.  If you want to get \"unstuck\" within the company, you need your manager's support  and potentially your skip manager's as well. First, you need to map out what the options are within the org, if you're thinking of a team or a role change. While you can do this without your manager supporting you, think twice if this is a good idea. Even if you find a team that looks great, that team will reach out to your manager for feedback on your work. What is your relationship with your manager, trust-wise?  Are you open with them, on your struggles - even on your career struggles? Do you understand their priorities and how you can help them? Are you helping them? The same goes for your skip level. How often do you talk with your skip level? Do you talk about your career options? If the answer is no to either: you need to fix this. Now let's get back to the topic of engineering management.  You want to make sure you have the right motivations to become a manager.  You should assume the position has no financial upside - internal role changes rarely have. Also, assume that it comes with tying your hands in new ways - you'll have to work through others rather than do it yourself. Finally, assume that you'll start as a newbie, and likely be pretty bad at it in the beginning. Before switching, make sure you  test the waters by doing activities that managers do day-in, day-out . Make your team better. Pick up ungrateful tasks. Give credit to others, selflessly. Teach and mentor and delegate well. Give candid feedback to others: including your manager. Network with other managers within and outside the company. Do your homework in learning about management. Moving into an EM role is by far the easiest to do within the current company: but it still requires an opportunity and strong support from your management.  This is why building trust with your manager and skip are so important: should there be an opening, they need to support you, often convincing stakeholders why you're a better fit than hiring someone else externally. And if your company is not growing and management positions aren't freeing up, you probably won't have an opportunity to move. Moving to another fast-growth company, as an engineer, might be an option to help with a future transition. You likely won't be able to move as a manager, as it is extremely rare to hire someone into management, who has not been promoted to this role before, at a previous company. I've only seen this happen when moving from a well-known company to a small one that struggled to hire any leaders with past experience. The downside of this kind of transition - even if you pull it off - is you won't have mentors around you after you make the transition. If your primary goal, however, is to move into engineering management, you might be setting yourself up for disappointment.  You won't be able to control what opportunities come or how your team and company grows or shrinks. I personally never aimed to become a manager: I always looked for ways on how to help my team, and how to keep growing, and  kept doing activities that are just as important for senior engineers, as they are for managers . At Skyscanner, I became the tech-lead-manager of the mobile team, both coding, hiring, and leading the mobile team. Then, I moved to Uber as a senior engineer. Here, following high growth, we were desperate to hire a manager for my team. I told my manager I'm interested in taking this role. I was already the team lead, doing most of the activities that a manager would do. My manager supported this transition and backed me getting this opportunity over hiring someone else externally. Do consider organizations where there are parallel management-engineer career tracks.  Your question touched on how there is no real career track defined beyond the senior engineer. This might be due to the size and scale of the organization - and it seems you might already be at the top of the not-very-well-defined staff level. However, better tech companies do have side-by-side career ladders with clear expectations for engineers and managers. If this was the case, would you still want to go into management - or would you be keen to make an organizational impact as an IC, with no direct reports? To give you an idea of career ladders that companies like Amazon, Facebook, Microsoft, Uber, and many others have, see the public ladders published by  Monzo ,  Square , or  Rent The Runway .  My upcoming book  will cover more details on what tech lead and staff positions mean at tech companies, expectations and career-growth wise. The story of most engineering managers moving into management is similar: be a great tech lead on a fast-growing team, and opportunities to move into management come easier.  Unfortunately, there is no single recipe on how to make this happen, or how to be guaranteed successful at it. Taking ownership of your career, getting your manager and management chain on your side, having allies across the organization, and working at a place that is growing quickly all increase your odds greatly. Taking on the responsibilities of the manager, without authority, and leading the team well is another good strategy. Just be patient and focus on the team succeeding, rather than on your putting your personal gain as first. Finally, beyond certain seniority, there are no simple answers, and two paths are rarely the same. Good luck! Related articles: Ask the EM: I'm Acting as The Team's Lead, But I'm Not Actually One Seven things that helped me move into engineering management Things I've learned transitioning from engineer to engineering manager \n\n               \n                 \n                  This post is part of the  Ask the Engineering Manager series . Have a question on career growth, as a software engineer or engineering manager?  Ask it here . Read other parts of the series  here .\n                 \n               \n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/surprising-things-about-working-at-tech-unicorns/", "title": "Surprising Things About Working at Well-Known Tech Unicorns", "content": "\n             My past few companies - Skype, Skyscanner, Uber - have been well-known companies that I've joined in their \"unicorn\" phase. Unicorns are private companies that have reached the $1B valuation - and they usually do this in less than ten years. All of these companies were well-known consumer brands by the time I joined, many of my friends using them daily. As such, I had high expectations and was excited to start. But expectations and reality don't always match. Here are the  13 most unexpected things I've learned from these working experiences. 1. Don't readily believe the press - neither the hype, nor the anti-hype Skype, and especially Uber had beyond average press coverage both before, and after I joined. Before I worked at any of these companies, I would have taken many of the stories at face value. How Skype growth was seemingly unstoppable - hitting  over 100M monthly users in 2011 . Or how Uber  had a terrible 2017  - reading the articles, I would have assumed it's a company no one would want to work at. When you work at a company, you realize how selective the media and press articles are.  I am sure you did not read any articles on the alarmingly slowing user numbers at Skype in 2013, nor the comparison on Whatsapp's meteoric rise in 2013-14. This was the hot topic at most company all-hands - yet, there was no press reporting on it. The only thing savy people might have noticed is Skype simply stopped reporting user numbers in press releases after a while. Same with the terrible year of Uber in 2017. From the inside, it was a turbulent year, but a lot more nuanced with plenty of good parts - and you probably heard nothing of the good parts. There was no press reporting on the 5% or above spot pay raise to all staff. The listening sessions, where people, mostly women, grabbed the microphone and talked about what needs to change, starting now. How the whole company sat in shock, internalizing that things were broken, and it was more than just about one case - it was something bigger we needed to fix. How on the internal private chats people were messaging each other and saying things like \"if we don't change the culture, I'm out\". Implementing of equal pay - by raising the pay upwards only - and the regular diversity, unconscious bias, and microaggressions training that were not just for ticking the box. How, when a board member made a sexist comment on another board member on an All-Hands, hundreds of employees immediately stood up, demanded action, the board member resigned the next day and this set the tone of what is (not) acceptable. The media usually writes about things that get clicks. Sensationalist headlines that point to something more exciting than what's actually happening get more views. Shocking news - the type of \"oh my god, you need to read this\" do even better. Skype was not nearly as amazing, and Uber not nearly as terrible as you'd gather from reading mainstream media articles or ones on the front page of Hacker News.  If you're considering joining a well-known tech company, do your research and form your own opinion . You'll do far better than relying only on the press and forums where sensational speculations fare better than mundane details. 2. A lot more things are broken than you'd think All of these companies were wildly successful ones, with tens or hundreds of millions of monthly customers. All of them touted that they only hire the best and that they are cutting-edge on innovation.  Yet, when joining, I was surprised to see a bunch of things broken or ignored I would not have expected within billion-dollar companies. The main Skype client - used by around 200M people at the time - had no unit tests when I joined. This was at a time when TDD and testing were pretty mainstream. Still, the release was dependent on dozens of manual testers going through thousands of test cases. You committed your code, and in two or three weeks, you'd get a ping that it might have introduced a bug. Oh, did I mention releasing took months or that the client was written and maintained in  Delphi , with several unsuccessful attempts to move it over to something less niche of a language? I've seen the accounting system of a unicorn broken so that accounting had to reconcile monthly what digital purchase was miscategorized by the software, resulting in an accounting error. This went on for years, even though both the problem and the solution were software based. I observed another unicorn mistakenly spending millions of dollars buying ads on one of their digital marketing channels - sending all this money down the drain, because of a bug on how conversions were tracked. A year later, a developer got suspicious and finally found and fixed this bug. The main system of another unicorn going down for hours after a team ignored a company-wide communicated guideline on how to store data - exactly to avoid the kind outage that followed. I could go on. To be clear, pain points like the above are pretty normal at fast-growing and young companies.  What made them seem shocking to me is how, during the interviews, I was sold - and wanted to believe - the image of a well-oiled company. I also saw several engineers joining from Google quit multiple of these unicorns their first month - after realizing that what they've been sold - working at a \"small version of Google\" - was not what was actually the case: a small, but quite much more messy version of something that was far away from Google. 3. A lot of the company's initial success is pure luck You read the articles on how all these successful unicorns were founded, and it seems like the founders had these amazing visions that came together. How Garrett Camp  could not reliably hail a cab , so he founded a Uber to solve this problem. How Gareth Williams couldn't find the cheapest travel deals  so he built Skyscanner . You don't even need to work at these companies to question just how much luck was involved in the company taking off in the early days, as much as it did. Each of the unicorns had several competitors, having the same idea, executing in similar ways. For Uber, there was  Sidecar  that launched earlier, with amazing investors. For Skyscanner, there has been far more competition, yet they won the European market, making large dents in the US and Asia as well. Working at the company, you start hearing many of the stories that tell the story of luck being a big part of the success. Timing, early events, random decisions that seemed insignificant at the time, but proved valuable. For Skype, the P2P nature that allowed it to scale quickly in the 2000s right when operating servers was still very expensive, but people having good-enough bandwidth connections started to become more common. For Skyscanner, both the persistence and timing was remarkable. They had several competitors when starting, but there was no real money in scraping flight deals. Still, Skyscanner persisted, playing the whack-a-mole game of scrapping data even as sites actively tried to block them. They did this for years and years until they grew too big for the sites they were scraping data from - and directing traffic to - to ignore and start paying for traffic they received. Their early competitors folded midway, and their later competitors bought data straight from Skyscanner over going through the expense of doing their own scraping. Even more interesting, the early employees I talked with also often told me how they had no idea things will grow this much, or there was  that  much demand for what they were building . Execution certainly matters - and the lack of it can kill a company. But the pure luck of starting the right thing, at the right time when demand is building up: this has been something all unicorns I've worked at shared. 4. There are more gut call product decisions than anyone will admit When you launch a successful product feature that becomes the core part of the company, many people assume the company must have known it will be a success. People think we at least did some user testing before. The reality is not like that. Usually someone - more often a product manager than not - makes a suggestion to build this feature. If it's the early stage of the company, they tell the engineers what they're thinking, and they ship it. If it's later in the company, they write a document and get approvals. While data is necessary at this point to back things up when you  really  want to ship something, getting the right type of forecasts is not a huge deal. While you might think that using little data, but a lot of gut is a bad strategy, I've seen the opposite.  Skype was the place where we did the most user research testing on one of our projects. And guess what? We made the poorest decisions: or should I say, we barely made any decisions. Our user research test that took two days with 14 people often came to 8:6 preferring/not preferring our suggestion. So we ran two more of these, which was a tie again and the product manager decided we'll build both versions, then A/B test it. And when the A/B test was close to a tie, we chose the one that the product manager felt would do better from the start. Compare this with a team at Uber the early days of Uber launching a product based on a few customer discussions, but no real good projections beyond a gut feel that this will either be huge or fail spectacularly. They built a barebones product super fast, launched it, started to see hockey stick growth... and this is how both paying with cash for an Uber and - though a bit more complicated - Uber Eats was born. Both billion-dollar businesses today. 5. Process matters far less than everyone pretends it does In 2011, Skype was doing waterfall development. Make the changes, do the long manual testing, release it. They were market leaders. If you did video calls, it was Skype. From 2012, Skype did an agile transformation, where all teams got trained on Scrum, we got certificates and setup to do bi-weely sprints and ship value more iteratively. By 2014, we were more agile than ever. Yet our market share dropped, competitors like Whatsapp making large gains on Skype. In 2020, what's left of Skype has better processes and agility than ever before. So what is your goto video calling app these days? For me, it's not been Skype for a long while now - unfortunately. You read the blogs, go to conferences and hear engineering leaders talk about the importance of process, and how they made process changes that resulted in this or that. The Spotify model. Agile. Scrum. Kanban. Scrumban.  Here's what few people will tell you, but what I've seen: the focus on process is overblown.  Focus, clarity, transparency and a healthy culture are far more important :  but they're harder to get right than to change a company-wide process. They're also far less sexy to talk or write about, as they are both not that exciting. At Skype, focus got quickly lost after the Microsoft acquisition. It didn't matter that we had a new and shiny agile process with hundreds of certified Scrum masters. Most of the company was treading water, not having a clear goal that we needed to chase. Were we optimizing for NPS? Taking on Whatsapp? Increasing monthly user numbers? Growing revenue? Company vision explanations were printed and put in the cafeterias and toilets - two-page continuous texts that did not answer any of these questions. Compare this with Skyscanner. There were screens in the office showing  live  how much commissions we've earned that day, and we got detailed email revenue breakdowns daily. I could not believe this level of transparency when I joined. Is it a wonder that Skyscanner was one of the very few profitable unicorns for years, and that every person knew how much their team was contributing? Or that hackathons shipped features that moved this metric up? Same with Uber. Uber had no shared processes across teams, but clear goals and metrics, with tons of internal transparency. Execution was laser-focused. In some years, the focus was on growth and active customers. Others it was partner satisfaction or safety. We always knew where we're going and why. 6. Autonomy and growth over the roof Unicorns can grow ridiculously fast because they pour VC money to speed hiring and execution, with the calculation that this faster execution will pay off handsomely. The reality of fast growth is that you can't do this without giving high autonomy to teams and individuals.  This is why you'll find few places with more freedom to operate than with unicorns in a high-growth stage. At Uber, we more than doubled the office every year for three straight years. This meant that processes that worked for 20 developers in Amsterdam - when I joined - stopped working at 50 people. Whatever we came up for 50 people broke down at 150 people. And it was down to people on the ground - us - to make changes to keep things working efficiently. Uber was an extreme example with its hypergrowth, but high growth and autonomy went hand-in-hand at all of the unicorns I worked at. Autonomy was not just an option: it was a necessity to thrive. Being an owner and stepping up to proactively fix things was not just something nice to have: it was the path to succeeding at places like these. Autonomy and ownership were not limited to software development. It meant stepping in and challenging product decisions, jumping in to make customer support right, and stepping out other ways of an engineer's comfort zone. This exposure is what helped so many developers working at these companies become  product-minded software engineers . Autonomy and high professional growth is one of the most rewarding aspects I've found working at unicorns, in their growth phase. 7. Not messing up the basics is just as (if not more) important as innovating All of these unicorns were less than 10 years old when I joined. For the most part, they did one thing  really  well that brought customers and revenue. For Skype, it was calling others reliably. For Skyscanner: finding the cheapest flights. For Uber: getting a ride in 5 minutes or less. Additionally, all of the companies invested tons in innovating and building new lines of businesses. Skyscanner launched hotels and car rentals. Uber launched Uber Eats, Uber Freight, and dozens of other incumbents.  But the consistently successful unicorns kept being laser-focused on making sure that their \"core\" product kept growing, people used it, liked it, and paid for it . Skyscanner was religious about flights coverage and revenue. Uber about trip taking rate and driver satisfaction, and measuring various things around it. And when metrics or market share started going down, they reacted swiftly, reversing the trend. Skype was the place, though, where I saw what it leads when you forget about ruthlessly focusing on your core value add and when you let competition slide. Skype was building lots of clients at the time - I was working on Skype for XBox One - buying group-calling GroupMe and starting a new app called  Qik . While all the talk and focus was on the \"new\" - new platform, GroupMe and Qik - we seemed to have forgotten to listen to our users. Users who were frustrated that their text messages on Skype were taking minutes or hours to get delivered. This was because messaging also used the P2P protocol - and this setup simply couldn't compete latency-wise with a centralized model most other chat-only apps were using. On the quarterly all hands, the recurring question from employees was, \"what are we reacting to Whatsapp gaining huge popularity?\". And there was not a clear answer from leadership that we were hoping to hear. Instead, it was a \"don't worry about it; they're not in the same league\" type of brushing aside. Skype leadership kept stressing how messaging apps were not our competitors, as they did not offer video calling, and thus they didn't connect people at the level we did. We forgot that seamless and best-in-class communication is what the core value add of Skype was. We focused on many things, but making the non-video part of messaging reliable was not one of them. It took years to make messaging reliable, and server-based, and it was too late by then - Skype being a video-only tool that is unreliable for text was a common perception. And despite all the innovation happening, from new features, new apps, and later a massive redesign - Skype lost market share and went from a market leader to one of the many video calling solutions. 8. The CTO is more important and influential than you'd assume Every single 5-10 years old unicorn I've seen has had an insane amount of tech debt. And much of this tech debt is understandable. The company started out as an idea that was quickly validated. The MVP did far better than expected; the company scaling up faster than anyone had hoped. The v1 of the product was still running on the prototype. For the v2, there was little time to address things like architecture. Now, 5-8 years, millions of paying users and hundreds or thousands of developers later, moving fast is still essential. But what about paying down the massive  architecture and tech debt  that engineering has been carrying for so long? I've seen strong CTOs be vital to instilling  a healthy engineering culture  that allowed the organization to keep delivering while taking a pragmatic approach to tackling tech debt.  Also, the lack of such a CTO was visible early on. The places where there were only interim or hands-off CTOs or CTOs that were places with engineering output and quality being very adhoc. Some teams were good, but many other teams were unable to deal with the piling up of debt, and they took painfully long to ship even small changes. Uber was the place where I experienced what a difference a stable and hands-on CTO can make. Uber had higher growth in a shorter time than any of the previous places I've worked at. When joining, I was surprised to see a large developer tooling team improving the workflows of developers. There was an upfront investment in developer and  oncall tooling , and in  monorepos . Discussions on tech debt happened not only between engineers but also at the CTO level. We started top-down supported initiatives like  Fixit weeks : a week when  all  of engineering - thousands of developers - only worked on tech debt removal. Engineering was able to pull off investments that I've not seen other companies do: and I am convinced much of this came from the CTO having built strong trust and credibility with the rest of the business. I saw a similar transformation when  Bryan , one of the most hands-on engineering leaders I knew joined Skyscanner as SVP Engineering, quickly becoming CTO. In a matter of two years, Bryan made a noticeable dent in building an autonomous engineering team culture. Bryan was one of the most hands-on executives I've known, being up-to-date with tech and going deep in architecture discussions, both challenging, as well as empowering engineers and engineering managers. He built up trust within engineering quickly: using this trust to make changes in introducing company-wide development best-practices to iterate faster, with higher quality. 9. Not all old-timers grow with the company Some of the best and most inspiring people I've worked with were early employees. But not all early employees were equally great. In each company, there were a few who you figured out is best to sidestep. There were two types of these people. Some people just stopped growing with the company. Typically early employees who went from being an engineer to a senior engineer to a tech lead - but then they turned out to be a not-very-good lead. They stopped growing, and it became visible that they were unhappy with the situation, and with other early employees progressing faster. These were people who knew how to get things solo but were not pleasant to work with on the same team. The other type of person was the person who struck me as a \"rest and vest\" type of person. Several of the unicorns did not yet have liquidity events when I joined, meaning if early employees left, they would have had to shell out often big money to exercise options, but still not be able to make money on them. So several people - who must have been paper-rich - stuck around, waiting for the first liquidity event. When this eventually came, they usually left quickly. The difference between early employees was striking as of them were really talented people. I was lucky enough to work with some of the founding engineers at Skype and mobile engineer #1 at Uber, who all were ridiculously effective.  But when joining a unicorn, don't assume that every early employee is amazing: figure out who is  and you'll quickly also find who might not be. 10. \"VIP\" bug reports get 100x the attention of normal ones The CEO and the whole C-level at these companies were always champion users and advocates of the product. And they were also avid bug reporters. In theory, this would be a good thing. In practice, it can be quite stressful. At every company, I've had at least one CEO-level bug come my team's way that needed sorting ASAP. It did not matter if it was a known issue that we prioritized to fix in the next quarter. Or that it was an issue visible only to internal employees. We needed to drop what we were doing, and patch up to make sure the specific issue by the CEO/founder/executive would not occur again. What made these exercises annoying - beyond the stress of it - was that they rarely improved the product by much . Rarely did my team, or the org start to triage customer issues better or fix more of them. There were exceptions, but even when we had a solid triaging process and a culture of paying attention to customer issues, the \"VIP escalation\" never went away. 11. Early employees don't always do that well I always assumed being the first 10-20 employees in a unicorn must mean those people are millionaires by the time the company reaches unicorn valuation. While this might be true for some companies - mostly those generous with equity early on - it's not the rule of thumb I've seen. In several cases, people who joined years later, but negotiated better were better of financially than early employees  who had been there for years - being on the same level. This was especially eye-opening at Skype, which seemed to have a very different run than most unicorns. The eBay acquisition did not make many of the early Skype engineers rich, as I understood: and the subsequent private equity acquisition brought little to no incentives to old-timers. I knew a veteran engineer whose Skype equity from seven years back was worth a months' salary after several Skype acquisitions (eBay, Silverlake, Microsoft). Of course, I also got to know early employees who did do very well, thanks to their timing and their continuous value add to the company. But it wasn't a universal rule. If you're joining a startup early on with the hopes of making big money,  you're up for disappointment . 12. People associate you with the brand more than you'd expect I happened to work at well-known brands that millions of people used. And this came with some \"fame\" in unexpected ways. My friends and family would message me for any issues they had with Skype, Skyscanner, and Uber. I would get random emails on my work account from strangers making bug reports or trying to get to customer support. And if on a public forum, like Hacker News I'd mention I work at the company I did, I'd get a bunch of questions on how we implemented this or that. Brand association has also been an unexpected positive in doing tech talks or writing blogs . I am certain I would have had fewer of my talks accepted by meetups and tech conferences if I did not have the \"developer at {Skype/Skyscanner/Uber}\" title next to it. Talks about technology choices and best practices at each of these companies had an outsized interest - after I've been able to get signoff from the company to talk about things. My post on  things I've learned building a distributed payments system at Uber  is still one of the most read posts on this blog. While brand association has usually been a net positive, it's also worked against me. A tweet that I thought was insignificant - mentioning how my team are moving from microservices to \"macroservices\" at Uber made its way around tech Twitter. For the record, at Uber, we're moving many of our microservices to what  @copyconstruct  calls macroservices (wells-sized services). Exactly b/c testing and maintaining thousands of microservices is not only hard - it can cause more trouble long-term than it solves the short-term.  https://t.co/VL8opOh1BY ‚Äî Gergely Orosz (@GergelyOrosz)  April 6, 2020   Many people interpreted this as Uber abandoning microservices, very few outlets reading my follow-up replies and interpreting the message as I intended. High Scalability and their article  One Team at Uber is Moving to Macroservices  was a decent summary of the thread. 13. It's a HUGE thrill - especially the first year In the first three months, my head was literally spinning at all of these unicorns. These high-growth - sometimes hypergrowth - places have incredible energy that you sense when you join. In my first year at Skype, we shipped Skype for XBox One. At Skyscanner, we built a B2B travel booking tool and launched it with Transferwise as our first client, while opening the London engineering office, where I was engineer #1 on the site. And at Uber, we rewrote the Rider app from scratch, in less than four months. It was an adrenaline-filled and thrilling experience, in all cases. And for the most part, this thrill kept up for a long time.  Most unicorns kept growing while I was there, which meant new teams, new projects, new opportunities  and after a year, I was the \"old timer\" with the war stories. And just around the one-year mark when doing the same thing would have been boring - I was doing something completely different, jumping on a new, high-growth opportunity within the company. It's this fast growth that has helped me grow professionally, from a starting as a mid-level developer at Skype to a principal engineer at Skyscanner and  going from developer to engineering manager  at Uber. See the Japanese translation of this article here:  ÊúâÂêç„Å™„ÉÜ„ÉÉ„ÇØ„É¶„Éã„Ç≥„Éº„É≥‰ºÅÊ•≠„ÅßÂÉç„ÅÑ„Å¶È©ö„Åè„Åì„Å®ÔºàÂâçÁ∑®Ôºâ and  ÊúâÂêç„Å™„ÉÜ„ÉÉ„ÇØ„É¶„Éã„Ç≥„Éº„É≥‰ºÅÊ•≠„ÅßÂÉç„ÅÑ„Å¶È©ö„Åè„Åì„Å®ÔºàÂæåÁ∑®Ôºâ . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/software-architecture-jams/", "title": "Architecture Jams: a Collaborative Way of Designing Software", "content": "\n             Software is rarely designed in isolation. It doesn't happen by one person going away in their corner for some time, then coming back with a thoroughly thought-out map of what to build and how. And as they explain the approach, the rest of the team nods, then everyone follows this master plan to build the system. Instead, what actually happens in productive environments is one of the engineers makes a proposal, mapping out their thinking of how to solve the problem. This starts a discussion, and others join in. These others might be people who will work on the project or people with relevant domain knowledge. Usually, a lively debate continues, with people bringing up edge cases. Some people playing devil's advocate and others stress test the design. On the way, modifications might be made, to the point that all people with interest in the project are happy. After the group agrees, some more feedback might be gathered by an  RFC-like process , and then the team starts building. It's a good idea to facilitate an architecture jam early on in the design process , instead of letting it play out organically, over a longer period of time. Doing so will mean more immediate feedback, a lot more people invested in the idea and blind spots of the approach caught earlier. Most successful projects I've seen from  rebuilding Uber's payments systems  to building Skype for the Web all started as an architecture jam. Of course, eventually these massive projects broke up to multiple streams, with their own architecture jams. Some were more, and some less efficient. Here are approaches I've seen good architecture jams follow, over the years. Be mindful of who you invite.  You want people in the room who will be giving feedback or contributing. It can also be a good idea to include a more junior person as part of getting them exposed on how these sessions go as part of  good mentorship : just make sure you'll encourage them to contribute during this session. Start with the goal  of the project. As tempting jump straight into boxes and arrows, don't forget that architecture is just a tool to get things done. Make sure the whole room is on the same page on what problem you'll solve. Lay out constraints and principles  that need to be accounted for. Many back-and-forth discussions tend to happen when participants optimize for different things. An engineer might draft a design where they optimize for latency and horizontal scaling - when another engineer might be optimizing for touching the fewest systems possible. Unless the constraints and priorities are not made explicit, people can talk past each other until they finally realize that they are aiming at different targets. Use a (virtual) whiteboard , if you can. Whiteboards have lots of benefits in collaboration: it's easy to draw out thoughts. It's also easy for others to collaborate. When you're sitting remote, it's more tricky: but shared drawing tools where anyone can take the lead and sketch their ideas make a difference. Present your proposal . Keep it casual, aiming to spark discussion, and get feedback. On-the-spot drawing on a whiteboard is a great way to do so. Having a slide deck might be too formal in some cases, but can work in others. Step back and give space to others . Encourage people to share their thoughts and feedback. If you're doing whiteboarding, give the markers to others so they can visualize their ideas. If you have that more junior person, make sure they also give their take. Facilitate the meeting , ensuring the discussion progresses towards the goal of coming up with a reliable approach. Good facilitation takes practice: you might need to table some unrelated discussions and use questions, perhaps lay out constraints to keep moving. Commit after addressing disagreements . Aim for an approach that people are willing to commit to, even if they might not agree with it. Close with a clear outcome . Either you'll all be violently agreeing on an approach, or there will be no agreement on some key areas. Not agreeing is okay and more common than you'd think. In this case, decide on actions to take to settle key loose ends: perhaps with a smaller group. When that follow-up discussion is done, that should leave you with a plan that everyone can commit to. Summarize with notes . Collect the key decisions made and write up the summary, circulating it back to the meeting attendees. If you used a whiteboard, take a photo and either attach this or convert it to an editable diagram. Assuming there was an agreement, these notes might be the start of the design document. Finally ,  have a plan on getting the results to production . Architecture done for the sake of architecture is a poor investment. You'll want to solve an actual problem, ship this as a solution and confirm that it works and improves things. Perhaps this is straightforward, as you're already building the project. If not, are you creating a prototype or an MVP? You have an agreement - so get down to coding, releasing, and validating the architecture. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/become-and-effective-software-engineering-manager-my-book-review/", "title": "Become an Effective Software Engineering Manager: My Book Review and Notes", "content": "\n             I wish the book  Become an Effective Software Engineering Manager  existed when I  moved from development to management . I was one of the luckier ones: I had a formal apprentice management program with plenty of training, access to senior engineering leaders as mentors within the company, and a circle of hands-on engineering managers to learn from. Even so, this book would have helped me be more strategic about my learning and would have given me more confidence early on. Note that none of the below links are affiliate links or sponsored ones. See  my ethics statement  on the lack of such links. What I most like about the book is that it is a \"modern\", 2020 take on engineering management - with the focus being on the \"hard to get right the first time\" parts.  I have yet to read a book on engineering management that covers 1:1s, performance reviews, hiring and laying off, diversity & inclusion, workplace politics, remote work, and the need for managers to relax. I have definitely not seen all of these in one place. As I read, I kept nodding along with the experiences and advice. It's similar advice to what I'd give to anyone wanting to build  a great team with a strong developer culture , being a thoughtful manager. The author,  James Stanier , moved into management from an academic development background. He joined a startup, working his way up to SVP Engineering, managing a team of 60 people, going from line manager to manager of managers, and responsible for the whole engineering organization. The book follows along a similar path: the first part covering things a brand new manager should know, the second part going into topics more experienced managers should master. Each of the 18 chapters starts with an engaging story. This approach makes the book and easy and engaging read.  \"You hold the ID card out in front of you so you can read it. Fortunately they've spelled your name correctly. Shame about the photograph, though. You return it to your pocket. You've arrived. It's day one\".  And you don't get bored later on either: illustrations and exercises continuously spice things up. I found myself skimming through the book on the first read, then coming back to the chapters and reading them in-depth, later on. I strongly recommend this book to people looking at their first engineering management role , as there is a wealth of practical and genuinely good advice written. It is the kind of advice you get in your first two years as a manager - assuming you have one or two great mentors and are surrounded by multiple peers who continuously give you well-intended feedback. Which - unfortunately - is not the case for many people. How do you manage your perception? How do you decide what information to broadcast? How do you do good 1:1s? Grow people? Do perf reviews? Hire? Let people go? These topics are not only valuable reading for first-time managers, but I find myself looking these topics up when I am mentoring less experienced managers, drawing inspiration on activities to suggest for these managers to take on to grow. More experienced managers like myself can also take away good parts, especially in the second part of the book.  How do you manage high-stakes \"The Eye of Sauron\" projects? How do you get the news through the grapevine? How do you make workplace politics work for you? What are ways to communicate well within a larger group? How should you design career ladders? What about diversity, inclusion, remote working and work-life balance? I'm adding this book to the shortlist of engineering management books I'm recommending engineering managers to read. These books are: The Manager's Path  by Camille Fournier. A short reference handbook for managers at all levels. An Elegant Puzzle  by Will Larson. The most hands-on read on  engineering  management I've picked up. See my  in-detail review and notes . Become an Effective Software Engineering Manager  by James Stainer If you buy the paperback book, you'll find a quote on the back of it from me, which sums up this review more concisely:  \"This is the book I'll be recommending to new managers transitioning into the role, managers starting at a new company, and experienced managers looking to make an organizational-wide impact.\"  You can  buy the book from the publisher here . My book notes As I read the book, I took notes for each of the chapters. Read on to get a glance of the topics the book touches on. \"The technology industry is facing a skills crisis. This isn‚Äôt because we don‚Äôt know how to write software or how to scale our infrastructure. We‚Äôve been getting a lot better at that. Instead, it‚Äôs because we don‚Äôt know how to manage people. Computers don‚Äôt create software, people do.  We need to make more people succeed. Good managers can solve this problem . You can be a great one.\"  - part of the introduction. I like the tone: and I agree that we need more great software engineering managers. Part 1 - Getting Oriented A New Adventure (Chapter 1) A strong kickoff with an engaging story on starting as a new manager. I could almost feel myself being the new manager of infrastructure at this unicorn company. Except when I started at Uber, I had not one, but 25 unread emails already. Impostor syndrome is normal for managers. Yes it is, I also felt the same way  when I started my management journey .  \"You were given this role in the first place because you were qualified for it. Remember that. You will feel more confident with time.\" Practical advice on things to do the first week and finding misalignment signals on your first week - and later. The section on creating a snapshot has a novel approach on how you can figure out where there's misalignment between the team, your new manager and you, early on. It's a tool that is useful well beyond the first week. Manage Yourself First (Chapter 2) A good reminder of how getting your things an order comes first - this is a pre-requisite to you being efficient, as a manager. Organizing your calendar. Pragmatic advice on not using your calendar for other than meetings and booking out spots when you're busy or OO. \" Your calendar it is both for you and other people to use. Keep it tidy and meaningful. It represents you. Making meetings public by default can help others reason better about how to schedule time with you.\" Categorizing your work to feel productive, as a manager . \" If you‚Äôre unable to frame all of your managerial work in a way that is able to make you feel productive, then, with time, you may feel like your job is happening around you rather than feeling like you are doing your job.\"  Caregorizing activities as information gathering, decision-making, nudging or being a role model, following the model outlined in  High Output Management , by Andy Grove. Also, to-do list and email inboxes. Part 2 - Working with Individuals Interfacing with Humans (Chapter 3) This chapter covers a  lot  of ground on how to communicate with others, as a manager. How to communicate well. Mediums of spoken, written and nonverbal communication. Choosing between face-to-face, emails, documents, chats, JIRA and others. Being aware of your perception as a manager. Managing your energy and not carrying over frustration / emotions from one meeting to the next. This is easier said than done, but this is a key skill to master for any decent manager. Think twice before broadcasting information.  \"Don‚Äôt communicate when you want to. Communicate when you need to\"  I agree, and this is a mistake most first-time managers do, in eagerly over-communicating, then having to backtrack. Be consistent in your communications style.  \"Fundamentally it‚Äôs up to you, your team, and your workplace culture as to how formal you are in your interactions, but nobody wants a manager who is also the class clown .  A useful way to approach this is to start formal and gradually ease the formality with time to a place that you are comfortable with that allows you to still be authorititive and critical when needed. Once you‚Äôve slipped down to extreme informality, it can be hard to come back up again.\" Giving good feedback. Referencing key points from  Radical Candor , a book that is also  on my reading list . Delegation and working with your manager. One-to-Ones (Chapter 4) Your first 1:1 and contracting. \" Let‚Äôs have a look at each of the questions. They‚Äôre the same ones that I use in my own contracting sessions. However, they should only serve as a guide.\" It's their meeting, not yours. \" Try and get your direct reports to do 70% of the talking. If you feel like solving their problem for them, don‚Äôt. Ask another question and let them arrive at the conclusion themselves. This is an art that takes some practice.\"  (Gergely: while I agree with the premise, I'd add that you'll need to do a lot more coaching for less experienced people until they feel they own the 1:1s. Also: if you have key information to share that impacts people significantly, do it here, that also builds trust). Making updates more interesting . \" Instead of just nodding and listening to what they‚Äôve been doing, why not probe deeper by asking some questions?\".  Taking notes and assigning actions, and doing this via a shared document. I also do this, though more as a supporting action, than a main focus. The Right Job for the Person (Chapter 5) An overview on things that can help with working with people. Motivation, learning theory and thoughts on stability/chaos. I'll be honest: this chapter was more academic than practical for me, though I've used all the tools described in this chapter before. Motivation and the hierarchy of needs. Developing skills with some practical examples on doing so. Skill tree: an interesting idea I've not heard laid out in this format before. The zone of proximal development (I call this challenging people with things that are just out of their comfort zone. Also, see my article on  stretching, executing, coasting  covering a similar topic, without the academic background)  \"However, as their manager, you can work with them to place these career achievements at the bottom of their own skill tree, and then plan out the milestones along the way that they can aim for in order to make measurable progress. thus pushing the frontier of their zone of proximal development further and further.\" Platform vs product mindset/interest  - or, as James puts it, the Cathedral vs the Bazaar. I've written about the  product-minded software engineer , who I relate more to the Bazaar type. Performance Reviews (Chapter 6: The Most Wonderful Time of the Year) This is a good section - especially when you've not done many performance reviews before. I previously wrote in-detail about  how I do performance reviews for software developers . My take and approach is slightly different to how James suggests doing perf reviews, which - I guess - is to be expected. Myth busting on performance review myths. A fun read. Preparing for perf reviews  and preparing ahead of time. Getting peer feedback, and doing this e.g. via email. Note that if you're working at a larger company, you'll probably have automated tools in doing so, using an out-of-the-box system like  Reflective ,  Avature  or something similar. How to talk about money was an interesting read for me. At places like Uber, Facebook, Google and large tech companies, this is quite different, as pay is not directly controlled by managers, but rather performance outcomes impact these. There's a standard script managers share on the company's compensation philosophy, with all questions on pay raises, bonuses, equity being standard across all employees. My two cents is decoupling the performance and salary discussions: James doesn't touch on this specifically, but I  feel pretty strongly about this , at least at a mature tech company with standard pay practices. Hiring (Chapter 7: Join Us!) There are countless articles about how hiring is broken - from a candidate's perspective - so I was looking forward to this chapter, from the hiring manager's perspective. It's an important chapter, more applicable for smaller companies and places where hiring managers have more autonomy / less of a well-beaten path to follow typical of large tech companies. The case for not needing the most senior candidate. I agree with this idea and I'm quite conscious on seniority in my team, to ensure good team dynamics and growth opportunities.  Culture fit - I was happy to see Culture Fit debunked. I'd add Culture Add to the mix as well. Briefly touching on unconscious biases was a good add. Writing job descriptions - solid advice and I was happy to see the style, tone and gender-neutrality listed. Note though that listing salaries upfront varies by market and company. I agree with when you can do it, you should. But the likes of Facebook, Google, Uber don't list salaries, even when they have fair pay and salary ranges in place. Sites like  levels.fyi  give a good sense on where some of the bigger players are with compensation, though. ¬† Setting up an interview process -  though this section is one of the longest in the book, and solid in content, if you've done hiring, you realize it only scratches the surface. Still the best collection of practical advice I've read in a book for hiring engineers. As with before, the process at FANG companies is a bit different, and focuses more heavily on coding, systems design and the bar raiser interviews - for better or worse. Attrition (Chapter 8: Game Over) People leaving is normal.  \"As a manager, you are doomed to failure if you think that you are going to keep everyone in your current team indefinitely. (...) Be comfortable with the fact that all of our careers are different and we are all motivated by varying aspects.\" Voluntary resignations that are \"good reasons\", aka you could have not done much about it. Voluntary resignations that are \"bad reasons\", that is you could have caught - and addressed - things early like coworker conflict, lack of challenge, compensation. Good suggestions on getting ahead of these. Counteroffers.  \"You should never fight to keep staff if you cannot actually provide the conditions under which they can become happier than they already are. You‚Äôll just defer their departure.\"  The tactical parts of what to do if you actually  still  decide to make a counteroffer is good food for thought. Letting people go  - making staff leave. The PIP, going about it, setting objectives, delivering and implementing it. Redundancies. A thorough and important read for any manager. For many, there will be no need to use this tool - until one fateful day, when it would be good to have a place to start. Being well-connected (Chapter 9: How to win friends and influence people) Building your network . Making introductions, checking in with others. All good advice: easy to write (or read), harder, but important, to make it a habit. Mentoring and the mentorship matrix: an interesting idea on getting mentorship started at your company org, if there's little happening.  Coaching and the difference with mentoring. Part 3 - The Bigger Picture Humans are Hard (Chapter 10) Scrutiny and judgement.  \"At more senior levels, During bad times, you will get the fingers pointed at you as you are fundamentally accountable, even though it may have not been your fault.\"  Getting scrutiny from multiple directions: your team or your management chain.. Less structure, more wobble.  \"In addition to the unstructured and complex issues that you‚Äôll experience through managing humans, you‚Äôll also partake in discussions that have no clear correct answer.\"  I really liked the  Jell-O wobble parallel : wobbling the jelly from the bottom, or the top.  \"Part of your job as a manager is to prevent this wobble from occurring. You must try your best to protect the part of the organization that reports into you in times of adversity. This requires a good amount of emotional intelligence, judgment, and support.\" . Listening, observing, communicating and peer support. The whip and the carrot and why it's not about how hard people seem to be working. Contrasting this with  autonomy, mastery and purpose  from the excellent book  Drive: The Surprising Truth on what Motivates Us , a model that has proven to work far better for software engineers. Projects are Hard (Chapter 11) The eye off Sauron‚Äù - working on high-stakes projects. Principles of managing these kinds of projects, from over-communicating, frequent iterations and inviting feedback (and - I would add, granular milestones). After the project has shipped, recharging the team (things like celebrating, cleaning up tech debt etc). \"Lead from the front: As a leader, you need to set the example for the rest of the team. Put in the work. The hardest projects can become career-defining moments. Own them and be there.\" Things slowing down as the team is growing. More (legacy) code, more comms overhead. Approaches to keep the slowdown at bay by e.g. always showing progress and developing software pragmatically. Scope, resources and time.  I like to call this the physics of project management. Make constraints / levers visible. Here's a guide on  how I manage projects within my teams . The Information Stock Exchange (Chapter 13) A pretty important part of being a good manager is being connected and being in-the-know. I enjoyed this section: it talks openly about the elephant in the room: information and politics. Spies and gatekeepers.  \"As a manager, you will be required to make regular decisions about how much you should share with other staff and when. The easiest option with any sensitive subject is to not say anything at all. But is keeping everything a secret by default the right thing to do? Definitely not. Unless there is a critical reason for hiding information, then it should be shared, although care should be taken in how the message is delivered.\" Workplace politics .  \"In workplace politics, your network of peers is important as it allows you to be more broadly informed about how the wider business feels about your own initiatives and priorities, and it also gives you a chance to trial ideas before taking them any further, allowing you to initially operate in a safe, cross-disciplinary setting. Continually foster this network and use them to make you a better manager.\" Letting Go of Control (Chapter 13) This is so important for managers! Especially as a first-time manager, letting go is really hard.  \"This has parallels with somebody taking part in a tennis match: they clearly want to win, else why would they be playing? However, a strong opponent or bad luck can mean that the outcome is not what they wished: they may lose. How can they maintain their inner tranquility? The answer is that for things that you do not fully control, you should set internal goals rather than external ones.\" \" Let go of outcomes that you cannot control . Be accepting of trying your best, and encourage the same behavior in your staff. Unpredictable results are normal. Failure is acceptable. As long as you are trying your best and you are enabling your team to try your best, then you have nothing to worry about. Pat yourself on the back.\" \"Try to carve out 10 percent of your time each week to do absolutely nothing other than let your thoughts emerge\" Remove distractions and recharge properly outside work. Good Housekeeping (Chapter 14) Communication is hard within a larger group. Conway‚Äôs law. Guilds and cross-functional teams. Turning problems into learning opportunities : this is what I‚Äôd call blameless postmortems. Tools to solve common problems. ADR: similar to  the RFC process  used at many places. Team health checks. Also: culture/pulse/management surveys. Ownership and DRIs (Directly Responsible Individuals). Dual Ladders (Chapter 15) On designing an IC and manager track that is vital to a  healthy engineering organization culture . Building a career progression framework. Touching on good topics like switching between tracks and compensation. The Modern Workplace (Chapter 16) Diversity and inclusion - refreshing for a management book to mention it. So important! Pipeline, cultural issues, biases. Good suggestions from publishing pay, equal pay and others. Shift towards remote working: more relevant than the author would have imagined with COVID-19 happening. Work-life-balance: leading by example and protecting your team. Startups (Chapter 17) An honest, original and good overview of both opportunities at a startup, as a manager, and the risks. \"Remember that start-up experience is highly sought after because being impactful in that environment involves being enterprising, self-motivated, collaborative, and quick to learn.  Even if the start-up itself doesn‚Äôt work out, your next gig will be all the better for it .‚Äù  ‚Äî this is absolutely the case! Practical overview of where and why management is important. As someone who worked with one of the first managers at Uber, agree with the points (management mindset, help others grow, the management mindset).  \"Management doesn‚Äôt mean bureaucracy. Good management is a light touch and continued collaboration. This doesn‚Äôt get in the way of anything. Being an excellent manager at a start-up breaks the stereotypical norm.\" The Crystal Ball (Chapter 18) Your career vision. Looking back, looking ahead. Performing the same exercise with your team. I found this one valuable, some good ideas. It runs somewhat similar when I ask people ‚Äúwhat would you want to be doing after Uber?\" A nice wrap-up for a practical, and hands-on book for managers. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/can-you-measure-developer-productivity/", "title": "Can You Really Measure Individual Developer Productivity? - Ask the EM", "content": "\n             A reader asks a question that comes up at some point in every engineer's and engineering manager's career, where their manager, or the one above will pop the question. Can you measure engineering productivity? And if so, how can we measure it right now? They ask: I work as an engineering manager for a company whose non-technology leadership insists there has to be a way to measure the individual productivity of a software engineer. ¬†I have the opposite belief. ¬†I don't believe you can measure the productivity of ‚Äúprofessional‚Äù careers, or thought workers (ex: how do measure productivity of a doctor, lawyer, or chemist?). ¬†For software engineering in particular, I feel that metrics can be gamed, don‚Äôt tell the whole story, or in some cases, are completely arbitrary. Do you measure individual developer productivity? ¬†If so, what do you measure, and why do you feel it‚Äôs valuable? ¬†If you don‚Äôt and share similar feelings as mine, how would you recommend I justify that position to non-technology leadership? It's Just So Tempting Imagine you are in the shoes of the CEO. The person who pays for a developer's time. It would be really nice to be able to measure, wouldn't it? To know if that developer is doing good work, doing enough work, or just slacking off. If they're slacking off, we'd fire them and hire someone who works better. And since we could measure it, we'd interview in a way that measures this efficiency. No more problems! But if developer productivity can be measured, how is there not a single standard of measuring this in the industry?  Try to measure any one dimension, and you'll fail. Measuring lines of code is meaningless and leads to busywork. Number of tickets closed? People will get creative opening tickets, or optimize for the easy-to-fix ones. Number of commits per day? It will lead to small and frequent commits, but not more. Any single metric you give to people, it can - and will - be gamed. Teams Over Individuals Even if we had this magic formula to measure individual productivity, it would all go to waste when looking at teams. Productive teams can move faster and produce more value than the individuals themselves. Instagram: 13 a team of 13 building a company  acquired for $1B . Whatsapp: a team of 50 engineers  serving 900M users . Teams are an interesting thing. Put together three, high-performing developers, and with poor team dynamics and certain projects, that team might work worse than the three average ones combined. Do the same with three average performing developers, with the right dynamics and the right project, and they might do wonderfully well. Team dynamics play a large role in this, as does the team culture. Teams are where engineering managers come into play. An engineering manager is often just as expensive to hire as a senior developer. In fact, they are often someone who used to be a senior developer. From a purely financial standpoint, it only makes sense to hire one, if adding this manager results in a positive return. Taking a team of 8 developers, and adding the one manager, that team should perform better than a team of 9 developers . It makes little sense from math, but it actually works.  Google tried to prove that managers don't matter . Instead, they discovered that they make a huge difference that warrants hiring them - assuming they have the right traits. The right traits meaning being a good coach, empowering teams, creating inclusing environments, being results oriented, being good communicators and  five others . Once you have an engineering manager in place, they need to be accountable for the team's performance. The team should perform better with an engineering manager, than without one. If there are performance issues, they should spot it. When someone is doing exceptionally well, they should also notice this and help  promote this person to the next level . Why Do We Need To Measure? We went on a tangent with teams, so let's get back to the original question that management wants to know: how to measure individual developer productivity. But there's an even more important question behind this ask. Why  does management feel they need to measure individual productivity? What problem would this solve?  What is the motivation here? What would happen with developers who score poorly according to the metrics measured? And why? Digging deeper might bring up completely different strategies. Maybe the company is doing poorly financially, and they need to downsize some parts of engineering. Maybe the leadership team is unhappy with the delivery speed. Maybe they feel that engineering is a black box, and they want finer control. But in all the above cases, getting a metric to measure will not solve the underlying problem. So figure out what that problem is. Let's Talk About Tech Organizational Culture In the  book Accelerate  by Nicole Forsgren, Jez Humble, and Gene Kim, the authors analyzed three distinct organizational cultures. Pathological (power/fear-oriented), bureaucratic (rule-oriented) and generative (performance-oriented). Here is a neat overview of the three of them: Westrum's Typology of Organizational Culture, from the book  Accelerate Why is organizational culture important? It's because it can predict the performance of the organization: \"We hypothesized that culture would predict both software delivery performance and organizational performance. We also predicted that it would lead to higher levels of satisfaction. Both of these hypotheses proved to be true.\" Performance-oriented cultures do better than rule-oriented or power-oriented ones,  according to the research cited in Accelerate. So if your organization wants to measure individual performance just to be able to put some more rules in place based on this, then we are likely talking about a bureaucratic organization. This type of organization will fare worse than a performance-oriented organization that is focused on overall outcomes. Things We Can Measure As a hands-on engineering manager, there a  lot  of things that you can measure to observe on the team. These go from the number of commits, average commit size, time to review, number and frequency of code reviews, time to merge pull requests to the main branch, and so on. None of these metrics are helpful by themselves, but together, they can paint a picture, and draw attention to places that could be problematic. And all of them only make sense in the context of the team. For example, is one of the developers taking 3x as long to merge their changes, and do they get 3x as many code review comments as others? If they are a new joiner, this is expected. But if they are a veteran on the team, maybe there's something other going on there? Similarly, looking at these numbers can help identify top performers who are going over and beyond with code reviews, on top of their work. You can spot brewing conflicts by reading through pull requests with lots of back-and-forths. There's a wealth of data to look at: but none of it is useful without context.  Tools like Velocity or Pluralisght Flow and others expose much of this data: but they will never be able to deliver the context. For example, you might see that the number of commits and code reviews has dramatically dropped from an engineer. But when digging in, it might turn out they were pairing with team members, speeding them up, mentoring them, and adding long-term value outside the sprint. You won't be able to tell any of this until you look behind the curtain. There are a lot more things we can measure, though, at the team level. Like the output of the team. What has the team shipped? What was the business impact? How was the quality: how much rework was needed afterward? And, of course, let's not forget about the measurable things about the team. How is morale? What about attrition? How are people growing professionally: are they getting promoted? How do Top Tech Companies Do This? We've explored what you can and cannot measure. So how to the likes of Google, Facebook, Stripe, Uber, Airbnb and other large or small, but innovative tech companies and startups measure software engineering performance? All tech companies  with good developer  culture give performance feedback based on the competencies and levels they define for engineers.  These companies have a career progression, or competencies framework, that clearly define expectations for each level. Some of these progression frameworks can be browsed  on Progression.fyi . Engineering managers give feedback on an ongoing basis, and have more formal reviews every 6-12 months. On these  performance review sessions , they'll give clear feedback if the engineer is below, meeting, or above expectations.  So how does this tie to measuring performance? Anything you want to optimize for, should be part of these competencies expectations. Do you expect senior engineers to ship complex projects end to end: meaning planning, estimating, coding, rolling out and listening to customers? Add it in. What about a junior engineer - what is the expectation compared to a senior? Go through the exercise, and take inspiration from the  existing progression frameworks . Define what you want to set as a baseline - and thus, what you'll be levelling against. If you set out to do this, I recommend reading the Dual Ladders chapter in the  Become an Effective Software Engineering Manager book  by James Stanier. Getting competencies right is time-consuming and hard. When doing so, the \"core\" of the tech team should be involved: people who have been around at the company for long enough to understand what should, and should not be encouraged. Once these competencies are crafted, you also need to keep them up to date. If this all sounds like a lot of work: it is. But this can set the focus on what engineers start optimizing for, so you want to get this right. Non-technical leadership: fight, convert or flight When you're an engineering leader who reports to someone non-technical, and you start being challenged on things like measuring people's performance, you probably have a trust issue. The non-technical people don't understand what is happening, and they want more information. Once they have more information, they'll start making decisions if they don't trust you. Once they start making the decisions - welcome to being micromanaged by a poorly qualified manager. You need to resolve this trust issue before it consumes you. I've seen this happen with several of my peers, who were managers or senior managers in an organization that wanted to be a tech company but was missing tech leadership. They hired tech leaders, only to report to non-technical people, who failed to give trust upfront.  \"Why do the developers come in late, when everyone on accounting starts at 9am on the dot?\"   \"Why should we do a hackathon when it takes away time from product development?\"  This and similar challenges were common. Good engineering teams need autonomy to operate well - as do their engineering leaders.  You either need to get this autonomy or accept that you won't be in charge: the business will be. And know that in an environment that will be bureaucratic at best, and pathological at worst, you and your team will fail to live up to your true potential. Fight or flight - and good luck with the good fight. Note: see another  answer to the exact same question from Charity Majors , cofounder of  Honeycomb . And see the  piece from Martin Fowler  on (not) measuring developer productivity. \n\n               \n                 \n                  This post is part of the  Ask the Engineering Manager series . Have a question on career growth, as a software engineer or engineering manager?  Ask it here . Read other parts of the series  here .\n                 \n               \n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-cheetah-software-engineer/", "title": "The Cheetah Software Engineer", "content": "\n             The Cheetah is a software engineer who is first and foremost very curious  and  blazing fast. The two are connected. They approach everything with an \"interesting, let me look into it\" type of mindset. And as learning and understanding is second nature, they take in new information very quickly. And they build new solutions blazing fast. This includes coding, setting things up, rolling things out, and the lot. It includes learning about how products and the business works - it should be little surprise that Cheetas are  very product-minded engineers . The Cheetah is not only fast but works with high quality. By the time you double-check their work, the Cheetah has already inspected, understood, and followed all the best practices in the given codebase, and there's little you can add to it. And when you do find something to add, they take the feedback with curiosity. \"Ah, interesting, let me look into this\". Either they'll understand why they should do it differently, or they'll gently push back, and have you explain that... well, yeah, it didn't make sense the first time. The Cheetah always works on multiple things. While everyone they are working with is impressed by the speed at which they work, most people don't realize that Cheetah is working with three other people on a similar problem, the same week. And those other people have exactly the same feedback on the Cheetah. Multitasking is a given, as the Cheetah just can't stay idle. And projects, at larger companies, move at different speeds, during different phases. So the Cheetah will be giving feedback  on an RFC , helping a team plan their next project, coding their main project, and another side project they just picked up. Because the Cheetah is so curious, and they work on so many things, sooner or later, they become the domain expert on a key area for the company. This area is usually something that started out as niche but became critical to the organization or the company. Without doing it deliberately, they wrote the key pieces of software that became widely adopted. Now no one else understands how they work, as much as the Cheetah does. This could be things on scalability, things on security, on performance, or other hard problems. And this is not because they are hoarding anything: in fact, they probably even wrote documentation on how the whole thing works. It's just that no one is as passionate to spend hours and days to understand something... that has already been correctly implemented. When managing a Cheetah, the best advice is to be clear on priorities: what the number one and two priorities are for them, and for the team. Then, get out of their way and release their potential, and see them conquer not only the main priorities, but the additional other things they might find on the way. If you try to cage them - basically, micromanage them - it won't end well for anyone. And why would you do so? Everything that you ask from them, they already do it quicker than anyone else on the team, and with similar quality. And on top of this, they are quietly helping others, noticing and solving problems. Also, listening to the Cheetah is one of the best things you can do. When you're their manager, just ask them to tell you all the things they are doing. You'll learn far more about the organization and the problem areas. You'll also grow a newfound appreciation for the Cheetah. How can they keep up with so many things: information that you're unaware of, as a manager? They have connections with teams and engineers that you don't, and they are pinged directly by people who would not ping their managers. The Cheetah will help any supportive manager spot collaboration opportunities early on - though by the time they mention it, they're halfway done solving the problem already. How is the Cheetah so well connected in the workplace? It's because they're not only curious and fast, but also very humble. No one will describe the Cheetah as \"pushing their own agenda\". When the Cheetah seems to push something, it's out of curiosity than anything else. And they care little about credits. They are working on so many parallel things that they are relieved when they can have someone take on the finishing of the work, and they'll call out the other people for doing a great job. It's fascinating to see how this snowballs. Engineers open up to the Cheetah, and have them involved early because they know they can only win. And people also start to notice how when the Cheetah is around, the teams and projects tend to move faster. And so the Cheetah is involved in more things, which their curios nature immensely enjoys. Because the Cheetah is so efficient and so well connected, the question of whether they should become a manager will inevitably come up. This is a terrible idea. The Cheetah most likely has already tried it and hated it passionately. While they are unparalleled in solving problems on their own and might be okay mentors, working with a team is just so... slow. Unsatisfying. It doesn't scratch their itch to create things. Cheetahs are extremely rare in the workplace. You'd think this is because they prefer working at startups over larger companies. Interestingly enough, Cheetahs almost always start small, but they just don't like the constant, forced startup grind, where they have no time for their natural curiosity. They usually end up at medium to larger tech companies, in a team and organization that valued their \"Cheetah-ness\" and doesn't try to use them as mules, but also doesn't want to train them to be a well-behaved dog. Even so, there are very few Cheetahs out there: I've worked with less than a handful of them over more than a decade. And this is where one of the biggest weaknesses of the Cheetah come into play. It's how they're unable to mentor others to become Cheetahs like themselves. Many of their managers will have asked them to  mentor and coach other developers  to be faster, and work better, just like them. The Cheetah gave it an honest try, but it never really works out as you'd hope. After all, how do you teach a never-ending thirst for learning new things, combined with the inner urge to get things done quickly? But while the Cheetah can't mentor or coach people: they can inspire them. You do want people to work side-by-side with the Cheetah, to see how the Cheetah works, and how they get things done quickly. The Cheetah is a team player and is always open to explaining things: so give pair them with junior people, so they see first-hand what good work and great speed looks like. The Cheetah won't mind. As long as they can keep up. Photo credit :  Cara Fuller \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/data-structures-and-algorithms-i-actually-used-day-to-day/", "title": "Data Structures & Algorithms I Used Working at Tech Companies", "content": "\n             Do you actually use data structures and algorithms on your day to day job? I've noticed a growing trend of people assuming algorithms are pointless questions that are asked by tech companies purely as an arbitrary measure. I hear more people complain about how all of this is a purely academic exercise. This notion was definitely popularized after Max Howell, the author of Homebrew, posted his Google interview experience: Google: 90% of our engineers use the software you wrote (Homebrew), but you can‚Äôt invert a binary tree on a whiteboard so fuck off. ‚Äî Max Howell (@mxcl)  June 10, 2015   While I've also never needed to use binary tree inversion, but I have come across everyday use cases of data structures and algorithms when  working at Skype/Microsoft, Skyscanner and Uber . This included writing code and making decisions based on these concepts. But for the most part, I used this knowledge to understand how and why some things were built. Knowing these concepts made it easy to understand design and implementations referencing these. This article is a set of real-world examples where data structures like trees, graphs, and various algorithms were used in production . I hope to illustrate that a generic data structures and algorithms knowledge is not \"just for the interview\" - but something that you'd likely find yourself reaching for when working at fast-growing, innovative tech companies. If you want to buy one book that teaches you everything you need to know for the majority of interviews,  Grokking Algorithms  is hands down the best guide. Note that none of the below links are affiliate links or sponsored. See  my ethics statement  on the lack of such links. I've used a very small subset of algorithms, but almost all data structures. It should be of no surprise that I am no fan of algorithm-heavy and non-practical interview questions with exotic data types like Red-Black trees or AVL trees. Never asked these, and never will. You can read about what I think about these interviews at the  end of this article . Still, there is lots of value in being aware of what options for basic data types they can choose to tackle certain problems. With this, let's jump into examples. Trees and tree traversing: Skype, Uber and UI frameworks When we built Skype of Xbox One, we worked on a barebones Xbox OS, that was missing key libraries. We were building one of the first full-fledged applications on the platform. We needed a navigation solution that we could hook up both to touch gestures and to voice commands. We built a generic navigation framework on top of WinJS. To do so, we needed to maintain a DOM-like  graph  to keep track of the actionable elements. To find these elements, we did DOM traversal - basically, a  tree  traversal - across the existing DOM. This is a classic case of  BFS  or  DFS  (breadth-first search or depth-first search). If you're doing web development, you already work with a tree structure: the DOM. All DOM nodes can have children and the browser renders nodes on-screen after traversing the DOM tree. If you are searching for a specific element, you can use built-in DOM methods to find it - such as getElementById - or you could implement a BFS or DFS search to go through all the nodes, similar to how it's done  in this example . Many frameworks that render UI elements use tree structures behind the scenes. React maintains a virtual DOM, and uses smart  reconciliation  - a \"diffing\" algorithm - to deliver great performance, by only re-rendering parts of the screen that's changed. Ryan Bas visualizes this process  in his writeup on React reconciliation .  Uber's mobile architecture,  RIBs  uses trees as well - similar to most UI frameworks that render elements in a hierarchy. RIBs maintains a RIB tree  for state management , attaching and detaching the RIBs that need to be rendered. When working with RIBs, we would sometimes sketch where the new RIBs would fit in the hierarchy, and discuss whether the RIBs in question should have views - making it a part of the view hierarchy - or just manage state. State transitions in an example RIBs use case. See RIBs documentation and code  here . If you ever find yourself needing to build visualization of hirearchical elements, a common approach is to use a tree-like structure, traverse the tree and render the elements you visit. I've come across many internal tools that use this approach. An example is the RIBs visualization tool built by Uber's Mobile Platform team, that you can see in a demo  in this video . Weighed graphs and shortest paths: Skyscanner Skyscanner finds the best deals on airline tickets. It does this by scanning all routes worldwide, then putting them together. While the nature of the problem is more on crawling, and less on caching - as airlines calculate the layover options - the multi-city planning option becomes the  shortest path problem . Multi-city was one of the features that took Skyscanner quite a bit of time to build - in all fairness, the difficulty was more on the product side, than anything. The best multi-city deals are calculated by using shortest path algorithms like Dijkstra or A*. Flight routes are represented as a directed graph, with each edge having a weight of the cost of the ticket. Calculating the cheapest price option between two cities was done via an implementation of a modified  A* search algorithm   per route. If you're interested in flights and shortest paths, the article on implementing the shortest flight search path using  BFS   by Sachin Malhotra  is a good read. With Skyscanner, the actual algorithm was far less important, though. Caching, crawling, and handling the varying website load were much more difficult things to crack. Still, a variation of the shortest paths problem comes up with many several travel companies that optimize for price based on combinations. Unsurprisingly, this topic was also a source of hallway discussions here. Sorting: Skype (kind of) Sorting is an algorithm family I rarely had an excuse to implement or needed to use in-depth. It's interesting to understand the different types of ways to sort, from bubble sort, insertion sort, merge sort, selection sort and - the most complex one - quicksort. Still, I found that there is rarely a reason to implement any of this, especially when you don't need to write sort functions as part of a library. At Skype, I got to exercise a bit on this knowledge, though. One of the other engineers decided to implement an insertion sort for listing contacts. In 2013, when Skype connected to the network, contacts would arrive in bursts, and it would take some time for all the contacts to arrive. So this engineer thought it's more performant to build the contact list organized by name, using insertion sort. We had a back-and-forth on this, over why not just use the default sort algorithm. In the end, it was more work to properly test the implementation, and to benchmark it. I personally didn't see much point in doing so: but we were in the stage of the project that we had the time. There are definitely some real-world use cases where efficient sorting matters, and having control over what type of sorting you use, based on the data, can make a difference. Insertion sort can be useful when streaming realtime data in large chunks and building realtime visualization for these data sources. Merge sort can work well with divide-and-conquer approaches if it comes to large amounts of data stored on different nodes. I've not worked with these, so I'll still mark sorting algorithms as something with little day-to-day use, beyond the appreciation of the different approaches. Hashtables and hashing: everywhere The most frequent data structure I've used regularly was  hashtables  and the  hashing function . It's such a handy tool from counting, to detecting duplications, to caching, all the way to  distributed systems use cases like sharding . After arrays, it's easily the most common data structure I've used on countless occasions. Almost all languages come with this data structure, and it's simple to implement if you'd need it. Stacks and queues: every now and then The  stack  data structure will be very familiar to anyone who has debugged a language that has a stack trace. As a data structure, I've had a few problems to use it for, but debugging and performance profiling makes me intricately familiar with it. It's also an obvious choice when traversing a tree depth-first. I rarely had to choose  queues  as data structures for my code, but I came across it plenty of times in codebases, code popping, or pushing values in it. A common use case is implementing BFS traversing of trees, where the queue data structure lends itself. You can also use queues for a variety of other use cases. I once read code scheduling jobs that made good use of  priority queues , running the shortest jobs first, using the  Python heap queue algorithm . Crypto: Uber User-entered sensitive information coming from mobile or web clients needs to be encrypted before sending through the network, only to be decrypted on a specific service. To do so, a crypto approach needs to be implemented on the client and the backend. Understanding crypto is interesting. You don't come up with a new algorithm - this can be one of the worst ideas to do. Instead, you take an existing, well-documented standard and the use the framework built-in primitives. The standard of choice is usually a part of  the AES standard . If it's secure enough to  encrypt classified US information , and there is no known, working attack on the protocol, AES192 or AES256 is usually a secure enough choice for most use cases. When I joined Uber, mobile and web crypto were already implemented on top of these primitives, giving me the excuse to look up details of the Advanced Encryption Standard ( AES ), Hashed Message Authentication Codes ( HMAC ), the  RSA  public-key encryption and others. Understanding how a series of encryption steps are provably secure was another interesting area. Between encrypt-and-MAC, MAC-then-encrypt, and encrypt-then-MAC, only  one of them is provably secure  - even though this doesn't mean the others are not secure. Implementing crypto primitives is rarely ever something you will ever need to do - unless building a brand new core framework. However, deciding on which primitives to use, how to combine primitives is a decision you might face - or have to understand why a certain approach was taken. Decision trees: Uber On one of the projects, we had to implement complex business logic in the mobile application. Based on half a dozen rules, we had to display one of several different screens. The rules were unusually complex due to a series of compliance checks and user choices that we needed to take into account. The engineer building this feature first tried to code the rules with a series of if-else statements, which got too complex. In the end, they decided to go with a decision tree, as it was easy to validate with product and compliance, reasonable to implement and easy to change, if needed. We needed to build an implementation for edges to execute rules, but this was about it. While we could have saved implementing this tree with a different approach, the team found this solution to be easier to maintain, going forward. Here's how the decision tree looked like - the edges being results of rules executed (either binary outcome or value ranges) and the leaf nodes marking what screen to transition to. The structure of a decision tree we built to decide what screen to show, following a complex set of rules. Uber's mobile build system, called SubmitQueue, also utilizes decision trees built on the fly. The Developer Experience team had to solve the difficult problem of hundreds of mobile merges happening each day, with each build needing around 30 minutes to run - compiling, the running unit, integration, and UI tests. Parallelizing the builds was not a good enough solution, as two builds would often have overlapping changes, and a merge conflict would occur. In practice, this meant sometimes engineers would have to wait 2-3 hours, rebasing and staring the merge process again, and hoping there would be no conflict. The Developer Experience team took an innovative approach by predicting merge conflicts and queued builds accordingly, using speculation graphs. Speculation graphs are very similar to binary decision trees: SubmitQueue uses a speculation tree - a binary decision tree - annotated with prediction probabilities for each edge. This approach determines which set of builds to to run in parallel, to improve turnaround time and throughput while keeping master green.  Read the full paper here . There are a  lot more details in this whitepaper  written by engineers on the Developer Experience team who built the solution - and this paper is a great read. Adrian Colyer also has a nice,  visual analysis on the approach . The result was a much faster build system that optimized build time, and made the lives of hundreds of mobile engineers far more pleasant. Hexagonal Grids, Hierarchical Indexes: Uber This last project is one I've come about purely based on stumbling across it. I learned about a new data structure: hexagonal grids with hierarchical indexes. One of the most difficult and interesting problems to solve at Uber is how to optimize the pricing of trips, and the dispatching of partners. Prices can be dynamic, and drivers are constantly on the move.  H3  is a grid system engineers built to both visualize and analyze data across cities, at an increasingly granular level. The data - and visualization - structure for this is a hexagonal grid with hierarchical indexes, and a couple of internal visualization tools are built on top of it.  Subdividing regions with hexagons. Read a thorough article  here . The data structure has specific indexing, traversal, hierarchical grid, region, and unidirectional edge functions,  detailed in the API reference . For a more detailed deep-dive, see the  article on the H3 library , the  source code , or the  presentation  on how and why this tool was built. What I really liked about this experience is learning that creating your own specialized data structures can make sense in a niche area. There aren't many use cases where hexagonal grids with hierarchical indexes would make sense beyond combining mapping with various data levels within each cell. Still, if you're familiar with some data structures, understanding this new data structure is much easier - as it would be for you to design yet another data structure for a similarly specialized need. Interviews and algorithms and data structures Those were the highlights of the actual data structures and algorithms I've come across professionally between multiple companies and many years. So let's go back to the original tweet that complained about asking things like inverting a binary tree on a whiteboard. I'm on Max's side on this one. Knowing how complex algorithms or exotic data structures work are not something you should need to know to work at a tech company.  You should know what an algorithm is, and should be able to come up with simple ones on your own, like a greedy one, a breadth-first or depth-first search or a simpler sorting algorithm. You should also know about basic data structures that are pretty common, like hashtables, queues, or stacks. But more complicated algorithms like Quicksort, Dijkstra, A* and more advanced ones are not things you'd need to memorize: you'll have a reference for this. The most I did with algorithms beyond sorting was look them up and understand them myself. Same with exotic data structures like Red-Black trees or AVL trees. I've never had to use these data structures. Even if I did, I would look them up again. I have never asked questions that needed this kind of knowledge to solve them, and never will. I am all for asking practical coding exercises, where there are many good solutions, from brute force or greedy approaches to potentially more sophisticated ones. For example, asking to implement a justify text function  like this question  is a fair one: it's something I did when building a text rendering component on Windows Phone. You can solve this problem just by using an array and a few if/else statements, without any fancy data structures. The reality is that many teams and companies are going overboard with algorithmic challenges.  I can see the appeal of algorithmic questions: they give you signal in 45 minutes or less, and questions can be easily swapped around; thus, there is little harm if the question leaks. They are also easy to scale when recruiting, as you can have a question pool of 100+ questions, and any interviewer can evaluate any of them. Especially in Silicon Valley, it is more and more common to hear questions geared for dynamic programming or exotic data structures. These questions will help hire strong engineers - but also result in turning away people who would have excelled at a job that doesn't need advanced algorithms knowledge. To anyone reading whose company has a bar to hire people who know some of the advanced algorithms by heart: think again if this is what you need. I've hired fantastic teams at Skyscanner London and Uber Amsterdam without any tricky algorithm questions, covering no more than data structures and problem solving. You shouldn't need to know algorithms by heart. What you do need is awareness of the most common data structures and the ability to come up with simple algorithms to solve the problem at hand, as a toolset. Data structures and algorithms are a toolset If you work in a fast-moving, innovative tech company, you will almost certainly come across all sorts of data structures and different algorithm implementations in the codebase. When you build new and innovative solutions, you will often find yourself reaching to the right data structure. This is when you'll want to be aware of the options to choose from and their tradeoffs. Data structures and algorithms are a tool that you should use with confidence when building software . Know these tools, and you'll be familiar with navigating codebases that use them. You'll also be far more confident in how to implement solutions to hard problems. You'll know the theoretical limits, the optimizations you can make, and you'll come up with solutions that are as good as they get - all tradeoffs considered. To get started, I recommend the following resources: Read up on the hashtable, linked list, tree, graphs, heap, queue, and stack data structures. Play around with how to can use them in your language. GeeksforGeeks has a  good overview on these . For coding practice, I'd recommend the  HackerRank Data Structures collection . Grokking Algorithms   by   Aditya Bhargava  is hands down the best guide on algorithms from beginners to experienced engineers. A very approachable, and visual guide, covering all that most people need to know on this topic.  I am convinced that you don't need to know more about algorithms than this book covers. The Algorithm Design ¬†Manual  and  Algorithms: Fourth Edition  are both books I picked up back in the day to refresh some of the my university algorithm class studies. I gave up midway, and found them pretty dry, and not applicable to my day-to-day work. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/how-engineering-can-work-better-with-product-managers/", "title": "Ask the EM: How Can I work Better with My Product Manager, as an Engineering Lead?", "content": "\n             A tech lead asks: As an engineering lead, I'm struggling to come to a good working relationship with my product manager. We seem to overlap on who is doing what, but some things get dropped as well. I feel I am doing work that they really should be picking up - and I am missing having a product vision coming from them. What are things I can do to get to a better relationship, and work more efficiently with the product team? Sincerely, A struggling engineering lead Anyone who has worked with product managers has probably been here. I have yet to see a truly harmonious relationship from the get-go, where both product managers and tech leads or engineering managers felt that everything was going well. And this is to be expected. There is a natural tension between deciding  what and why  to do (product) and  how  to do things (engineering). What a healthy product - engineering relationship looks like Everyone will have their view of how the product-engineering setup works well. For me, four traits are the must-haves for me to rate my relationship with product as \"strong\" are these. 1. Two people, one voice inside and outside the team.  Teams, where product and engineering are aligned consistently, say the same thing. There's a lot of behind-the-scenes work to get here, but it's worth it. When engineering and product are aligned, they can fill in each other. This can happen in meetings, stakeholder discussions of when going on holiday. And every time you represent the other side, this bond grows stronger. 2. Frequent communication . Both PMs and engineering leads get exposed to large amounts of information. They both have to keep multiple stakeholders happy. For an engineering lead, much of this will be inside-facing, making sure engineers on the team are motivated and doing well. For product managers, they will often work more with the business. For a strong relationship, the engineering lead and product manager need to talk frequently. I'm a fan of having a regular, weekly catchup in some shape or form. 3. Empathy towards the other person . The work for product managers and engineering managers is very different. It's challenging in different ways. You need to build empathy towards the demands of the job for the other person. For example, did you know most product managers can't make decisions all by themselves? Here's  14 other facts that might surprise you  about product managers. 4. A clear understanding of where the roles start and end - and where they need to lean on the other person.  There will always be some level of overlap between the roles. However, I have seen many product-engineering pairs not talk about what they expect from the other. This non-communication then led to frustration. People were expecting the other person to something that they never agreed on. A setup that (usually) works well In a fast-paced, product-focused engineering environment where  product-minded engineers thrive , I've seen the following setup work well: Product owns the \"why\" and \"what,\" all the way to the product spec being finalized . They drive the product strategy, product roadmap, and all tactical parts to have a blueprint on what engineering should build. This itself will be a large bulk of work. It starts with working ahead with the business, ranking ideas, estimating their business impact - sometimes forecasting with data science -, building a business case, and coordinating designs with designers. In the late phase of the process, pulling in engineering for finishing parts of the spec is their responsibility as well - making sure we don't define something that is needlessly challenging to build on the engineering side. They formalize requirements with a spec, often referred to as the  PRD (Product Requirements Document) . In small companies, this will be a lightweight doc. At places with many stakeholders, it could be something larger that needs signoffs from teams across the business. Here's a  list of PRD templates from companies across tech . The engineering lead owns executing on the product ideas and ensures that the team stays healthy and runs well.  There's a lot more to this than just estimating the product work, breaking it down, then getting it done via sprints. It also means owning the technical roadmap, and keeping engineering tradeoffs - tech debt - at bay. It's a juggling act in deciding how much capacity to spend on product work, versus maintenance and keeping the lights on. How to respond to the odd \"house is on fire\" outage, or inbound engineering request that \"only need two hours from an engineer\". It's keeping tabs on people's motivation, wellbeing, and career trajectory, supporting them in their growth and  promoting people to the next level  as they progress. Not to mention collaborating with other teams and working ahead with the business. I'll stop here - there are  books going deeper on what engineering managers do  if you'd like to read more. But who owns the work beyond the code being complete?  The - often staged - rollout? A/B testing? Keeping tabs on customer usage and feedback? This will vary team by team, but you should clarify it. I've seen data science take this one, as have I observed the PM owning it. I also encourage engineers on my team to own this part, growing their product-minded muscle. Whichever you choose, just decide upfront, so no one will drop the ball. Put your finger on the biggest problems So we've talked about the ideal setup. You probably don't have this going. But what is wrong? Or, to put it differently: what is most wrong? Figure out what the problems really are. Is it that the PM is not present with the team meetings? Is it the lack of strategy? That things they commit to don't get done? That things fall through the cracks? That scope keeps changing after staring work? Something else? Make a list of the problems, and what the impact of these problems are. Then prioritize this list  - like a good product manager would. If the scope changes mean that the engineering team is perceived as being slow, that could be a bigger problem to tackle for you than not having a two-year product vision. Similar, if it seems you cannot count on your product counterpart to keep their promises, that is probably more important to address than the PM not being on some of the team meetings. Now that you have this list: work through them with your product counterpart. Assuming you have regular catchups, you can bring these up, one at a time. What if you don't yet have such a setup? Put one in place. Having a good relationship is not just important for you: it's vital for the whole team. A checklist of activities Here's a list of things I suggest engineering leads do if they are not doing so with their product managers. How many of these are you doing already? Have regular 1:1s with your PM  that you both treat as important. Have topics you touch on, always. Have some agenda that mixes strategic topics and tactical things. Strategic things like how the product vision is going along or what the tech debt paydown strategy is. Tactical things like who is working on what the next week, and if the team have enough things scoped in the backlog for the near future. Agree on where each role starts, and where the other ends . Who is responsible for getting the spec together? Who owns rollouts? Who should communicate with business stakeholders? Who does project management with design, who with engineering? Lead the team together.  When you're on holiday, can the PM step in to \"lead\" the team? And the other way around? Do you disagree in public or always say the same things, and discuss differences in private? How can you get to the two people, one voice setup? Build empathy . Read  15 things you should know about product managers  by  John Cutler . How much of this is true about your PM? Talk it through with them. Do you talk about the challenges of your PM and wins? Do you ever talk about their career goals - and how you might be able to help? Do you share the same with them: challenges and goals you and members on your team have? Do a mini-retro  once in a while .  How is your relationship going? How is the team doing? What is the thing that bugs you and them the most? What if things don't get better? You might find yourself doing all of the above, but things not improving. For example, because whatever you agree on, your product counterpart doesn't follow through with. Or does something different. This can be frustrating. What do you do? Pull in help from elsewhere. If you've given what you have, and things don't work out, maybe you need advice from someone else. An obvious choice is to talk with a mentor - if you have one - or someone in your management chain. And have a chat with the manager of the PM, getting more context and sharing issues. When talking with their manager, be sure not to go behind the back of your peer. Only share issues that you have already discussed with your product manager. Be clear on the problems, the impact it causing for the team, and what you've tried so far that is not working. Hopefully, you'll get ¬†feedback that you can act on, and that changes the relationship for the better. Better product-engineering relationships, better teams A strong product-engineering lead makes all the difference for great teams. The lack of this never ends well. What are you doing to get on the same page with your product manager? \n\n               \n                 \n                  This post is part of the  Ask the Engineering Manager series . Have a question on career growth, as a software engineer or engineering manager?  Ask it here . Read other parts of the series  here .\n                 \n               \n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/my-unforgettable-uber-ride/", "title": "My Unforgettable Uber Ride", "content": "\n             After more than four years, I've decided to leave Uber. It's been a crazy, incredible, at times stressful, humbling, and ridiculously fun time. I've learned more here than I could have at any other place and I wouldn't trade this experience for anything. In 2016 it was \"full steam ahead\",  rewriting Uber's flagship app . Then, 2017 was an  incredibly turbulent  year and 2018 was a \"stabilising\" one. 2019 was the first time I've been part of an IPO from the inside, and 2020 brought the pandemic with  layoffs ,  Eats becoming bigger than Rides , and a bunch of other challenges. Here is my leaving email that I shared with my former colleagues: After four thrilling years that easily felt like ten, my Uber adventure is coming to an end. It‚Äôs been the most unlikely and fun of rides. I wouldn‚Äôt trade this time for anything. From Rider Payments, through Wallet / PEP and Web Payments, to Money Mobile Platform and Uber Pay teams, here are a few things Uber has taught me:  Stick your nose into things and learn.  Do you read L5 High postmortems on incidents? ERDs outside your team?   Talk with anyone who is on Ring0? Chat with DS, PMs, recruiters, designers, ops every now and then? Introduce yourself to someone you don‚Äôt know at lunch, in the (pre-COVID) canteen? I learned so much from doing these. Coming from mobile, I re-read the  Gulfstream RFC  10+ times and dug into all the terms and systems described in the paper before I finally understood it. I had a newfound appreciation for systems challenges after going through postmortems like the  XPC outage  or  Core trip flows down . Underpromise and overdeliver.  Uber is overwhelming. The things you and your team should be doing. And it‚Äôs very common for things and people to slip. Push back. Commit to fewer things, and deliver - or over-deliver - on these very few ones. This is how you stand out - not by doing many things, but never better than average. Be an owner, not a renter.  Don‚Äôt complain: fix. Don‚Äôt ignore broken windows: mend them. When it‚Äôs really not you who can fix this, find the person that can. Do you wonder what the best way to advance your career is? It‚Äôs this approach. This is what got me into management, how I was able to create new teams, and the reason I had a blast working here every single day. Embrace change, then start taking more risks.  Uber is full of change. Either you see this as a threat or an opportunity. Always look for the opportunity and how you can ride on the wave. Once you‚Äôre used to change, and how to ride it, create your own changes, and take those risks. I became a ‚Äúproper‚Äù manager at Uber, which was also a steep learning curve. If you‚Äôre a manager - or are thinking of becoming one - you might find  my summary on these  interesting. Thank you for the war stories, the terrible oncalls, the frustration, the laughs,  the celebrations , the trips to SF, PAO, and NY, the Thursdays sanity testing, the late or early Zoom calls, the Google docs comments, the dinners, and night outs, the team name changes, and the chocolate cakes. When I moved to Amsterdam in 2016, I read a quote painted on a hotel wall that sums up what these four, intense years have felt like: ‚ÄúLike all great travellers, I have seen more than I remember, and remember more than I have seen.‚Äù Let‚Äôs stay in touch and please connect  on LinkedIn , if we‚Äôve not done already. As I move on to start my own adventure: thank you for everything. Uber on! üöÄ So, what next?  After more than a decade of being back-to-back employed, and a 8 years of working at tech companies during their growth phase - I'm taking a break from traditional employment. I'm spending the rest of the year finishing  my book on growing as a software engineer , and I'm validating startup ideas  on platform engineering . I've created my  \"Now page\" , and you can keep up to date with what I'm doing here. It's a nice feeling to switch over to  the maker's schedule  from the manager's one - at least for now. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/what-silicon-valley-gets-right-on-software-engineers/", "title": "What Silicon Valley \"Gets\" about Software Engineers that Traditional Companies Do Not", "content": "\n             I've worked at various tech companies: from \"traditional\" shops and consultancies, through an investment bank, to high-growth tech firms. I've also talked with software engineers working at startups, banking, automotive, big tech, and more \"traditional\" companies. This mix had a healthy sample of Silicon-Valley companies and ones headquartered outside this region. I've noticed that Silicon Valley companies consistently \"get\" a few things that their traditional counterparts fail to either understand or implement in practice  - especially in Europe.   These are practices that result in faster innovation at a company-level, better professional growth for engineers, and just better \"utilization\", for the better word for it. In turn, Silicon Valley companies can (and do!) pay higher wages, and they get more value out of the same person. In this article, I'll use the term  \"Silicon Valley-like company\"  to refer to modern companies who create high leverage with each software engineering hire, and who have traditionally been headquartered in Silicon Valley - though many newer ones no longer got started there. They are the kind of companies that are comparable in working output per engineer to the likes of Facebook or Google. They use similar methodologies and can often attract talent from other \"Silicon Valley-like\" companies. Here are the key things these companies \"get\" better than many others. 1. Autonomy for software engineers In \"traditional\" companies, developers get work items assigned to them - most often JIRA tickets. These tickets are vetted by the product - or project - manager, and they have most key details to do the work. And they're expected to do just that. There's little need for questions unless it's about clarifying a detail in the ticket. Join a \"SV-like\" company, and you'll see little of this. There are projects, and there are program managers and engineering managers. But for the most part, engineers are expected (and encouraged!) to figure out the \"how\" of the work, including making larger decisions. In some places,  each project would have an engineer leading it , who facilitates breaking up the work. At other places, engineering managers or senior engineers could do this work. Regardless of how it's done, all engineers are incentivized to look at the big picture, to unblock themselves, and to solve any problem they see. Engineers taking initiative is something \"SV-like\" companies celebrate. It's common to see services and features built that engineers suggested or have teams spend dedicated time paying off tech debt that people on the team advocated for. And it is uncommon for managers to tell engineers what exactly to do, to break down their work into small chunks or to micromanage them. People self manage. The expectation from developers at traditional companies is to complete assigned work. At SV-like companies, it's to solve problems that the business has.  This is a  huge  difference. It impacts the day-to-day life of any engineer. At traditional companies, the notion of devs do what they are told often ends up with a hierarchical setup. I've talked with people at a bank that had six levels of project management. Developers were at the bottom two. Decisions were allowed to be done from level three. Basically, those doing the work did not have a say - by design. Need I add that this bank was struggling with how their software department was (not) working? A hierarchical view of the world. Some traditional companies still work like this. Compare this with places where engineers are recognized to have the ability to solve problems on the ground better than anyone else. Leaders know that it's in the best interest of the business to share all relevant business context with them, and give space for execution. Passing context down and giving autonomy to make decisions is how efficient organizations pull ahead. 2. Curious problem solvers, not mindless resources Traditional companies tend to think of an engineer's time of 8 hours to spend on coding. Any time that is not in front of a computer, and doing coding, is often thought of as waste. And they justify this with the high cost. I've heard someone describe the reasoning like this: Software engineers get paid more than many other functions. We need to utilize them accordingly. We can't have them run empty. \"SV-like\" companies think of software engineers as the people best suited to solve the problems that the organization has. They hire not only for technical skills but communication and problem-solving ability. Their thinking is a bit more like this: Software engineers are among the highest-paid people in our company. This is because they can bring some of the highest leverage through coding and problem solving. We want to expose them to the business, so while they are doing their \"normal\" work, they can also find more impactful opportunities for the business. In practice, a motivated engineer easily makes multiple times the impact of a \"factory worker\" who is just told what to do.  In the worst case, when the work spec is clear and correct, both people have the same output. However, engineers who are encouraged to solve problems will often stop and think before picking up work, identifying opportunities for more impact. Here's a couple of conversations I've had at \"SV-like\" companies after asking an engineer if they can do X: \"I did a bit of digging, and though we could do X, if we can reduce the scope by this feature that won't make a difference for the business impact,  we could ship this without any code changes , just changing a few config files.\" \" I am concerned if we could ship the project, and think we should put a pause on it . I checked what our competitors are doing, and one of them launched a similar feature, but reversed it, after they got investigated by the regulator. Have we checked with the legal team if we could ship this at all?\" \"I looked at our backlog, and project Y is really similar.  If we combined project X and project Y, we could ship two things , with very little overhead.\" \"We could either build this project on the legacy infrastructure now, but then we have migrate to the new infra that will be complete in a month.  Can we delay the project by a month , until the new infra is ready, to avoid double work? If there's no strong business reason to launch in a month, I'd really suggest we do this\" In an environment that encourages problem solving and results over following directions, better decisions are made. 3. Internal data, code, and documentation transparency Transparency is big at SV companies. Though there are exceptions - Apple or Palantir supposedly taking great care to give as little information to engineers as needed - I've observed most \"SV-like\" companies sharing as much as they can. They do this in a way that is in line with GDPR, PII, and other regulations that apply to them. Employees - not just engineers - often have access to realtime business metrics , and data sources to write their own queries and create custom reports. At Skyscanner, we would get a daily summary email on the daily revenue breakdown, every day. At Uber, there would be a weekly growth newsletter with similar metrics, weekly. As companies grow and as they go public, a consolidation of this information happens. Still, engineers still have access to business data for their organization that helps guide their decision making. At traditional companies, much of this does not exist. Engineers get the spec, and the higher ups will know why something is decided - at least, that's the idea. 4. Exposure to the business and to business metrics At SV companies, it's expected that each team member understands what part of the business their work impacts and how. The team goals are rarely just to ship a feature: it's to decrease customer churn by 2% by launching Feature1, or to increase revenue by a predicted $10M/year by shipping ProjectX. SV engineers are encouraged to interact with the rest of the business  and build relationships outside just fellow engineers. In practice, more senior engineers usually end up doing this: from having 1:1s with product managers to taking part in customer research sessions. But I've seen new joiner engineers work directly with business stakeholders without anyone blinking an eye. In contrast, traditional companies often make it impossible for developers to interact with the rest of the business . This is not how it's presented, though. They'll say \"we want to shield our engineers from distraction\". But I've heard stories of an engineering manager wanting to invite team members to a product presentation, and the product manager shutting this idea down. \"We need them to work, and we can't afford to be distracted.\" is a common excuse. When an engineer at a traditional company builds relationships outside their team, they'll often get told they are \"not focusing enough\", \"wasting time\" or doing things that is \"not their business\". This kind of \"unusual\" activity would often be recorded as a negative in their performance review. It sounds crazy to me that companies would take some of their best-positioned problem solvers, and force them into the \"you just write code\" box, but it's happening. And the same companies who try to measure engineering productivity with metrics related to lines of code or commits wonder  why their engineers are not product-focused or product-aware . 5. Engineer-to-engineer comms over triangle-communication When you're an engineer and have a question about how another team does something, you go about it differently at traditional, and at \"SV-like\" companies. Traditional companies will encourage hierarchical communication.  This is both to \"shield\" engineers, and also because managers in these places prefer to be information hubs, and not give up control over this part. Here's how a question or ask to another team would often go: Communicating in a \"traditional\" / hierarchical organization \"SV-like\" companies encourage engineer-to-engineer communication, cutting out middlemen. This is faster in all cases. And in cases where the engineer on the other team cannot help, this process can fall back to the \"traditional\" model of the manager helping out facilitating the discussion: Communicating done (far more) efficiently 6. Investing in a less frustrating developer experience Developing in 2020 can be frustrating. Not because of writing code - that's the easy part! - but the surrounding things. Setting up dependencies. Deploying to production or test environments. CI/CD. Monitoring and alerting. These are not that big of a deal while you're on a team of a few people. Still, they'll come up every now and then. However, the developer experience becomes much more frustrating as the company grows . It starts with smaller things like the build time getting slower, dependencies adding up, or changes that need to be made across services. It continues with figuring out which team owns which service, small migrations blowing up by impacting many teams, all the way to redefining the architecture across all of engineering. Frameworks and tooling change quickly, and the tooling rarely keeps up. Companies that care about engineers focusing on solving problems quickly set up various infra, platform and SRE teams, who reduce the developer experience churn. While it might sound counter-intuitive to hire software engineers who only focus on other software engineers working faster: at many places, it's not. It's a great return that helps these companies move faster, and developers stay happier. (This also happens to be an area I'm quite interested in, and where  I'm validating some startup ideas  - if you have thoughts on this space, hit me up). 7. Higher leverage --> higher {autonomy, pay} Any SV-like company who wants to compete in pay for engineers needs to create high leverage where the value brought in by these engineers exceed their salaries. This leverage can come both at scale, and at growing the business. Reducing time wasted on things like unnecessary comms, and tooling all add to this leverage. Giving enough autonomy for engineers to (over) contribute to the business is how you can keep this leverage high. What much of Google, Facebook and other established companies are paying  high salaries today , is the leverage of scale. An engineer at one of these companies often builds features used by many millions of customers. This kind of leverage and value-add pays for itself. Higher autonomy --> higher leverage --> higher value created --> higher pay (all while the company still makes a profit) What SV-like startups do is leverage software engineers in growing the business . This is how a software engineer at Fog Creek software  implemented a million-dollar idea for ad classfields . It's how a few engineers and designers pushed ahead  to build the Like button at Facebook . The business impact of this button is well in the billions: allowing Facebook to (re-) target ads, and \"track\" users outside of the Facebook site. Had any of the people mentioned above worked at a \"traditional\" environment, their ideas would have stayed exactly that: ideas. \"SV-like\" startups incentivize engineers to come forward with business ideas, and implement them, while they are at it. Everyone is better off for it: the people with the idea and the business. Companies that leverage engineers well will have no trouble paying close to the top of the market, or above it. Basecamp  is a good example  of non-\"Big tech\" company that leverages engineers well, meaning they can also pay top of the SF market for base salary, globally, while staying profitable. Tech is a profit center, ¬†not a cost center Another way of looking at the differences between how \"SV-like\" companies operate is how they treat tech as a profit center, not a cost center. Looking at 12 most valuable companies in the world as of July 2022, there are trends that are visible: The world‚Äôs 12 most valuable companies as of July 2022, and whether software engineering is a profit center. Correlation or causation? I investigated  in this article . Read more about whether I think there is a correlation or causation between treating tech as a profit center and higher than normal growth in my article  Profit centers vs cost centers at tech companies . The biggest overall difference There's a lot of aspects to differences in how different type of companies approach their relationship to engineers. The biggest one is this, though.  \"SV-like\" companies think of engineers as value generators, and creative problem solvers. Traditional companies think of them as factory workers. This divide in thinking is what leads to forward-thinking companies being able to both pay engineers better, while giving them more autonomy. A factory worker has a very well-defined added value, that you can plan for. A creative problem solver, on the other hand, can bring in 10x that value, when utilized properly. It makes sense to pay them more, give them more freedom, and as this is how you enable them to contribute more value business value. Once you've worked in a SV-like environment, you also struggle to go back to the \"traditional\" workplace, where everyone has their well-defined role, and eyebrows are raised when you step out of it. As a software engineer, pleasant places to work at is where you are a problem solver, not a factory worker. Which one are you today? Translations of this article:  Chinese on CSDN \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/what-becoming-an-engineering-manager-is-like/", "title": "What Becoming an Engineering Manager Feels Like", "content": "\n             A senior engineer who is on track to becoming an engineering manager for their current team asked me what it's really like when you become the engineering manager. When you get the title change, and you turn up the next day as the manager of the team. What does it  feel  like? In the past, I'd talk about all the different things that  change . The change of routine. Meetings filling up your calendar. Coding less. The many one on ones. Getting access to information that you did not have before. Doing admin and other chores you did not know existed. But this has nothing to do with how it feels that first time. It feels lonely. The other day, you had your team, and you were one of them. The next, you're the manager. You now have an invisible wall between you and  them . They're no longer the group you can share all your problems with. You can't just speak your mind without thinking. People act different when you crack that exact same joke you did in the past. While you have a team, it feels like you lost a part of your  real  team. And you don't have a new one. Not yet. Over time, this strange feeling will pass. You'll get the hang of things with your team, whom you get to know, in many ways better than you did before. You'll find a new group you can call your \"new\" team where no topic is off limits. Your first team. A group of managers in the org. A mentor or two, who've gone through a similar journey. You end up opening up to your manager far more than you expected you would. It feels odd. That now, as a manager, you have more in common with your own manager than you do with your directs. But when you start, it feels like when moving to a new city. Surrounded by many people, having many things to do. A new world to explore. But when the adrenalin rush wears down, you catch a break after the first few days or weeks and reflect on what it's really like: yes, it's exciting. You know it would be. But it's also something else. Unexplainably lonely. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/advice-to-myself-when-starting-as-a-software-developer/", "title": "Advice to Myself When Starting Out as a Software Developer", "content": "\n             As I look back to over a decade ago, there are a few things I wish I'd started doing sooner. Habits that could have helped made me grow faster and in a more focused way. This is the advice I'd give my younger self, who has just landed their first professional software engineering job. 1. Take the time to read two books per year on software engineering Every time I took the time to slowly and thoroughly read a recommended book on software engineering, I leveled up. By properly reading, I mean taking notes, talking chapters through with others, doodle diagrams, trying out, going back, and re-reading.  I wish I had read software-related books in my first few years as a developer . I only started doing this around year 5 of my engineering career. Books like  C# In-Depth ,  Clean Code , and  Javascript: The Good Parts  all helped me elevate my craft at the time. It's not about me recommending these specific books - some of them are dated by now, anyway. What I do recommend is looking for books that go deeper than what you know now. This could be a book on a specific technology, or on software engineering practices. When I read, I don't do it quickly. In fact, I do it rather slowly. I usually go a chapter or two in one sitting. I take notes or do highlights. When I'm done, I then recap and often discuss with others. I've also started  writing book reviews on this site , mostly to reflect on what I've learned. I've picked up these habits the past few years. They helped me grow faster as an engineering manager: and this habit would have served me well as an engineer. Looking for inspiration for books?  Here's the list of books  I've read and am reading. Why books over blogs, videos or talk? I'd actually say books on the side of those. Shorter formats tend to skim the surface compared to a book, for any topic. Books are in-depth, and well-organized knowledge. It takes me a few hours to write a post like this, but I've been working close to a year  on my book  on growing as a software engineer. I think of books as a form of slower, but more in-depth consumption. Don't be ambitious: one book every six months is already great. Pick a book, and spend the time to  properly  read it. And after you've read a book or two, I also recommend the book  How to Read a Book: The Classic Guide to Intelligent Reading . I'm serious about this recommendation. 2. Learn the language you use at work in-depth, to the very bottom I started coding using PHP and some level of JavaScript for part-time work. At university, I was taught C and C++, both of which I had little love for. For my first full-time job, I started doing C#. I knew a lot of languages at the surface level, but none of them really well. Two years in, I started to be bothered that I had to rely on senior developers when debugging my C# code. One of the developers who became my goto debugging buddy always seemed to know the ins-and-outs of the depths of the language. He recommended the book  C# In Depth  for me to study. And study I did. I went all the way to threading, how garbage collection and generics work, behind the scenes. I pushed myself through countless hours to understand covariance, contravariance, and other, difficult to digest topics. Learning the language I used at work in-depth was one of the best decisions I made.  At my first workplace, this was accidental and had to do with the senior developer inspiring me. However, this knowledge became an advantage both at work, and when interviewing for other jobs. Later in my career, I intentionally dived deep into new languages and frameworks. At Skype, I was hired as a C# developer. However, we needed to switch over to using JavaScript and WinJS. So I dived deep into JS and mastered WinJS to the point of me teaching it  through a Pluralsight course . The more languages you know, the more you can evaluate their strengths and weaknesses.  By the time I moved over to iOS, I knew a few languages pretty well. When Swift came along, I briefly followed and participated in language discussions,  proposing readwrite reflection to be added  to the language's roadmap. Knowing the characteristics of the language made it easier to decide what strategy my team should use  to migrate from Objective-C to Swift . And the more languages you know, the easier it is to pick up new ones - and go deep easier, when you need to do so. 3. Pair with other developers more often I feel like pairing is out of style these days. When I started, both Extreme Programming with continuous pairing, TDD, and mob programming were popular things to do. Some of my biggest professional leaps came after pairing with people. These leaps were more significant than reading any book. A memorable pairing was with a developer who gave harsh code reviews to everyone - including me. One day I had enough, and I decided not to reply on the code review tool, but to sit next to them, asking them to walk me through their comments. I ended up learning a lot - while also telling them I didn't think their comments were fair. They took note and suggested I pair every time I feel this is the case. This is what I did. This developer had a thing for performant code, and through my pairing, I learned about the ins-and-outs of potential performance bottlenecks - and I'd like to think I taught them about maintainability concerns, in return. Another great pairing memory was doing TDD with another engineer, where we passed the keyboard between writing the test and writing the production code for it. We did this for two days, implementing a tricky part of the system. It's hard to describe how eye-opening this exercise was. We completely changed our approach midway as we made count of all the edge cases. And we also formed a strong bond with this developer, which would last for months after. 4. Write unit tests and run them against a CI Senior engineers often talk about the importance of unit testing. But the whole thing seems so counter-intuitive. Why would you spend  more  time writing trivial-looking tests? This was my approach for testing for some time. In order to appreciate the value of unit testing, you need to have that \"aha!\" moment , when unit tests you wrote to save the day. However, to get there, you need to grunt away, and write those tests, have them run against a CI. And you often need to do it for months, before you get that \"aha!\" moment. For me, I had two of these moments. The first one was when I built the backend engine, as a side project, for a tiny online casino. The API was managing real money, and I was terrified of making mistakes. So I covered all my code with unit tests. The project was late - partially the tests to blame, as they took a lot of time. But it felt right to do it like this. I handed the project over to the customer at the end of the contract. Two years later, they told me how those tests had saved the team multiple times, who were about to push bugs in production - had it not been for tests breaking. My other \"aha\" moment was building Skype on the Web. We built a greenfield, Google Hangouts competitor on  web.skype.com . The team was a strong one, and we had full unit coverage and heavy integration testing. Three months into the project, an engineer decided we need to refactor the structure of the whole project. It was a very risky refactor, and all of us voted not to do it. The developer challenged us that given the test coverage, it should be a piece of cake. If the tests pass, it works. I was skeptical. But that's exactly how it worked. After a week-long refactoring, he pushed a giant change... and nothing broke. Not then, not later. All tests passed. This was when I realized the safety net that a strong test suite gives and how it allows refactoring without fear. 5. Make refactoring a habit and master refactoring tools For many years, I preferred to make the smallest possible change in the codebase, when I was working with a team. For my own, personal projects I did massive refactorings - but I was never comfortable doing this on codebases I did not fully own. Then I met an engineer at Skype who would continuously do small or large refactors. They all made sense, and the code always got better. And they never messed things up. How did they do it? As I paired with them, they knew their IDE very well and had refactor extensions added. Extracting a method, renaming a variable, moving into a constant... it took them a second of time. I realized I was afraid of refactoring as I missed both the practice and the tools to do this well.  As I started making refactoring a weekly habit, I got better at both. This habit served me well later on - I just wish it didn't take me so many years to start it. 6. Know that good software engineering is experience. Get lots of it. When I started out, I used to be intimidated by senior engineers. They saw bugs in my code that I didn't. They knew answers I had no clue about. I assumed they're just smarter and better than me, and accepted this is how things are. Now that I've worked with many great regarded software engineers closely, and coached several more, I see that there's nothing to be intimidated about. The best software engineers have a mix of learned knowledge and real-world experience. The knowledge you can learn. The experience, you need to go after. Look for opportunities to work on different stacks, different domains, and challenging projects.  It took me seven or eight years to get what I would consider a \"senior\" level. I see some people joining high-growth places like Uber get there in three or four. The difference? Those people work on challenging projects, pushing just to keep up with the others around them, and often change teams midway, to start again. They volunteer to work on new projects and try out new technologies as the first in the team. I eventually became this person - but not for my first few years. 7. Teach what you learn The best way to learn something is to teach it. I started doing this accidentally. In 2010, I  started presenting  on .NET and Windows Phone user groups. My presentations were not good, but I learned lots just by preparing for them. These days, when I want to learn something well, I sign up to do a public talk about it.  I offered to do a presentation on  how Uber rolls out backend changes at scale  in 2017, a year after joining Uber. When I did, I didn't fully understand how we did this - I was mostly doing mobile development until then, and managing a mobile team. By the talk, I had no choice but learn all the details. And I had plenty of pressure to do so: about a hundred local developers signed up for that event. Many other people swear on this method working - with Shawn \"Swyx\" Wang being a prominent figure of the  #LearnInPublic approach . His growth story is far more impressive than mine: going from changing careers to senior engineering roles at Netlify and AWS in four years, and  writing a book  about his learnings. The nice thing about teaching others is you can only win. Not only will you learn something by teaching, but you'll also help and inspire others. And I don't know any experienced, role model developer who is not a decent teacher and mentor. The earlier you start giving back and teaching, the more natural this will come. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/templates-as-inspiration-for-software-engineers/", "title": "Templates as Inspiration for Software Engineers and Engineering Managers", "content": "\n             While I  was at Uber  I became somewhat known for creating templates documents, and encouraging engineers and managers to use them for things like perf reviews, work logs and others, as a starting point. I encouraged others to improve these templates, and to customize and make them their own. I've \"re-created\" a few of these, and I'm sharing it with the same intent. I'll add new ones to this page, as I come around to the several other templates that served me over the years. I do not suggest blindly copying any of these documents . Instead, use them as inspiration. They worked for me, in my use case. Others at Uber took them, changed them, and used them. Many others didn't use them at all. If you think they'll help: give it a go, iterate on them, and make them yours! For software engineers Performance review template and an example for software engineers Work log document for software engineers How to lead a project as a software engineer For tech leads and engineering managers Team standup template Tech lead expectations Performance review template for engineering managers For job hunting Resume template for software engineers : the one I created for my book  The Tech Resume Inside Out: what a good developer resume looks like . This clean template is successfully used by engineers who got recruiter calls from Facebook, Google, Amazon, Microsoft, Robinhood, PayPal and others. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/performance-self-review-for-software-engineers-with-an-example/", "title": "Writing a Performance Self Review for Software Engineers - With an Example", "content": "\n             Watch this article as a short video  on my YouTube channel . Are you a manager? Read my advice on  how managers can write fair performance reviews for their directs . Performance reviews are coming up. I've always found this period nerve wracking, despite having gone through it so many times, both as an engineer, and later as an engineering manager. Will my manager give me fair feedback? Or will I be in for some unexpected surprises? The best way to not have a surprise on your review is to prepare your own self-review, and send it to your manager , ahead of time.  Why is this a good idea? Managers will try to gather as much information as they can on your work, when writing your performance review:  this is how I do performance reviews for engineers on my team . However, managers  will not know about everything you do . They will also often fall victim of  the recency bias : weighing recent work more than that in the past. If you put in the work to write your own appraisal or self-review, you not only make your manager's job easier: you'll also set yourself up for a more fair review. A possible structure for your self-review If your company has an evaluation or self-review template, it's a good idea to use that one. For other cases, I've put a  template and an example performance self-review  together for inspiration. Here's the structure I'd suggest. 1. State the goals/expectations for the period Instead of jumping in to your achievements, set the stage. In your interpretation, what expectations or goals did you set out to achieve? If your role has expectations defined, those might well be the expectations. If you had previously set goals with your manager, list those. If you have neither of them, summarize your understanding of your expectation. It's already a problem if expectations are not clear: after the review, it might be worth having a follow-up with your manager to clarify what baseline expectations mean for you, and for them. Here's this section in  the example performance review  - one of the goals was to be more involved in the  engineering planning / RFC process : Goal setting in a performance review example 2. List your accomplishments List out your main results, and larger work efforts. Try to do this in priority order. Use numbers to make things more specifics, where you can - and where they add more context. Numbers could be things related to the code the code (number of changes, number of languages worked with, number of services worked on and so on), to people (number of people collaborated with, number of teams, number of stakeholders), to business impact (revenue impact, reliability improvements, efficiency changes and others). The self-review is an opportunity to put your work in context: not just the effort, but the result of this work. For work that has not yet been shipped, using the estimated impact should work just as well. For example, assuming you are playing a key role for an in-progress project, you could say  ‚ÄúOn track to save $500,000/year by shipping Project Pluto, where I am owning the Luna and Titan components end-to-end.‚Äù Link to specifics  where it makes sense, but don't go overboard. The specifics might be design documents, notable code changes or code reviews, or other artefacts. Linking these could give additional context to your manager, and an opportunity for them to spot check some of your most impactful work. If you have a \" work log document \" , add a link to it at the bottom - here's  an example and template for this . It's a helpful practice to keep a document where you keep track of the work you do week-on-week. Julia Evans  calls this a brag document: it has other benefits on having your work recognized, like you having a better grip on all the work you do. If you started doing this beforehand, it also makes creating your self-review much faster! Here's an example of listing out accomplishments using the above principles  in this example : Accomplishments list in a performance review example 3. Talk about the \"how\" Most people would stop by listing their accomplishments. I suggest adding another section where you can list more of the qualitative details on your work: things that might have not had huge business impact, but show the small, but important things. Things like teamwork, collaboration and helping others. List examples of you helping people within and outside the team. This is a great place to mention thank yous you've gotten from people - even quoting chat messages or emails you've received. Mention names of people and teams who you have helped, or whom you've gotten positive feedback from. This section is important, as your manager probably doesn't see even half of the positive interactions you've had with people. Show it to them. From ¬† the example review : The qualitative work in the performance review example 4. Reflect on levels and competencies Your manager will need to give you some kind of rating against expectations and competencies. Get ahead of this, and make their job easier, while giving indication of what you think about your own rating. List expectations and competencies, and give examples  on the work that reflects these competencies. If you have good trust with your manager, you could provide self-ratings for competencies or expectations. If you have less of this, you could just mention areas you have paid special attention to: areas of focus. This is what is shown in this example: Reflecting on competencies in the performance review example Time well worth spending Before every performance review period, I'd ask my directs to spend time on their self-review. Many people would leave it until last minute, prioritizing other work, including peer reviews ahead of this one. Some didn't even do a self-review. Be sure to spend time on your self review, ahead of the performance review process kicking off.  If you don't spend time here, you'll have little reason to complain if your manager is unaware of some of your key achievements, and your feedback is more negative than it would have been - had you put in the work. You are also missing an opportunity to reflect on all the things you've done. Of all the \"admin\" work you do, this one will have an outsized impact on your career. So put in the work. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/performance-review-biases/", "title": "Common Performance Review Biases: How to Spot and Counter Them", "content": "\n             Watch this article as a short video  on my YouTube channel . This article is thoughts from the Performance Reviews chapter of  The Software Engineer's Guidebook  I'm writing -  subscribe  to get notified when the book is published. I've  done dozens of performance reviews  while I was an engineering manager at Uber. One thing I learned early on is just how many unconscious biases I had. This revelation came when I attended my first unconscious bias training at the company. As we went through biases, I caught myself thinking,  \"wow, I did that. Yep, that as well. Yes, that's me.\" It's not just me. Biases - disproportionately favoring people and things we find familiar and the other way around - are ingrained in people from an early age. Just  watch this two-minute video about five-year-olds and gender biases  that develops thanks to our surrounding environment. This article summarizes the 8 common biases I've observed in performance reviews and how you - as someone receiving this review - can counter them.  Most articles I write are specific to software engineers and engineering managers. However, this topic is probably just as applicable across any company. If you are a manager, this piece can be a reminder on what biases to watch out for. While it's great for people to have the toolset to spot and \"counter\" biases,  good managers should consciously reduce biases in any performance review . This starts by being aware of these, calibrating reviews, and sharing with peers or your own managers, asking for their feedback if they see you being biased in certain directions. Disclaimer: use all advice below with good judgment. You'll probably get better advice from asking your mentors and peers on specific situations: nothing beats a good support network. How Specific Feedback are You Getting? You're getting your performance review. Your manager is giving you feedback that you might agree, or not agree with. Pay attention to one thing: are you getting generic or specific feedback? Specific feedback  is concrete. It might follow the pattern of OFNR (Observation, Feeling, Need, Request - a great  summary of this approach by Charles-Axel Dein here ) or a tailored version of the STAR model (Situation, Task, Action, Result: here's the situation you were in, what your task was, what you were expected to do, what you did and the result). The point is your manager talks specifics. They mention a situation or a specific event. They talk about what they saw or heard. They tell you what they suggest you could have done differently or different output you could have achieved. When you get specific feedback, you can have a proper conversation. Perhaps your manager missed part of the context. Perhaps they misinterpreted something. Or maybe you feel they are right. Either way, you both know what you are talking about: and this makes for generally healthy exchanges. Generic feedback  is the opposite. When your manager says, \"your work is often lower quality than what it should be\" or \"you're overly \"cautious, you end up scratching your head. Are they speculating? Based on what are they saying this? This feedback is frustrating to hear because it's so hard to pin down. It's hard to accept it, and it's even harder to challenge it. When you notice generic feedback, aim to turn it into something specific. Ask for examples where they deducted this from. Use paraphrasing of sharing what you understood from the feedback, and ask for examples. Here's a  good read to understand paraphrasing  from engineering leader Padmini Pyapali. For example, to paraphrase the generic feedback \"your work is often lower quality than it should be\", you could respond by paraphrasing, \"So what I understand you're saying is my work frequently results in bugs, correct?\" - and this will take the conversation forward. When you confirm what your manager is thinking, ask for specifics: and tell them you need specifics to digest the feedback. Speculative feedback  is when your manager tells you things that you could do or could have done, often without much specifics. \"You could have done more coding\" or \"you could collaborate more with the team\" are both this kind of feedback. Speculative feedback is often a lazy form of feedback . As a manager, I stopped myself from giving this type of feedback without specifics, unless it was for people above expectations, and I was highlighting stretch opportunities. It's lazy because it is usually not specific, and it often doesn't even reflect on what you've been doing. As a manager with many reports, it can also be a real time saver with performance reviews to give similar speculative feedback to people. When you get speculative feedback, challenge why your manager is saying this. What action or behavior prompts this? What situation would they recommend this in? Make a note of what type of feedback your manager gives you - and push back on generic and generic+speculative feedback, regardless of any bias you might be suspecting.  Quality performance feedback is specific, and it is fair game for you to ask for this from your manager  if they haven't prepared the feedback like this. Let's jump into spotting biases and my advice on how to counter them with this out of the way. The 8 most common biases I've observed in performance reviews 1. Recency Bias By far, the most common bias I've observed (and it's one ¬†I'm naturally drawn to being biased towards). At many places, performance reviews are every 6 or 12 months. Managers will weigh the most recent events in the past one or two months a lot more than the events before. How to spot it:  when your manager talks about your achievements or mentions examples: if you only hear of things in the recent past, this bias might be in play. How it can work in your favor:  if you delivered something outstanding recently, and your manager refers to this frequently in your review, this might result in a more positive review. Being aware of this bias is also why it usually \"doesn't hurt\" to focus more than a month or two before performance reviews. How to counter it : the best way to do so is before the review. Keep a log of the work you do, and send over a self-review or work log to your manager before performance reviews start. On the review, ask your manager to talk through what work they have observed you do. This is to confirm they are taking older work into account. If they miss things: pull up your document and tell them what is missing. If they give you feedback where you feel the past examples would be helpful, tell them so. Notes for managers : Make it a habit to start the performance review by listing all the work and achievements of the individual in person: both when you are writing it and when you are delivering it. Ask them if you missed something, even if it was a long time ago. If you did miss things a while back, be aware that you might have biased for recency. 2. Strictness Bias This bias happens when your manager is overly strict in their evaluation with a few people - this could include you. If there are expectations for the job, they'll often apply them to the T. They'll hold you to higher standards than others - though you might not know this unless you compare performance reviews with your team members. How to spot it:  this is one of the trickier ones to notice and put the finger on. If you feel that your manager is nitpicking or holding an unusually high bar, they might be biased with strictness. How it can work in your favor:  in the short term, it doesn't. On the long term, if you embrace the \"strictness\" and work to prove your manager wrong, you might grow faster. I had a manager who I felt was overly strict on me on coding quality, and I doubled down on reading books, familiarizing myself with best practices, which made a better developer, looking back. It's not how I felt at the time, though: I felt mistreated. How to counter it : when the feedback is generic or speculative, ask for specifics to talk about. However, the strictness bias often comes with specifics. My best advice is to \"embrace\" it. Tell your manager that you didn't understand this is where the bar was. Since this was the case, you probably still don't understand where it is. Would they be willing to help with your commitment that you're putting energy into growing? Strictness bias often comes from your manager, not knowing too much about your work. So change this. Have regular catchups where you talk about your work, the changes you made (taking advice) and ask for their feedback. Rinse and repeat. Managers get (usually) tend to get fond of people who take action on their feedback.  It's counterintuitive, but try to spend more time with a manager who might have a strictness bias, ask for more frequent feedback, and keep a log of this feedback and the changes you're making. This bias can be hard and exhausting to counter. If the feedback is generic, you can counter it by asking for specifics. However, one of the best ways I've found to counter this type of bias is to get your manager \"on your side\" for the coming period. 3. Leniency Bias The opposite of the strictness bias: your manager going overly \"easy\" on you. How to spot it:  you probably won't go \"hunting\" for this one :) How it can work in your favor:  you'll get a better and nicer review! How to counter it : this is not one you'd want to counter, even if you notice it particularly. A note for managers : calibrating your feedback is key to spotting strictness and leniency biases. Compare notes. Are you overly strict on certain people - especially ones not similar to you or ones you have negative feelings for? Are you too lenient with people you really like? 4. Horns Bias This bias refers to one negative attribute or behavior being generalized in the mind of the manager, unfairly pulling the whole performance review down. How to spot it:  if your manager starts by giving strong negative feedback on a certain area, or for a certain event, and keeps bringing this one thing up at other places, you can suspect horns bias. It can also be the case when your manager seems to point a lot of negative emphasis on something you didn't think was that big of a deal. For software engineers, an area that could cause horns bias includes the manager perceiving their direct to have \"messed up\" an important project or one or two examples of negative feedback from someone the manager trusts. Of course, there are far more that could result in this bias. How it can work in your favor:  this bias can only work against you. How to counter it : to counter this bias, you first need to identify what this big, negative trait or behavior might be. In your performance review, you should hear something repeating again and again. Once you figured out what this thing could be, poke at it. Ask:  \"if {the specific thing} did not happen, how would you rate {different area that had generic feedback}\"? If your manager says it wouldn't make a difference, challenge them on why this is the case. If they say they would rate it neutral, dig into if the \"negative\" example was a lone incident or a pattern. Ask for more examples of the original \"negative\" incident. If it was only a one-off, you could remind your manager that it feels like horns bias to have a one-off incident impact your whole performance review outside of just one area. 5. Halo Bias This is the opposite of the horns bias. It's when a single positive event/attribute pulls your whole review up, across the board. The most common halo bias happens when someone on the team goes over and beyond to \"save\" the most critical project. Managers tend to be grateful to this person and recognize the major positive impact they had. As a manager, I can share how it's hard not to fall into the trap of the halo bias and not go \"easier\" on this person in other areas. I've personally been guilty of this bias. How to spot it:  you'll get an overly positive review from your manager after you've done something really great for the team. The review might have zero criticism and little to no areas for further improvement. How it can work in your favor:  you get a great review! However, you might not get feedback on some of your growth areas. How to counter it : there's little need to do so. However, you can always ask your manager what the top area for further improvement that they can see is. A note for managers : be careful with halo and horns biases. It's very easy to step into these: I can confirm, as I've been guilty of both. Counter the halo bias by having improvement areas for everyone, no matter how good they are doing. Counter the horns bias by making sure one-offs and single traits don't cloud a whole review. Comparing reviews with each other and asking for a second pair of eyes can also be helpful to avoid these biases. 6. Similarity Bias This one is engrained in nature: animals flock to those who look similar to them. Similarly, humans tend to favor other humans who look or feel similar to them. This can result in leniency and halo biases for those a manager \"feels\" closer with, and strictness and horns biases for those who they not. How to spot it:  you'll probably experience a mix of strictness and horns bias from a manager you don't \"feel\" that close to. If you and your manager have different personalities, gender, race, cultural background, and other \"major\" differences, those biases might have to do with the manager having a similarity bias. How it can work in your favor:  you could be on the \"good\" side of the bias if your manager \"feels\" similar to you. You might experience leniency and halo bias in this case. How to counter it : this is a tough one to work with. Even if you recognize this bias, you can't just tell your manager they have similarity bias. The best advice I have is similar to working through the strictness bias. As counterintuitive it is, spend more time with your manager. Get to know them. Share your background. Share a lot more about your work and how you approach things. Ask for frequent feedback on your performance. Set goals together. However well you mean, if your manager does not recognize this bias, you might feel unfairly treated. If this persists, the solution might be to find a new manager or team. A note for managers:  there's little your direct can do if you leave similarity bias unchecked, beyond quit working for you. It's on you to reduce the likelihood of this happening. Double-check your language and attitude with people who are not similar to you on the team. Spend time to understand their background and way of working. Diverse teams are known to outperform homogenous teams. To build a diverse team, you need to keep a conscious eye on similarity bias. 7. Central Tendency Bias Managers have a tendency to not want to differentiate people significantly within the team. If you ask a manager to rate people on their team from 1 to 5, with no constraints, many managers would be tempted to give everyone a 3. Differentiating feels to go against the spirit of the team. As a fun fact: this bias is one of the main reasons that several companies have introduced forced performance ratings  when only a certain % of people can be rated in the middle. For companies that have this rating, usually, 10% need to be above average, and 20% need to be above average. Even in companies with no forced performance ratings, HR professionals vary this bias, and they will \"push\" managers to differentiate between average, low, and higher performers. How to spot it:  if you have a performance review process where you get a rating or number for multiple areas, and all of these areas are average or the middle, then your manager might be leaning towards a central tendency bias. How it can work in your favor:  if you might have been a bit under expectations for an area or two, perhaps this bias \"helped you\". It can hurt you just as much if you were actually above expectations, and this leaning towards the average pulled you down. How to counter it : when you are getting a \"very average\" review, push your manager to identify a strength and a growth area. Ask them: \"if you can point out one area where I stand out, which one would that be? Why do you think so? Given this is a strength, would you say it's above the expectation? If not, what am I missing? If it is, what is missing for this competency to be rated as above average?\" Similarly, ask for a growth area - of course, there's no need to advocate for a lower rating there! Still, feedback is valuable, and you should get better feedback than just \"average\". 8. The Contrasting Bias Managers will naturally compare people with each other - in their heads. However, a performance review should be more objective. It shouldn't be about how you compare to teammate one or two, but how you are doing against expectations. Too much comparing can skew the feedback, and you might get a review that is relative to others, not to what the objective bar is. How to spot it:  if your manager keeps comparing you to specific people on the team or frequently compares you to \"others\", this bias might be at play. How it can work in your favor:  when you are compared as a good example, this bias can put you in a more positive light. However, you're more likely to be compared to others in a not positive setting. How to counter it : when your manager compares you to someone, ask them if they can describe the same thing without referring to that specific person. When they compare you to \"others\", ask who those \"others\" are. Team members? If so, which team members? Contrasting bias often happens when there are no clear role expectations defined.  If this is the case, you could get a bit more proactive and ask your manager to describe someone who is an average or above-average performer: but talking about traits and behaviors, not names. As your manager describes, take notes. You're now doing the work they should have done: collecting what the expectation is. When they are done, it's your turn to shape this expectation. Ask about the strengths of yours. For example, if you have strong documentation skills, ask, \"do you think the expectation at this level would involve strong documentation skills?\" If they say yes, you can add this to the list, and note how this is a strength of yours. If they say no, you can push a bit more and find out why not. Perhaps that's for the next level? If you are on the wrong end of the contrasting bias, and there are no clear expectations for the role, it's in your interest to clarify these. You can also tell your manager that it would be very helpful to have this, as being compared to other people all the time isn't exactly fair. A note for managers : contrasting is such a natural thing to do: and you absolutely should forget using this tool. It's another form of very lazy feedback that can only hurt people in the short- and long-term. If you have a career ladder and expectations per level, calibrate your feedback against that. And if you don't have one: time to put one together -  here's a book that details how you can go about this  as an engineering manager. Focus on the Feedback You Can Grow From Every performance review can carry several biases, and it's helpful if you can spot them and blunt their edge. At the same time, biases or not, your manager's goal should be to help you grow professionally through the feedback they deliver. Don't be a pushover with unfair feedback, and challenge your manager for specific feedback when overly generic with their message. Try to find the parts of the feedback that are actionable and ones that you want to get better at. When you disagree with the feedback,  try paraphrasing  over getting immediately defensive. Sometimes the best feedback can be painful but necessary to hear. Good luck with the review! You can watch this article as a video  on my YouTube channel:  performance reviews - how to spot and counter common biases . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/system-design-interview-an-insiders-guide-review/", "title": "System Design Interview Book Review: Finally, a Book for Getting Better at Architecting Systems", "content": "\n             I've come across the book  System Design Interview: an Insider's Guide  by accident ( paperback book , and  online course ). I was looking for good book resources after several people have been asking me how they can get better at building  distributed systems  or learning designing systems at scale. Especially when they don't have the opportunity to do so as part of their day-to-day work. The topic is somewhat a chicken-and-egg one. You'll know how to design a large system after you designed one before. But if you've not done so: how would you build an URL shortener like bit.ly, with hundreds of millions of links? A chat app like Whatsapp? A file storage system like Dropbox or Google Drive? There are many resources online - the most well-known one being  System Design Primer on GitHub  or reading  High Scalability articles . In my case, I was looking for a more \"structured\" approach, as opposed to just dumping a bunch of concepts you need to know in these interviews. This book is the most \"real-world\" systems design book I've come across that does a solid effort to teach concepts, step by step,  to people who have yet to work at systems at scale. And it's also a welcome refresher to those who are familiar with some of these systems but would like to venture into various other types of large systems. It is clear from the start that the book was written by someone familiar with systems at scale. The author is Alex Xu, a software engineer previously at Oracle, Zynga, and Twitter. The book  comes with more than 10 case studies and a framework that it introduces and consistently uses with these case studies. There's also an accompanying  online course  that has the same content as the book, but you can follow along in a web browser, and the diagrams are colored. Still, don't forget that this is just a book. Books can help with understanding the theory but are not a replacement actually working on large-scale production systems. These systems are always more complex than any book describes them. Note that none of the below links are affiliate links or sponsored. See  my ethics statement  on the lack of such links. Update on March of 2022:  System Design Interview: Volume 2  is out, and I can recommend that book just as much as the first part, which I am reviewing here. A framework for the systems design interview System design interviews can feel intimidating, and having a framework on how to navigate them can help you feel more in control. The book recommends a 4-step process that I also agree with: Understand the problem and establish the design scope.  I like to phrase this as confirming the problem, asking questions, and making constraints clear.  \"In a systems design interview, giving out an answer quickly does not give you you bonus points.\"  - the book suggests. They are right. Propose high-level design and get buy-in.  I see people all too often jump into implementing without confirming their approach satisfies the constraints, and they're not over-engineering. The interviewers expect a conversation - similar to real-life design - and this step helps you achieve exactly that. Design deep-dive . Once you know you're on the right track, it's time to roll up your sleeves and get into the details. This is the part you'll need to have the understanding and vocabulary of the systems domain. The book will help understand several of the concepts you'll need. Resources like  System Design Primer  also help with this phase. Wrap-up.  With a design that seems sensible, you might close with identifying the bottlenecks and improvement areas. The book lays out time allocation suggestions for an hour-long interview: a few minutes for understanding, 10-15 for the high-level design, 10-25 for the deepdive, and a few more for the wrap-up. I wouldn't be overly prescriptive, but I would suggest to not start the deepdive the first 10 minutes (gather enough context), and leave time for the wrap-up. Case studies I've done dozens of systems design interviews as an interviewer. Back when I was interviewing at the likes of Facebook and Uber, I also got feedback on how good (or not great) my approach was. One thing you should avoid is \"just memorizing\" the approaches of the problems . That's far from the point. I made this mistake when I interviewed at Facebook, and was asked to build a part of Instagram. I had done this exercise, and so I just drew out a complicated system. I never talked about constraints or tradeoffs with my interviewer. In fact, I never had a two-way conversation. A systems design interview is as much about communication with the interviewer  as it is about your systems and architecture knowledge. This is why, while the book will help fill gaps you might have on how large systems are built, it won't substitute you collaborating with someone in designing a system. The book's case studies work well as they go deeper and deeper into the problem domain, forcing you to understand relevant concepts at each step. Take the rate limiter problem and how it's tackled: Client-side vs server-side rate limiting , and their tradeoffs. Rate limiting algorithms : token bucket, leaking bucket, fixed window, sliding window log & counter. Deepdive: rate limiting rules . A look at Lyft's rate limiting component. Rate limiters in distributed environments , supporting multiple servers and/or concurrent threads. Performance optimization & monitoring . Most of this falls into productiozation, and operating a real-world system. References for further reading , linking to industry sources like the  how Cloudfare built their rate limiter  or understanding the  AWS API rate limiting settings . A pro for the book is how the case studies in the book cover good ground, and a variety of problems: \"Basics\" : rate limiter, consistent hashing, key-value-store, zero to millions of users. Web : URL shortener, web crawler. Social : newsfeed, notification system, chat Videos & storage : design YouTube, design Google riveConclusion Misc : unique ID generator in distributed systems, search autocomplete My take This book is a solid recommend from me : and not just for preparing for the systems design interview, but to strengthen your systems design muscle for the day-to-day. The book/course comes with typical design problems and brings a pretty good, step-by-step approach to them. But if you just read through them, you'll miss out on the real value of such a resource. Diagrams are key for systems design and they are surprisingly pleasant to read in the book. There are more than 150 of them in the 300 pages. Aim to draw out how  you  would design the system before reading how the author tackled the problem. You'll go through the book slower: but the concepts will stick. And you'll have approaches to use not just on the interview but when debating with colleagues on how to build a system. There were a few topics that I missed  from the book and that I would have covered. Though the book does a good job in going deep in fundamental concepts like rate limiting, consistent hashing, and sharding, or exploring the scene behind key-value stores, I wish things like caching and replication strategies would have been explored more. Both these topics are relevant in many scenarios. While the book presents decent solutions to each of problems, I missed having  alternative solutions  with tradeoffs. In several cases, you can tradeoff the number of machines (and thus cost) for latency, resilience for disasters for cost or latency, and so on. These concepts are easier to grasp with examples. While the book goes deeper in this space that what I have otherwise seen, there is room for more depth. Additionally, the book focuses on backend systems design. Client-side systems design problems for native mobile engineers or web engineers are usually different - I've helped design both these types of interviews. In all fairness, covering those approaches is likely out of scope for this book. Still, for non-backend engineers, the book can be helpful but potentially less applicable. Fun facts about the book: from the author himself After reading the book, I reached out to the author, Alex, congratulating him for a solid resource. As  I'm also writing a book , we started talking about how he approached writing and what he's learned from this experience. Here area few fun facts, straight from the author: Alex started to write the book when he was preparing for systems design interviews and could not find good resources to do so. His friends quickly became interested, and he ended up releasing the first version as a course and on Amazon. The first version of the book came with lots of reader feedback. While the book has a good number of readers, many of them complained about diagrams not being clear and not being enough case studies. Alex decided to act on all the feedback and redid most of the book for the second version. The second version of the book took a year to write. Alex progressed roughly one chapter per month. He shared how coming up with \"easy to understand\" diagrams were time-consuming, as was finding the balance of progressing with \"good enough\" speed for the reader to follow. The book, over time, broke into the 100 Computers&Technology books on Amazon. At the time of my writing, it ranked as #89 in this category. Alex shared how this was an organic process. The book and accompanying course are now both popular enough for him to consider spending even more time on them. Further systems design resources Apart from this book, there are other good resources to learn about how real-world systems are built. Google's architecture in 2008  on High Scalability. I find it helpful to understand how companies handled scale over a decade ago. Keep in mind, Google was already bigger in 2008 than many companies need to worry about in 2020. Youtube architecture in 2008 . Building a system similar to YouTube is a common challenge. It's good to understand how YouTube addressed this, early on. Scale at Facebook in 2010 : how Facebook approached scaling challenges in their earlier days. Scaling Twitter in 2009  and  in 2013 The Netflix experimentation platform  in 2016 How these companies approached scale:  Flickr ,  Dropbox ,  LinkedIn ,  Uber ,  Whatsapp ,  Pinterest . Money movements at scale at Uber  - this is talking slightly home, as I worked with the system described in this article, and  wrote about  some of my learnings.  Airbnb scaling  their payments platform is also a good read. System Design Primer  on GitHub: the largest collection of all systems related concepts worth knowing. High Scalability blog : the place to go for real-world scalability articles and discussions. Designing Data Intensive Applications book : this is a must-read book on distributed systems concepts and building blocks. It goes much deeper than this book does (or wants to). It's a more difficult and longer read. My two cents is anyone serious about distributed systems should read this book, which is also on my bookshelf. Other paid courses: \n     Systems Design Interview Course  - from the author of this book, Alex Xu. Probably the most thorough resource. \n     Grokking the systems design interview  by educative.io ($66/year). A similar number of case studies, but fewer diagrams, and the diagrams are not as neat, judging from  the example material  as I've found in the book. I have heard many people recommend this course in the past, though. \n     SystemsExpert  by AlgoExpert ($79/year) 10 systems interview walkthroughs. Based on  this video review , these are video walkthroughs. If you learn better with video, this might work well for you. I'd still recommend to pause and \"draw ahead\" to solidify the learnings.  \n Note that all of the above courses are a time-based subscription, meaning you lose access to them after a year. Another reason why getting a book might be a good investment: pay once; keep it forever. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/10-engineering-challenges-due-to-the-nature-of-mobile-applications/", "title": "10 Engineering Challenges Due to the Nature of Mobile Applications", "content": "\n             I've been noticing that while there's a lot of appreciation for backend and distributed systems challenges, there's a lot less empathy for why mobile development is hard when done at scale . Building a backend system that serves millions of parallel customers means  building highly available and scalable systems  and  operating these reliably . But what about the mobile clients for the same systems? I've been building native mobile apps since 2010: starting on Windows Phone, later on iOS, and Android. Starting from one person apps, I worked with small teams at Skyscanner, to hundreds of engineers working on the same codebase at Uber. Here, I've been part of the  Rider app rewrite ,  Driver app rewrite , both projects involving hundreds of mobile engineers. The apps my team worked on had 100M monthly users in 60+ countries, with several features built for a single country or region. Most engineers - who have not built mobile apps - assume the mobile app is a simple facade that requires less engineering effort to build and operate. Having built both types of systems: this is not the case. There is plenty of depth in building large, native, mobile applications - but often little curiosity from people not in this space. Product managers, business stakeholders, and even non-native mobile engineers rarely understand why it \"takes so long\" to ship something on mobile. This series of articles collects challenges engineers face when building native iOS and Android apps at scale : scale meaning they have a large number of users, are built by large teams, launch features continuously, and need to operate reliably. It's a summary of the current industry practices used by large native mobile teams. I hope this piece helps non-mobile engineers build empathy for the type of challenges and tradeoffs mobile engineers face and be a conversation starter between backend, web and mobile teams. 39 Engineering Challenges of Building Mobile Apps at Scale: Table of Contents This article series is the largest piece of content on my blog, by a lot. I've been writing it for over a year and 15+ mobile experts have contributed to the piece with content and reviews. The completed series turned into the book  Building Mobile Apps at Scale . Challenges due to the nature of mobile applications (this article) 1. State management 2. Mistakes are hard to revert 3. The long tail of old app versions 4. Deeplinks 5. Push and background notifications 6. App crashes 7. Offline support 8. Accessibility 9. CI/CD and the build train 10. Third-party libraries and SDKs 11. Device & OS fragmentation 12. In-App Purchases (The below challenges are all covered in    Building Mobile Apps at Scale ) Challenges due to app complexity and large dev teams 13. Navigation architecture within large apps 14. Application state & event-driven changes 15. Localization 16. Modular architecture & dependency injection 17. Automating testing challenges 18. Manual testing Challenges due to large engineering teams 19. Planning and decision making 20. Architecting ways to avoid stepping on each other‚Äôs toes 21. Shared architecture across several apps 22. Tooling maturity for large engineering teams 23. Scaling build & merge times 24. Mobile platform libraries and teams Languages and cross-platform approaches 25. Adopting new languages and frameworks 26. Kotlin Multiplatform and KMM 27. Cross-platform feature development 28. Cross-platform app development versus native 29. Web, PWA & backend-driven mobile apps Challenges due to stepping up your game 30. Experimentation 31. Feature flag hell 32. Performance 33. Analytics, monitoring and alerting 34. Mobile on-call 35. Advanced code quality checks 36. Compliance, privacy and security 37. Client-side data migrations 38. Forced upgrading 39. App Size When Things are Simple Let's address the elephant in the room: the frequent assumption that client-side development is simple. The assumption that the biggest complexity lies in making sure things look good on various mobile devices. When the problem you are solving is simple, and the scope is small, it's easier to come up with simple solutions.  When you're building an app with limited functionality with a small team and very few users, your mobile app shouldn't be complicated. Your backend will likely be easy to understand. Your website will be a no-brainer. You can use existing libraries, templates, and all sorts of shortcuts to put working solutions in place. Once you grow in size - customers, engineers, codebase, features - everything becomes more complex, more bloated, and harder to understand and modify: including the mobile codebase. This is the part we'll focus on in this article: when things have become complex. Once your app has grown, there are no silver bullets that will magically solve all of your pain points, only tough tradeoffs to make. 1. State Management State management is the root of most headaches for native mobile development - similar to modern web and backend development. The difference with mobile apps is how app life cycle events and transitions are not a cause for concern in the web and backend world. Examples of the app-level lifecycle transitions are the app pause and going to the background, coming back to the foreground or being suspended. The states are similar, but not identical for  iOS  and  Android . Events driving state changes in mobile apps Events drive state changes  in most mobile apps. These events trigger in an asynchronous way - application state changes, network requests, user input. Most bugs and unexpected crashes are usually caused by an unexpected or untested combination of events and the application's state getting corrupted. State becoming corrupted is a common problem area with apps where global or local states are manipulated by multiple components unbeknown to each other. Teams that run into this issue start to isolate component and application state as much as possible and tend to start using reactive state management sooner or later. A common root reason for exotic bugs in complex apps: non-deterministic events put parts of the app in invalid states Reactive programming  is a preferred method to deal with a large and stateful app to isolate state changes. You keep state as immutable as possible, storing models as immutable objects that emit state changes. This is the practice  used at Uber,  the approach  Airbnb takes , or how  N26 have built  their app. Though the approach can be tedious in propagating state changes down a tree of components, the same tediousness makes it difficult to make unintended state changes in unrelated components. Applications sharing the same resources with all other apps and the OS killing apps on short notice  is one of the biggest differences between developing for mobile versus developing for other platforms - like backend and the web. The OS monitors CPU, memory, and energy consumption. If the OS determines that your app is taking up too many resources - may this be in the foreground or the background - then it can be killed with little warning. It is the app developer's responsibility to react to application state changes, save state, and restore the app to where it was running. On iOS, this means  handling app states  and transitions between them. On Android, you need to  react to changes in the Activity lifecycle . Global application state  - permissions, Bluetooth and connectivity state, and others - brings an interesting set of challenges. Whenever one of these global states changes - for example, the network connectivity drops - different parts of the app might need to react differently. With global state, the challenge becomes deciding what component owns listening to these state changes. On one end of the spectrum, application pages or components could listen to global state changes they care about - resulting in lots of code duplication, but components handling all global state concerns. On the other end, a component could listen to certain global state changes and forward these on to specific parts of the application. This might result in less complex code, but now there's a tight coupling between the global state handler and the components that it knows of. App launch points like deeplinks  or internal \"shortcut\" navigation within the app also add complexity to state management. With deeplinks, additional state might need to be set up after the deeplink was activated. We'll go into more detail in the  Deeplinks section . 2. Mistakes Are Hard to Revert Mobile apps are distributed as binaries. Once a user updates to a version with a client-side bug, they are stuck with that bug until a new version is released and this user updates. Multiple challenges come from this approach: Apple does not allow updating native code on the fly.  Interestingly enough, they do allow this with non-native code like JavaScript: and this is why solutions where business logic is written using JavaScript, bug fixes are pushed to the client are gaining popularity. Solutions include React Native or Cordova with services like  Codepush  are gaining strong traction. At Uber, we've built a homegrown solution among the same lines, as several other companies have done so. It takes hours to days to release  a new app version on the store. This is more pronounced for iOS, where a manual app review needs to take place. Historically, every review had the possibility of rejection. As of June 2020, Apple has changed guidelines, so  bug fixes are no longer be delayed over guideline violations , except for legal issues. Users take days to update to the latest version  after a new version is published to the app store. This lag is true even for users with automated updates turned on. You can not assume that all users will get this updated version, ever . Some users might have automated updates disabled. Even when they update, they might skip several versions. Chuck Rossi, part of release engineering at Facebook, summarizes what it's like to release for mobile on a  Software Engineering Daily podcast episode  like this: It was the most terrifying thing to take 10,000 diffs, package it into effectively a bullet, fire that bullet at the horizon and that bullet, once it leaves the barrel, it's gone. I cannot get it back, and it flies flat and true with no friction and no gravity till the heat death of the universe. It's gone. I can't fix it. This means that all previous versions of your app need to be supported indefinitely  - at least in theory, you should do this. The only exception is if you put homegrown controls in place and build a force update mechanism to limit the past versions to support. Android supports  in-app updates  through the  Play Core library . iOS doesn't have similar native support. We'll cover force updates in the \"Force upgrading\" section in  Part 3 of the series . Fixing a bug on mobile Assuming that you have an app with millions of users, what steps can you take to minimize bugs shipped to users or regressions happening in old versions? Do thorough testing  at all levels. Automated testing, manual testing, and consider beta testing with easy feedback loops. A common approach at many companies is releasing the beta app to company employees and beta users and having it \"bake\" for a week, collecting feedback on any issues. Have a feature flagging system  in place, so you can revert bugs on the fly. Still, feature flags add further pain points - we'll discuss these points in the \"Feature flag hell\" section in  Part 3 of the series . Consider gradual rollouts , with monitoring to ensure things work as expected. We'll cover monitoring in more detail in  Part 3 of the series . Force upgrading  is a robust solution - but you'll need to put one in place, and some customers might churn as a result. 3. The Long Tail of Old App Versions Old versions of the app will stay around for a long time - up to a number of years. This timeframe is only shorter if you're one of the few teams that put strict force app upgrade policies in place. Apps that have a rolling window of force upgrades include Whatsapp and Messenger. Several others use force upgrades frequently, like banking apps Monzo or American Express. While most users will update to new app versions in a matter of days, there will be a long tail of users being on several versions behind. Some users disable automatic updates on purpose, but many who don't update are blocked because of old phones or OSes. At the same time, old app versions are unlikely to be regularly tested by the mobile team: it's a lot of effort, with little payoff. Even a non-breaking backend change can break an older version of the app - such as changing the content of a specific response. A few practices you can do to avoid this breakage: Build sturdy network response handling and parsing, using dedicated tooling  that solves for these problems. Prefer strongly typed, generated contracts between client and backend like Thrift, GraphQL, or other solutions with code generation over REST interfaces that you need to validate manually - which is bound to break when someone forgets to update the parsing logic on mobile. Plan well in advance for breaking backend changes.  Have an open communications channel with the backend team. Have a way to test old app versions. Consider building new endpoints and not retiring old ones until a forced upgrade moves all current app users off the old endpoint. Version your backend endpoints  and create new versions to accommodate breaking changes. Note that in case of using GraphQL, GraphQL has a  strong stance against versioning . When making breaking changes, you'd usually create a new endpoint and mark the existing one as deprecated. Take care when deprecating endpoints  on the backend: monitor the traffic, and have a migration plan on how to channel requests, if needed. Track usage stats on an app version level.  What percentage of users is lagging three or more versions behind? Once you have this data, it's easier to decide how much effort to dedicate towards ensuring the experience works well on older versions. Put client-side monitoring and alerting in place.  These alerts might be channeled to a dedicated mobile oncall, or just the normal oncall. We'll dive into monitoring and alerting in more detail in  Part 3 of the series . Consider doing upgrade testing , at least for major updates. Upgrade testing is expensive, hard to automate, and there might be several permutations to try. Teams rarely do it because of this overhead. 4. Deeplinks Deeplinking - providing a web or device link that opens a part of the app - becomes a surprisingly tricky problem on both mobile platforms. Both iOS and Android offer APIs to deal with this, but without any opinionated native frameworks or recommended approaches. As  Alberto De Bortoli  puts it in his excellent article  deeplinking at scale, on iOS : Deep linking is one of the most underestimated problems to solve on mobile. There are a few things that make deeplinking challenging: Backward compatibility:  ensuring that existing deeplinks keep working in older versions of the app - even when significant navigation or logic changes happened. State problems when deeplinking to a running app with existing state . Say you have an app open and are on a detail page. You tap on a deeplink in your mail app that points to another detail page. What should happen? Would the new detail page be added to the navigation stack, preserving your current state? Or should the state be reset? The solution that results in the least amount of non-deterministic behavior is to reset the app's state fully when receiving a deeplink. However, there might be flows that you don't want to break: plan carefully. iOS and Android deeplink implementation differences . Deeplink implementations are different for iOS ( Universal links and URL schemes ) and  for Android  (based on  intents ). There are third-party deeplink providers that provide abstractions to work with a single interface:  Branch  and  Firebase Dynamic Links  are such providers, among others. Lack of upfront planning.  Deeplinks are often an afterthought after having shipped multiple versions of the app. However, unlike on the web where adding links/deeplinks are more straightforward, retrofitting a deeplinking strategy can be a real engineering challenge. Deeplinks are connected to  state management  and the navigation architecture (we'll discuss this area in  Part 2 of the series ). The biggest problem with deeplinks is how neither iOS nor Android provides a much-needed opinionated approach on how to architect - and test - deeplinks. As the number of deeplinks grows, the complexity of keeping these deeplinks working as intended snowballs. You'll have to plan well ahead in building a sensible - and scalable - deeplink implementation. 5. Push and Background Notifications App push notifications are a frequently used notification, communication, and marketing tool. The business loves to use push notifications, and as a developer, you'll be asked to support this communications method, sooner or later. However, push notifications bring a set of new challenges you'll need to tackle. Setting up and operating push notifications is complex . Both for Android and iOS, your app needs to  obtain a token from a server  (FCM on Android, APNS on iOS), then store this token on the backend. There are many steps to take to get push notifications working: see this  comprehensive tutorial for iOS  and  one for Android . Sending push notifications has to happen from the backend: you'll need to work with the backend team on the type of notifications they want to send and their triggers. Your backend counterparts will have to become familiar with the mobile push notification infrastructure and capabilities to make the most out of this channel. Users can opt out of push notifications or not opt in to start with. On iOS and Android, you have different ways - and limitations - in detecting when this is the case. Push notifications are usually a \"nice to have\" for many applications, exactly because you cannot guarantee that each user will opt into them - or that their device will be online to receive them. Using push notifications together with emails and text messages  is a popular strategy for marketing activities. If your app is used for marketing purposes, you'll almost certainly not implement push notifications from scratch. You'll use a third-party customer engagement service like Twillio, Airship, Braze, OneSignal, or similar. Push notifications come with the same challenges as deeplinks  for the action the notification performs. A push notification is a glorified deeplink: a message with an action that links into the app. Thinking about backward compatibility, state problems, and planning ahead all apply for push notifications as well. Testing push notifications  is another pain point. You can, of course, test this manually. However, for automated testing, you need to write end-to-end UI tests: expensive tests to create and to maintain.  See this tutorial  on how to do this for iOS. Background notifications  are a special type of push message that is not visible for the user, but goes directly to your app. These kinds of notifications are useful to sync backend updates to the client. These notifications are called  data messages on Android  and   background notifications on iOS  - see an  example for iOS usage . The concept of background notifications is handy for realtime and multi-device scenarios. If your app is in this area, you might decide to implement a cross-platform solution across iOS and Android, and instead of the mobile app polling the server, the server sends data through background push notifications to the client. When rewriting Uber's Rider app in 2016, a major shift in our approach was exactly this: moving from poll to push, with an in-house push messaging service. Background notifications can simplify the architecture and the business logic, but they introduce message deliverability issues, message order problems, and you'll need to combine this approach with local data caching for offline scenarios. 6. App Crashes An app crashing is one of the most noticeable bug in any mobile app - and often ones with high business impact. Users might not complete a key flow, and they might grow frustrated and churn or leave poor reviews. Crashes are not a mobile-only concern: they are a major focus area on the backend, where monitoring uncaught exceptions or 5XX status codes is common practice. On the web, due to its nature - single-threaded execution within a sandbox - crashes are rarer than with mobile apps. The first rule of crashes is you need to track when they happen and have sufficient debug information . Once you track crashes, you'll want to report on what percentage of sessions end up crashing: and reduce this number as much as you can. At Uber, we tracked the crash rates from the early days, working continuously to reduce the rate of crashed sessions. You can choose to build your own implementation of crash reporting or use an off-the-shelf solution. Coming up to 2021, most teams choose one of the many crash reporting solutions such as  Crashlytics ,  Bugsnag ,  Sentry , and others. On iOS,  crash reports are generated  on the device with every crash that you can use to map these logs to your code. Apple provides ways for  developers to collect crash logs from users  who opted to share this information via TestFlight or the App Store. This approach works well enough for smaller apps. On Android, Google Play also lets developers view crash stack traces through  Android Vitals in the Play Console . As with Apple, only users who have opted in to send bug reports to developers will have these crashes logged in this portal. Third-party or custom-built crash reporting solution s offer a few advantages on top of what the App Store and Google Play have to offer. The advantages are plenty, and most mid-sized and above apps go with either a third party or build a solution with the below benefits: More diagnostic information.  You'll often want to log additional information in your app on events that might lead up to a crash. Rich reporting . Third-party solutions usually offer grouping of reports and comparing iOS and Android crash rates. Monitoring and alerting  capabilities. You can set up to get alerts when a new type of crash appears or when certain crashes spike. Integrations  with the rest of the development stack. You'll often want to connect new crashes with your ticketing system or reference them in pull requests. At Uber, we used third-party crash reporting from the early days. However, an in-house solution was built later. A shortcoming of many third-party crash reporting solutions is how they only collect health information on crashes and non-fatal errors, but not on app-not-responding (ANR) and memory problems. Organizations with many apps might also find the reporting not rich enough and might want to build their own reporting to compare health statuses across many apps. Integrating better with in-house project management and coding tools could also be a reason to go custom. Reproducibility and debuggability of crashes  are another pain point that impacts mobile more than backend or web teams. Especially in the Android world, users have a variety of devices that run a wide range of OS versions with a variety of app versions. If a crash can be reproduced on a simulator or on any device: you have no excuse not to fix the problem. But what if the crash only happens on specific devices? How do you prioritize fixing a crash? Is a less \"smaller\" crash in a more frequently used part of the app more important to fix than a \"larger\" crash in a less frequently used part? Put a prioritization framework in place  to define thresholds, above which you'll spend time investigating and fixing crashes. This threshold will be different based on the nature of the crash, the customer lifetime value, and other business considerations. You need to compare the cost of investigation and fixing compared to the upside of the fix, and the opportunity cost lost in an engineer spending time on something else, like building revenue-generating functionality. 7. Offline Support Though offline support is becoming more of a feature with rich web applications, it has always been a core use case with native mobile apps. People expect apps to stay usable, even connectivity drops. They certainly expect state not to get lost when the signal drops or gets weaker. Proper offline mode support adds a lot of complexity and interesting edge cases to an app.  State needs to be persisted, locally and when connection recovers, it needs to be synchronized back. You need to account for race conditions when a user uses the app on multiple devices - some online, one offline. You should take additional care with app updates that modify the locally stored data, migrating the \"old\" data to the \"new\" format - we'll cover this challenge in  Part 3 of the series . Decide what features should work offline  and which ones should not. Many teams miss this simple step that makes the planning of the offline functionality easier and avoids scope creep. I suggest starting with the key parts of the application and expand this scope slowly. Get real-world feedback that the \"main\" offline mode works as expected. Can you leverage your approach in other parts of the app? Decide how to handle offline edge cases . What do you want to do with extremely slow connections: where the phone is still online, but the data connection is overly slow? A robust solution is to treat this as offline and perhaps notify the user of this fact. What about timeouts? Will you retry? The app going offline is an everyday scenario. How will you handle this? Retries can be a tricky edge case. Say you have a connection that has not responded for some time - a soft timeout - and you retry another request. You might see race conditions or data issues if the first request returns, then the second request does so as well. Synchronization of device and backend data  is another common yet surprisingly challenging problem. This problem multiplied with multiple devices. You need to choose a conflict resolution protocol that works well enough for multiple parallel offline edits and is robust enough to handle connectivity dropping midway. With poor connectivity, the network request can sometimes time out. Sensible retry strategies or moving over to offline mode could be helpful. Both solutions come with plenty of tradeoffs to think about. Retry strategies  come with edge cases you need to think about. Before retrying, how can you be sure that the network is not down? How do you handle users frantically retrying - and possibly creating multiple parallel requests? Will the app allow the same request to be made while the previous one has not completed? With a switch to offline mode, how can the app tell when the network has reliably recovered? How can the app differentiate between the backend service not responding versus the network being slow? What about resource efficiency - should you look into using HTTP conditional requests with retries utilizing  ETags  or  if-match headers ? Much of the above situations can be solved relatively simply when using reactive libraries to handle network connections - the likes of  RxSwift ,  Apple's Combine , or  RxJava . An edge case goes beyond the client side, which does get tricky: retries that should not be blindly retried. Requests that should not be retried  come with a separate set of problems. For example, you might not want to retry a payment request while it's in progress. But what if it comes back as failed? You might think it's safe to do so. However, what if the request timed out, but the server made the payment? You'll double charge the user. As a consumer of backend endpoints, you should push all retries on API endpoints to be safe by having these endpoints be  idempotent . With idempotent endpoints, you'll have to obtain and send over  idempotency keys  and keep track of an additional state. You'll also have to worry about edge cases like the app crashing and restarting and the idempotency key not being persisted. Implementing retries safely adds a lot of mental overhead for teams. You'll have to work closely with the backend team to map the use cases to design for. As with state management, the key to a maintainable offline mode and weak connection support is simplicity. Use immutable states, straightforward sync strategies, and simple strategies to handle slow connections. Do plenty of testing with the right tools such as the  Network Link Conditioner  for iOS or the  networkSpeed capability  on Android emulators. 8. Accessibility Accessibility is a big deal for popular applications, a few reasons: If you have a large number of users, many of them will have various accessibility needs, finding it difficult - or impossible - to interact with your app without adequate support for these. If the app is not accessible, there is an inherent legal risk for the app's publisher: several accessibility lawsuits targeting native mobile apps  are already happening in the US . Accessibility is not only a \"nice\" thing to do:  your app quality increases  as you make it more accessible. This thought comes from Victoria Gonda, who has collected  excellent iOS and Android accessibility resources . Before you start, you'll need to confirm the level of depth you'll go into implementing  WCAG 2.1 mobile definitions . Ensuring the app is workable for sighted people over VoiceOver (iOS) / TalkBack (Android) and making sure colors/key elements are contrastful enough are typical baseline expectations. Depending on your application type, you might need to consider hearing people or users with other accessibility needs. Accessibility goes deeper than ensuring sighted people can use the app. Allowing people's accessibility preferences to work with the app, such as supporting the user's font size of choice -  Dynamic Type support  on iOS and  using scale-independent pixels as measurement  on Android are both practices you should follow. You'll also need to take  device fragmentation into account . For example, in the Android world, the OnePlus model is known to have a different font size to the rest of the ecosystem. Implementing accessibility from the start is a surprisingly low effort  on iOS and a sensible one for Android. Both platforms have thought deeply about accessibility needs and make it relatively painless to add accessibility features. Retrofitting accessibility is where this problem can be time-consuming. Making accessibility part of the design process is a better way to go about things - this is why it's a good idea to make accessibility part of your  planning/RFC process .  Thinking in VoiceOver frames  at a page level (iOS) and following accessibility best practices from the start are a good investment. Testing accessibility is something that needs planning.  There are a few levels of accessibility testing you can - and should add: Automate  the parts of accessibility checks that can be automated - like  checking for accessibility labels  on screen elements. On iOS, you can also have VoiceOver content displayed as text and potentially automate these checks as well. Manually test  accessibility features: do this at least semi-regularly, as part of the release process. Recruit accessible users  in your beta program to get feedback directly from them. This is more feasible for larger companies - however, the payoff of having these users interact with the engineering team can be a major win. Turn on accessibility features during development  where it's sensible to do so. This way, you can inspect these working and get more empathy on how people who rely on these would use them. 9. CI/CD & The Build Train CI/CD for simple backend services and small web applications is straightforward. Yet, even for simple mobile applications, it is less so: mostly because of the app store's manual submission step. On Android, you can automate this process, as you can with enterprise iOS apps: just not for App Store releases. No fully automated continuous deployment on iOS. iOS and Android platforms are different: each requires their own build systems and separate pipelines.  Companies who end up going with a third-party CI will also struggle to find a simple-to-use solution, and in the end, will probably choose  Bitrise . Bitrise is the only mature service on the market that started with iOS and Android CI as their core offering. All other CI services try to \"lump in mobile\" on top of the backend CI offerings, and it's just more painful. Bitrise  is CI/CD built for mobile - by mobile engineers. From pull request, to app store submission and beyond, Bitrise automates, monitors and improves your app development workflows. Teams who use Bitrise build better quality apps, deliver them faster, with developers who are happy. Bitrise supports native Android,iOS, React Native, Flutter and builds with other popular mobile frameworks. Need support for a specific development step like testing, code signing, or notifying when a build has issues? With an open source library of hundreds of integrations you‚Äôll probably find what you need: or be able to build it quickly. More than 100.000 developers and thousands of organizations trust Bitrise.  Try it for free   and build better apps, faster. When owning your own infrastructure and having some dedicated staffing for builds, solutions like Buildkite can give more control and a better experience than third-parties. A few mobile leads at medium and large teams shared how they are happier with keeping builds in-house, despite the higher cost. You'll find yourself using popular build tools to automate various build steps, such as uploading to the app store. For iOS, this will likely be  Fastlane , and for Android builds running on Jenkins, it could be a  Jenkinsfile  or similar. Be vary of maintaining your homegrown CI system if you won't have dedicated people bandwidth  to support this. I've seen startups repeatedly set up a Jenkins CI, get it running, just to realize months later that  someone  needed to keep dealing with infrastructure issues and the growing pile of Mac Minis. I  suggest to either offload the build infra to a vendor or have a dedicated team owning mobile build infrastructure. At Uber, we had a dedicated mobile infra team who owned things like the  iOS  and  Android monorepo  or  keeping master green at scale . The build train  is the next step after you have a CI in place. A build train is a way to track the status of each of your weekly or bi-weekly releases. Once a release cut is made for a \"release candidate\" for the app store, a series of validation steps need to happen: some of these automatic, some of them being manual. These steps can include running all automated and manual tests, localizing new resources, dogfooding, and others. Once the release candidate is validated, it is uploaded to the app store and waits on approval. After approval, you might roll out with a staged release - a  phased rollout on iOS  and  staged rollouts  on Android. Your build train would visualize the status of all of the above: which commit was the build candidate cut, where the validation process is, and what the staged rollout status is. The release manager might manually track the build trains. Companies with complicated release steps and mobile infra teams tend to build their custom solution - we did this at Uber. 10. Device and OS Fragmentation Device model and OS fragmentation is an everyday problem on both platforms. Device fragmentation and weird, hardware-related bugs have always been familiar pain points on Android. OS fragmentation is less of an issue on iOS, while it  keeps getting worse on Android . Keeping on top of new OS releases and the accompanying API changes require a focus from mobile engineers.  Both iOS and Android keep innovating:  features and APIs keep being added, changed, and deprecated. It's not just big changes SwiftUI or Dark Mode  on iOS13 , biometric authentication APIs on  iOS 8 (2014) , and  on Android 10 (2019) . There are several smaller APIs, like  credit card autofill on Android Oreo  - that exist on one platform, with no equivalent on the other. In all honesty, learning about the new APIs on WWDC or Google I/O, then adding them to the app is the fun part. Making sure the app keeps working without issues on older OS and devices  is more of a challenge. You'll typically need to either set up an in-house device lab or use a third-party testing service to ensure that the app works correctly on all major models. A peek into Facebook's device testing lab in 2016: the slatwall. Credit:  Facebook engineering blog . Android has far more quirks when it comes to edge cases and crashes that are specific to certain devices. For example, Samsung devices are well-known for  strange crashes  related to the Samsung Android customization - not to mention special  layout considerations for the Galaxy Fold . Amazon's Fire OS is another problematic device to support, thanks to the  forked Android version  these devices run on. Crash reports, user bug reports, and large-scale manual testing are ways to stay on top of new issues and regressions. All of these will be far more time consuming and expensive than most people expect. Android has one more fragmentation issue: Android forks that do not run on Google's ecosystem. Apps built for Fire OS or future Huawei devices won't have access to Google Play Services. This means functionality like Firebase notifications won't work. For businesses that want to support these devices, using alternative approaches will mean additional time spent building, testing, and maintaining. Deciding how and when to stop supporting old OS versions  is a process your mobile team should put in early on. The cost of supporting old iOS and Android versions are high: and the payoff can be low. The business will naturally push to support as many devices as possible. The team needs to quantify what this support adds up to. When revenue or profits from the old version is less than the cost to maintain, the pragmatic solution is to drop support for old OSes. While there might be legal requirements in certain industries to support old OSes, the smaller windows you support, the faster you'll be able to move. At the end of 2020, it's common for Android teams to support from version 24 and up (Nougat) - but rarely going back to before v21 (Lollipop). On iOS, thanks  to more rapid OS adoption , many businesses for versions beyond the last two or three ones, soon after a new OS release. Next Part and Credits Interested in reading the next partd? You can do so in the ebook  Building Mobile Apps at Scale . Thank you  to the more than 15 mobile engineers and managers with deep expertise, who have contributed to and reviewed this series. Special thanks to their insights and feedback. If you're on Twitter, you should follow them: Abhijith Krishnappa  (Halodoc) Andrea Antonioni  (Just Eat) Artem Chubaryan  (Square) Barisere Jonathan Corentin Kerisit  (Zenly) Franz Busch  (Sixt) Guillermo Orellana  (Monzo, Skyscanner, Badoo) Injy Zarif  (Convoy, Microsoft) Jake Lee Javi Pulido  (Plain Concepts) Jared Sheehan  (Capital One) Julian Harty Matija Grcic Michael Bailey  (GDE, American Express) Michael Sena  (Amazon) Patrick Zearfoss Robin van Dijke  (Uber, Apple) Rui Peres  (Sphere) Tuƒükan Kibar Will Larson Updates  to this article: 16 Dec 2020: corrected Android supporting background notifications - thank you,  Michael Bailey   for the feedback! 21 Dec 2020: updating dates to the follow-up articles. I've decided to make this a \"proper\" book April 2021: published the book    Building Mobile Apps at Scale ! 8 Sep 2024: updated the article to link to the book for the other 29 challenges \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/mobile-platform-teams/", "title": "Mobile Platform Teams", "content": "\n             This post is an excerpt from my book  Building Mobile Apps at Scale . As the number of mobile engineers working on an app - or in the company - grows, the trend of ‚Äúreinventing the wheel‚Äù tends to emerge as one of the many challenges of  building mobile apps at scale .  TeamA will need a piece of functionality - like logging, analytics, data storage and others. They‚Äôll make their own choices and choose their own implementation. Then TeamB faces the same challenge. Assuming they talk with TeamA, they‚Äôll probably decide it would make sense to reuse what TeamA did: not just for them, but for other teams. The reusability dilemma: scratch our own itch or build a component that is reusable? Reusable Mobile Libraries Internal mobile libraries are usually created sooner rather than later during the development of apps. In many cases, the internal library might just be a lightweight wrapper around a vendor solution: written with the goal of easy migration to another solution, should the need arise. There‚Äôs no limit on what can be an internal library, but common internal libraries often include: Logging Analytics Data persistence Feature flags, A/B testing & experimentation Networking & authentication Testing: UI testing, unit testing, mock generation Brand UI elements, colors, themes UI elements, frameworks & layouts. Message display Animations Image management Navigation frameworks Architecture frameworks Performance monitoring/profiling tools Push notifications Shared functionality specific to app domains: calling, PDFs, scanning, location, maps, and others Mobile Platform Teams Creating mobile platform teams when the number of mobile engineers is large enough is a common solution to the ownership and maintenance problem. There is no ‚Äúgolden rule‚Äù on at what size this should be done - but most companies make this step when they have - or expect to have - around 20-30 mobile engineers. Mobile platform team ownership can vary heavily, based on what is considered ‚Äúcommon‚Äù in the company. Areas commonly owned by a dedicated mobile platform are these ones: Mobile build infrastructure  - especially when deciding to keep the builds in-house. Even when using a third party vendor, a mobile infra team might own the vendor relationship and the setup of the builds. App Store release management.  At companies with mature release processes, this area often includes owning the manual testing process after the build cut, dogfooding/beta processes, and the process for last-minute hotfixes. Developer tooling & experience . At scale - with 15+ engineers working on apps with hundreds of thousands of lines - the limitations of the ‚Äúdefault‚Äù tooling start to become more painful. Building the app or running tests becomes slower - both locally and on the CI. Speeding up these steps is no longer just a ‚Äúquick change‚Äù, but one that could need more complex tooling changes, code structure changes, or both. Architecture & architecture maintenance . The first non-infra platform team tends to take ownership of the app‚Äôs architecture, ensuring it is built in a maintainable way. This team often becomes both a guide to help less experienced engineers make sustainable design decisions, as well as a ‚Äúpolicing team‚Äù that ensures the architecture stays clean and in-line with the broader vision. Dependency management, code quality governance, testability - and testing - will often fall under this umbrella. SDKs  used within - or outside - the company. SDKs are usually specific to the business - and to the needs of the teams. Mobile app reliability & performance : from crash rates, networking reliability, logging and performance monitoring. Building capabilities to enable developers to be more efficient.  With mobile frameworks - and even languages - evolving quickly, much of the ecosystem has gaps. The larger the team, the more visible these gaps are. Several mobile platform teams decide it‚Äôs worth them building a solution when the tooling they could buy is not good enough. Examples of this can include building a custom UI testing framework, putting a device lab in place, or implementing a build train that integrates with bespoke tools across the company. Shared internal library ownership.  Once mobile platform teams are in place, they tend to take over - or build - some of the internal mobile libraries. A few guidelines on running a healthy mobile platform team are these: Clear mission.  Ensure the platform team has a well-defined mission that is more specific than ‚Äúown all the shared stuff‚Äù. Examples of missions could be ‚ÄúEnable mobile engineers to work more efficiently, month after month‚Äù or ‚ÄúShip the most reliable app in our industry.‚Äù Clear goals.  The platform team should have measurable goals on the areas they want to include. Possible goals include range reliability targets, percentage of teams using shared components, lines of code to integrate certain features, number of projects open sourced, and others. A platform team without goals will struggle to decide where to focus on. They will become less efficient than a team that knows where it is going and how they will get there. Think of it like a product.  Many people think of platform teams as \"pure engineering\" teams. However, good platform teams have customers, roadmaps and goals. Pete Hogdson goes into more detail on  why you should think of your platform like a product  and how you can harvest ideas from the platform's customers. Sufficient staffing.  The team should be big enough so that they have the bandwidth to do ‚Äúproduct‚Äù work on the platform, on top of providing support for the rest of the org. Clear contracts between platform and non-platform teams. T he platform team should be clear on what they do and what they don‚Äôt own - and this should be a shared - and agreed - understanding with the product teams. Clear support channels.  Engineers should know where and how they can get support from the platform team. This could be shared chat groups, office hours, dedicated people to ping - and, most likely, a combination for all of these. Clear process for engagement.  The platform team should make it clear how product teams can work with them for feature requests: how to make the request, who and how will prioritize this work, and how they can track the status. Looking for the more effortless mobile CI/CD solution?  Bitrise  is the solution I'd recommend. They're a mobile-first CI/CD solution to help automate the workflow from pull request to app store submission, with hundreds of open source integrations.  Try Bitrise for free  and build better apps, faster. Mobile Platform Teams in the Real World As inspiration, I've collected are examples of how companies approached mobile platform teams. Note that some of the examples are anecdotal, and others might have changed how they operate since. Don't forget that each company solves their own problems, taking their people and other constraints into account. Don't blindly copy what other companies are doing: follow the setup that will result in the right level of leverage you need. Uber  had a platform team owning mobile developer experience - including development tooling and build systems. Another team - called Mobile Platform - owned the architecture and shared services (RIBs and internal additions like experimentation framework). Mobile Platform later split to App Platform (owning app metric/reliability/performance, architecture and Core modules governance) and Mobile Foundations (owning reusable components and frameworks). UberEats  was a \"startup\" within Uber, operating almost fully independently from the rest of Uber in the early years. UberEats was started in 2015, and the first \"official\" mobile platform team was created 4 years later, in 2019. Even before this first platform team, UberEats teams all \"pitched in\" to build components that other teams would use in a reusable fashion. Twitter  used to have an iOS and Android foundation team with a few workstreams each. As the size increased, these teams split into smaller teams within each foundation, like UI, performance, architecture, builds, and developer experience. Amazon  had a platform team owning app architecture, logging, metrics, and shared, \"infrastructure-like\" features. Major features are often spun off in experience teams to own. These experience teams have contracts with the platform to bring clarity on code ownership and how design and code reviews are done. Just Eat  had an iOS and an Android platform team. These teams own all of the \"typical\" platform work, as well as the release process for iOS or Android. Skyscanner  had a Mobile Infra team (owning CI/CD, build and release management) and a Mobile Core team (owning reusable libraries and helping with issues impacting multiple teams). VMware  had a small team building mobile UI components and another team owning SDKs used internally, and by third parties. Zenly  (a Snap company) has a mobile platform team consisting of both mobile and backend engineers. They found that the nature of much of the mobile platform work spans from the app level to the backend. Examples of this include changing the networking layer for a different transport mechanism than TCP, metrics across the app and backend, custom crash reporting, remote debugging, and other advanced functionality. N26  N26 had a \"Core\" iOS and a \"Core\" Android one, these teams owning all shared capabilities. They later explored splitting this team into smaller cross-functional teams, starting with a Design System team. When to spin off the first mobile platform team is always a challenge.  Large mobile teams clearly need one - or more - of these teams. But what about teams that are still small - say, at 15 engineers? Starting a platform team too late can mean lots of redundancy in the code, poor abstractions, and little reusability between identical functionality. Were a platform team in place earlier, this team would have been the natural owner of several - shared - features and would have also taken ownership of the app-wide architecture. Starting a platform team too early has the drawback of making it hard to make a business case for it - why hire an engineer who will  not  ship product work? Additionally, the first platform team usually draws the most experienced engineers into joining this team. These engineers are often also the most productive  product  engineers. Even if the company hires new engineers, these original engineers often leave a gap for a few months on the product teams. Creating Mobile Platform Teams Once you build - and ship - an app, and the app becomes successful, mobile engineering becomes more complicated than most people would expect. There are  more than 30 engineering challenges  that can all cause headaches: many of which do not have one size fits all solutions. Most of the problems come from smartphone development being a relatively young field - coming up around 10 years - and one that still keeps changing.  Sooner or later, you'll probably find yourself noticing engineers or teams \"reinventing the wheel\". As a manager, you might have more exposure to spot pain points that could be better solved with a uniform solution. By building a shared framework, improving tooling, or unifying processes. The idea of setting up a \"mobile platform team\"  will probably come around to you if your area has around 20 or more mobile engineers working on one or more apps. You'd probably be able to identify areas that could make more sense to be owned by a single team. But how do you go about this? Should you champion this cause? I have set up a mobile platform team at Uber, creating the Payments organization's first mobile platform team. Here's the advice I have on how to go about with an effort like this: Verbalize the problems a team like this could solve.  Talk about issues the company is facing today and what the impact of a platform team could be. Talk with numbers. In my case, our pain point was how it took months to ship a new payment integration at Uber, and the cost was about an engineering year per integration. And we had a long backlog of these. Empower engineers to think about problems, solutions, and data.  Mobile platform teams are run by engineers. Lean on them to learn about the problems they see. Empower them to come up with platform solution suggestions and try to estimate the impact of these. Consider telling them,  \"Imagine I had a magic wand to create a platform team that can focus on solving the biggest pain points we have today. What are these pain points, and what would the impact of solving them be?\" Get informal buy-in from your manager chain and product management.  You won't get the support or funding to create a platform team if your manager(s) and product manager(s) don't agree. Once you have the data, socialize the idea. Aim to do this at the decision-maker level: the people who will decide to allocate funding. In my case, this meant my manager, my skip-level manager, and the head of product for Payments. Write a draft narrative - and share it with key people.  Once you have verbal buy-in, put together a narrative of the team. Summarize the context to why this team should be created, the problems it will solve, ownership, success metrics, staffing, roadmap, and other relevant topics. Make it as specific as possible, using numbers and dates. Get the funding.  At this point, you should have support from your management chain and a strong business case. If you get the go-ahead: congratulations, you can \"formally\" start the team! Don't sweat if you're not funded . Even with support from your management chain, you might not get funding for a variety of reasons. This doesn't make the business case any less valid. See if you can \"do more with less\", kicking off a few \"platform efforts\" with your current team. If you can show impact and further convince your management chain in the ROI, you will probably be able to revisit funding later. Everything you have put together should only help with this. I share a business case for funding a mobile platform team  with paying subscribers of my newsletter:  access it here . The document outlines the context, the vision and mission, ownership and success metrics for the team. Mobile Engineering is Challenging at Scale Building mobile applications at scale are just as challenging as architecting and operating distributed systems. Platform components and teams are just one of the many challenges you'll probably across. Check out my book,  Building Mobile Apps at Scale: 39 Engineering Challenges . Covering an additional 38 mobile challenges on top of mobile platfrom teams. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/equity-for-software-engineers/", "title": "Equity 101 for Software Engineers at Big Tech and Startups", "content": "\n             A growing number of startups and Big Tech companies offer equity - stocks, options, and others - as part of software engineering compensation. However, I've noticed few engineers understand what these mean. When I was a hiring manager at Uber in Amsterdam, engineers usually focused far more on the base salary, taking little interest in equity. Several people only realized much later - sometimes at the IPO - how big of a deal a good equity package means. \"Why should I care about equity?\"  is a question I frequently get, especially from engineers who have yet to be issued equity. Here's why: for almost all total compensation packages over $250K in the US and ‚Ç¨150K in Europe, an increasing chunk of it is equity. Both publicly traded companies in Big Tech and startups frequently issue meaningful stock to software engineers. This post attempts to summarize the most common equity compensation setups  you might come across, help you understand their value, and point to additional resources. This is the information I wish I knew earlier to understand how equity works at the high-level, and help me do more detailed research when I got offers that contained equity components. Disclaimer: this article is not tax or legal advice or advice of any form.  Though I have received options, RSUs and been part of ESPP schemes: I'm no financial advisor or expert on the topic. Do your homework beyond this article: read the fine print in offers, talk with people who have more context, or find an expert.  Books that go deeper in the topic - especially for equity with US-based companies - are: Equity Compensation for Tech Employees  - a book I reviewed, written by  Matt Dickenson , software engineer at Square. The Holloway Guide to Equity Compensation  - a popular book for tech employees. We'll cover the following topics: Why Equity is Important: Success Stories Vesting, Cliffs, and Clawbacks Stock Options, ESOPs and NSOs RSUs (Restricted Stock Units) Double-trigger RSUs ESPP (Employee Stock Purchase Plans) Phantom Shares SARs (Stock Appreciation Rights) Virtual Shares, Virtual Options Growth Shares Dilution Taxes Why Equity is Illusive: Cautionary Examples 1. Why Equity is Important: Success Stories Equity is an important compensation component for software engineers at Big Tech and the \"top\" tech startups. At places like this, staff and above levels in the US often receive  more  in stock per year than their base salary: Compensation data for Facebook, Uber, Stripe and Twitter based on salaries shared on Levels.fyi. At these companies, equity becomes more prominent from the senior and staff engineering levels. For the majority of software engineers I know - including myself, based in Europe - equity has been hugely beneficial. Still, few people have heard of these stories from friends and assume equity upsides are limited to either those in Silicon Valley, or to executives. Here are a few outsized success stories to illustrate the type of gains software engineers have seen in the past: $12M in options and stocks gain for a software engineer  who joined Doordash in 2018 as a software engineer 2 ( source ). They were allowed to sell their stock starting May 2021, after the 6-month lockup expired. $10M in equity gains  for 4 years' of equity vested for the first 10 engineers at Amplitude, an analytics startup ( source: the founder ). The startup was the first to put  extremely employee-friendly equity policies  in-place, like a 10-year post-termination exercise window. This meant that even if any of these first 10 employees left after 4 years, they still made $10M or more without having to exercise their options, and could do so, years after, on the IPO. $6M in options gains for a software engineer  at Databricks who accepted an offer late 2018 that included 50,000 options spread over 4 years ( source ). Databricks was valued at around $1B at this time - as of February 2021, it is valued at $28B. This engineer has not yet vested all options, and they are not yet liquid - but there's a high chance they will be, following an IPO. $2.2M in gains in 1.5 years for a software engineer  who joined Snowflake in 2019, 1.5 years before its IPO. Taxes were a big source of this engineer, with the exercise cost and taxes accounting for $508K (the gains were on top of this). Source:  Secfi state of tax options 2020 . $600K/year for a staff software engineer at Google  in Washington with the following setup: $240K in base salary, $300K/year in Google stock, and $60K in cash bonus. Staff and above levels making more in RSUs than base salary is not uncommon at publicly traded Big Tech companies in the US. ‚Ç¨500K/year at Snap, in Europe for a senior engineer , thanks to stock rises. A person I know received an offer at Snap with ‚Ç¨100K/year in base salary and $100K/year in RSUs. They received RSUs around $10 each in early 2019 - a total of around 30,000 RSUs. The stock has grown by more than 6x, and this person is currently vesting around ‚Ç¨400K/year just in stock. Had they not received such a strong equity package, they would not have benefitted from the rise in equity. Non-senior software engineer making ‚Ç¨250K/year in Germany  thanks to equity. A software engineer received 4,000 RSUs vesting over 4 years when joining Airbnb. At the time, the internal stock price was at $60, valuing this package at  $60K/year (1,000RSUs/year), on top of their ‚Ç¨90K/year salary. Following the IPO and the increase in share price, the equity is worth around $180K/year (at a share price of $180/share and 1,000 shares/year - ‚Ç¨150K/year), bringing their total liquid compensation to around ‚Ç¨250K (including an annual ‚Ç¨10K bonus). All of the success stories can be attributed to meaningful equity offers and the equity value of the companies skyrocketing. Both Doordash and Databricks have increased their company valuation by more than 30x in the past 2.5 years - and even  with dilution , equity holders saw probably 20x or more in gains. Valuations for Snap and Airbnb have risen by 4-6x in the past two years. Equity, however, is risky . There is no guarantee of an IPO, and even less of the stock jumping as much as it did with Doordash or Airbnb. This article will close  with cautionary stories  where people were left with nothing - or - even worse - lost lots of money through options. There is no free lunch, and you will not see outsized gains without taking on some level of risk. 2. Vesting, Cliffs, Refreshers and Clawbacks Any time you'll be awarded equity, you'll see a few common terms. Vesting  refers to in what installments you'll \"get\" the equity. Say you are awarded 48 shares - or options - over 4 years, and they vest quarterly. You would get 3 shares - or options - each quarter. If you stay for the full 48 months, all 48 of your shares/options vest. Cliffs  are a clause that requires you to stay at a company for a minimum amount of time before you get  any  equity. In the previous example, without a cliff, you could decide to quit after 3 months and still walk away with 3 shares/options. This might be in your interest, but the point of equity is to incentivize staying long-term. A one-year cliff is typical with privately traded companies and is usually not negotiable. Going back to the previous example: 48 shares over 4 years, vesting quarterly, with a 1-year cliff would mean this vesting: 3 months, 6 months, 9 months: no shares. 12 months: 12 shares 15 months: another 3 shares... and the same, every 3 months. For publicly traded companies, no cliff on vesting is becoming more of the norm in big tech. Google, Facebook, Spotify, Pinterest, Uber and Doordash all issue stock with vesting starting immediately: so you can share stock after the first month or quarter (depending on the vesting schedule). Conversion from monetary value to shares  or options could happen at two timeframes: Converting when awarding the grant . This is the most common scenario. For example, if you join Microsoft and your contract states you are awarded $244,000 in stock over 4 years, and Microsoft's stock price is $244 at this time, then you'd get awarded 1,000 units of stock to vest over time. This approach ensures upside if the stock goes up - but also downside if it goes down. Converting on vesting of each stock unit . This is an approach Stripe, Lyft, Walmart and a few other companies are taking as of recently. Say you are awarded $480,000 of Lyft stock to vest over 4 years, at a monthly cadence. After the cliff, you'd be allocated $10,000 worth of shares every month, converted on the spot. This approach ensures you get $10,000 worth of stock every month: but you get no upside from the stock going up or see a downside if it goes lower. Equity refreshers  are something that many Big Tech companies award to either a wide population or to people perceived as top performers. They are typically awarded annually and can have a different vesting schedule from your original equity awards. While I was at Uber, both myself and most people I knew received equity top-ups every year. This is not the norm for all companies, though: I know several places that either do not have this in place or only the top 20% might receive any form of additional equity. Part of my equity refresh in 2019, at Uber. I received annual equity refreshers on top of the annual cash bonuses - as did most engineers working here. As I left Uber late 2020, I forfeited most of this equity, as well as other unvested equity. Signing cash bonuses  are sometimes awarded together with equity, especially when your equity vesting is back-heavy. For example, the Amazon vesting schedule follows a 5-15-40-40% pattern. You get 5% of your equity the first year, 15% the next, and 40% in years 3 and 4. In practice, this means you get less equity earlier. Amazon balances this out by granting people a cash bonus upfront for years 1 and 2. Clawbacks  are a term where you need to pay back money or benefits if you leave within a certain amount of time. They are most often used for upfront cash bonuses, like the one with Amazon. They might also be used for relocation expenses. For equity, clawbacks are not needed, as if you leave early, you won't get the equity that you have not vested. However, for vested equity: this should now belong to you, and - in the case of options - you should be able to exercise them. Post termination exercise window  refers to what happens to your vested, but not yet exercised stock when you leave the company - either through your own will, or because you have been let go. If a startup has gone through high growth, exercising the stock options might be very expensive: not because of the price, but because you need to pay tax. This could amount to tens, hundreds, or even millions of dollars. Many US startups offer a standard, 90-day exercise window. When early GitHub engineer Zach Holman was fired from the company, he had millions of paper gains, but not the money to pay off taxes when exercising. He wrote the F uck Your 90 Day Exercise Window  article that explains why such short windows are a bad deal for employees.  Look for companies that offer 10-year exercise windows: something that is becoming more common in the industry, many Y Combinator startups offering this from the get go.  See a list of such companies here . IPO lockup periods  are a time frame when you cannot sell shares that you have vested, following an IPO. The standard term is 6 months for most companies. For example, when Uber went IPO in April 2019, employees could not sell the stock until December 2019. Note that the employer might sell RSUs during this time period to cover taxes for employees. Typical terms  in Big Tech and sensible startup equity are these: One-year cliff  for vesting for private companies. No cliff for publicly traded companies. 4-year vesting  of grants with monthly or quarterly vesting. Any longer vesting goes against the usual \" up to four years tour of duty \" that most innovative companies and organizations utilize - and which \"tour of duty\" can be extended a few years in, with another, sizable equity grant. Clawback  on upfront cash bonuses or relocation expenses for up to two years. Equity refreshers  are variable. Better companies award them to most employees as part of the bonus process. Places like Amazon award them to a small population. Refreshers often have 3-year vesting. Red flags  for equity are - unfortunately - not uncommon. If you spot any of these, proceed with caution. Predatory vesting or clawback terms . A few people mentioned seeing clawback clauses on equity where you would need to repay all equity if you left before 4 years. Longer vesting period than 4 years: this is outside what is \"normal\" in tech or a productive \" tour of duty \" . A 4-year vesting is the standard for most tech companies. In Europe, 5-year terms used to be the \"norm\" up to a few years ago, but this is changing to 4 years for all \"reasonable\" companies. Anything longer is a red flag - I know of some EU startups offering 6-year vesting periods who get turned down by candidates knowing what reasonable vesting windows are. Short windows to exercise options  after leaving the company (post termination exercise windows). Many companies have 90-day windows for exercising options. This can be problematic for many people. Look for companies that have 10-year exercise windows -  here's a list of such companies . Amplitude was one of the first companies to  introduce this setup , and they have  open-sourced their approach . Stock granted as dollars in a high-growth pre-IPO company can be a yellow flag.  In October 2020, Stripe  has changed  from giving four-year RSU grant to giving out a fixed dollar amount of stock at the end of every year, at the same value. Because most people expect Stripe's stock price to keep going up, this practice means employees will lose out on all stock gains for 4 years. From an employee perspective, they are not getting equity, but a large cash bonus that has no upside - or downside. In general, seek expert advice to review the equity terms to avoid surprises later down the road. If you could gain enough money to pay for a house from an equity package - you should probably spend comparable time and money on due diligence than you would with buying a house. 3. Stock Options, NSOs and ESOPs Employee Stock Options (ESOPs)  or Non-Qualifies Stock Options (NSOs)  are often just called stock options. Options are a common type of equity to be granted by startups and high-growth companies to employees. It's the most common form of equity compensation for companies that are not yet close to an IPO - and, usually, the least understood by engineers. The option is an opportunity to buy a share of the company (\"exercise\") at a given price (\"strike price\") after the option vests. \" How much is my options package worth  - both now and in the future, assuming the company goes public/is acquired at $X valuation\" is the question you'll want to answer whenever you get an offer with equities. Unfortunately, not all companies make this easy. To do so, you'll need to figure out: What ownership %  the options would mean if you exercised them. This is relevant typically for pre-seed, seed and (sometimes) Series A companies. The option strike price and the fair share valuation  that investors paid for in the last round of funding. This is typically information based on the 409a valuation. In the US, the strike price needs to match the 409a valuation at the time. For example, say you are issued 10,000 options at a $10 strike price, which is the 409a valuation at the time. If, at a later point, that company would have an exit at a $50 stock price - may this be an IPO or an acquisition - then your package could be worth $400,000: 10,000 x ($50-10). However, if the exit would be at a $9 share price, your options would be under water, and be worth nothing. The price for preferred stocks that investors paid for in the last round . As RevenueCat cofounder Miguel Carranza  shares : \"you might want to know how much investors paid for a preferred stock in the last round (which would typically have a markup.)\" Expected company growth  that is realistic/conservative / optimistic from your perspective. Future growth is both the biggest opportunity for your equity package to grow in value: but it's equally the biggest risk. Expected dilution  as the company grows. The company raising money at double the valuation will most likely mean your options/shares will be worth less than twice their current value due to dilution. Dilution can be hard to predict Exit scenarios . Options are only worth anything if there will be a financial event - IPO or acquisition - where the shares will become liquid. IPOs are typically a lot cleaner from a financial perspective than acquisitions, where  ratchet clauses  will protect early investors' interests. See cautionary examples for examples where employees were left with little to nothing after company acquisitions. Post-termination exercise period : if you leave the company, how long do you have to exercise options that you've vested? Look for places where this is years, not 90 days. See a list of startups with  extended exercise windows here . Equity issued in different stages of venture funding is hard to compare : it's like comparing apples to oranges. This is because of the expected growth of the company is higher, the earlier the stage. However, the time for any exit is also  much  longer and more uncertain if it will ever happen, the earlier the stage. For example, most seed-stage, venture funded companies optimistically hope to grow 100x or more, over the next many years. At Series D, E, or F, this optimistic growth is more expected to be 2-5x before a potential exit. However, the earlier stage the company, the higher risk that they will never exit. Do your research on the industry, the founding team, the investors so you can \"price\" the value of equity, and the value of a potential outcome.  TLDR Options  is a site that helps you visualize various outcomes with crude estimations. TLDR Options  is a crude visualization to help you understand the risk - and upside - of stock options at different stages of venture funding Most companies will represent options to be worth more than they probably are, and there's not much you can do about this. As software engineer Dan Luu puts it  in this article ,  \"startups prefer options because their lack of value is less obvious than it would be with cash\" . Using your own savings to exercise options  is the biggest downside of options from an employee's perspective. Let's imagine you joined Uber early on, and you've received 50,000 options at a $4 strike price each. Let's assume that these shares would be valued internally at $44 each in 2017. However, Uber is not public, and you want to leave the company, and let's assume you have a 90-day post-termination exercise period. On paper, you have made $40 profit on each option and gained $2,000,000 in value. However, you would need to pay $200,000 from your own savings just to exercise these options - and we've not even talked about taxes. It might be tempting to borrow the money: but what happens if Uber never goes public? You will have lost all that money. What happens if they do go public and you have left and lost the right to exercise those options? You could have left millions on the table. This is yet another reason to look for places that have multi-year post-termination exercise periods. Exercising options early  is the number one concept most people in tech mentioned as something they wished they knew about. Exercising options before they vest, can qualify for favorable tax treatment. Here's a case studyof what it would have meant for an early Snowflake employee, instead of waiting for the IPO: Exercising options early vs waiting for the IPO for a Snowflake employee. A 20% difference in the outcome. Not having the funds  to cover exercising options and the tax is the main reason many engineers shy away from this option. This is where financing solutions providers might help: they can offer no-downside funds to exercise, and then take a fair cut at the IPO, often resulting in more profit than if you would have exercised options later. Examples of providers who can offer financing solutions include  Secfi ,  Quid ,  EquityBee ,  Forge Global . Find others by searching for \"stock option financing\". Getting issued options at late-stage companies can be risky , as they might turn out worthless after an IPO, if the company's valuation does not grow fast enough. This is called the options being under water. This is why companies above the $1B valuation typically issue  RSUs  or  double-trigger RSUs . At Uber, some of the options ended up under water. Some people who joined in 2015 received options at the strike price of around $31 per share. Uber later went public at a $45 value. However, after the lockup expired, the share was at $30. This meant that those options were under water and worthless. Compare this with employees who joined in 2016, and received double-trigger RSUs. Even though the issue price of the RSU was $48, at a $30 stock price they were still worth 62% of the issue price. Get professional help  in understanding how to maximize your equity value: both from experts like  Secfi , and startup equity and tax advisors. Further reading: Options vs cash  from software engineer Dan Luu - a must-read for software engineers Understanding startup options  from YCombinator The State of Stock Options in 2020  from Secfi Stock Options chapter  in the  Holloway Guide to Equity Compensation Employee Stock Ownership Plan (ESOP)  on Investopedia Exercising stock options  from Carta Fuck your 90 day exercise window  from an Zach Holman, an early GitHub engineer List of startups with extended exercise windows  that are longer than 90 days Secfi : a company to help make the most of your stock options 4. RSUs (Restricted Stock Units) Publicly traded companies  are on the stock market - like Microsoft, Google, Amazon. Anyone can buy and sell their stock after opening a stock account. RSUs  - Restricted Stock Units - are a form of stock compensation that publicly traded companies often offer to software engineers. You'd typically get awarded a specific  amount  of stock that  vests  over a  given time period . Depending on the terms of the stock, it could be awarded in various ways: You get awarded a number of shares : converted from the dollar amount from when your award is approved. Say you get awarded  $120,500  in Microsoft stock that vests over 4 years. Let's assume your stocks get awarded when the Microsoft stock price is $241. You would get awarded 500 units that vest over these 4 years: or  125 units per year . If the price of Microsoft stock goes up or down, so does the value of this package. Once the stocks vests, you can decide to sell them or keep holding them. You get awarded a dollar value of shares  that get converted to shares on vesting. Say you get awarded the same  $120,500  in stocks to vest over 4 years. Regardless of the stock performance, you'd receive  $30,125 per year  in stocks. Once you get these stocks, you can sell or keep holding them. Companies have an RSU policy. However, most places would award a number of shares at the start of your vesting period, making you more of an \"owner\" and someone who can benefit more from the stock price going up. Further reading: Restricted stock  on Wikipedia What is Restricted stock?  on Investopedia Restricted Stock Unit  section in the  Holloway Guide to Equity Compensation 5. Double-Trigger RSUs Pre-IPO companies  are private companies that are not listed on any stock exchange. Only private investors investing in the company can buy shares, usually as a form of an investment rounds. Double-trigger RSUs  is a concept more common for unicorn companies that plan to go public in the coming years. These companies allocate stock to employees that vests similar to how RSUs do with public companies. The problem with awarding RSUs for private companies is taxes. You'd need to pay tax the income from the stock value that you've vested: however, there is no market to liquidate this stock. You'd have to pay out of pocket for the tax, with no way to sell part of your equity cover those taxes. Double trigger RSUs is a setup Facebook  utilized before its IPO , and several other companies have followed since. The idea is that the stock does not vest until a second trigger - an IPO or another financial event happens. This way, taxes are due on the IPO or company sale, but not before. Further reading: Pre-IPO tech giants use Double-Trigger RSU vesting to attract talent Private company stock grants plan design trends 6. ESPP (Employee Stock Purchase Plans) Employee Stock Purchase Plans (ESPP) is a benefit offered mostly by publicly traded companies. It allows employees to buy stock 5-15% below the fair market value. Details of ESPP can seem complex, but it's worth understanding, as you can benefit from participating. Enrolment period  is the time you need to decide upfront how much of your salary you contribute. ESPP lookback provision  is a key part of ESPPs. You will purchase stock at the lower or either the offering date or the purchase date share price. Basically, if the stock rises significantly during the period, you might be able to purchase the stock with far more than a 15% discount. See  an example here . Contribution limits  curb how much of your salary you can contribute. ESPP is typically a solid deal, and the limits ensure you can't benefit too much from enrolling. I benefitted quite a bit from ESPPs both at Microsoft and at Uber. Both companies had a generous program with offers to buy stock 15% below the fair market value and contribution limits of about $20,000 per year. Further reading: The untold advantages of your employee stock purchase plan ESPP  on Investopedia A good ESPP is a no-brainer Have an ESPP? Beware of the risks. Is ESPP a risk free investment?  from the Money Stackexchange forum 7. Phantom Shares Phantom shares  or  shadow stocks  are similar to awarding RSUs - but without actually giving out any company stock. Employees receive \"mock stock\". The stock follows the company's stock price changes, and pays out profits after vesting. Profits might mean the difference in share price since issuing, or the price of shares on vesting. Appreciation only plans  would only pay the \"profits\" of the stock increase, since the phantom stock was issued. Say you got awarded one phantom stock when the company's share price is $100. By the time the share vests, the company share price is $150. You would be paid out $50 in cash. Full-value plans  would pay out the full stock value on vesting. Taking the previous example, you'd be paid out $150 in cash when the vesting period ends. Phantom stocks are uncommon for Big Tech, but a few tech companies in the EU issue them. Adyen - a competitor to Stripe - is an example of a company who  grants phantom shares  to its employees. Further reading: Phantom stock plan  on Investopedia 9 frequently asked questions about phantom stock plans Phantom stock: what is it? Why phantom stock can be better than real stock Less common types of equity: phantom stock  from the Holloway Guide to Equity Compensation 8. SARs (Stock Appreciation Rights) Stock Appreciation Rights (SAR) are an interesting middle-ground between stock options and RSUs and are probably the most similar to phantom stocks. Employees would gain the increase in the stock price of the company , during a pre-defined period. They are almost always paid out in cash. They are sometimes issued parallel with options as tandem SARs, so the gain in SARs will help with buying the stock options. SARs are not a type of equity you'll see with US tech startups. You might come across them with some startups preferring this setup in the EU. There are both advantages and disadvantages of SARs both from an employee, and a company perspective. As an employee, SARs could be seen as more beneficial than options, the biggest benefit being how you don't have to pay upfront to exercise them. You basically get cash for the value increase - the payout usually tied to a company liquidity event that happens  while  you work there. The main drawbacks are how, as an employee you have little flexiblity to choose when to exercise after vesting occurs. Also, unlike stock options you exercise, with SARs you typically won't have ownership in the company after you leave - and you might be left with less if, say, an IPO occurs a year after you left. Further reading: Stock appreciation rights  on Investopedia Difference between ESOPs & SARs  on MyStartupEquity blog Pros and cons of SARs and stock options Incentivising employees in start-ups through SARs   Less common types of equity: stock appreciation rights  from the Holloway Guide to Equity Compensation 9. Virtual Shares, Virtual Options Virtual shares  are a synonym to  phantom shares , and are increasingly adopted by European startups. They are similar to RSUs, except they only trigger a financial event - and thus \"vest\" - when the company experiences a financial event (e.g. is acquired or goes public). Virtual share plans are becoming popular in countries  like Hungary  where setting up options or regular share plans would carry much more administration, and tax burdens for employees. Virtual options  are designed similarly to avoid taxation until a financial event happens. This setup removes risks of employees losing their capital if the company either does not have a financial exit, or the exit would be below the option's strike price.  Both virtual shares and virtual options are contracts you need to carefully design. When done well, they can greatly benefit employees, and help companies attract more talent, without the downside of employees having to risk their capital for an uncertain exit.  Further reading: Virtual share plans: the right tool for Hungarian startups to attract and keep talent  on Financier Worldwide Startups and virtual options  from a corporate law firm Raue 10. Growth Shares Growth shares   are a setup where you can get shares only after the company has grown in some way. You are issued the shares only after a \"hurdle rate\" has been met: which typically correlates to business results improving for the company. Growth shares are usually far less advantageous for employees  than other types of shares. When I joined Skyscanner, I was offered growth shares that would have been worth nothing until the business grew by 20%: so it was like an \"underwater option\".  Similary, following massive growth, Revolut changed to issung growth shares. An employee  shared to Sifted : ‚ÄúRevolut used to be amazing for equity, but now they offer  growth shares,  which are useless‚Äù. Growth shares are advantageous for the business as they only have to pay if the business grows. They are shares offered mostly by EU startups, Skyscanner and Revolut being good examples on this. Further reading: Growth shares overview Revolut issuing growth shares with a pricey hurdle rate Growth shares share schemes What are growth shares? 11. Dilution You joined a startup when it was valued at $100M and received options that you calculated to be worth $100,000 over four years. Four years later, the company is worth 20x that, at $2B. Is your equity also worth 20x that, or about $2M? Doubtful. It's probably worth less than that. It could be worth 5x, 10x, or even 15x: all depending on dilution. Dilution occurs when a company raises new investment, and the new investors receive freshly issued stock  at the expense of existing stock holders - founders, earlier investors, and employee stock holders. For high-growth companies who raise several funding rounds, some level of dilution will be an ongoing characteristic. Startups growing at a healthy pace will see stock holders own a smaller piece of a larger pie - but the pie growing typically offsets the shrinking in ownership. At the same time, dilution is rarely the cause for employee stock options not being worth much. Not getting to a liquidity event or just stopping to grow are far more common cases. And remember: there is nothing you'll be able to do about dilution as an employee. However, you might be able to impact growth: and very high growth with high dilution almost always has better outcomes than slow growth with little dilution. Further reading: Dilution: the good, the bad and the ugly  from TechCrunch The dangers of share dilution  from Investopedia Equity dilution for early stage startups  from Silicon Valley Bank 12. Taxes Regardless of what type of equity you'll be issued, taxes will be a key question. When are they due? What is a sensible strategy to optimize them? What options do you have to change how your gains - or losses - are taxed? Taxes on top of exercising options are often a huge surprise factor,  especially for late-stage unicorn employees.  Secfi  collected data from individuals in more than 700 late-stage unicorn companies in the US and found taxes to account for more than 6x the exercise price  in this study : Employees are often surprised at JUST how much tax they might need to pay when exercising options. Secfi helps plan for financing in these cases. Read more  here . Taxes are outside the scope of this article  beyond the fact that they  will  be due. Especially with options and non-liquid stock, they might be due before you can realize the value of your equity. Do your homework and talk to accountants to understand the tax implications. Decide if you want to exercise early - and if you don't have the funds to exercise and pay taxes, look into  financing options like Secfi  who might help out.  Here's a case study  of how early exercising Snowflake options over waiting for the IPO would have saved $130K for an engineer - or 20% of their stocks.  The greater your gains, the greater your tax bill could be: be prepared. 13. Why Equity is Illusive: Cautionary Examples While employee stock is generally something positive, there are plenty of ways you can see no money from them: and even lose money on the stock. Equity being worth less than what you banked on  is a very common case with publicly traded companies and Big Tech. The simplest case is joining a publicly-traded company at a time when its equity value is slowly going down. For example, if you would have joined Snap in 2017, issued an equity grant of $200K/year at the $20/share part, by 2019 the stock would have been down at $5/share, taking this grant to $50K/year. At larger companies, equity \"top-ups\" might have made the \"decrease\" less painful. And just as stock can go down, it can go up: Snap is trading at $61 - 3x of the $20 price range - as of February 2021. If you would have joined Snap in early 2017 at a $20 stock price, by late 2018 the stock grant would have been worth a quarter of the initial grant.‚Äå Looking ahead: will it go up, or down again? Equity being worth nothing  is the most common outcome with startups. The company might never go public. It might be sold at a price where common stock - and options - are worth nothing  thanks to ratchet causes  protecting the early investors. The company might never have a financial event. If you joined the \"next and better Uber\", you'd have gotten nothing. Sidecar was the first \"true\" ridesharing company, connecting riders with drivers who did not have to be black car drivers. Still, despite innovating ahead, the  company shut down  a few years later. Anyone with equity in the company was left with nothing. As another story, one of my friends worked at five startups, over five years, exercising options in each. Only one of the startups ever had an exit: it got sold to another company. My friend had stock worth around $50,000 on paper when he left. He received $215 as proceeds from the sale. Company valuations collapsing like WeWork did and employees losing big money  is not as uncommon as it seems. WeWork was on track for a $47B IPO in 2019, which would have made many employees millionaires. However, this all collapsed in a matter of 6 weeks. Instead of the IPO, Softbank took control of WeWork. Some employees \"only\" lost hundreds of thousands of unrealized gains. However, the 500 to 1,000 early employees  lost hundreds of thousands that they paid on their tax bills  when each share was valued at $50 - and which share price was now reduced to $4. Employees losing big money by exercising options  is not a common story, but one that has happened several times - and not just to WeWork early employees. Good Technology was valued at $1B in 2014 and planned to go public. However, in 2015 Blackberry announced it would acquire Good Technology for $425M  in a fire sale . Several employees  lost large amounts  of savings as they paid cash to exercise options, bought stock in the company, or paid taxes on the common stock they received. The takeaway from this story is that company share prices can go down as much as up, and when a company is sold, common shareholders might end up nearly empty-handed. Fast-growing companies needing to lay off staff and slash company valuation  - and thus, the value of any equity also happens frequently. By nature, high-growth is tied to high risk, and sometimes that risk does not pay off. There's a fair chance you could be laid off during this time. Even if you are not, your equity value is unlikely to be worth as much as it did before. Zenefits went from a $4.5B valuation  to laying off 45% of people in less than two years  in 2017. Bird  laid off a third of employees  when COVID hit, and demand for scooters dried up overnight. When companies are acquired by private equity,  existing shareholders might see little value for their stock, even if the company is later sold or taken public. FanDuel was a seemingly rocketing unicorn, where founders and several employees were millionaires on paper. However, after a  failed merger  with competitor DraftKings, bookmaker Paddy Power Betfair acquired FanDuel for $465 million. As part of the sale, founders and employees got nothing. Lawsuits are  still in progress , but employees are likely to see nothing of the sale. The case of the convertible note not converting  is a rare and interesting story. Toptal employees were promised stock,  but even the company's co-founder was empty-handed . This was because all stakeholders received a convertible note that granted them equity if and only if Toptal raised more money in the future, after their seed round. In almost all cases, companies raise more money. TopTal never did, and thus the founder still owes 100% of the company stock. Lawsuits are in progress, but employees will likely never see stock. Further reading: WeWork staff planned their life around a stock deal that collapsed Zenefits went from a $4.5B valuation to massive layoffs in less than two years Good Technology wasn't so good for its employees Good Technology's $425M fire sale to Blackberry FanDuel founders spin juicy tale in suit against investors. The funds have a different story FanDuel founders and employees file lawsuit against investors who cheated them When a unicorn startup stumbles, its employees get hurt But How Do You Get Into These Companies? Most engineering positions still don't offer any equity: Big Tech and high-growth startups who want to recruit exceptional talent are the ones who typically do. I don't have all the answers, but I do have plenty of experience both interviewing for these companies, and helping others prepare for interviews. If you're interested in interview preparation advice for senior and above engineers and engineering managers,  subscribe to these (free) emails from me here.  I won't publish the contents on this blog - they are my raw thoughts, and I'd ask you to not share them elsewhere. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/want-to-start-a-startup-sell-something-online/", "title": "Want to Learn about Entrepreneurship, as a Software Engineer? Sell Something Online.", "content": "\n             When I decided to write and sell my first ebook,  The Tech Resume Inside Out , I expected to learn about the writing process. How to create a high-quality publication. How to work with editors. Designing a cover and illustrations for the book. And I have, indeed, learned plenty on these topics. This article summarizes the seven product sales-related areas I've learned more about by doing, then by reading. ¬† The book publishing and sales experience felt like running a (very) small business as an enterpeneur. One that had zero risks: yet it uncovered areas I would have neglected had I started a business today. So what did I learn? Marketing, media exposure, ¬†advertising, content marketing, SEO, customer support and accounting. Most of all, why selling something will teach you far more about any of this than just reading - including reading an article like this one. 1. Marketing As software engineers, we're used to building things, shipping them, then moving on to the next thing. As I've been thinking  about startup ideas , I've focused on the \"is there a demand for this?\" and the \"how would I build this?\" topics. For the book, I spent 2.5 months writing, editing, and refining the content of over 200 pages. As the content was almost ready, I made a list of what I need to do for launch. Given the time and effort that went to the book - and how the beta feedback was clear that it  was  a great book for engineering resumes - I wanted to make sure that people who are either out of a job or applying for companies get to hear about it. Marketing was an area I completely blanked on until this launch plan.  Here's what that plan looked like - with each item tagged as content or marketing activity: Your Own \"Marketing\" Network Only Goes So Far I spent an additional month only focused on marketing activities. These ranged from the building - and refining - a landing page, funnels to claim the book for free, collecting testimonials and other activities. Then, after delaying the launch for three weeks straight, most things were ready. I pushed the launch button and sent out the launch messages on various channels: Twitter, LinkedIn, Facebook. The launch within my own network generated buzz on my social media channels with many reshares. It brought about 2,700 visitors to the landing page, generating nearly 200 sales and nearly $2,900 in revenue (sales included free books for developers without jobs). Launch statistics for The Tech Resume Inside Out: What a Good Developer Resume Looks Like The sales funnel  visitors going through the funnel of visitor -> interested -> customer is something I saw plenty of times on my day job. Still, I found myself paying more attention to this one far more than I have done in the past. This funnel very directly impacted me - and my bank account . This was despite not having any real goals on revenue or reach. Once orders started coming in, I started to look into how and why purchases might have happened, where traffic was coming from, and other \"investigative\" work. I looked up what typical conversions are for e-commerce and book sites and whether my 5% is considered good, average, or poor. 2. Media Exposure A week after launch, I ironed out a few rough edges on the landing page and felt ready to submit to Hacker News. The content was relevant to this crowd. I wrote  a Show HN post , then crossed my fingers... and with luck, the post ended up upvoted, and eventually on the front page of Hacker News. Hacker News is an example of a channel that attracts far more eyeballs than most internet forums. My personal network across various social media channels generated 2,700 visits to the book's landing page. Hacker News 2-3x'd this traffic in two days, with at least 7,000 visitors coming from this site. The book sold 2.5x the quantity of the previous launch: The impact of the Hacker News Launch for The Tech Resume Inside Out Media exposure  is an incredibly powerful tool to drive sales. It's one that can be difficult to deliberately get exposed to - I needed luck to get upvoted on Hacker News - but it's usually free or cheap compared to its impact. A similar - though much more impactful - example was how  Traf Icons  saw over  $250K in sales  after  MKBHD  - a YouTuber with over 13M subscribers - made  a video with over 7M views  of him installing these icons. This kind of exposure - may this be online, on YouTube, traditional media, or other outlets - is a reminder of how powerful exposure can drive people's attention to what you create. Most of the World Doesn't Know - or Care - About Your Product Following the Hacker News launch, sales have dropped - as expected - and been steady since. If this was a paid book, this would not be anything unusual. However, despite the book being free for engineers not having a job, most people will never know about this resource. Not unless some accidental media exposure happens, or unless I spend a combination of money, time, and effort in marketing to get in front of them. No matter how good your product is, people won't \"come\" and get it, even if it's free.  This book is probably the best free resource in 2020 / 2021 if you're out of a job and want to get one. It's probably one of the best price-for-value paid resources at a lower price point and Purchase Power Parity support. Still, none of this matters. \"Build it, and they will come\" doesn't work  for ebooks, and it's not a viable strategy for most businesses - save for a few outliers. I'm glad I experienced this lesson first-hand. Should I go down the path of starting a business, the sales and marketing funnels are something I'll be thinking much more ahead than I would have otherwise done. 3. Advertising I've used adblockers for years, being fed up with how slow and annoying webpages were without them. Being someone who knew how targeted advertising works, I also thought myself of being \"immune\" to these ads, for the most part. And I definitely thought they were more annoying than useful or necessary. If I would be selling my product for a living, I would reconsider my stance on advertising: I'd need it.  The product is 95% finished and it's good. People are reading the book, ¬†finding it useful and even recommending it to others. However, the majority of my target market doesn't know about the existence of this resource. If I was to \"scale up\" awareness, I'd have to turn to ads. So far, I've spent $40 on advertising, which turned out to be a waste. On launch, I decided to give Twitter's Promoted tweets a go to  with my launch tweet  to see what happens. The $40 spent got me an additional 8K views, with a 15 click through to my site, and no sales. The process of buying ads on Twitter was also surprisingly difficult: my account went into some weird limbo for half an hour, where I couldn't pay for ads, or checkout. Reporting is also terrible: the only place I could see stats was on the tweet itself: the advertising interface was clearly built for large campaigns, not one-off promotions like I did. Twitter's ads interface (left) and the stats on the tweet (right). If found the interface to be confusing and the ‚Ç¨37 spent on advertising brought clicks at around $3/click, but no sales. Pulled the plug on advertising, for now. Customer lifetime value  is a reason I'm hesitant to enter advertising - on top of not having much interest in maximizing my revenue. With The Tech Resume Inside Out, I'd be competing directly with services that have a higher customer value, like TopResume and their $200+ resume reviews, or resume sites that earn at least $100 per paying customer. I couldn't realistically compete on popular search terms with these competitors. 4. Content Marketing and Growth Hacking Growth hacking and content marketing  are areas I knew little about - apart from annoying emails coming to my blog, with people asking me to add links for free or for a price - emails I always ignored. It turns out that when advertising is expensive - which, you would discover the case - instead of blowing $50K on ads, you could hire a \"growth hacker\" who would try to generate more traffic for the same amount. Growth hackers would then post on forums, email website owners, write articles, and so on. Some of the methods are shady, some straight unacceptable -  like impersonating being a software engineer just to get access to a members-only forum , then post links to the company's articles. I don't like what I'm seeing in the content marketing and growth hacking fields: generating shallow content or joining communities just to advertise. I get that the results might make financial sense, but I don't approve of many of these methods. There are growth hacks that I'm amused at, such as  how Pinterest \"hacked\" Google's image search , rendering it virtually useless while driving tons of traffic to their site, and fuelling their growth on top of it. I find this example ingenious, and the ball is now with Google. It's their job to make their image search work well, and it's clearly not functioning as it should after this \"hack\". I've done a little \"content marketing\" - writing a  guest blog post on Stack Overflow , and  one on Freecodecamp  with condensed resume advice. I've not done - and not planning to do - \"growth hacking.\" My guest blog post on resume advice the Stack Overflow blog. 5. SEO Optimization SEO optimization  - ranking higher on Google - is a final and obvious traffic source. I wrote a book on software developer resumes, and it's one of the two books on this topic, together with The Google Resume by Gayle Laakmann McDowel. Let's see if people can find my book when they search \"developer resume\": Search results for \"developer resume\" Not really: The Tech Resume Inside Out isn't in the top 5 pages. Interestingly enough, the Stack Overflow article I wrote in the second organic hit, following the two ads. This probably has to do mainly with the strong domain ranking of stackoverflow.com, and in a smaller part on how the editorial team re-edited the title and content of the article to be more SEO friendly Optimizing for SEO - and its impact on product discoverability - was something I never thought too much about before. This is despite this blog getting a  fair amount of Google traffic . Unfortunately, so many players are playing the SEO game that your product has a slim chance to be discoverable: unless you start playing the exact same game as well.  You have to play catchup, though, as your competition has already invested time and money in content, backlinks, analyzing the longtail of keywords, and using SEO tools like ahrefs or Moz and many others. The amount of money that can be spent on SEO, and the variety of SEO tools surprised me. There's so much money and tools exactly because SEO can drive future customers cheaper than any other channel - when done right and long enough. I knew about SEO thanks to my Skyscanner days. Skyscanner had a whole team focused on ranking in the top 3 for \"{City} to {City} flight\" for all possible permutations. They generated landing pages, had inbound links to them, and generated what would have cost millions in search traffic. Things went well until Google rolled out Google Flights, and put their flight picker on top of all these hard-earned first results: Spending lots of money on SEO can be worth it - until Google decides to launch a business competing directly with you I don't expect Google to launch a resume book anytime soon. At the same time, I have failed to get meaningful traction for Google search terms. Still, the book is #1 for \"Developer resume book,\" which I'm happy with for now. My take on ranking well on Google are these 3 steps: Have lots of inbound links : from sites with more PageRank / domain authority, the better. Have good titles and metadata , so people click through on the search page. A bunch of other things  you can spend hours with: as a software engineer, I'd recommend the email course  Blogging for Devs  and the SEO advice in this module. Unfortunately, two decades of SEO optimization is slowly turning Google unusable  for many popular search terms. Searching for \"resume\" or its variants are a good example: the first few pages will yield resume sites with dark patterns. Ironic enough, I'm not sure I wouldn't be contributing to the problem if I joined the \"SEO game\". For now, I'm not doing anything here: it's a lot of effort, and I have little interest in this project. Still, if I was running a business, I'd have to decide how much I'd spend here and how much I'd want to compete with my competitors to get in front of potential customers. 6. Customer Support I launched my book with a common policy of no-questions-asked, 30-day refunds. If people are unhappy, I'd rather they get their money back. I've found it a challenge to get feedback from customers on what they missed or did not like about the product.  My sample size is small, with 5 refunds. 3 of these never responded after I refunded and asked what they missed. One person said they were in a different industry and wanted to see if the book would help them, and it didn't. Another person was hoping for a more specific example on bullet points - at least this one, I could work with. Because I'm not set on revenue, I have no issue sending a refund. However, if I was running a company, selling a product, I'd invest more in this area. A lost customer is one thing, but losing more customers due to the same issue you're not aware of is another. I'm far more empathetic on why companies with great, in-house customer support often fare better,  Zappos  being a frequently quoted example. At the same time, I am far from being an expert in what good customer support looks like. Starting a business, I'd want to be involved in all customer complaints to get a sense of where things go wrong. 7. Accounting: Get Familiar With It I set up my company before self-publishing and started to tally expenses and income. I've had side income for years - through blog adverts and Amazon affiliates for the past few years - so I'm used to this. Setting up a structure to work yourself helps you learn about the business side of things  that you might not be used to, as an employee getting the steady paychecks: bookkeeping and accounting. Deciding whether to expense something that is related to your business. Claiming back VAT. Paying taxes on profits. Now that I've left Uber and my first book brought a considerable amount of sales, I had to decide what legal structure I choose to carry on. Do I keep working as a sole proprietor? Or set up a company, employing myself? What is the overhead of the company? If I hire myself, how do I pay payroll and where do I transfer payroll taxes, and how often? So, About That Business Idea Publishing and selling a book online felt like a bootcamp on launching and marketing a business. I learned more by doing than I did reading, and I can relate to parts of the business lifecycle that felt alien before. I got first-hand experiences and dug into learn more - as I had to! - about these areas: Marketing Media exposure Advertising Content marketing and growth hacking SEO optimization Customer support Accounting If you're considering starting a company: sell something online first  to get a better feel of all the other things you'll need to focus on top of building a product. This experience has only made me more excited about doing something from scratch: and I'll use many of the lessons learned as I launch the  Building Mobile Apps at Scale book  and then  The Software Engineer's Guidebook . And then, who knows what will  come next , where I can use all these first-hand experiences? If you're interested in more stats on The Tech Resume Inside Out, see  more numbers shared on IndieHackers . Also, the book is free - and will be -  for anyone in tech without a job . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/dependency-injection-in-ios-and-android-apps/", "title": "Dependency Injection in iOS and Android Apps", "content": "\n             As apps become large, it often makes sense to build parts of the application as reusable components or modules. For large companies, either with several apps or several mobile teams, reusing the code owned by another team becomes a no-brainer.  For example, a  mobile platform team  might own networking and shared architecture components. A Money team would build and own payments components ‚Äî this was my team at Uber! ‚Äî and a Maps team would own all things mapping-related. Components and modules in the app would often map to the structure of the company's teams, mirroring the observation known as  Conway's law . With multiple modules, modules need to have a way to define their dependencies, both at a module and a class level. This concept is dependency injection, a form of  inversion of control . It is a simple, yet often underrated  concept in mobile development  and one that is far more commonplace with backend and web projects. Here is a  Swift code sample and explanation  of the concept. A major challenge with dependency injection is the amount of work it takes to modify or update dependencies if you do not use a framework to solve this. Even without using a framework, the time-consuming nature of this is a trade-off for clearer abstractions and good testability. Dependency injection is a powerful tool for maintaining testable code  consistently across the codebase. With dependency injection, classes that have multiple dependencies can be unit-tested by passing mock dependency classes when instantiating them. Larger, modular apps tend to introduce this concept one way or the other. Without dependency injection: a Trip class would create their own Payments and Map dependencies. However, this makes unit testing the Trip class impossible without instantiating those two classes (and all their own dependencies). This makes tests slow, and it might make it very difficult to test scenarios that depend on Payments being in a specific state. With dependency injection: the Trip class gets passed an IPayments and IMap class/interface. This approach makes it easy to unit test the Trip class, with mocked Payments and Map classes. Those mocks can be set up to behave in ways the tests need, with little effort. Manual dependency injection ‚Äî creating all interfaces, then hardcoding all dependencies ‚Äî works fine when there are few such dependencies. However, as the number of components and the number of dependencies grow, maintaining and updating dependencies becomes more difficult. Spotting things such as circular dependencies also becomes tricky and using dependency injection frameworks begins to make more sense. Android has a mature dependency injection framework that analyzes dependencies‚Äô compile-time, called  Dagger2 . Google recently introduced  Hilt on Dagger ; a dependency framework built on top of Dagger, and  Koin  is becoming more popular with Kotlin. On iOS, there have historically not been similar frameworks. At Uber, we built, used, and open-sourced  Needle , based on similar concepts. We would have had trouble scaling the code with over a hundred engineers working on the same codebase without dependency injection. We used this tool to be explicit about all class dependencies, make unit testing easy ‚Äî and non-negotiable for most of the code ‚Äî and reuse components across teams. This post is an ¬†excerpt from my book  Building Mobile Apps at Scale: 39 Engineering Challenges . Get the book  here  as a free PDF, until 31 May. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/uber-app-rewrite-yolo/", "title": "Uber's Crazy YOLO App Rewrite, From the Front Seat", "content": "\n             I've worked on many projects throughout my career as a software engineer. However, Helix - Uber's Rider app rewrite in 2016 introducing Swift and  RIBs  - stands as the craziest project by a margin. This is my story and some of my journal entries from the time. Prologue It's the middle of 2016. Uber has been dominating headlines: the company on a  rocket-ship growth trajectory  and is changing the way people get from A to B. Valued at $62.5B, the company does not seem to be slowing down. And I got an offer to join Uber as a senior software engineer! I'm be moving to Amsterdam, joining a team building Uber's  payments systems . I'm beyond excited. My interview process  was messy , and although I thought I was interviewing for a mobile role, I ended up on a backend interview loop and getting a backend engineering offer. I took it. Two weeks before my starting date, my manager emails me to ask if there's any way I can do Android. He can tell more details when I've joined. I've done Windows Phone and iOS before - Android would be the first. I say yes, though I'm a bit puzzled at the request. (Little did I know that I would not have written my book  Building Mobile Apps at Scale  if this last-minute request did not come in). Helix On week one, I get the scoop on the unusual and last-minute request. We're rewriting the Uber app: the whole thing. The codename for the project is Helix. Over 1M lines of code per platform, with more than 100 iOS and 100 Android engineers working on the project. But we need more hands on deck. Hence me joining the Android team over the backend one. The mobile platform team has been working on the project for a few months, coming up with  RIBs , a new architecture we're using for the project. For the  program teams  - the ones building features -, the work started a few weeks ago. We have less than 3 months: the rewrite needs to be done by 16 September. Every last screen of the old app will not only be ported, but re-imagined, UX and workflows changed. Uber's Rider app rewrite in 2016 (Helix): it completely re-imagined the app. New UX, new workflows, different screens - and a new architecture and language, behind the scenes. I am still getting my head around all of this. Why so fast? I hear stories of a party at Las Vegas at the end of 2015, where Uber's CEO, Travis Klanick (TK) announced that a new Uber app will be on the store by the end of next year - so by the end of 2016. Apparently, most people forgot about this announcement, but not TK. So rewrite it is. Why 16 September? It's because of counting backward. Apple freezes the store at Christmas. So we need a stable version of the app by 24 December. This means 100% rollout a month before: on 1 December the latest. We need 4 weeks for gradual rollout. So this means a public launch on 2 November. Company-wide beta on 16 Oct. Employee testing starting 16 Sep. And so this is why. To make this deadline of 3 months away happen, we need Android and iOS engineers. Lots of them. \"This will be fun\"  - I say confidently to my new team. \"I don't think I knew what I signed up for\"  - I tell my wife. Two Months of Hell Middle of August, I board a plane to the Uber HQ in San Francisco. The plan is to work a week from the office and get to know the US teams. On the second week, I'll attend Uberversity - Uber's mandatory onboarding \"bootcamp\", where I'd learn about the business. I never enrolled at Uberversity. A few days into my stay at HQ, I am called to an emergency meeting. We were behind. \"We\" - meaning the Amsterdam payments team. Our features won't be ready for the 16 September launch. And without Payments working, the launch would be delayed. Which is not an option. In an unexpected twist of events, my manager asks me to take over leading the Amsterdam part of the project, given both my background and some of the early contributions. I've seen enough to know that we are up against an impossible task, so I replied with the only sensible answer: No. I tell him we cannot make the deadline. Not unless we cut the scope, push back the timeline, or add more people. Ideally, all three. He says we'll see what we can do. In the end, I say yes: but only on the condition that we are not committing to making the deadline. We can only commit to reduce by how much we'll miss it by. The next two months will be hell. I extend my US trip, and work seven days a week. More people from Amsterdam fly out and they do the same. We are not alone in the office on the weekends: a third of the mobile engineers and most managers show up. A few engineering directors are also in during the weekends, leading by example. On Saturday mornings, we get donuts from the best local shop as a pick-me-up. Back in 2016, you could see this sticker on laptops around the office. It increasingly became my mentality as well, as we got closer to the unmovable Helix launch date. The pace of work is still excruciatingly slow. Tooling is a major issue: compiling the app from scratch takes 25-30 minutes on iOS and around 10 on Android. Landing a change to master can take hours and hours, due to to the long-running test suite, the merge conflicts thanks to the large number of changes and flakey UI tests. At one point, all UI tests are removed from the CI. This speeds things up for a few days. When they're added back in, it turns out that a dozen regressions quietly also made their way into the codebase. We keep on pushing, heads down. Both me and all engineers from Amsterdam are putting in easily 80+ hours per week. We come to the office at 9am and don't leave until midnight or 1am. Most mobile engineers I know do the same, except they continue to work from home. Ariana Huffington joins Uber's board around the same time and releases  her book on the importance of sleep  right around this time. Piles of free copies are available in the office. Yes, sleep is important. So why am I at the office past midnight? Right: the deadline that can not - or will not - be moved. Free copies of The Sleep Revolution by Arianna Huffington ‚Äì board member at Uber ‚Äì during the biggest crunchtime I've witnessed at the company.  Barely anyone touched them. The App Release Strategy: YOLO It's late October. Somehow, we have a rewritten app that works... for the most part. Now the next question: how do we release it to the public on 2 November? When you have an app that generates close to $1B/month in revenue, you tread really carefully. Make small changes, A/B test them and improve slowly over time. For a full rewrite, you a do gradual rollout.  However, Uber has a problem that starts with Swift and ends with Apple. We rewrote the app using Swift 2.2. The language is mature enough - but not the compiler. The compiled code is  multiple times the size of that of Objective C . And as per Apple's restrictions, if your bundle size is over 100MB, users cannot download the app over the air: they need to be on WiFi to do so. Getting the rewritten Swift app to fit under 100MB was a challenge  is a story by itself . Bundling the old Uber app and the new Uber app together goes beyond 100MB. This was a massive headache because a large majority of first-time Uber users download the Uber app over the air. The iOS app might be around $1B/month business, but the very high growth depends on more users signing up every day. And if we push a bundle that's more than 100MB, this growth stops overnight. So we are left with these options: Ask Apple to get rid of the 100MB over-the-air update limit, and do as Android does. Oh, wait - we asked. They said no. Take a magic wand and shrink the bundle with the old and new apps so they fit within the 100MB limit. A team worked on this around the clock for the past two months. They came up with  incredible workarounds  to reduce the app's size. But we won't get here. Throw out the whole project and restart in Objective C. This is on the table. Seriously. YOLO. Replace the old, Objective-C app with the new, Swift app on the store. The app that a few thousand Uber employees and select few contractors have been testing for less than two months. What could go wrong? None of us know for sure what the app release strategy will be until a week before launch. Then it's confirmed. We're going YOLO. Apparently, TK personally made this call. I still can't believe what this means: we have one week to fix all known issues before it goes out to millions of users. And who knows of the issues we don't yet know about. A Few Days Before Launch The following sections are edited versions from my journal at the time. We've been dogfooding the hell out Helix for weeks now. Tons of reports coming in. We can barely keep up with processing the feedback. The biggest complaints these days are layout issues here and there. Our designer actually squeezed in tweaking a font color as a high enough priority task for this last week. So yeah - we're looking good. Also, whatever we do this week will only go out a week after launch. The launch build was cut yesterday, and people will be testing the hell out of it. If we discover anything  really  bad, we can still alphafix the launch build. Anyway, I'm on call for the launch week. So if anything goes wrong, I'll be the first one to know. No pressure. One Day to Go My alarm rings... or so I think. It's my phone. It's 2AM. My manager is on the line. \"I'm sorry for waking you up. We have an urgent situation. Last night we discovered an issue that might be a launch blocker. We have 16 hours until we release  Helix  and need to investigate now. Can you look into this now?\" Oh yeah - I now remember I'm the on call. Of course I'll look into it. I turn my laptop on, get the latest build, and start to reproduce the steps. The issue is related to a flakey feature. Sometimes it can fail fraud checks that are difficult to debug. And sometimes it fails because a third party has a brief outage. I quickly do the repro, expecting the test will pass and I get to go back to bed. It fails the first time. As I said, it's flakey. It fails the second time. That's odd. It fails the third time. Damn. Did this thing really break? I need help. So I ping the backend oncall. He's already online. Saves me from waking him up. I spin up my dev environment to get some debug and network logs. Meanwhile, the backend engineer also does the sanity checks. Fails for him as well. I get the logs and send them over, and we start debugging. An hour later we have some ideas on what's going on. Two hours later it's a dead end: we start over. Three hours later it seems like it's a client-side issue that we need to hotfix. Four hours later, at 6am, we are pretty certain that this bug is not a client-side regression. We can just fix it on the backend: no client changes needed. We have 12 more hours to decide what to do and I'm exhausted. We agree to regroup in 4 hours with a fresh mind, and log off. Launch Day I keep hitting snooze on my alarm. The countdown timer is at T minus 6 hours by the time I get to the office. We need to decide in an hour if we need to do a last-minute hotfix, or we launch with this known issue. The people in the office did some more debugging. The bug is a bad one, but we can launch with it. So we make the call to not hotfix - we'll sort it by the next release.  An hour to launch, we pile into a big meeting room, and get the video link with the Command Center. In HQ, they set up a special room where they'll be monitoring the launch for the first 24 hours. The countdown to the launch that we displayed on some screens in Amsterdam We do the countdown... 3.. 2... 1... and someone presses the App Store & Google Play release buttons. We pop the champagne open. At the time of releasing the app, the press embargo is lifted. At least 20 news articles pop up instantly on Google News. The headlines are positive and cheesy. A few are on the monitor for display. Someone reads out loud some ridiculous parts of the articles. We cheer when we see a screenshot with a payments feature - the screens that we built. It feels like we just exhaled after holding our breath for months. Someone says, \"let's order pizza!\" and we all agree. A few engineers check dashboards - but it's too early to see any data. After an hour of socializing, I bike home. The first part of the launch was smooth. I feel great. Launch Woes By the time I get home, I already have a few DMs on my phone. Dude, are you available? We have a problem. Ping me when you're home ASAP. Dammit. It seems the feature my team wrote - or at least part of it - is broken. A bunch of users are reporting a weird error message. It's unclear if our team's code is causing this issue or it's something else. Right now, it doesn't really matter. People are pouring into the incident chat room, trying to figure out what is going on. I join the Zoom call with the Helix launch Command Center. Apparently, we're not the only ones with launch issues. There are five ongoing issues right now with other teams... and of the five issues, our issue seems so far to have the biggest impact. Dammit even more. And I was feeling good about the launch half an hour ago. Multiple people on the team are diving deeper. We know it only happens on iOS, not on Android. The backend team has an idea of why this is happening. I look into the mobile code, but I've not worked on this part, and I'm just as confused as to what's causing it. One of the mobile engineers joins the chat and says he has a fix ready and already landed. It just barely missed the build cut. Says he knew it was a problem, but thought it would barely affect anyone, so decided not to alphafix. He says it's all tested and works fine. Ok, so maybe this is not so bad. Another team has the numbers coming in. Someone says it's affecting 15% of users. Surely that's wrong. Ok, correction, it's a 15% elevation in the error rate for this feature from the old app. Still that's a massive increase and something we cannot ignore. We decide to fix it on the backend, as the client fix might take at least a day or more to deploy. Our backend team starts looking into a fix. In the Command Center, some other senior backend folks show up to help resolve this quickly. After 30 minutes the backend team has a fix in the works and say it will be done in another half an hour. Phew. We keep working on the client-side alphafix as well, just in case. Fuck It, Ship It Update from the backend team: they can't ship the fix. Legal just got involved and are blocking the backend fix, as is. They say we need to push out the client-side change... for legal reasons. I disagree with their assessment, but it doesn't seem like the time to argue. Client-side fix it is. The hotfix is in, and a new build is out‚Äîtime to confirm the fix working in prod. Four of us engineers all do the repro steps on the old app, where the bug appears for all of us. Then we test the new build with our production accounts to confirm the fix works. For three of us, it works like a charm. Except for one engineer. Says he gets the same bug. What? So the fix is only partial? We can't ship this yet. We start to debug, using the last engineer's account information. Another hour passes, and we're still not entirely sure what's wrong with the last edge case. Seems like his account might be compromised. That's the problem when testing with production accounts - we have all sorts of junk accumulated, which most users would never have. We're talking with a team who seems to have forgotten to clean up some user data, that is causing our fix not to work. They say this is an edge case, and very few people will be affected. Our engineer just got unlucky. Do we play it safe and debug some more? Is three passes and one failure the wrong way to go about this? Fuck it, ship it. We give a thumbs up for the release team to take the hotfixed app and do the emergency release. The code works better than before. We'll debug to see if there was an edge case left. In the meantime, let's ship what works. I think back to all the \"fuck it ship it\" stickers around the office. It now makes so much more sense. Sometimes you've got to make the call and live with the consequences.  It's Not Over Till It's Over I have no idea how, but two and a half-hours later, the fix is live. I'm assuming the release team used all the goodwill accumulated over the years to make the fastest app update I've ever heard of happen. Either way, it's done, and done fast. Let's just hope it works. The fix works: a user who saw the issue confirms updating the app resolved it. Exhale. It's 3am, one critical fix down. But how many more to go? Usage numbers are already far above all projections. Why so many? It's the marketing team, who have outdone themselves for the launch. The news of the Uber app is on every online publication. People are going to the App Store, and hitting \"Update\" on the app to get the latest version. Technically, I'm the oncall and another engineer the secondary. In practice, at 3am, at least 10 of us are online. This won't work. \"Let's make a schedule to have 24/7 coverage for the next 48 hours\"  - one of us proposes.  \"Some of us should get sleep now, while others cover. Then we swap. Sounds good?\" We agree and draft up the schedule. I take the shift until 9am. I doze off at 5am and fall into a dreamless sleep. When the alarm wakes me, I panic and reach to check if I've missed any PagerDuty notifications. I sigh with relief when I see that I haven't. The next day and a half goes past slowly. We keep checking outage rooms, logs and online forums. Is anything else broken with payments? After 48 hours, we don't see any other major issues. We launched. We didn't crash and burn. We made it! Somehow. Epilogue Helix - Uber's Rider app - rewrite was the most insane project I've worked on in my professional career. As crazy as it was, I owe lots of learnings and much of my Uber career growth to this project as well. Some of the learnings in my book,  Building Mobile Apps at Scale: 39 Engineering Challenges  - like  adopting new languages and frameworks , also directly come from this project. I joined Uber in July 2016, a few weeks after the project being kicked off. A month later, I found myself in the position of project lead on a team of 20 engineers building Payments, split across Amsterdam and San Francisco. We were behind schedule on a seemingly impossible timeline. Somehow - focusing, cutting scope, thinking outside of the box, and every single person working on Helix giving 110% - we made it. Not just us, but all of Uber. Considering the circumstances, the launch was a roaring success. Very few critical bugs were found: which was impressive, considering the YOLO release and how little time we had to test. Though it was not visible to me at the time, but other parts of the company  like ops worked just as around the clock as engineering  in testing the app and doing as much as they could in the ridiculously short timeframe we had. In the first 24 hours of the launch, more than 1M people used the new iOS app in 60+ countries. We had planned for 10% of this traffic at most. On Android - where we were able to do a controlled, staged rollout - this number was well under 10,000. The Objective C repo was deleted a week later, and teams were focused addressing the major issues of the new app, which were especially pronounced in countries outside the US. By Christmas, the app was stable, and - just as TK promised a year ago, in Las Vegas - a new Uber app was available worldwide. Helix took a huge toll on most people. A few people quit during the project, but the majority of resignation notices came after we shipped the app. Many people did not even stick around a few months for March bonuses. Most of these resignations were in the US offices. However, one of my teammates in Amsterdam also quit because of the extreme stress of the project. During these months, working very long hours and over weekends became a norm and strongly encouraged by leadership, burning many people out. I am doubtful I would have  become an engineering manager  if it was not for this project, though. More importantly, this project proved to me that all  engineers can lead features/projects to completion very efficiently  - and it shaped my approach of  all engineers being leaders on a team , over time. It was this mentality that saved our part of the project on Payments: people around me stepping up, leading, executing, and helping each other. It was a crazy crunch - but one that at least did not feel lonely. The project - and its learnings - had a visible impact within Uber. The next app rewrite - the Driver app rewrite - was the opposite of Helix: it was far more gradual. Deadlines were pushed back to accommodate for teams running behind. And the next language adoption - Kotlin - was significantly delayed exactly because of being burnt by moving to Swift too early, too fast. As of October 2020, Uber still did not adopt Kotlin, treading with extreme caution, still remembering the painful Swift lesson. Other Helix Stories Hundreds of engineers worked on this project, and everyone will have different perspectives and stories to tell. Here are other stories worth reading, coming from software engineers who all worked on Helix: \"Alright folks, gather round and let me tell you the story of (almost) the biggest engineering disaster I‚Äôve ever had the misfortune of being involved in.\"  - McLaren Stanley, formerly engineer on Mobile Platform in  this long Twitter thread that is a worthwile read . \"There was an unfortunate side-effect to the problem we saw with Swift: we became very wary of new language adoption. When Android engineers wanted to adopt Kotlin, there was a lot of resistance to doing so.\"  - Chris Brauchli, formerly on the Mobile Platform team  in the excellent article Binary Size Woes . \"I was part of the team in Amsterdam on this. Insane days. I think if we had not had some of the engineers we did at those exact times, we would have not gotten out of it.\"  - an Uber engineer  in a comment on the Hacker News thread for McLaren Stanley's thread . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/software-engineering-salaries-in-the-netherlands-and-europe/", "title": "The Trimodal Nature of Software Engineering Salaries in the Netherlands and Europe", "content": "\n             This article was originally written in April 2021. In July 2024, I published an updated version with more data and new observations:  The Trimodal Nature of Tech Compensation Revisited . Update: dozens of hiring managers confirmed this trimodal model applies to all global markets: from the US, through Asia to Latin America as well. Also see  TechPays.com  for data recorded for a growing number of countries in the three tiers. ( Watch this article as video  narrated by me, with additional context) I've been a hiring manager at Uber, in Amsterdam, for over 4 years. The market - and compensation - for software engineers have moved upwards at an incredible pace over during this time. Interesting enough, many engineers did not notice any meaningful salary changes these years. The  2019 Honeypot Amsterdam developer survey says,  \"the most experienced developers earn an average of ‚Ç¨55,000 high as over ‚Ç¨70,000\". The  2021 Talent.io salary report  puts the most experienced software engineering salaries in Amsterdam at ‚Ç¨60,000/year. Meanwhile, I've observed the average senior total compensation figures at Uber nearly double from ‚Ç¨110,000 in 2015 to ‚Ç¨170,000-‚Ç¨230,000/year by 2020.   It's not just Uber: Booking.com senior total packages have gone up by 50% from around ‚Ç¨100,000 in 2016 to ‚Ç¨150,000+, as part of  the EU salary research I've been running  (I'll share the survey reports in-detail in later blog posts -  subscribe here  to not miss it). Where is the disconnect? Tiers of Companies I'm seeing the software engineering compensation market becoming trimodal  - split into three distinct groups that \"spike\" and that have little overlaps.  Most engineers are not aware of this third, Big Tech pillar and the compensation ranges it introduces, assuming compensation can not go beyond what is offered at the second pillar: There is no longer an \"average\" salary for software engineers in Europe / the Netherlands: just an average salary per one of the three, distinct categories. Which category does your workplace belong to? You'll find little to no compensation data on this third pillar on likes of Glassdoor, Payscale, Honeypot, Talent.io, Stack Overflow Jobs and other public job or salary portals.  For the US, the site  Levels.fyi  surfaces top tier companies; for Europe,   TechPays.com  ‚Äì a site I'm building ‚Äì  showcases all three tiers, including this highest tier. This article also lists  top tier companies across various European cities . The range for #3 is almost entirely missing from most public salary data. Here is the split of the three groups of companies, based on their compensation philosophy: #1: Companies  only  benchmarking against  their  local competition  and non-tech companies, competing with their local competitors. Most of these places call engineering as IT, and often view it as a cost center. Technology is not treated - or compensated - as a core competency at these companies. Examples would include IT teams for local supermarkets, or e-commerce sites and similar. They'd aim to pay right around or slightly above what the other local supermarkets, e-commerce sites and similar businesses pay. Startups with little capital and bootstrapped companies might fall in this category. In the Netherlands, these companies would pay  ‚Ç¨50,000-75,000 /year for a senior engineering role in the Netherlands, everything included (apart from the hard-to-value early-stage  startup equity ). For an entry-level role, this number would be ‚Ç¨25,000-40,000. Most of these companies will pay a salary only: a fraction of them will have any bonus scheme in place. Those that have will typically cap bonuses at 10% of the annual salary, and tie it to company performance. Engineers don't receive any equity - save for, perhaps, lead or principal positions in rare cases, and very little. #2: Companies benchmarking against  all  local companies , even if they are not direct competitors. In the Netherlands, examples of these companies would be eBay classifieds, Adyen, Nike, Disney Streaming, and well-funded, high-growth startups like Catawiki, FindHotel, Miro, MessageBird, TripActions would also be in this category. These companies would typically pay  ‚Ç¨75,000-125,000  total compensation (base salary + bonus + equity) for a senior engineering role in the Netherlands. For an entry-level role, this number would be ‚Ç¨40,000-65,000. Most of these companies will have a bonus scheme in place that pays up to 20% of the base salary in cash, and many offer equity to more senior engineers. Only a smaller portion of this category offer meaningful equity to all engineers, though. #3: Big Tech: companies benchmarking against  all  regional  or global companies. In Europe, this means competing against all other major EU companies, and often recruiting people from London, Berlin, Barcelona, and outside the EU. Examples of companies in this space are Uber, Booking.com, Databricks, Amazon, Flexport, Plaid, Redis Labs, Stripe, Elastic, GitLab, GitHub, Datadog, Apple, or Netflix. Trading companies like IMC Financial, Optiver, Flow Traders or Jump Trading are in this group as well. Brexit should bring a lot more positions to the Netherlands for trading firms. For a longer list of top-of-the-market companies and finding these, see my subscriber-only article  Finding the Next Company to Work At , and in  Compensation at publicly traded tech companies . As an interesting data point, Booking.com is the only non-US tech company in this group who has been keeping up with the market changes compensation-wise, competing with Silicon Valley companies from their Amsterdam HQ. Other European companies targeting the global markets would be wise to take note - and hold on to their key people. These companies would typically pay  ‚Ç¨125,000-250,000+  total compensation for a senior engineering role in the Netherlands (meaning base salary + bonus + equity value: either liquid or paper-value: this would be up to around $300K/year in dollar value). All companies would offer a cash bonus and equity scheme for  all  engineers - even entry-level ones -: cash bonuses often going to 40-50% of the base salary for top performers, and equity sometimes accounting for more than the base salary for senior folks and high-performers. The exception to this is trading companies: they will not offer equity, but year-end cash bonuses will be 50-150% of the base salary. For example, at Uber a typical senior engineer offer was around ‚Ç¨175K/year total compensation: ‚Ç¨115K salary, ‚Ç¨20K bonus target and about ‚Ç¨50K/year equity vesting - around 4,800  RSUs  for  vesting over 4 years, with a 1-year cliff ).  With  equity appreciation , the total compensation value could go higher, as would with  outsized rewards for top performers . For an entry-level role, this number would be ‚Ç¨65,000-100,000. For example, at Uber, a standard new grad offer was around ‚Ç¨87,000 in 2020 (‚Ç¨70,000 salary + ‚Ç¨7,000 target bonus + ‚Ç¨10,000/year in stock). An engineer with a few years experience hired at the entry level could make above ‚Ç¨100,000 in their first year, though. For example, at Uber, one of the Eng1/L3 engineers made ‚Ç¨103,000 in their first year (‚Ç¨77,000 salary + ‚Ç¨11,000 actual bonus + ‚Ç¨15,000 in stock for their first year). Obviously, all of these Uber numbers are outdated: as the market changes, so will those figures. Most engineers making outsized compensation in Europe have done so by taking a moderate risk on a high-growth, road-to-public company, joining before the IPO, and negotiating for equity.  I know engineers at Uber, Datadog, Airbnb and Doordash who have seen great rewards for joining before going public was a \"done deal\". As time progresses, people working at companies that award large stock packages, and with stocks that see strong stock growth are also often in these positions. What this means is both a new grad and a senior software engineer could be making up to 4x the annual compensation, depending on what company they are working at. Of course, there are overall fewer openings at Big Tech, and the competition and expectations are more fierce. Still, putting in  the time to prepare for  these  interviews might make sense , knowing the difference in compensation. Most companies tend to assume they are a tier higher than they actually are  - because they have little data points that prove otherwise. Candidates keep accepting their current offers, that have not changed significantly the past years, and attrition remains as usual. However, many of these companies will be in for a surprise the coming years as the #3 category of companies hires the best talent away from #2. In turn, this will push #2 to increase compensation and equity allocation, and hire the best people from #2 and #1. And companies in #2 who do not offer meaningful equity for software engineers on top of a competitive salary will struggle to recruit anyone from #3. If you're responsible for compensation planning,  read more on the üîí  reality of the 2021-2022 tech hiring market in this subscriber-only article  that goes into what companies are doing who are hiring in this heated market. Also, follow my üîí  The Scoop series  which covers market changes and shares advice for hiring managers. The Silicon Valley-Effect Pulling the Top of The Market The top of the market has accelerated rapidly in the Netherlands, the past 5 years. In 2015, Booking.com was the highest-paying employer across Amsterdam - and the Netherlands. Then, Uber opened an office. At first, Uber paid similar to Booking.com - though more generous on  options , and later with  double-trigger RSUs . However, Uber soon stopped competing \"just\" locally. Between 2016-2018, Uber re-benchmarked its compensation model to go head-on-head with the highest-paying tech companies in Europe: Facebook in London, Google in Zurich, Twitter in Dublin, and similar organizations. The updated Uber compensation packages in 2018 were pretty much identical to that of Facebook London. This was no mistake: during these times, many candidates had offers both from us, and from Facebook or Google. I'd like to take credit for convincing people with Facebook/Google offers to choose my team: but without a compensation package that was competitive, all my efforts would have been worth nothing. Silicon Valley companies opening EU offices have been a huge source of moving the market upwards - and swinging the balance back a little bit towards Europe / The Netherlands . The total compensation packages in the US have been shockingly high from the perspective of EU software engineers: and many engineers from the EU have packed up and left, seeing the wide gap. An example is a Dutch engineer I know leaving their ‚Ç¨80,000/year ($94,000) job in the Netherlands for an initially $350,000/year position at Lyft. Following promotions, they are now making more than $450,000/year (‚Ç¨378,000/year). Yes, healthcare and the cost of living are more expensive in the US: but this person has told me their only regret is they had to leave home to get paid their worth. Imaginary Money that Turns Into Real Money Many engineers are hesitant to join companies that give out equity like  double-trigger RSUs ,  options ,  SARs  or others, but are not public. However, imaginary money usually comes at a discount, and offered in larger amounts to offset the risk of people joining earlier. I benefitted from taking a risk at Uber. I joined in 2016, and I only had imaginary money up to the 2019 IPO. Then, all that imaginary money converted to a large amount of real money. People joining after the IPO got half or less the stock units than people joining beforehand: there was no risk to be compensated for, any more. Databricks, Flexport, Miro, Messagebird and other fast-growth companies are all similar stories. There is a chance these companies won't IPO: just like there was the chance that Uber would not. They also offer stock more generously then they would, after a successful IPO. Look into understanding the money markets, the current and past IPO trends and make your own decisions. I was cautiously certain that  Uber would have an IPO within a few years of joining given the investor pressure building up: some of my friends thought I was being reckless in joining a company that offered imaginary money at large. There are also early-stage, high-growth startups that are promising, and employee equity they award can turn into big gains on an exit years down the line.  Craft ,  Fonoa ,  Linear ,  Payaut ,  FindHotel  and others are examples of these places. Yes, there are are  cautionary examples  of how things can go wrong as well. Use your own judgement, risk-assesment and how much you believe in the company's mission and trajectory. After a company goes public, equity compensation tends to drop, while competition to get into those places becomes more intense . A person who works at Opendoor shared how right after their IPO, the number and quality of applicants have skyrocketed - which is an all too typical story. These companies still pay well, but will not pay any premium for a pre-IPO risk, and if you apply, you'll have far more competition to stand out from and you'll need to  prepare more for the coding and systems design interviews . Equity, IPOs and The Impact on Compensation Much of the high total compensation numbers are linked to  equity that software engineers receive . Publicly traded companies that compete globally issue high equity packages. Unicorns and decacorns competing for the same engineers often issue large private equity packages for employees.  This equity can become very valuable on a successful IPO - but is not guaranteed to do so  thanks to the nature of equity: The value of private equity for software engineers. Following a successful IPO, the total compensation of engineers can jump significantly. It all depends how much stock you have, if, when and how the IPO goes, and how the stock does afterwards. Databricks, Flexport, Miro, MessageBird, and other companies with large Amsterdam offices are all ones that are expected to go public in the next few years. An engineer who joined Databricks in late 2018  has $6M worth of stock  - on paper, that is. Joining rapidly growing companies that offer strong equity packages can increase your compensation significantly. Risk, rewards, and luck often go hand in hand with engineering compensation  on the high end. The higher the ration of equity in your compensation, the higher gains - or losses - you can see with the equity price going up or down. For example, Uber was not always considered as the top of the market for salaries in the Netherlands. In 2015, Uber paid in-line with Booking.com, and it was uncertain if there would be an IPO in the foreseeable future. In 2017-2018, Uber started to issue larger packages, and the IPO timeline became more certain: However, most Uber engineers would describe the IPO in 2019 as disappointing. Many engineers had RSUs issued at a $48 preferred price, Uber IPO'd at $45, and the stock traded at $30 when the lockup expired, and people could sell: By the time Uber employees could sell equity in 2019, the stock was down from a $48 preferred RSU price to $30. The stock would trade as low as $21 in 2020, before bouncing back. The total compensation number of anyone with Uber stocks would go down at this point. However, anyone lucky enough to join late 2019 or early 2020 was issued stock at a price that is less than half of where Uber is trading now - and they could now have a much higher total compensation than most employees in a similar role. The highest compensation packages will also typically be the most volatile ones , value-wise. This is also why it's hard to answer how much an engineer working at the likes of Uber is earning. The base salary and bonus: those are easy to quantify. But the equity that can make up a major portion of your salary? It is much harder to predict. Performance on the Job and Compensation The Silicon-Valley mentality of  paying high-leverage engineers very well  does not stop at salaries. It also includes how bonuses, and equity refreshes are awarded. At some companies, the top performers can be paid outsized bonuses and stock , in ways that push their compensation well above the next level. While working at Uber, I was lucky to have engineers who were perceived as top 1% or top 3% of engineers. Here's the type of rewards some people got at Uber Amsterdam: A ‚Ç¨190,000 bonus  at the end of the year: ‚Ç¨50,000 in cash paid on the spot, and ‚Ç¨140,000 in stock, vesting over 4 years, on a monthly basis. The target end of year bonus for this role would have been around ‚Ç¨62,000 (‚Ç¨22,000 in cash and ‚Ç¨40,000 in stock vesting over 4 years - this person got 2.5x the cash, and over 3x the equity target). A $80,000 spot bonus  to be paid out in 4 instalments over 2 years ($20,000 every 6 months). This was on top of the \"normal\" bonuses. A $220,000 stock refresh  award, vesting over 4 years to bring a person up to the range they should be, based on their performance. The usual stock refreshes for this role would have been around $50,000 every year. A ‚Ç¨40,000 spot bonus  vesting 12 months later, serving as a retention grant. 24% salary increase on promotion , taking performance into account. The usual increases were 10-15%, and depended on where the salary band of the person was. At Uber, I've seen people who were a level below me, but still making more per year than I did, thanks to their outstanding performance, impact, and the bonus that followed. Some of these people were on my team - and I  loved  that the system allowed this difference. Because we could reward high performers disproportionately, these people did not even think of leaving. Why would they?  Thanks to this policy, as a manager, I was able to work with some of the best engineers throughout my career - for an extended period of time. Did I mention that over 4 years, no person who reported to me left Uber  - up to the summer 2020 layoffs, that is? I'm sure it was not  just  compensation: but it sure played  some  part in this. At companies who pay top of the market, people who are seen as key engineers often see outsized rewards, on top of the already great salary. And even the normal bonuses are what would be considered very large at #2 type of companies. Outsized compensation and rewards also attracts  really  good talent  - who you get to work with, if you also make it into the same company. I was lucky enough to work with - and learn from - engineers who have built the original PayPal payments system while  working on Uber's payments system , read  RFC comments  on whether to use React Native from one of the first React Native core engineers who joined from Facebook, or get feedback on how not to mess up a big project from a manager who saw Google Plus fail first-hand. COVID Tilting the Balance to the EU COVID has also been a major boost for high-paying senior jobs. A growing number of EU software engineers are considering or have moved back to Europe. And more US companies realize they can hire cheap, but world-class software engineers in Europe. A Dutch software engineer with 15 years of experience has joined a pre-IPO US company, working remotely to build  large-scale distributed systems . They said: I live in The Netherlands and in software development since 2000. I freelanced from 2008 to 2018. In 2018, I was recruited by {US startup acquired by a Big Tech company}, and boy, did a whole new world open for me. I'm moving into a new role at {Pre-IPO US company} Monday and  my salary is roughly double (sometimes even triple)  of what I could earn at the average enterprise or consultancy. And that's not even counting equity. At {US startup acquired by a Big Tech company}, I was a bit too late, but here, I'm in a good position. I should make enough to get rid of my mortgage, assuming a conservative IPO. I learned more at three years of {US startup acquired by a Big Tech company}  than in the 15 years before that. And the people I got to work with and are in my network now are invaluable. COVID helped a lot too, IMO . Companies realised full remote is an option and you can increase your talent pool to include the entire planet. I talked with the head of mobile engineering at a pre-IPO decacorn, who told me he's amazed he can hire staff-level engineers for $180,000/year (‚Ç¨150,000/year), who work extremely well, and on par with their Bay Area engineers who cost 2-3x this much, at $400-600,000/year. This organization is deciding which EU countries to open an office, the head of mobile already getting budget approval for a major hiring spree. The Netherlands is a front-runner for them. Stripe and Spotify have both started to hire for permanent remote positions in Europe as well, expanding their hiring pool to all of the EU. Both companies are competing across Europe, and  not  with the local market. They join companies like GoDaddy, GitLab, GitHub, and others who have been doing this for years. Getting Into Big Tech The majority of companies in the Netherlands will fall into the #1 and #2 categories of companies aiming to compete only on the local market. Getting an offer from companies in the #1 category is usually the easiest, while #2 can be more challenging. However, the Big Tech companies in the #3 category are by far the most competitive ones to get into. While #3 pays the most, it's also the most challenging to get into. I would know: I was a hiring manager here for years. For any given position, there are usually so many applicants that you need to have a good and tailored resume to get through the resume screen -  my first book helps with clearing this CV stage . The best advice? Get a referral if you can, and tailor your resume to the position you apply to. For entry-level roles, you'll have to  really  prepare for the coding interview . Data structures, algorithms: the works. Like it or not, this a hoop that these companies will want all successful applicants to jump. For senior and above positions, it gets trickier. You'll need to get good  at large-scale systems design  and have  relevant  experience for the type of work you'd do to get an offer at the senior engineering level. You'd have to have worked on similar systems before, often working at either another #3 company, or one of the better #2 ones. For above senior positions, you'll only have a shot if you've solved similar-scale challenges to what these companies are doing, and have worked at comparable environments. You also need to be up-to-date with where the industry is at: may this be backend, web, mobile, or ML systems. Above senior positions are rare, and are almost looking for people who can have organization-wide impact on complex and impactful problems that is measured in the tens or hundreds of millions in users or revenue. Many of the companies in #3 represent exciting professional challenges that companies in #1 or #2 do not have to offer. Even if it was not for the compensation, they might be worth exploring at some point during your professional career. A resource that has helped people get into, and perform at expectations in Big Tech  is my newsletter,  The Pragmatic Engineer Newsletter . I cover topics relevant to software engineers and engineering managers at Big Tech and high-growth startups. Here are  examples of what I write about . You can  subscribe here for free . Differences Between #1, #2 and #3 Outside Money There is far more to what makes a good job than compensation. Places that offer high compensation usually mean higher competition to get in and stay on the job. It usually means unpaid oncall, often working with various timezones, and it can mean poor work-life balance compared to other places. Work-life balance tends to be drastically better in the #1 category of local-only companies , compared to #2 and #3. In the Netherlands, the #1 companies places where it's common for the majority of the people to work less than 5 days a week, work to be steady and easy to plan, and work not starting betfore 9, or running beyond 5. There tends to be little difference between #2 and #3 in terms of pace: they are both fast-moving, and often set high expectations for those who would like to perform well. A major difference is how many #2 places are in one timezone, and people can often disconnect in the evening hours. At global companies in #3, this is not always the case: at Uber, I would often have calls at 6pm or 7pm with teams in SF - which was in the morning their time. In turn, when working with US companies, people at #3 would sometimes start their day later. Being warned, then let go when not performing at your expected level is by far the most likely to happen at #3 . These places pay well not just because they can, but because they want high-performing teams - and people. If someone is not up to expectations, and does not improve despite direct feedback, they won't think too much about letting this person go, and hiring someone else who will do so. Compensation is also structured in a way to pay for performance - for example, all employees performing at expectations already get large cash and equity bonuses, while those who are below this bar can see their bonus hit zero. It goes the other way as well: people seen as top performers will get rewards and retainer bonuses unheard of outside the group of #3 companies. Netflix is well-known for their \"keeper test\" and while working there comes with more cash than any other place will pay,  getting fired is never far from anyone's mind . On the flip side, when working at a place like Netflix, you don't have to put up with people who are deliberately slacking or are pulling the team down: they won't be for the company for very long. It's Not Just About Comp Compensation is just one data point - though one that tends to have little transparency in Europe.   I'll be publishing more detailed data points on this blog on the Netherlands, UK, Germany, and other EU countries' software engineering salary data that  people have shared- and you can share as well . Just make sure you're weighing not just the salary but other important things  like professional growth,  autonomy ,  mentorship , working  directly on a product , work-life-balance and the things that matter to  you : Inspired by  this visualization  from  @Lizandmollie I'll follow up with more detailed compensation analysis for the Netherlands and Europe with numbers and company names - subscribe to my  newsletter  or  follow me on Twitter  to not miss it. If you work in tech, in the EU, please consider anonymously sharing salary data you are aware of  via this form . If you're responsible for compensation planning in the Netherlands, you might also want to read my article üîí  The Perfect Storm Causing an Insane Tech Hiring Market . Interested in more details?  I made a video, sharing more of my thoughts on  why a comparable software engineering position can pay very different .  Other models:  in 2016 ‚Äì 5 years before this article was published ‚Äì software engineer Dan Luu published the article  Is dev compensation bimodal?  and came to the conclusion: \"if I had to guess, I'd say that while the dispersion in programmer compensation is increasing, it's not bimodal, but I don't really have the right data set to conclusively say anything.\" \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/advertising-book-to-ios-and-android-engineers/", "title": "I Spent $5,000 Advertising My Free Book to iOS and Android Engineers", "content": "\n             I released my first paperback book,  Building Mobile Apps at Scale: 39 Engineering Challenges , a month and a half ago, which book  is free  until 31st May as a PDF. I wrote this book with an unusual distribution model. I reached out to sponsors - vendors I mentioned in the book already - offering them extended coverage if they decided to support the book. I hypothesized that this model would be a win-win, as much of the book is about tooling and process challenges: and for tooling-related challenges, buying a vendor solution is often more pragmatic than building and maintaining it yourself. Eight sponsors said yes : which meant the book was funded. I was not only able to dedicate working on the book full-time, but had budget for editing  and  marketing. As an experiment, I decided to allocate $5,000 to sponsor well-known iOS and Android newsletters and websites  and collect the results. How expensive is it to get a website visitor from these sites? How many free PDF downloads would this $5,000 result in? What newsletters and websites deliver the most traffic, the \"cheapest\" traffic, or the one with the highest conversion? I ended up paying up to $40 per download for this free book , in the end, in a somewhat surprising set of results. But before we get there, why did I even bother advertising a book, where being free should have been enough advertising? Why Spend Money on Advertising a Free Book I did this experiment for a few reasons: I guaranteed a minimum number of downloads  for the sponsors: 5,000, to be exact. Although I was hopeful that some newsletters would cover the book even without sponsorship, I did not want to leave this to chance. To give back to the prominent community members  who write excellent newsletters and in-depth articles, week after week. To understand how expensive it is to reach mobile engineers.  As I'm planning to  launch a startup focused on platform engineering , one of my challenges will be to connect with software engineers. The fact that the  developer community builder is the hottest new job in tech  shows how it's becoming more and more difficult to reach software engineers, who are bombarded with more and more developer products. To evaluate if it would be worth advertising my next book ,  The Software Engineer's Guidebook , on email lists or via website sponsorships. That book will be traditional, with no free-to-download option.Because of this, I'd probably have to multiply the cost of a \"download\" by at least 10x. Finally, I had more sponsorship revenue booked than I expected. I figured, what other time would I have the opportunity to run an experiment like this, advertising a quality book, and also directly supporting some of my favorite newsletters and sites? Sponsored Newsletters and Websites I booked the sponsor slots in January and February 2021 to go live in May 2021. I was surprised to learn how some of the popular newsletters, like  iOS Dev Weekly  had no availability for months - and since then, it has sold out for the year, with a $1,500/issue sponsor price tag.  I mostly sponsored newsletters and websites I personally read and like , as well as a few indie publications that I came across. I booked sponsorship on the following publications: iOS Dev Weekly : the #1 iOS Newsletter, going out to over 46,000 iOS engineers. $1,500/issue. Android Weekly : the #1 Android newsletter, going out to more than 66,000 Android folks. $750/issue. Swift by Sundell : one of the best-known Swift publications with in-depth articles. About 100,000/week in visitors, and $750/week (prices increased since) SwiftLee : an excellent Swift publication written by a fellow Amsterdamer, Antoine, who is a staff engineer at WeTransfer. Around 60,000 page views/week, and I got a discounted rate of $350 (prices have increased since). Code with Andrea : a well-known Flutter publication with around 7,500 visitors/week, and a cost of $60/week. Programming Digest  and  Tech Lead Digest : simple and to-the-point newsletters with 13,000 and 2,600 subscribers each, a cost of $250 and $100 per issue. Sarunw.com : another in-depth iOS publication I came across and liked the content I read. $200/week. A leadership newsletter and an indie mobile blog I read, at $600/week and $200/2 weeks. I booked a total of $4,840  with these various sponsorships. I had to say no to a few offers - like a leadership newsletter I really like that has a rate of $7,500 for 4 issues. I also got inbound offers from iOS newsletters that claimed to have 50-100,000 visitors/month, but they refused to share analytics data, and my investigation showed they probably don't even have a few thousand per month.  The adverts were similar enough in their description, but I did tweak them to each site a little bit. Here's how a few of them looked: Ad on Sarunw.com Advert on Android Weekly Advert on Code with Andrea From $1 to $40 per free PDF Download I collected analytics results  with Plausible  - a privacy-focused and bootstrapped analytics solution that I use for my site as well.  Mobile sponsorship results for Building Mobile Apps at Scale: 39 Engineering Challenges (Free PDF) It cost $1.23 on average to get a visitor  to the landing page  and $2.66 by the time someone downloaded a free PDF.  It's hard to tell if these are good or bad results: however, I assume they must be  very good , compared to e.g., trying to get people to click on a paid product or another offering that includes paying for it. I was, after all, offering months' worth of writing and years of experience building large apps, in a book form, for free. On the above photo, I marked values that performed at or better than the average with green, and with yellow or red those who did above this average. For some newsletters and websites, each free PDF download cost up to $40.  This result was surprising. The indie mobile blog delivered very few clicks and below-average conversion. This was a blog where I did not get any traffic estimation, and I went ahead with the sponsorship as the blog looked good. For the tech leadership newsletter: it's one I really like reading. However, I almost always don't notice the advert, and the newsletter has over 10 articles per issue. In comparison,  Tech Lead Digest  - another leadership newsletter - has five links, which probably makes the sponsor stand out better. The best price-for-value websites  were:  SwiftLee  for the lowest cost per click Code with Andrea  for in the lowest cost per download Swift by Sundell  also delivered good results for the money - including a  bonus shoutout article Sarunw  cost a bit above average both for visitors as well as for downloads. The best price-for-value newsletters  were: Android Weekly  ($750): this was the only newsletter that cost \"below average\" in book downloads.  iOS Dev Weekly  resulted in more engagement, bringing almost double the downloads with a 50% smaller subscription base.  Both  Programming Digest  and  Tech Lead Digest  did surprisingly well, considering the readers are not mostly iOS and Android engineers. Here's how the number of visitors coming from each publication added up (stats  via Plausible , the  privacy-focused alternative to Google Analytics  I use for the landing page) And the number of successful, free PDF downloads: Reaching Mobile Engineers is  Very  Expensive My biggest takeaway from this experiment is just  how  expensive it is to reach mobile engineers. $5,000 of spend came out to 4,000 visitors, of which 1,800 went through the trouble of entering an email to claim the PDF. If I was trying to sell a book or a service of value for mobile engineers, this $5,000 of spending would have meant far less than 1,800 customers: I'd guess 5-10%, or 90-180 people at most. Knowing just  how  expensive it is to reach software engineers is an advantage both for technical bloggers and newsletter creators, and for startups.  If you run an engineering blog or newsletter, you can probably make a nice side income by offering sponsorships for products that your readers might be interested in. If I would have been a company aiming to get 100 people to sign up for a trial for my software, I would probably need to get ready to spend in the realm of thousands of dollars through sponsorships or ads. It's also a wild west when it comes to newsletter and website sponsorships, with little data points to start off with. There are no projections or refunds in this space: and the newsletters and sites tend to charge based on what has worked in the past. I shared the data back with all the publications, and several of them told me it was the first time they got information on how their performance compares to other sites. Several of them told me they were wary of raising prices, while some sites increased their pricing since the writing of this article. The only way to understand which sites work is to spend money on them. For anyone building a software business, knowing that it's expensive to reach engineers is an opportunity to start doing this from day one.  I'm seeing an increasing number of developer tooling startups hiring a developer advocate or developer community manager very early on. These are the teams that are very much aware that it's becoming more and more difficult to reach potential customers who are software engineers: the earlier you start, the better off you'll be. If you'd like to check out the book I spent close to $5,000 advertising,  Building Mobile Apps at Scale  is free as a PDF for another few days, until 31st May.  Get it here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/empowered-review/", "title": "EMPOWERED Review: I Needed This Book 4 Years Ago", "content": "\n             I'd been an engineering manager at Uber for a year on a team of 10 when my manager pulled me aside to talk about team structure. \"What do you think about a reorg, where instead of the current full-stack teams, we have a mobile team with 20 engineers and backend teams? It would be so much cleaner. Oh, and you'd head up this new and larger team. Sounds good?\" Who would say no to a bigger team as a manager? I did. It felt  wrong . Our team owned an  experience  - by splitting to a mobile team, we'd only own  features . I couldn't put it into words at the time - but what my manager was proposing was going from the empowered team model to the feature team model. As the  book EMPOWERED  by  Marty Cagan  and  Chris Jones  will reiterate countless times, a recipe for lower team output - and I could not agree more. As I read the  EMPOWERED , I kept having Deja Vu moments: the authors have encountered exactly the same situations that I went through during the high-growth phases at Uber.  My life would have been far easier if I had the vocabulary and case studies that EMPOWERED brought. And I was amazed at how Marty and Chris in the Bay Area came to the same conclusions on team autonomy, ownership, coaching, and other challenges as I did at Uber, in Amsterdam. Note that none of the below links are affiliate links or sponsored. See  my ethics statement  on the lack of such links. A Manual for Silicon Valley-Like Engineering Teams I've previously written  how and why Silicon Valley-like tech companies operate with more autonomy and better results . The book  EMPOWERED  ends up with the same conclusions but does this with more depth and backing than I have read before. All topics of the book are actionable to tech leads, engineering managers - and beneficial for engineers to read . The book is an easy read, with 10 sections, and each section split in short, few page chapters. These are the sections of the book: Lessons from top tech companies , the most notable one being what differentiates tech companies from non-tech ones, how top companies trust and empower teams, and what it says when engineers report into a CIO or IT (it typically signals you're not a tech company, and you won't have empowered teams or product-minded engineers) Coaching:  this section is written in the context of coaching product managers. However, half this chapter applies to coaching engineering managers - and engineers! Topics like seeking out teaching moments, managing time, effective 1:1s, effective meetings, integrity, or ethics are all relevant topics. Writing down a team narrative is something engineering managers should do with their PMs - it's been a great help for me at Uber. There's a section on coaching tech leads that was unexpectedly thoughtful. Staffing  is a practical section walking through responsibilities as a manager from hiring, onboarding, performance reviews, promotions through the difficult task of terminating people on your team. The complete chapter applies not just to product people but also to engineers. I especially agreed with hiring for character, having a \"No assholes rule\" and looking for people who are clearly  not  like yourselves. Product vision  is a section specific to product leaders - but engineering leaders will take a lot away on what they should expect from a strong product team. At Uber, we did all things described in the chapter: North Star, validation, communicating it, and evangelizing it. Team topology  is a must-read part for any engineering leader. How do you organize teams for ownership, autonomy, and alignment? Platform and experience teams are important parts, as are the different strategies to empower each. The part closes with proximity and topology evolution. This was one of my favorite parts of the book. Product strategy  goes through pillars of good product strategy and how to build one. Most companies and teams are terrible at doing so - I've been lucky to have worked with product folks at Uber who did all that the book describes from the start. As an engineering leader, you'll want to understand what a decent product strategy looks like, help your product team get this in place, and hold them accountable for the lack of a coherent strategy. Team objectives  is a hands-on section that discusses how OKRs can help execute (and when they do not), tweaking team ambition and commitment, and how management should help teams succeed. It's a refreshingly honest take on what makes for good team execution. The case study  section is an unusually detailed example of a jobs marketplace tackling its growth problem. The case study follows the structure of the book and puts all the theory in practice. Business collaboration  reminds of the importance - and challenge - of working with the other business units outside product and engineering. The CEO will judge product and engineering based on business results - and everything depends on having strong product and engineering leaders who build trust with the rest of the business and also deliver results. Leader profiles  are authentic reads between each part, with perspectives from ten different product leaders. I really liked the thought from Judy Gibbons on top-down management: \"Marty asked me why I thought so many companies still prefer command-and-control-style leadership versus empowerment. I don't know if it's a preference or even conscious: in many cases, it seems to be the only model the leaders know.\" I highlighted my book copy extensively. This is the chapter on the team types. I LOVE how the authors spend time on platform teams: something too few companies think about far too late into their growth. What I Missed from the Book (Not) talking about tech debt  was the most important thing I would have talked about. Tech debt is something product folks need to very aware of, especially at high-growth companies. I felt the authors were a bit hand-wavy on \"Keeping the lights on\" work, assuming it's just a small thing. My experience says it's not when you're growing very fast. How you handle tech debt can make or break a high-growth company. The parts that I did not get much value out were the case study - too long for my liking, though product leaders will find it useful - and the last few parts (business collaboration and the final part) seemed to be less focused than the majority of the book. The book absolutely topped my expectations in how it touched on platform teams, empowering platform teams, and the take on team topology. Verdict The book EMPOWERED resonated better with how to run an innovative tech company than most book I have read so far - together with  An Elegant Puzzle: systems of engineering management . The reason this was surprising is because EMPOWERED is not an engineering-focused book. However, at companies where  engineers are product-minded , engineering managers get exposed to product work: which is what I have been doing for years. So it should be little surprise much of the product thinking will apply to engineering, and engineering management thinking. The book is very well written and easy to read, with each chapter having a specific takeaway. Though it circles back to the title of the book - empowered teams - it manages to not stay repetitive. The book is deep and rich on specifics, which is less common in the (product) management book genre. If you want to get an understanding of how and why the likes of Uber, Airbnb, Opendoor, Discord, and other  \"Silicon Valley-like companies\" work the way they do : read this book. If you want to see where the \"cutting edge\" of product thinking in 2021 is: read this book. If you're a product or engineering leader in an innovative company, you need to read this book . For engineers: the value is perhaps more questionable. However, if you  work at a place with high autonomy , or if you are  preparing to become a lead, or a manager , you should read this book. My only regret? That I did not read this book years ago. You can get the book here. Favorite Quotes On feature teams  vs the agency model: \"Feature teams look superficially like a product team. (...) But a feature team is really very similar to an agency model. (...) It should be no surprise that companies that use agencies for design and development have much the same problems as they have with feature teams.\" On using the OKR model  with feature teams: \"If the company is still using feature teams, as most unfortunately are, then the OKR technique is going to be a cultural mismatch, and almost certainly prove a waste of time and effort. The OKR technique came from companies that had empowered product teams in their DNA. OKRs are first and foremost an empowerment technique.\" On delivery teams :  \"(Outside empowered product teams and feature teams) there is a third type of technology team, referred to as a  delivery team  (or \"Scrum team\" or \"dev team\"). (...) There is a product owner and some number of engineers. They are purely about output (code and ship). If you're running a process like SAFe, then this is unfortunately you, and truthfully, I have no idea why you would want to read this book, since what I describe here is the polar opposite both philosophically and practically.\" On coaching tech leads,  and the importance of this: \"I absolutely love coaching teach leads. More often than not, these are the people behind the world's most impressive innovations. (...) Every single minute you invest coaching a tech lead on either customers or business context will be among the best possible uses of your time. A suprising percentage of the tech leads I've coached have told me that, ultimately,  they would like one day to start a company of their own . I strongly encourage this and point out the many successful CEOs in tech who started as engineers. When this is their goal, I often encourage the tech lead to consider the product management role for a year or two. Even if they go back to engineering, this experience is invaluable and positions them much better for a startup co-founder role.\" On the secret of Amazon's success  that is out in the open, if only companies would have the discipline: \"Speed and scale are weapons, and Amazon has already told everyone its secret (writing out a narrative explaining your argument and recommendation)... if only they have the discipline to implement it.\" On platform teams: \"Platform teams provide leverage because they allow for common services to be implemented once but used in many places. (...) In a small company, the platform may be provided by a single platform team. In many of the large, top tech companies, as many as half the product teams are  platform  teams. Moreover, platform teams reduce the  cognitive load  for experience teams.\" On the lack of product strategy  for most companies: \"Remarkably, most product organizations I meet don't even have a product strategy. (...) Seriously, this is really what I see in so many companies I visit. They have product teams that are more accurately feature teams, and they're slaving away - pounding out features all day - but rarely getting closer to their desired outcomes.\" On avoiding common objectives , and how it hurts companies: \"Companies that avoid  shared or common objectives  in the name of autonomy or communication often limit their ability to solve the toughest and most important problems.\" \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/preparing-for-the-systems-design-and-coding-interviews/", "title": "Preparing for the Systems Design and Coding Interview", "content": "\n             At Big Tech and high-growth startups, coding and systems design interviews are common - and fairly standard. A lot of people have asked me for preparation advice for these. Here is what I used when getting ready for an E5/E6 Facebook interview, and the one at Uber - where I was hired as a senior software engineer (L5). It's the same resources I recommend to people who are preparing for Big Tech or high-growth tech company interviews. Note that none of the below links are affiliate links or sponsored. See  my ethics statement  on the lack of such links. \n     Systems Design Preparation Resources \n \n     Books \n     Courses \n     Articles and Videos \n     Mock Interviews \n     Discord Servers \n     Your Working Environment \n     \n     Coding Resources \n     \n     Books \n     Courses \n     Other Resources \n     \n \n Systems Design Interviews Systems design interviews are more relevant for senior and above positions, while coding (data structures and algorithms and problem-solving) will be an interview type you can expect at all levels. If you're a senior engineer or engineering manager, you might also find my  thoughts for senior and above people to be useful . Note that systems design is  not  the same across the board. Expectations are very different for an \"entry-level\" senior position than it is for staff or above positions. The more senior the position, the more real-world experience will start to matter. This is similar to how having \"done the job\" becomes more important for senior engineering manager and above positions - and staff levels often run parallel to these in scope and compensation at Big Tech. I summarized  a framework for the systems design interview  with a book review and will write more about this in my  email notes . 1. Books While there is no shortage of online resources for systems design topics, I find going through a book an underrated resource. Take notes, go one step at a time, jump between pages, and  take your time  to learn the concepts they teach. Books are the best price-for-value preparation resource:  the information is much more dense than with video courses, while the price of books is lower than any course subscriptions. Books take time to work your way through them: and so does understanding distributed systems. Understanding Distributed Systems   by Microsoft principal engineer Roberto Vitillo fills the void between the deep theory and the \"interview preparation\" focused books. The book walks through  practical  concepts like failure detection, replication, scalability, resiliency, and operating large systems. It's the book I'd recommend to start with if you have less hands-on experience with distributed systems. Systems Design Interview: an Insider's Guide  by Alex Xu, previously senior engineer Twitter, Apple, and Zynga is the most  focused  book that aims to help prepare for the interview itself. The book is the best I've found so far - though I would have liked to see a bit some depth  as I detailed in my review of this book . Also comes as  an online course  with almost the same content.  Designing Data-Intensive Applications  is the book that goes into distributed systems in a  very  deep way. If you are serious on going deep, you should read chapters 1 (reliability, scalability, maintainability), 2 (data models & query languages), 3 (storage & retrieval), 5 (replication), 6 (partitioning), 8 (faults & reliability) and 9 (consistency and consensus). The book will give you the vocabulary you'll need in this domain. Software Engineering at Google  (free).  This book is not an interview preparation book: however, it is an excellent overview of the engineering practices engineers at Google use day to day. If you want to work at a place like Google and similar places, it's worth understanding how things are done here - and why. There's no better book than this one. 2. Courses There are still relatively few courses specializing in systems design. Systems design is a tricky one to make a  really  good course on, as great systems design is based on  practice , not watching videos. Systems Design Interview: an Insider's Guide online course . The best resource I've found so far, and the one with the most diagrams. This resource is the same content as the book and was put together by a former senior engineer Alex Xu at Twitter, Apple, and Zynga. The course covers the most ground of all courses, is the cheapest, and the only one that does not charge monthly or annually. I've partnered with the author, Alex, and customers  buying the complete version of my book on software engineering resumes  get a $10 discount on this course. Grokking the Systems Design Interview  from Educative.io was the first course of its kind. It's less detailed than the Systems Design: an Insider's Guide one, but more expensive, and you pay per month, or every year. Systems Expert  refers to itself as the #1 systems design course. However, this resource felt like an overpromise after I bought it. It explains 25 systems design concepts in hours-long videos that felt like a slow pace and tailored for beginners. The biggest value is 10 systems design videos that cover systems design questions and aim to simulate interviews. They are helpful to get a sense of how an interview could go - however, the actual interviews will be quite different, in my experience. There's a systems design quiz with 50 questions you can take that might help you brush up on a few concepts, but I found it not unrelated to actual interviews. If you are into learning with videos, this course might be the most helpful - though the free  Systems Design Interview YouTube channel  has higher quality videos, but in smaller quantity. 3. Articles and Videos Systems Design Primer  - the most complete collection of all topics that might come up on the interview. The biggest issue with this resource is how it has  too  many things. I suggest you use it as a start to make a study plan for yourself. Systems design interview guide  and ML engineering interview guide from  Patrick Halina , staff engineer at Pinterest. I especially like his  high level approach suggestions. High Scalability  - a blog covering all things large-scale and real-world. The website can feel a bit messy: but it's a treasure cove of information. My favorite parts are the  Real Life Architectures  and the  Favorite posts  that include a  multi-petabyte content platform ,  Netflix behind the scenes , or the  early YouTube architecture . All practical takes, no theory. YouTube:  Preparing for systems design interviews ,  Systems Design Interview YouTube channel  and ¬† Systems Design Learning Path YouTube channel  - so far the best video resources I've found (including and better than the paid video resources). My favorite articles and resources   on this topic. Mobile-focused resources: Building Mobile Apps at Scale : my book on the topic. Though it's not geared for interview preparation, it covers most areas worth knowing about large-scale mobile development. Cracking the mobile system design interview  (iOS & Android) by Edu Caselles The systems design interview for mobile developers  by DavidNormal 4. Mock Interviews Mock systems design interviews make an incredible difference. The cheapest way to go about them is to join a Discord server and find mock interview buddies, then take turns doing the interviews. Paid: mock interview services  can be a better option both when you have less time to find partners, or when you are ready to invest in being interviewed by a vetted, and experienced interviewer: Meetapro : mock interviews from software engineers working at Big Tech companies. Founded by an ex-Uber engineer I talked with. Interviewing.io mock interviews  are one of the most thorough and fairly priced ones on the market. Keep in mind that systems design mocks are always the most expensive ones. Several readers shared how they felt their investment paid off later. Also, interviewing.io offers a deferred payments plan, where you only pay after you got a job. Exponent interview coaches  have also been recommended by blog readers who found success pairing up with them. ExpertMitra  offers mock systems design interviews as well. I personally have not tried this service, but a blog reader recommended it based on their experience. 5. Discord Servers There's a growing number of Discord servers where people hang out to talk about tech interviews, share advice, questions they got, and pair up for mock interviews. These communities have made huge differences for some readers of the blog, who attributed a good part of their success to being in one of these communities. The most popular ones are these: CS Career Hub : by far the largest Discord focused on the tech career. At any given time, more than 1,000 people are online. The server has more early-career people, but there are plenty of experienced people as well.  Interview.me mock interviews :  the most active Discord server focused on mock interviews. Lots of experienced people hang out here: it's a great one to find systems design mock interview pairs. Recent Interview Experiences : a server focused on sharing interview experiences for specific companies. Questions asked, how the process was, learning and advice. There are over 50 channels dedicated to companies from the bigger ones - Google, Facebook, Microsoft, Amazon - all the way to ones like Carta, Confluent, Asana, Intuit, Adyen, Shopify, Snap, UIPath, Wish or Zillow. (Paid) Systems Design Interview Private Discord : upon purchasing the $29 course for  Systems Design Interview: an Insiders Guide , you get access to the private Discord. This is the place you're most likely to find mock interview systems design partners, who have studied systems design topics. For the price of the course, this is a better investment than most paid mock interview services. Other Discord servers  worth mentioning are  SDE Skills  (has a systems design channel, but it's quiet, and this is not a place to find mock interview partners) and the  Leetcode server  (a server more focused on coding). 6. Your Working Environment You can spend all the time preparing for systems design interviews, but you might still fail these at Big Tech. Why? If you lack hands-on experience at work building large systems, this could be a blocker to get offers at senior or above levels. If your current position provides zero challenges related to designing or operating large systems , you might want to consider changing to a company where you would do this, day to day. Outside of the most-well-known companies, many companies with  great software engineering cultures  are struggling to find enough qualified candidates. By learning enough  theory  on distributed systems, you'd probably already be in the top half of applicants at these places. At these companies, you'd be more likely to write and review  engineering RFCs ,  lead complex projects , have  engineering mentors  otherwise inaccessible from the outside, and have  more autonomy  to grow. I know of an engineer working at a traditional finance company who failed systems design interviews at Facebook, Google, and similar places - one of which was their dream company. This person then took a job at a tech company that was perhaps a tier \"lower\", but still an excellent place. There are many companies that have great engineering cultures and large challenges to tackle but are more open to hiring people who do not have actual experience shipping systems to millions of people. After a few years at this company, this person then got offers from all their dream companies - as they now had that hands-on experience that was previously missing. Coding Interviews The nice thing about generic coding interviews is how you can prepare for them, even if you have not been exposed to these kinds of problems before. They are also more or less standard between most companies. Some larger tech companies have started to put \"nicer\" coding interviews in a place that reflects more real-world problems. However, I have found that these are still a minority among Big Tech - though I'd welcome to see more of a change in this direction. I suggest you create your own study plan  for topics you want to cover: data structures, algorithms, and coding challenges you'd like to complete. I'll be sharing my study plan as part of the  tech interview preparation notes . 1. Books Cracking the Coding Interview  is the book I'd start with. It is the most mature and easy-to-understand read resource. I also recommend it because the author, Gayle trains large and small tech companies on  how to do coding interviews well : she did this at Uber, where we made changes following her help. No other book prepares for the type of interviews that Gayle helped put together. I own multiple editions of this book, and it has made the biggest difference in preparing for various interviews for me. It's dense, worth every penny and has become a \"baseline\" for most Big Tech interview preparation. De-Coding The Technical Interview Process  from Spotify software engineer Emma Bostian is a fresh take on navigating the tech the interview process, tailored for frontend engineers. She wrote the book after she found Cracking the Coding Interview to be too Java/backend-focused. The book comes with 1, 2 and 4-week learning plans as well. A great book to start with. Elements of programming interviews  is an extensive collection of programming challenges. I really like how exercises are grouped per data structure and algorithm area. It's a good place to reach to for more practice on specific problem areas. Grokking Algorithms  is the book I'd recommend to understand the most common algorithms. I'm convinced you don't need to know of more algorithms  at tech companies and (most) engineering interviews . I have bought - and read most of the  Algorithm Design Manual  and  Algorithms: Fourth Edition . Both books go far deeper than I have found any coding interview to dive into. Unless you're really into algorithms, I would not recommend them. 2. Coding Sandboxes Practicing coding exercises is something you'll want to do, and there is no shortage of sandbox platforms: \n     Leetcode  is the mostpopular destination, with lots of free resources, and a Pro tier. \n     Codewars coding katas : complete small coding challenges. \n     Edabit coding challenges  is a free resource with numerous coding challenges. \n     SWECareers  is built by a Facebook engineer, and is the most affordable service that comes with a detailed algorithms video course, and 200 common coding questions, categorized by companies that tend to ask them. Get a 10% discount by  using this link  (affiliate) \n     AlgoExpert  is a paid service that offers video walkthroughs for more than 100 coding challenges, curated by a former Google engineer. \n 3. Other Resources There are almost  too many  articles, videos, and people giving advice on how to prepare for coding interviews at tech companies. Here are my favorites: Discord servers  can be useful in finding mock interview partners, and getting the scoop about the process at various companies. See  the most popular Discord servers here . Problem-Solving for the CS Technical Interview   - a course from Stanford. The slides and course material are one of the best preparations for Big Tech coding interviews. I used an early, 2009 version of this course to prepare for interviews when I moved to the UK. Get That Job at Google   - an article from Google engineer Steve Yegge, from 2008. Shockingly, the contents did not get out of date. Always be coding : how to land an engineering job from Google and Square software engineer David Byttow. The article was written in 2013, but I find the advice still relevant.  See this video  from 2019 with actionable advice. I especially like the advice on reinventing the wheel - I did the same  when preparing for interviews . The Google frontend interview process  by Emma Bostian, who interviewed onsite here. Interview bootcamps  are becoming more popular. They are the most expensive option but can help you level up faster and give you far more feedback. I suggest you choose ones where the identity of the instructors is known, and they are experienced interviewers at the types of companies you are hoping to break into. Take Ownership of Your Education Big Tech interviews are both fairly standard and widely documented. There is a wealth of resources to prepare for the coding interview and a growing pile of systems design resources. It's easy to get lost in so much information: which is why  you  should make a plan on how you will get \"interview-ready\". Create a study plan with topics you want to cover for the interview types you're expecting to have. Learn the theory, then practice this with practice and exercises where you create something from scratch: implementing a data structure, drawing up a diagram. There is no shortage of people  complaining about the difficult interview process  Big Tech has. However, I know of no other industry where you can get a high-paying job with no college degree, no connections: purely through interviews that are fairly standard among the highest paying employers like Netflix, Airbnb, Uber, Facebook, Pinterest, and others. Tech interviews being \"standard\" across the Big Tech makes preparing for these a high-leverage activity: study once, interview many times. Once you prepare, just make sure your  software engineering resume grabs the attention of the recruiters . Good luck - and if you are looking for more advice for senior and above interviews,  I have some . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/checklist-for-first-time-managers/", "title": "A Checklist For First-Time Engineering Managers", "content": "\n             Becoming an engineering manager for the first time can feel lonely.  It's how I felt  - and other engineering managers I've talked with confessed the same feeling on  transitioning from engineer to manager . The most visible change in moving to management is you get a lot less feedback. When you're an engineer, you get feedback on your code, on your design documents, or how your projects are going. As a manager, you have none of this. There are also often no clear  and  specific expectations of what you should be doing in this role. I wanted to make the path to becoming a new manager \"easier\", and so I created a \"checklist\" that I wish I had when starting out as a new EM . At Uber, we had an Apprentice Engineering Management program in place, a structured way to help senior and above engineers transition into the engineering manager role. When the first engineer on my team entered this problem, I thought back at what I could have used as help when I became a manager. Part of my new manager checklist.  View the whole checklist here . I noticed the many parallels between  an engineer managing a project the first time  and a new manager starting to manage a team. In either case, they've not done this work before: and an opinionated list can prove much more helpful than general advice. The expectations checklist I created was opinionated and specific to the role at Uber and on my team.  I aimed to craft the checklist items to specify the output but leave the \"how\" to the engineering manager.  You can view the complete checklist here. We would first discuss if the points made sense, tweak it, then check-in regularly on their progress. My goal was to narrow the seemingly endless task of \"be a good engineering manager\" down to something manageable. The expectations are split into these areas: Team building and teaching.  Build trust on the team, execute on hiring (if they have headcount), and develop people on their team. Deliver results.  Ensure the team has a structure to execute on, get things done, and keep a high quality bar. Collaborate and connect.  Keep an open communications channel with the team, connect people and teams, and run good meetings. Vision.  Ensure the team has a purpose and collect team values. Involve the team in planning for what the team will do. Professional growth.  Keep growing as a person: set their own goals, work with a mentor, network with peers and give back. The feedback for this approach has been overwhelmingly positive.  The first-time manager on my team said this checklist made a  huge  difference in their focus and confidence. They said the list gave them a much-needed structure. This manager has also gone to become an excellent one, as confirmed by their team, their stakeholders, and by their manager - me! Other managers in the organization started to use the checklist, tailoring it for their needs. Other managers gave similar feedback in how it provided something \"concrete\" in this fuzzy world of management. My advice in using  this checklist  is this: don't blindly copy it: but customize it.  Start by defining what a competent engineering manager looks like in your organization. Then, working backward, come up with outcomes that can prove that someone is demonstrating this competence. Try not to define exactly how the engineering manager should go about doing something. That's micromanaging: unless you have a good reason to do so, I'd advise avoiding it. Instead, define what result you'd like to see. You'll see how much of the expectations in  this document  leave interpretation open to the new manager. Don't forget that first-time managers need just as much support as first-time project leads and first-time engineers do.  As a manager to a first-time engineering manager, investing your time to help these managers succeed is one of the highest leverage activities you can do. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/project-management-at-big-tech/", "title": "How Big Tech Runs Tech Projects and the Curious Absence of Scrum", "content": "\n             Project management is a topic most people have strong opinions on, and I‚Äôm no exception. To answer the question of how different companies run engineering projects, I pulled in help from across the industry. In this issue we‚Äôll cover: Project management approaches across the industry.  An overview of a survey with over 100 companies represented, plus key takeaways. Project management at Big Tech . How are these done? How does the organizational setup of Big Tech influence how projects are executed? The lack of Scrum at Big Tech . Why is the popular framework missing from most of Big Tech, and are there takeaways for companies operating outside this model? How should you run projects in your team?  I‚Äôll share my personal take. Before we jump in, here‚Äôs a personal story about why it‚Äôs sometimes hard to put a finger on how important project management approaches are. This article was originally published in  The Pragmatic Engineer Newsletter . This newsletter is especially relevant for engineering managers and senior and above engineers at high-growth startups and big tech.  Subscribe  to get weekly articles  like these  in your inbox. Skype, Scrum, and the Reminder of What Matters When I joined Skype in 2012, the company had gone all-in on Scrum. All engineers and product people were sent to best-in-class Scrum training, facilitated by one of the Agile manifesto‚Äôs founders. Skype went all-in on Scrum, moving all teams to this methodology over a few quarters. And the move to Scrum was seen as a success at Skype. We went from shipping the flagship Windows app once-a-quarter at best, to monthly shipping. Most teams delivered something every 2-4 weeks. Teams rotated Scrum Master roles, Agile coaches dropped in to give feedback on the teams, and Microsoft ‚Äì which had just acquired Skype ‚Äì was interested in taking inspiration from the speedup in delivery. However, while Skype moved over to Scrum, a competitor was executing ruthlessly: Whatsapp. Though a much smaller organization, Whatsapp chipped away market share month after month, becoming the leading communications platform. Unlike Skype, Whatsapp never bothered with a framework like Scrum. Early employees shared how they never even muttered the word and deliberately ignored all heavyweight processes. Whatsapp out-executed Skype, built a more reliable messaging experience than Skype, and ultimately won the battle of messaging and communication apps. The success of companies and project management approaches is not always correlated  and this story is a reminder of this. I‚Äôm not saying how you run projects is not important: it is. But there are other things that might have a greater impact on outcomes, such as focus, leadership approaches, how people work even without a process, and so on. Project management is a piece in a complex and ever-changing puzzle. However, it is not ‚Äì and should not be ‚Äì an end goal, only an enabler to reach that goal quicker. Project Management Approaches in the Industry How do companies run projects? I ran a survey with over 100 responses. The results are interesting. The summary of how companies manage projects is ‚Äúit depends‚Äù.  And this should not be very surprising. A newly founded startup with five people will see success in different ways from a 1,000-person, slowly growing non-tech company. Even within the group of large non-tech companies, some experiment with novel approaches, while others stick to doing the same thing that has been working well enough for years. H ow do companies run projects? An overview of the survey results. I segregated the companies based on these categories: Public tech companies : publicly traded companies with technology at their core. Many of these companies had previously been venture-funded. Venture-funded scaleups:  startups with Series B or above funding. These companies are typically valued at least at $300M, and are growing aggressively, often eyeing an IPO in a few years‚Äô time. Venture-funded startups : startups raising pre-seed, seed, or Series A funding. These are typically growing companies with less proven business models. Non-venture funded tech companies:  established tech companies that have not taken venture funding and are not publicly traded. These companies often have less aggressive growth goals than venture-funded ones. Large non-tech companies : both public and private companies which do not have tech as their core function. Consultancies : companies providing development services. Methodologies  used by companies in this survey were: No ‚Äúformal‚Äù methodology : common for public and venture-funded tech companies. Plan, build, ship : common for public and venture-funded tech companies. Scrum : common for large, non-tech companies, non-venture funded companies and consultancies. Kanban : mentioned across all companies. SAFe (Scaled Agile Framework) : mentioned with large, non tech companies and a non-venture funded company. Shape Up : mentioned for a few venture-funded companies. The survey revealed a few interesting findings, some of which related to the question:  ‚ÄúOn a scale of 1 (not satisfied) to 5 (very satisfied) how satisfied/happy are you with the current project management methodology?‚Äù Insights that are worth thinking about  are below. I advise to treat these carefully, given the survey is non-representative in sample size. Nevertheless, they are observations I can confirm. Teams with dedicated project managers  typically recorded lower satisfaction ratings at public or venture-funded tech companies. However, at non-venture funded companies and consultancies, several respondents were very happy with project management, and called out these people as a reason for their satisfaction. Teams being allowed to choose their own way of working  was more common at public tech companies and venture-funded scaleups. Large, non-tech companies and smaller, non-venture-funded companies were more likely to mandate the same approach for all teams within the company. Team autonomy and high satisfaction seemed to be correlated . Many people rating their satisfaction as 4 or 5 mentioned autonomy, freedom and flexibility, and the putting of quality first at the team level, as a positive. Teams struggling often had little to do with the methodologies.  People mentioned lack of vision, good engineers leaving, lack of transparency or poor tooling as reasons why things went badly. For these teams, no change of methodology would help because the issues ran deeper. JIRA has been mentioned mostly with negative associations : all  13 mentions of JIRA  were in this setting. Being able to get things done without working much with JIRA was mentioned as a positive. Additionally, a recently IPOed, high-growth tech company moved over to JIRA and ran a survey among engineers. It measured a Net Promoter Score (NPS) of -83. This is staggeringly low, and means that 83% of engineers would advise against JIRA. As a counterpoint, an engineering leader at a public tech company with stable growth shared that their organization heavily relies on JIRA, using it as a knowledge engine. In their case, JIRA works well for large-scale coordination, after the organization fully adopted it.  Let me use this feedback to plug  Linear, an issue tracking system , co-founded by one of my former Uber colleagues, and a tool that  startups I invest in  almost all decided to use and speak highly of. Note that I have no association with Linear and was not paid to write this. Project management approaches that do not work well  share a few characteristics, according to respondents who left a rating of a 1 or a 2: Engineers not involved in estimations  that the team then committed to, is a frequent pain point. In my view, it‚Äôs one of the easiest ways to demotivate engineers ‚Äì to the point of some leaving ‚Äì and also to get a false sense of what a team can achieve. Requirements changing, even with dedicated project managers,  sits poorly with engineers. While there are teams where requirements change a lot, on these teams it‚Äôs typically the engineers who run the projects, and can deal with them. However, when a dedicated project manager is unable to shield the team from requirements changing, respondents rated this approach as poor. Teams with no autonomy to change a failing project management approach also recorded low satisfaction.  These kinds of responses were pronounced at companies where all teams were expected to follow the same methodology. It‚Äôs an example of directive leadership and while this approach can work well for roles where there is little creativity needed, it is usually a poor way to build high-performing software engineering teams. When teams can iterate  together  and change their processes on their own terms, satisfaction and productivity go up. Browse all anonymized responses here . How Big Tech Runs Projects Big Tech differ in how they approach executing tech projects, compared to the rest of the industry. I gathered data by talking with people at well-known publicly traded tech companies. Here is how they typically get things done: How Big Tech runs engineering projects. Typically used methodology: as each team can choose how they work, the methodologies used per engineering team can vary, even on a project basis. Big Tech shares several characteristics in how engineers execute on projects: Engineers lead  most projects: either a tech lead, or an engineer on the team taking the lead.  Read more about  how software engineers lead projects at these places . Teams are free to choose  the project management methodology they use. Many teams go with an RFC-like planning process, iterate on building, and ship all within a few weeks. Other teams use more Kanban-like processes, where they work on the highest priority items. There are no dedicated project managers  for team-level projects. Most of these companies have Technical Program Managers (TPMs) who step in for large projects involving multiple teams, or run across organizations. The ratio of TPMs to engineers was around 1:50 at Uber.  Read more about TPMs . Project management artifacts and processes  vary between teams even in the same organization. Most teams have a project backlog, do standups at intervals as the team sees fit, and retrospectives every now and then. First-class developer tooling is a given  in these places, and plays a large role in short iteration cycles. Many teams work on main branches, get quick feedback from CI/CD systems and can immediately share functionality which they are working on with other team members. For people who have worked in Big Tech, much of this is familiar. However, if you were to try to copy this same approach in a more traditional company, it would likely fail. This is because the organizational structure of Big Tech greatly impacts how teams can ‚Äì and do ‚Äì execute. Big Tech Organizational Structure that Impacts Projects In order to understand how Big Tech manages projects, let‚Äôs take a step back and look at the environment most of these companies operate in, which I dive deeper into, in the article  What Silicon Valley \"Gets\" about Software Engineers that Traditional Companies Do Not . Autonomy for software engineers and teams.  The expectation of developers at traditional companies is to complete assigned work. At SV-like companies, it's to solve problems that the business has. This is a huge difference. It impacts the day-to-day life of any engineer. Curious problem solvers, not mindless resources.  A motivated engineer easily makes multiple times the impact of a \"factory worker\" who only does what they‚Äôre told. ¬†For organizations with a factory worker attitude, this approach will bias towards more heavyweight project management approaches that leave little room for interpretation, on purpose. Internal data, code, and documentation transparency.  Employees ‚Äì and not just engineers ‚Äì often have access to real time business metrics and data sources, to write their own queries and create custom reports. Exposure to the business and to business metrics.  Engineers are encouraged to interact with the rest of the business and build relationships with non-engineers. In contrast, traditional companies often make it impossible for developers to interact with the rest of the business. Engineer-to-engineer comms over triangular-communication.  Traditional companies will encourage hierarchical communication that slows down information flow, and results in slower decisions. Investing in a less frustrating developer experience.  Companies that care about engineers solving problems quickly  set up various platform teams , which reduce the developer experience churn. Higher pay, justified by higher leverage.  Companies that leverage engineers well, have no trouble paying close to the top of the market, or above it. Caliber of the talent hired.  These companies hire highly competent and highly motivated people, thanks to the combination of all the above. They have a large pool to choose from, as they are known for generous compensation packages, and strong career growth opportunities. Empowered and autonomous teams  are the building blocks of all these companies. They are also the key differentiator between many companies in the tech industry. While not all teams within Big Tech will be fully empowered, these organizations ‚Äì along with progressive thinking startups ‚Äì are closest to implementing ways that ensure teams are as empowered as possible. Teams with clear ownership  is another building block of Big Tech. Each team of 5-15 people has a clear vision and mission, and the skills and autonomy to execute on it. The mission could be ‚ÄúBuild a world-class booking experience for seniors‚Äù for a product team on a hospitality product, or ‚ÄúEmpower teams to integrate rating experiences with close to zero effort‚Äù for a  product platform team . Product-focused teams are typically composed of cross-functional team members like backend, frontend and/or mobile engineers, with product managers, data scientists and designers often also on the team.  Platform-focused teams  tend to not be cross-functional or tied to a specific domain. Note that even though engineers have high-level specialization, in Big Tech most experienced software engineers are expected to be able to pick a broad range of engineering work, and the interview process also reflects this generalist approach. Product Managers: Yes, Project Managers: No Another curious difference between Big Tech and everyone else is the role of Product Managers, and the lack of Project Managers or Product Owners who are dedicated to teams. The role of product managers at these companies is defining the strategy at the team ‚Äì the ‚Äúwhy‚Äù ‚Äì and the steps to execute this strategy ‚Äì the ‚Äúhow‚Äù. As Facebook product manager Will Lawrence  phrases this : ‚ÄúThe role of a product manager is to figure out  what game we're playing  and  how we're going to play it . Strategy is choosing the game we're playing. It‚Äôs finding worthwhile areas to invest in and creating a compelling vision for how we can succeed in this game. (...) Execution is how we play the game. It‚Äôs the day-to-day processes, decisions and actions we take to make progress towards our mission.‚Äù Product Managers ensure that the team keeps working on the right thing. This means working with the business, with data science and with design to build a roadmap, create plans, prioritize work and escalate where needed. At large companies, this itself is a full-time job already. In many cases, Product Managers do not own project management  at Big Tech. The team is responsible for the execution, and the team lead ‚Äì usually the Engineering Manager ‚Äì is responsible for making this happen. With empowered and autonomous teams, managing a project is rarely a top down exercise. Each team will vary, but I‚Äôve found great success in rotating the project lead role among engineers, helping everyone on the team grow their leadership muscle.  Subscribers have access to the  üîí Project Lead Expectations document  that hundreds of teams have taken inspiration from and used with success. The lack of dedicated project managers raises several questions . Are engineers overloaded with project management? Is managing projects a good use of engineering time? All of these are possible, and here is my take. For team-level projects , not having a dedicated project manager ends up simplifying processes, and strengthening personal relationships. Engineering project leads will add as little process as they can, as this is in their interest. When collaborating with other teams ‚Äì also without project managers ‚Äì they will also build relationships for other engineers leading projects, or owning products. This kind of engineer-to-engineer communication is more efficient than if it went through multiple project managers as well. For complex projects  that span several teams across different offices and time zones, leading such a project is a full-time job for an engineer. Big Tech pulls in Technical Program Managers (TPMs) to manage these complex, and often strategic projects, taking the load off engineers. Dedicated Program Managers  or Project Managers still exist within Big Tech. They are typically tied to external-facing commitments and customers ‚Äì such as a Program Manager for the Apple partnership ‚Äì or to long-running initiatives, like a compliance program. Similar to how TPMs are not allocated to a single engineering team, these Program Managers or Product Managers also don‚Äôt tend to have an engineering team, but they work across many teams instead. How large tech companies run projects. Simple projects are typically led by engineers. Complex projects by Technical Program Managers. Dedicated Program Managers might also run longer-running initiatives. A telling summary of how the Product Manager role at Big Tech is different from Project Managers or Product Owners in many companies, is summarized in this tweet from Facebook product manager Ben Erez: In >1 year as a PM @ Facebook I've created zero tickets/tasks. We don't do sprints either. PMs here focus on vision, strategy & partnerships. Less on project management & tasks. Engineers carry most of the project management responsibility & create their own tasks. It's great. ‚Äî Ben Erez (@ViableBen)  July 28, 2021   Product-Focused Environments and Dropping Scrum I witnessed first-hand how a Scrum team dropped Scrum altogether when working at Skype. When I joined the Skype for Web team, we initially did two-week sprints, and followed the usual Scrum processes. We also had a split of software engineers and QA-focused engineers called Software Development Engineer in Test or  SDETs  within Microsoft. However, our shipping pace was only every two weeks, but we wanted to ship more frequently. The first thing we did was make QA part of engineering. In the ‚Äúold world‚Äù, an engineer would finish their work, check into their branch, update a ticket, and let the QA know it‚Äôs ready for review. The QA would take this ticket a day or two later, review it, and reopen the ticket if they found issues. This was a long delay. We made a quiet, unofficial, change where all SDETs built production software as well, and all software engineers became responsible for testing their own code. Now we no longer had to wait days for feedback before shipping code to production. However, the bi-weekly sprints and the numerous Scrum rituals became the next problem. Scrum got in the way of shipping on a daily basis.  The whole idea of Scrum revolves around Sprints, of committing to tasks at the beginning of the sprint, working on these during the sprint, and demoing what we did at the end. The process felt unnatural and like it had been forced on a fast-moving web team. We soon moved to a more fluid way of working, taking the Kanban approach. We stopped caring about sprints, and dropped most rituals that come with Scrum. We just cared about knowing what we‚Äôre working on now, and what it was we‚Äôd get done next. Infrastructure and developer tooling removed the need for many Scrum rituals.  Scrum rituals like demoing to the Product Owner, signing off the work and then shipping it, assumes a few things: That the Product Owner is the one who can with certainty validate the work as done to spec. That the Product Owner wrote the spec- because they are validating it. That the work is not being shipped to production before the signoff is done. However, in our environment, these assumptions were often flawed. All code we wrote was tested with unit tests and, where needed, with integration and end-to-end tests. We shipped our code behind feature flags, and validated them with staged rollouts, starting with a rollout to the team. A lot of the ‚Äúspecs‚Äù ‚Äì or tickets ‚Äì were also written by engineers, who could then validate if they worked as expected. CI/CD, feature flags and experimentation tooling allowed us to have faster feedback cycles than relying on a Product Owner. Much of Big Tech has recognized how first-class infrastructure and developer tooling make a big difference to the productivity for engineering teams. This is why 30-40% of engineering often works on platform teams and is  why Uber invested heavily in platform teams . With first-class infrastructure and platforms ready to use, teams can focus on their  core  work goals, over figuring out how to set up infrastructure, or how to make a service compliant. Some of my takes on platform teams include: ‚ÄúPlatform teams improve organizational efficiency. (...) They are a must-have when scaling up and scaling fast. (...) Yet they are non-intuitive to put in place. Looking at platform teams with a business lens, they make little sense. True enough, platform teams make no sense at small organizations, or at those that are not growing much and have a structure that works well.‚Äù All members of the team were very clear on what we were building . Our end goal was to ship Skype‚Äôs web functionality. This approach was made up of several sub-projects, but the big picture was clear to the team. The Product Managers helped set the high-level strategy, and us engineers picked up the work to be done, and ran with it. We were empowered enough to chip away parts of Scrum that got in our way. After a while, what was left did not represent Scrum at all. Beyond Scrum When talking to engineers at Facebook, Whatsapp, Google, Netflix and similar organizations, most of them have never used Scrum. Why? It‚Äôs because of a few things: Competent, autonomous people need less structure  to produce reliable, high-quality output. Big Tech is able to attract, afford and hire these people. Leveraging competent teams comes through giving them freedom  to choose how to operate. This is true for most types of engineering, and there‚Äôs good reason why the  Skunk Works  model of autonomy with reduced bureaucracy, is what many high-performing teams with high-caliber people end up following. Scaling an engineering organization goes well beyond team-level processes , which is another reason most of Big Tech does not push heavyweight team processes. This is not to say these organizations don‚Äôt have challenges with productivity, but most of these challenges are not ones that a heavyweight process would solve. Challenges that these companies are working on include: Developer productivity.  How can engineers spend more time writing code that moves the needle for the goals of their team, instead of being bogged down by infrastructure issues or working around problems with their dependencies? Platform teams is an approach that helps, but there is a lot more to unpack here. We‚Äôll cover more about this in future newsletters. Repaying tech and architecture debt.  All of Big Tech moves fast and responds to new opportunities quickly. In doing so, companies often take shortcuts that result in tech and architecture debt. How can repaying this debt in a sensible way be part of the everyday process, instead of having ‚Äúbig bang‚Äù tech debt payoff projects? Team structures that match organizational goals.  The goals of the company, and sub-organizations change regularly. How can the team structure reflect these changes, while minimizing disruption to team cohesion? Slack time for innovation and unexpected work.  For teams that are expected to innovate, how do you create slack time to make this happen? Keeping up the pace as the engineering team grows.  The more engineers a company has, the more overhead it takes to communicate, or make decisions impacting most engineers. How can organizations keep moving just as fast after they double in size? What are the processes and structure choices that allow teams to stay nimble and move fast, regardless of organizational size? Durable excellence.  How can the whole organization improve its throughput, while engineers also stay happy, and improvements stick around long enough to compound? The phrase ‚Äòdurable excellence‚Äô is from the article  Staying on the path to high performing teams  by Will Larson. In Defense of Scrum Should companies dismiss Scrum and other methodologies just because most of Big Tech has done so? This would be a mistake. There are many contexts in which switching to Scrum makes perfect sense  and will result in better productivity. Skype was an example where this change did help the company, and Whatsapp would have likely won the consumer calling space, regardless of what methodology Skype used. A few situations where Scrum can be a good alternative: 1. ‚ÄúKitchen sink teams‚Äù  which have everything thrown at them, typically find that managing stakeholders with a heavyweight process like Scrum is a win. Stakeholders are educated to understand that an ongoing sprint cannot be interrupted and that new feature requests need to be groomed. Teams with conflicting priorities get to execute with fewer interruptions, thanks to the sprint structure giving space for the team to ignore these interruptions. ‚ÄúKitchen sink teams‚Äù are typical within non-tech companies, where the business has no understanding of how engineering works. Scrum helps rein in the stakeholders and educates them on software development processes, while giving the engineering team breathing room to execute. They are also common in early-stage startups, where there is one engineering team to build everything. ‚ÄúKitchen sink teams‚Äù occasionally appear in Big Tech, when a product team gets too many responsibilities. In all cases, moving over to a process that gives the team space to breathe, like Scrum, makes perfect sense. However, as teams are autonomous and empowered, more often than not they instead update their team charter, so team members can immediately say no to work the team does not own. 2. ‚ÄúForming‚Äù and ‚Äústorming‚Äù stages of new teams.  Psychologist Bruce Tuckman came up with the phrase \"forming, storming, norming, and performing‚Äù as phases on how groups work. This model very much fits how most engineering teams evolve as well. When a new team is assembled, that team needs to decide how it will work. Reaching for an off-the-shelf approach like Scrum is almost always a better choice to start with, than group members who are unfamiliar with each other coming up with custom processes ‚Äì or none at all. Going with a well-documented approach like Scrum can also be useful if team members have conflicting, non-compatible opinions on ‚Äúthe right way to work.‚Äù The nice thing about Scrum is how retrospectives are part of the process. This allows teams to reflect on their ways of working. Over time, teams with autonomy to change their working style usually end up dropping heavyweight Scrum rules they don‚Äôt need and develop a custom working style. 3. Speeding up shipping to once every few weeks , from a cadence less frequent than this. Scrum, together with weeks-long sprints can help teams move to more frequent shipping, so long as this frequency is not above the sprint length. For many non digital-first organizations, this type of acceleration is a big win. Speeding up shipping was one of the major reasons Skype moved to Scrum in 2012. Before the transition, the teams shipped once every few months. After the transition, each team shipped once or twice a month. Note that the teams that ended up shipping more frequently than this were ones which decided to drop Scrum, as the process makes little sense with short sprint lengths. 4. Companies where uniformized project progress reporting is considered a must-have . Scrum and JIRA tend to go hand-in-hand, and there is no better tool for org-level reporting than JIRA. I have observed many organizations introducing Scrum with the expectation that leadership teams would get more visibility into teams, and be able to pinpoint teams that need help. Unified reporting and drilling down to team-level priorities was one of the benefits Skype‚Äôs leadership also saw with the move to Scrum. Chris Matts, who was an Agile coach at Skype at the time,  shares  how they implemented a  Strawberry-Jam-O-Meter  and a  Wrong-Order-O-Meter,  which would have been difficult to do, had not all teams used Scrum and JIRA: ‚ÄúThe Strawberry-Jam-O-Meter was used to identify teams that had the most backlog items in progress. Inspired by Jerry Weinberg‚Äôs ‚ÄúLaw of Strawberry Jam‚Äù. The Wrong-Order-O-Meter was used to identify teams that were working on items in the wrong order, according to the organization-wide backlog that the product owner organisation had specified.‚Äù My personal view is that in organizations with empowered teams, objectives and key results (OKRs), key performance indicators (KPIs) and goals are far better tools for aligning teams, than rolling out a rigid methodology like Scrum for the sake of reporting. However, in organizations that are not empowered, where teams and individuals are not autonomous, Scrum might work better than alternatives. How Should You Run Teams? We‚Äôve seen how companies at various stages tend to run projects with different approaches, and how Big Tech generally does not mandate a single approach, though big firms have lots of organizational support to make this process work. How you run teams should depend on your context. Relevant factors include your organizational structure, the people you work with, the autonomy and skills of those people, your competition, whether you‚Äôre operating in ‚Äúwartime‚Äù or ‚Äúpeacetime.‚Äù The list goes on. I‚Äôll leave you with the following ideas as food for thoughts. Iterative changes always work better than ‚Äòbig bang‚Äô ones.  A European tech company struggling with shipping very slowly hired a new VP of Engineering. This person decided to move the whole organization to a  NoEstimates  method in the first few months of their tenure. They organized a major event, hired a rock band, and unveiled the new way of working. The following weeks and months were chaos, and the organization reverted to doing what it did beforehand. It‚Äôs more work to teach someone to fish, than it is to catch a fish for them.  My approach to project management has been to coach and mentor members of my team to become project leads themselves. It was a lot more work upfront, but resulted in the team delivering more, people growing faster, getting promoted faster, and those people becoming engineering leaders faster than their peers. This approach was one of my best decisions in an empowered environment.  Subscribers can access  my blueprint document  as well. Directing, mentoring and coaching all have their uses.  Directing ‚Äì telling people exactly how to do something ‚Äì is micromanaging when they can do it themselves. However, it‚Äôs a supportive activity when they can‚Äôt. Choose your approaches depending on whether you direct, mentor or coach and give space to people or teams, based on their capabilities as well. Over time, you should be doing little to no directing. But you might need to start with this. The fewer people you need to make decisions, the faster you can make them.  If an engineer only needs to talk to an engineer to decide, that decision will be faster than if the engineer needs to talk to their project manager, who talks to another project manager, who talks to an engineer, who talks to‚Ä¶ you get it. Optimizing for reporting is optimizing for a low-trust environment.  Reporting at the executive levels is important. However, if you roll out project management methodologies that add heavy processes for the sake of reporting, then you‚Äôll get more process, lower trust, and people gaming whatever reports you‚Äôre trying to produce. Consultants will be biased to deliver easy-to-measure results because this is the simplest way to prove their value.  If the easy-to-measure result is a good goal, this makes consultants a good investment. Just make sure it is a worthwhile goal, and directionally correct. Learning from direct competitors is underrated.  Understanding what a faster-moving competitor is doing ‚Äì and experimenting with something similar ‚Äì is a very smart one. Having a coffee with a peer at a competitor can be a great professional, and networking investment, not to mention one that may inspire you. Some of the best engineers would rather quit than be micromanaged , especially  when the job market is hot , and it‚Äôs so easy to switch jobs. A relevant quote from a response to my survey:  ‚ÄúRecently, C-level executives have started to mandate the ways of working for all teams (everyone needs to follow the same methodology). It resulted in a lot of engineers leaving.\" I recommend getting inspiration from others, experiment, iterate, and move towards a high-trust environment where people are motivated. This is what I did, and how I  put a structure in place  that helped every person on the team grow, for the benefit of everyone: the team, the company, and myself. Recommended reading Execution at Facebook  by Will Lawrence Staying on the path to high performing teams  by Will Larson Up next:  in next week‚Äôs üîísubscriber-only issueüîí we‚Äôll cover advice to prepare for promotions with months to spare, and why you should start early.  Subscribe here . Thanks to  Adriaan ,  Alexandra ,  Alex ,  David , and  Steve  for their help in reviewing this article. See the  Japanese translation of this article . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/reverse-interviewing/", "title": "Reverse Interviewing Your Future Manager and Team", "content": "\n             I don't know of many career hacks that get you ahead over consistently putting in the work. However, there is one approach I wish I had done earlier, and now recommend to anyone who receives an offer from  any  tech company. It's also the best career hack I know: Reverse interview your future team  after  you've negotiated the offer, and  before  you accept it. \"But Gergely\" - I hear you say - \"I already talked with people on the interview panel, and asked them a few questions.\" True enough that you did so. However, that was at a time when  you  wanted to impress them, so you could get an offer.  Did you really ask about all the things that you needed to know, going as deep as you wanted to? Or did you stick with \"safe\" questions? Most people don't ask everything they really want to. The first time I reverse interviewed was when I got my offer from Uber. I did my best on the interviews to impress. However, during the interviews, I was unsure if I really wanted to pack my life up in London to move to Amsterdam, to what seemed like a small satellite office of Uber, far from HQ. Before I would raise these objections, I wanted to see what Uber had to offer. I got a good offer from them. At the same time, by now I now had enough experience to know that everything - even good offers - are negotiable. So I started with this, and it's what I'd advise anyone else to do.  See this video I made  with advice on negotiating offers . Negotiate your offer to the final offer, before reverse interviewing.  Get the money out of the way. This is especially true if you have multiple offers on the table. Negotiation has a bit of back-and-forth, and in this phase you want to still sell yourself, and make it clear how much value you'll bring  if only they can move a bit more up on the offer . Once you get the final offer, most people accept right away. This is what I did in the past - save for at Uber. I had a really good package - something worth packing up and moving for - but I still had questions in my head. What future does a site with 10-20 engineers have? What is the work really like: is it mostly maintenance or will be build new things? How much of what I've been sold on the interview was making things look much better than they are? To answer these questions, I decided to reverse interview my future manager, and the most senior engineer on the team. When I say \"reverse interview\", I mean that I wrote down 10-15 questions that  I  wanted to know the answer for, before accepting. Questions on my list included: Why did you move to Amsterdam? What made you move away from HQ?  (Both my future manager and the most senior engineer moved) Why do you think Uber moved something so key like Payments to a small site?  I was very skeptical of any sensible company moving strategic work away from the HQ, so I circled around this question throughout my \"reverse interviews\". What are the last three projects you've shipped?  Then I asked more about one that sounded the most interesting, to get a sense of the work - this was especially helpful when talking with the engineer. What is the project you're most proud of working on at Uber? Why? What is the biggest struggle you have/had at Uber? Why? What are you most excited about for the next six months? What did your typical workweek look like the past month? Tell me about the team. How would you describe the team dynamics?  Again, I got very good - and blunt - feedback from the senior engineer. Assuming I joined, what advice would you give to be successful? What are things that you have seen new joiners struggle with? Has anyone left the team? If so, what was the reason? Other questions you can ask include ones on  The Pragmatic Engineer Test . These are areas that can predict a good engineering culture, but most job descriptions do not mention them.  Engineering director  Alex Reece  shares two more questions he's successfully used to reverse interview ¬†companies: 1. \"Can you show a non-trivial code review?\" Look at the comments and description. Is there enough context so someone could review it? Is the back-and-forth discussion polite and helpful, perfunctory? Who is doing the review (manager, tech lead, engineer?) and how long does it take? Look at the code. Are there tests being added? Are there comments? Are there one character variable names or functions with no more than 7 arguments? Look at the build pipeline. Are tests being run automatically? Ask about how it was deployed. Was the process manual or automatic? Was there a staging environment, canarying? Use this question as the entry point to ask about the \"life of a commit\" and to see the cultural dynamics on the team. If they aren't willing to show an actual review - this happened about 20% of the time for Alex - then ask the remaining follow-up questions. 2. \" What separates a good day from a bad day for you? \" 90% of the time the response will be along the lines of \"a good day is when I can get something done, a bad day is when I don't\". Perfect! Now ask: \"how often do you have bad days?\" \"what tends to cause them?\". This question tends to releval many interesting facts. You might learn about things like on-call rotations that are on fire, stakeholders/requirements that are always changing, and others. Make a list of your questions, and the things you care about. Every now and then someone will ask me reverse interview questions to ask, and ¬†I tend to ask back: \"What is it that  you  care about? What information are  you  missing?\" Ask to talk to your future manager, and at least one other future team member  one-on-one for 30-minute conversations each, to go through the final questions you have. Questions you'd like to talk through before making a big decision. I made it clear that none of these were about the offer: they were about things I wanted to clarify on work, culture and career. This reverse interview helped me make that decision. I learned that although it was a risky move to move a part of Payments to Amsterdam, they did so as the first few Uber engineers also moved here, carrying lots of influence. After my manager told me this, I asked to talk with one of these engineers -  Jordan , Uber employee #5 and the first mobile engineer. He was a straight shooter with both the good, the bad, and the ugly, which I very much appreciated. Asking about your future manager from a future peer is an underrated move  that gives you far more information at this phase, than you can typically gather throughout the interview process. It's what I did, and questions I asked included these: What do they like and dislike about their manager?  Who would be my future manager. Who did they last promote on the team, and why? Who left the team, and why? How supportive are they, as a manager? Reverse interviewing can give you a headstart at the new company, from day one.  Reverse interviewing is something few people do, and those who do show that they are serious, and think deeper about career choices. After reverse interviewing, my manager was in touch throughout my start date. On day one, I already knew him and Jordan a lot better than most new joiners would. During my reverse interview, I talked about my career aspirations with my manager. I was a tech lead at the time at Skyscanner, and wanted to know if there were any leadership opportunities at Uber. My manager was open that they're hiring for senior engineers, and they already have a tech lead. However, he told me that assuming the team grows, there are bound to be more opportunities. Six months later, an opportunity opened up and it's how I  transitioned to become an engineering manager . Though this could have likely happened even without reverse interviewing, the fact that my manager knew I had such interest from before when I joined was not a bad thing. As a hiring manager, I noticed barely anyone ever reverse interviewed after getting an offer.  And this was a missed opportunity for many. Candidates would sometimes run out of time asking questions, and many ended up asking the important questions from the recruiter presenting the offer, instead of a future team member. The very few times someone asked for what was a reverse interview, I always made myself available quickly to talk with them, and to give as honest answers I could. They're also people I still remember - there were so few of them. Next time you get an offer, consider reverse interviewing after the offer  if you have even the slightest doubts or any questions left. You have nothing to lose, but lots of information to gain that can help make that next big decision. See this  tweet thread I wrote for more advice , and  this video on reverse interviewing to decide between two offers . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/quit-mentoring-at-plato/", "title": "Donating My Time to Grow a VC-Funded Company: Why I Quit Mentoring at Plato", "content": "\n             tl;dr  Nonprofit/pro bono organizations I suggest for offering mentoring/seeking mentorship:  Mentoring Club  (experienced mentors, EU focus),  Coding Coach  (aimed at software engineers),  Mentors in Tech  (mentorship for community college students in the US wanting to break into tech),  Meet a Mentor  (UK focused) and some  other ways to mentor . Let me pitch a business model to you: Cameo, but for tech professionals, customers pay a high monthly fee and the \"providers\" work completely for free. I know, I know, you're saying I'm crazy. But just hang in with me. Mentoring is something that most people in tech would  greatly benefit from . So how about we allow them to be mentored by the  best:  CTOs, VP of Engineerings, senior managers, and managers, all from well-known companies. People would pay a  lot  to access these mentors! You're asking how we'll make money? Here's the best part. Cameo pays \"providers\" 75% of the revenue, and they're nowhere profitable. We can do better. We won't pay pay these experienced people  anything . We'll just use FOMO, alluring to giving back to the community, and dangle exposure in front of people. Oh, and customers will assume they pay for the time of these in-demand-otherwise-inaccessible people, so they won't complain about our high prices. That's it. Welcome to the business model of  Plato : a service where you pay $300+/month to get connected with people who volunteer their time for free . Plato is probably the best-known mentoring service in Silicon Valley, and  a VC-funded company . I was a mentor at Plato for more than 6 months. This was until I asked Plato to donate my take rate to a charity, and they told me there is no \"take rate\" nor any charity component. Getting a great mentors for $299+/month is a steal (Team & Enterprise costs more). It's especially a great business model when those mentors are volunteers. Their business model is ingenious: a marketplace with a 100% take rate.  They are one of the very few two-sided marketplace who managed to pull off: all money goes to the middleman, and none to the suppliers creating the value of the marketplace. The other notable example is  Elsevier  or  Springer  in the academic publishing space who charge high fees to access to papers whose authors and reviewers  they pay nothing . For comparison, Uber has a take rate of 15-25%; Cameo sits with 25%, and YouTube at 45%. How did I get myself to become - and promote - such a business model, and contributing my time to grow a for-profit company? FOMO and Plato's marketing both played their role. An Elite Club Plato has done a fantastic job of using status and FOMO to attract future mentors. I read of someone being a Plato mentor on LinkedIn, and looked up what this entails. You can't just become a Plato mentor: you have to apply to become one. Before doing so, you need to read through  Plato's model , where they make it clear this is an elite club. Executives from Google, Slack, Lyft, Box, Netflix and others are part of this network: Correction needed on the landing page: \"Plato is a network of mentors DONATING their time, free of charge.\" Customers assume they pay for the time of these people, when they don't. \"Wow\"  - I was thinking to myself -  \"what an elite club! The cofounder of Box is also part of it, as is the VP of Engineering at Lyft.\" By becoming a mentor, Plato  tells you that  you will: Give back to the community, learn, build a personal brand and network with others. Plato's reasons for mentors to join their community. What they don't tell you is how by becoming a mentor you will contribute to the bottom line of  exactly  one organization: Plato, the for-profit company. Still, the allure of Plato is that they only ask for 30 minutes of your time - though they do so every week.  This seems like a reasonable commitment for most people, and I was no different. So I signed up, had a mandatory introductory call with a customer success manager, and I was off to mentoring sessions. Fun at First, a Chore Later The first few months on Plato were pretty good. I had calls with many people: senior engineers looking to make it to staff, managers becoming managers of managers, and a few engineering directors bouncing off ideas. It felt like my time was well spent. It was somewhat annoying how you cannot control who will \"book you\" when on the platform: someone just shows up. I've had people not show up multiple times, which was irking, as I would have expected this not to happen, given that mentees were paying for the service. Still, you have access to support, and the experience was smooth. However, after a few months, the mentor session every week became feeling like a chore. I had people reaching out on other channels asking for mentoring, and I told them I don't have the bandwidth - as I don't do many of these calls. My Plato stats after 6 months on the platform: a call per week. After a while, it felt more like a chore. Whose benefit are these calls for? I mean who is  really  benefitting from my time? After a while, I had to ask myself. Why am I doing this chore? Who does my work directly benefit? And the answer was obvious if you looked deeper: it mostly benefits Plato. The mentee also benefits from these sessions - but they are buying a service they expect. I had benefitted, especially early on, but that benefit became more and more marginal. As I got to this point, I started to ask mentees if they knew the business model of Plato. Mentees All Assuming They Pay for The Time of the Mentors For my next few calls, I asked mentees how they think Plato works. Most replied that they - or their company - pays for Plato, Plato takes a cut, and mentors get paid most the proceedings for their time. When I told them mentors are volunteering their time, all of them were surprised.  \"You work for free, while I'm paying for the service?\"  - they would ask? \"Yeah\" - I'd tell them -  \"were you not aware of this?\" One mentee who shared how he signed up after seeing me being associated with Plato  said :  \"I subscribed to Plato for six months because I watched your videos . My mentors are very helpful and  I can‚Äôt imagine that the huge sum I paid for the service does not go to them or charity. \" Plato deliberately hides the fact that they are a network of unpaid volunteers.  There is no place for customers to find out that the money charged ends up at Plato, and support the operational costs - and profits - of this for-profit organization. Plato's How it Works page. It conveniently does not mention how all mentors volunteer their time - all revenue and profits going to Plato Plato also does not offer discounts for people paying out of pocket. Another person messaged me, sharing how her company stopped paying for Plato, but she wanted to continue to keep working with her mentors. She was on a budget and asked if there was a way she could get a discount. Plato said no: and this person ended up paying out of pocket, assuming this was the only way to keep in touch with mentors, thinking her money went to them. She was horrified to learn Plato took all the fees and she could have just connected directly with the volunteer mentors. When I Volunteer My Time, I Want to Support a Good Cause At this point, I started to feel uneasy about Plato. What was I doing as a mentor on this platform? I was granting legitimacy for a service that does not even share its business model and how the core of its value-add - the mentors - come via volunteer work. I am not against volunteering my time and have done it countless times, but I want to support a good cause when I do. So I reached out to Plato and told them I'd stop being a mentor unless they agree to donate my take rate - the amount of money they would budget for my time - for a good cause, such as a charity. Unfortunately, Plato confirmed that this approach is currently not an option. I can't, with good conscience, continue to support a shady business model where the main entity benefitting from my time is a for-profit company. So I've left Plato as a mentor. I've been a  @PlatoHQ  mentor for months. While the experience is good, I'm suspending mentoring until Plato changes their business model to allow mentors to donate their take rate to a charity. Today, mentees pay $300/month, mentors work for free, and Plato takes all the revenue. ‚Äî Gergely Orosz (@GergelyOrosz)  April 6, 2021   An Ingenious Business Model - But Will it Scale? I personally do not approve of business models that are based on exploiting people or hiding key information. In Plato's case: they do not tell their paying customers how mentees volunteer for free, and all proceeds stay with them. Still, it seems the model works and Plato seems to be thriving. However, Plato has a problem: and this is that they're venture funded and need to grow both in users, as well as in revenue.  The company  is a pivot  from a YC-company that raised $2M in seed funding. What this means is Plato needs to target a path of high-growth, and profitability in the millions, or tens of millions. This means they need to keep convincing mentors to volunteer their time, so Plato can grow, and eventually turn a profit. However, I suspect that Plato will have trouble retaining mentors. Since sharing  my reasons of leaving Plato , I have received several messages from former mentors. Here are a few of them: \" Plato has a serious lack of diversity.  Now I know why: underrepresented folks are already busy and do a lot of unpaid labor already.\" - a former Plato mentee \"Saw your post about Plato and agree. I've been thinking the same thing to be honest but I thought  I was honestly maybe crazy and maybe this is how it is now in SF . I also assumed maybe potentially ¬†some mentors were getting paid (folks in demand) so Plato had some business model where they weren't taking 100% being a facilitator.\" ¬†- another Plato mentor \" Honestly, if you're an engineering leader, you're better off off choosing an underrepresented person  and meeting with them weekly or biweekly if you want to mentor.\" - a former Plato mentor Leaving Plato was easy enough: as I was mentoring for free, I'm continuing my permanent mentor sessions off Plato. Nothing changes for me: Plato might see a bit less revenue, though, and I am now making it clear that I do not support this kind of shady business model. If you're looking for mentorship or offering to mentor:  I cannot recommend Plato until they make their business model transparent, instead of operating in a gray zone where customers keep assuming that some of what they pay goes directly or indirectly to mentors. However, I do recommend  several other organizations  which have transparent business models.  Mentoring Club  is like Plato, but free and run by volunteers. There are several other  volunteer-run organizatons  and  marketplaces that match you with mentors  whom you directly pay (and the marketplace takes a small cut). \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-investment-mindset/", "title": "My \"Investment Mindset\"", "content": "\n             The year was 2007. I was a college student attending a 24-hour hackathon where we had had to build something on top of live trucking data. We were given an API that sent GPS and other metadata for 100 trucks roaming across Europe, the data updating every five seconds. I entered the competition with friends, and we built some basic visualization in those 24 hours. It was passable, but not something I was too proud of. The event was won by my brother and his two friends, who also competed at the hackathon. They built a visualization of the trucks moving on top of Google Earth and Bing Maps in a way that you could switch between maps and various visualizations. This was mind-blowing stuff back in the day, as there was no public API to build any of this. They used an undocumented API that would fetch parts of the map and built their business logic on top of this custom-made engine. \"How did you manage to use both maps and do this so fast?\"  - I asked him. I toyed with the idea of creating something similar but quickly gave up after I saw there were no APIs to do so. \"Oh, we did a similar kind of work a few months before for a contract. The client never paid, even though I spent a week understanding the APIs, finding workarounds, and building the prototype engine. I was pissed at the time, but I'm glad this work eventually paid off as an investment - even if a different one than I imagined.\" Could work that seems like \"sunk costs\" on the short-term really be an investment for the long-term?  This example certainly proved it. This was the first time it dawned on me that there's more to work than getting immediate rewards - on top of being paid or rewarded on the spot, you can create longer term investments. Ever since this example, I've started to challenge my thinking of \"sunk costs\"  in cases where my \"sunk\" efforts can help in the long-term, even if it's a failure in the short-term. Software Engineering Interviews as Career Investments Software engineering interviews are a great example of the investment mindset where in the short term, you can see them as sunk costs, but in the long term, they are investments. I've heard countless people complain about how it's not worth putting time in preparing for  coding or systems design interviews  as it's a sunk cost.  How even if you spend weeks or months on this, you might still get rejected by the one company you applied to. But thinking of interview preparation as an investment: was it worth spending weeks or months to master a  specific  set of interviews? After all, engineering interviews at similar types of companies are similar enough. If you prepare for the Facebook software engineering interview -  similar to how I did in 2015  - , even if you fail at it, that same preparation is an investment in your interviewing skills for other companies. Treating interview preparation as an \"investment\" over a \"sunk cost\" greatly helped my career.  When I moved to the UK, I spent months preparing for Google-like interviews, in 2009, using the Stanford course  Solving for the CS interview  as preparation resources. Most of the companies did not ask me to solve algorthmic challenges - except for one company, where I ended up getting and accepting an offer. I only learned in hindsight that this was one of the most difficult companies to get into in Edinburgh. I only succeeded because I invested my time upfront. My story of getting into Uber is a similar one: I am convinced I able to pass the interviews as well as I did because I invested months a year earlier to prepare for the Facebook interview. I wrote about my Facebook preparation in detail  in this series of emails . Treating All \"Work\" as an Investment Opportunity I started to think about my activities as investments instead of a means to an end, and my approach changed. I started to ask myself, \"what can I learn from this activity, even if the outcome is not what I expect?\". Questions that helped me decide whether or not to pursue an activity included: What experience would I gain from this project , even if I get paid less than my normal rate - and thus, I'm investing some money to do the project? What skills would I build on this team , even if changing teams mean I definitely won't be promoted the next year? This means I'm investing my time in this team - and possibly some money (with a promotion I could have otherwise gotten). What other people would I connect with by helping organize this conference , even if the organizers are unpaid? I'm investing my time in this effort. What new ideas might I get from writing this article , even if no one reads it and I've invested my time? What learnings would I get from my mobile/web app , even if I had very few users and I've invested my time? How much more experience would I gain if I invested my money and made it free - trading money for more users? Using this \"investment mindset\", you can justify \"loss-making\" activities that many people would dismiss because they don't have obvious returns. Working on open-source projects. Writing your blog. Volunteering to help organize a conference. Releasing a quality app, service, or book for free - and many others. The Career Advice I've Been Subconsciously Following There is a lot of career advice that has not resonated with me, from discouraging people from doing free work to maximizing your income (salary, side projects). But there's a principle that I have been following, subconsciously, that has served me well. It's this: Don't be afraid to invest upfront. Invest in ways you cannot make a loss. Invest your time like you would your money. A software professional's career can easily  last forty years , and there are a wealth of small and large investment opportunities you can make. These are opportunities that most people associate with \"free work,\" \"not worth my time,\" or \"worthless distraction.\" However, for certain people, they are investments with little downside but major upsides. My \"investment evaluation criteria\"  is something along the lines of these questions: Have I done this before?  If not, can I learn something if I do it? Can I spend only a little time on it  before committing further? Can I meet interesting people  by doing this activity? Is this something most people like me would say no to?  If the answer is yes, I often push myself to consider it a bit more and come up with good reasons why not do it. There's a very real herd mentality among large groups of people, and going against the \"crowd wisdom\" is an underrated way to gain novel insights. Can I stop doing it  if I don't like it? I hate committing long-term to things that don't work out. Investments that Worked Out This \"investment mindset\" has kept paying dividends for me - sometimes years later. Here are some of my \"investments\" that were not successful - or profitable - in the short term, but they brought outsized value the long term. Investing time building a social app on a small Facebook competitor that everyone ignored . While everyone I knew was building Facebook apps during the \"apps gold rush\", in 2009, I decided to give a Hungarian social network  iWiW  a go that just launched its app platform. I was thinking: what do I have to lose? The time I spend on the project. What do I have to gain? Experience building an app and a fair chance to build an app that can become  really  popular. It turns out very few people took a risk on a new app network - by being early and investing a few weekends, I created  apps serving 1M users  while I was in college, including more than 200,000 users on New Years' day. This gave me incredibly valuable learnings on how to  build reliable distributed systems  - as my DIY database setup crumbled under the load. The New Year's load on one of my two social media apps I built in college. A got a crash course few have had in scaling up apps originally running on a single MySQL instance, on shared hosting.  Read the full story here . Building a Windows Phone app in the middle of the iPhone apps gold rush.  In 2010, iPhone apps were taking off. Microsoft announced joining the smartphone race with Windows Phone 7. I decided to target to have an app ready for day one: a cocktail app. I had the database already with my website, and the concept worked. What would I lose? Time spending on this. What would I gain? Experience building native mobile apps and being on a new App Store early on. Teaming up with friends, we  launched Cocktail Flow  - which became one of the only apps that were better on Windows Phone than any other app on iPhone or Android. I met many fellow Windows Phone developers, was invited to speak at meetups and conferences, and had a lot of doors open. All because we built a high-quality app early and on a platform that most other developers ignored at the time. This app led to Skyscanner first becoming a client of Team Distinction - a company formed by the other three friends helping build the app - then  acquiring their company  later on. It also led to Whatsapp co-founder  Jan Koum reaching out to collaborate  later on - an opportunity that - in hindsight - I should have said yes to but passed on. Saying \"yes\" to starting from scratch on a new technology.  When I applied at Uber, the recruiter messed up my interviews. Instead of interviewing for a mobile role - I was doing iOS development - I was put on a backend loop. I went along and cleared these interviews, to the amazement to everyone - including myself. The reason I was able to do well was that in the past I said \"yes\" to learning new technologies. When I was working at Skype, I volunteered to help work on the backend of Skype on Outlook.com, even though I was a frontend engineer by title. I needed to learn a lot, and my performance review and promotion prospects probably suffered due to me getting up to speed. But it helped me gain hands-on experience building a backend that served in the range of 10,000 QPS and 400 million monthly users. Writing a book.  Everyone who has written a book - including me - will tell you that it's just not worth it financially to do it. If you do the math: the hours you spent on a book come to below minimum wage for 99% of the books written. However, writing a book also  forces  you to research a topic really well. By doing months of research while writing  The Tech Resume Inside Out , I probably know more about what makes a good software engineering resume than 99.9% of other people. At the very least, I've spent more time on this niche topic - CVs for developers - than almost anyone else in the world. As I was writing  Building Mobile Apps at Scale , I learned about things I wish I knew earlier, like  pseudolocalization . I also connected with people heading up large mobile teams at well-known tech companies and got far more involved in the \"large scale\" mobile apps community than I ever thought I would. Cutting Poor Investments Short With any investment, you put in resources: time and money. It's not wise to keep doing this indefinitely, especially when the results are not clear. Many of my \"investments\" were not worth it: either they were too painful in the short-term, or I just realized the long-term benefits are not relevant for me. Maintaining an open-source project  turned out to be far bigger of a burden than I expected and with no real upside that was relevant for me. In 2012, I open-sourced  an ad-rotating component for Windows Phone  that helped maximize my ad revenue. I figured this might help others make more money in their apps as well, and intended to offer it as a \"works for me\" approach. Soon, I was overwhelmed by support requests to make the component work for use cases I didn't have and did not want to support. These were fellow developers who opened issues and expected me to fix them, all while the fixes would have helped them make more money. I didn't like this setup. Luckily software engineer Simon Jackson,  stepped up to maintain the project  and did a fantastic job throughout the next years. I learned that open-source maintenance is not my type of investment. Organizing a conference  was an activity that I'm happy I did once: only to learn it is not something I personally want to do. While I did meet speakers, I didn't feel positive about the experience due to too many moving parts. For every other \"investment\" I did, I  liked  doing it. Perhaps the long-term efforts would be worth it, but I decided this type of activity is not for me, at least for now. My \"investment mindset\" and enjoying what I do go hand-in-hand  and saying no to things that bring stress, anxiety, or negativity are important in keeping up with this approach.  Daniel Vasallo has a \"small bets\" mindset  where cutting these \"bets\" short is trivial, as the effort you put in them is small enough. My Next Investment I find the investment mindset and the entrepreneurial mindset to be connected.  Making an investment involves a limited risk: you might lose all your invested time or money. It also involves a much less limited upside: your investment might repay itself multiple times. This mindset is very similar to starting a company - except the stakes are higher. When starting a company, you're investing a lot more time, and a lot more money than with some of the \"smaller\" investments. It is no surprise that my next investment will be  starting a startup . But first, I'm going through some of my other investments: finishing  writing my remaining books  on software engineering. What is the activity you're investing in that makes no real profit in the short-term but can have good upside in the long term? \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/advice-for-tech-workers-to-navigate-a-heated-job-market/", "title": "The Most Heated Tech Job Market in History: Advice for Software Engineers", "content": "\n             The tech job market is on fire, across the globe, for people with a few years of industry experience under their belt. This is especially true for software engineers, but other tech functions are also following. I talked with dozens of hiring managers - from engineering managers to CTOs and CEOs - and they all shared the same perspective. Here is a typical quote from an executive at a global tech company: Never before has it been this challenging, and in all regions . I remember seeing a heated market before in India a few years back. However, the current environment is many times magnified. We are seeing the same type of intensified competition in the US, UK, EU, NL, Eastern Europe, South America... Heck, just about everywhere. We are predicting this to last into late in the year. This piece covers advice for tech workers  to make the most out of this heated market: whether you want to make a job change or not. A market where demand for employees outstrips supply is one where employees can do well for themselves with less-than-usual effort. This post a supplement to this week‚Äôs üîí subscriber-only-newsletter issue üîí  The Perfect Storm Causing an Insane Tech Hiring Market: Advice for Hiring Managers  with more in-depth analysis and advice on how to retain engineers and keep hiring in insanely hot market. Advice for Tech Workers with Experience Welcome to the best tech job market of probably all-time - assuming you have a few years of industry experience under your belt. Now is a perfect time to turn this employee‚Äôs market to your advantage. Optimize for your happiness . Write down what are ‚Äúmust-haves‚Äù in your next position. In the current market, there is a good chance you won‚Äôt need to compromise. Be clear on tradeoffs you are comfortable with. Whether it‚Äôs the mission, the compensation, the industry or career growth that is more important for you: you‚Äôll find more options that can match this, and are hiring, than before. Clarify things like working hours, availability expectations, holidays, meeting culture and things that can mean different things across companies. For some people, it may not be a good tradeoff to sacrifice personal life boundaries for higher compensation. You can still earn a lot without those compromises. If you‚Äôre unhappy with your current situation , now is a good time to do something about it. If the source of your unhappiness is non-financial: time to ask for changes. If things don‚Äôt change, you can always look around. If your source of unhappiness is financial: now is a good time to inquire if the company plans to make compensation adjustments - perhaps by showing them this report. If it‚Äôs not planned: it‚Äôs never been a better time to get a higher offer. If you‚Äôre unhappy with your compensation: raise this, but also look around on the market. If you‚Äôre happy with your current situation , keep in mind that there might be people around you who are not happy: and if they leave, this can impact you. Examples that can hit you could be a key member on the team leaving, or your manager quitting. I would suggest talking with your manager chain and confirm their plans on retaining people, and keep up with the market. People leaving around you can also open up more opportunities. However, do make sure that you get recognized for stepping up, and clarify what changes you should expect if successfully stepping up: from compensation increases to promotions. Negotiate hard  if you have an offer: this is the best advice in this market. Depending on the type of offer you get, there are multiple things you can negotiate on: Equity . If a company issues equity as part of an offer: this is the easiest part to negotiate. Not all equity is equal: see my article on  types of equity and what‚Äôs worth knowing about them . If you join a startup as a software engineer,  you should get equity  (and consider passing if they offer none). For Big Tech offers, you will get a  sizeable amount of equity  on top of a salary. Sign-on bonus . Large companies have always offered a one-off bonus on joining. More of the market is following. This is typically in the range of the annual bonus target. Salary . A higher salary used to be out of the question at Big Tech with strict salary bands. Even here, this is less true in this market. For smaller companies, salary is very much negotiable. Leverage is something that you‚Äôll want to have to negotiate. In the past, this could have been another offer or your current compensation. In this heated market, it‚Äôs enough leverage to tell the company that you‚Äôre considering interviewing with other ones: but you‚Äôre ready to sign for an increase in the package. For more advice,  see this video on negotiation advice for software engineers  I recorded. The more senior you are  - the more demand there is in the tech market for your skills as every company - from seed-stage startups through enterprises to Big Tech - is building out new teams, and scaling up their operations. The most difficult people to hire are always the senior engineering leaders. With more seniority, the risk of moving jobs also goes up. However, in the current - insanely hot - market, the upside can be higher than most people expect. It can be a good time to either take a risk, or to secure more of the upside at your current company. Advice for Less Experienced Tech Workers Unfortunately, it is not a hot market for everyone in tech. People with little to no professional experience - also referred to as entry-level engineers or juniors - are struggling to find positions. The compensation for less experienced people has not increased during this tech hiring frenzy across most of tech. This is confirmed through both anecdotal sources, and the compensation data from  Djinni  - the largest tech marketplace in Ukraine - shows the same: Compensation changes in the past 30 months from frontend engineers in Ukraine. Those with less than two years‚Äô experience have seen their compensation stay flat, while all other groups increased.  Source: Djinni Remote work is the main root cause  for entry-level folks not experiencing a heated market. Companies want to hire seniors, because they don‚Äôt know how to onboard and train juniors in a fully remote setting. Working in the office this was less of a problem, as juniors had access to the team the whole day. They got mentorship and guidance most of the day, and picked up speed much quicker. Teams and companies will have to find ways to hire and onboard more entry-level engineers. If you‚Äôre a hiring manager, I suggest biting the bullet and starting to hire and onboard people with little experience. An engineering director at a full-remote startup shared: We hire less experienced engineers with high potential. We onboard with lots of pair programming sessions, and ensure communication is seamless. Remote onboarding and supporting those people is something we‚Äôve been learning to do well for years, as we‚Äôve been full-remote before COVID. More entry-level engineers on to the market  is a secondary cause. More and more people are realizing how tech offers an attractive, and high-paying career. Bootcamps are signing up students, promising that with little time and money investment, anyone can become a highly paid engineer. At the same time, a large portion of new grads - both from universities and bootcamps - are struggling to get their first job. My advice for engineers with less experience on the market  - those with less than a few years of industry behind their back - is this: Know that it will be hard.  Bootcamps oversell how easy it is to get job in tech: because they need applicants to come, so they make money. Success stories from people getting jobs without experience both have  survivor bias , and those are usually stories from years ago, when the job market was not so hostile to entry-level engineers. Join a support group  if you don't have one in your network already. Look for new grad Discord channels or communities with low fees like  Scrimba  and other, similar ones. It's easier to figure out what works, and what doesn't, and get motivation as part of a group. Aim wide when applying.  Don't only apply to the best-known companies, or ones offering full-remote. Find smaller, lesser-known companies. These can be startups who are struggling to find any applicants, and businesses who will not spend the budget to advertise on job boards like LinkedIn, but you can find job adverts on job aggregators like  Indeed . Apply to less competitive places.  Look for local, non-tech companies, and ones who are not offering full-remote positions. Not only do these positions get fewer applicants: if they are onsite or hybrid, they'll also hire more juniors. This is because they can onboard junior people better. Apply to consultancies/developer agencies  - especially ones that are more quality ones. The software consultancy business model requires hiring and training junior developers. They also give exposure with different environments and technologies. Agencies are a great stepping stone into the industry, and one many people move onto higher paying opportunities a few years later. Be aware that some agencies have poor working practices: if you land in one of these, try to move on, instead of being stuck for too long. Tailor your resume to each position  you apply to. If you don't have a job, you request a copy of my book,  The Tech Resume Inside Out  for free. More than 1,000 people have done so: I approve all non-spam requests. Build your experience while you are job hunting.  Which person is more likely to be hired the next 12 months: one who spends 12 months applying nonstop, or the one who spends time applying, but also built a side project that anyone can try out, contributed to an open-source project, and did a contract gig on one of the popular freelancer marketplaces? It will be the latter. Balance time between applying, and between making your profile stand out more. Open source contribution.  Most people you compete with will have similar, non-production-grade projects on their resume. Those who contribute to popular open source libraries used by thousands of people and companies in production really stand out. Look for projects like  Awesome First PR opportunities  and explore open-source projects you use. This route  will  be hard: much harder than just applying to jobs all day. This is why you stand out from other applicants if you persevere, and start contributing. If you only have one offer: take it . You'll read advice about how to negotiate compensation between different offers, and how hot the market is in tech. Ignore this: as most of this applies to people with much experience behind their back. I've personally had  a pretty good career , eventually making it to places like Skype and Uber: but, when starting out, I just took the first job that I was able to get. It's more important that you get started over getting a perfect start. You can course adjust as you go. Read and apply   How to Be a Kickass New Software Engineer  from bootcamp grad turned senior engineer  Raymond Gan . If you're a bootcamp grad : know that some of the \"learn to code in X months\" bootcamps don't do a good enough job in giving you the skills needed to get a software engineering job. Consider programs like  Launch School  that take much longer than a bootcamp, is  not a bootcamp-like approach , but their graduates  get offers even in this heated market .  How Long Will This Employee's Market Last? The market is hot for tech workers with experience. But how long will it last? Most of the  root causes for the heated hiring market  are longer-term forces. However, with lockdowns easing and hybrid work becoming more of a norm, more companies are expected to hire entry-level engineers, removing the drive to overpay for senior talent. Also, the pent-up demand from 2020 is unlikely to repeat for 2022. I expect this heated market to last until early 2022,  and the unmet demand for senior software engineers to slowly revert back to the pre-Covid-19 times over 2022. There will still be great career opportunities for senior engineers, but fewer overall positions, not as intense competition. More engineers with little experience will be hired overall, though it will remain competitive to get a job with no experience. I do expect the market to permanently move up with senior compensation ranges  by 2022 . I don't expect salaries or compensation packages to go down as long as the demand for tech keeps growing, as software eats all industries and the demand to build complex and scaleable solutions keeps growing. Differences to the Dotcom Boom The most common comparison of today‚Äôs insane tech market is to that of the Dotcom Boom. This was a time when demand for software developers spiked, as a large amount of capital entered the market. However, I would argue that the Dotcom Boom was different in several ways. 1. Root cause.  The Dotcom Boom was caused by excessive speculation from  some  groups on the growth and impact on the internet - and the bubble burst when it became clear that this growth was not there. In contrast, the demand curve is caused by  all parts  of the industry, because companies know they need to invest more in tech for the coming decade. Read more about the  six different underlying causes hitting at once, the current perfect storm . The root cause of the Dotcom Boom was hype: the current demand curve is caused by global demand. This also means it‚Äôs unlikely we‚Äôll see a bubble burst, similar to the Dotcom Boom. 2. Impact.  The Dotcom Boom impacted the US much more heavily than most other countries. It also impacted a lot fewer people: simply because the tech industry was smaller. In comparison, today‚Äôs hiring situation impacts all regions across the globe - and will do so for the foreseeable future. 3. Hiring without experience.  Another important distinction was how people with no experience were hired in droves during the Dotcom Boom. People with no experience were snatched up on the market, thrown into teams where they learned on the job. This aspect is completely missing from today. People with no experience are struggling to find positions and remote is a root cause. Breaking into the industry with a non-traditional background is becoming increasingly more challenging. 4. Remote.  The hiring frenzy of 2021 also goes beyond the demand for software engineers skyrocketing. It goes hand-in-hand with the rapid rise of remote work, which brings global competition to every company‚Äôs footsteps as many employees are a Zoom interview away from switching jobs. 5. Proven business models  and sizeable revenue   for most companies. Tech is no longer a vision hype phase with the exception of a few markets such as crypto. The majority of companies are scaling up rapidly, expecting their investment in tech to pay off with high certainty. During the Dotcom Boom, there was no such certainty. 6. More emphasis on cash compensation and total compensation packages  over stock upsides. The market is flush with cash, and  startups are competing with big tech in compensation packages  - something that has been unheard of before.   Candidates are evaluating compensation packages at current valuations for the first year. For example, Stripe, Lyft and Instacart have  moved  to one-year stock grants with a fixed value, over multi-year grants with potential upside. During the Dotcom Boom, most of the emphasis was on stock upsides after a rapid public market offering. This post a supplement to this week‚Äôs üîí subscriber-only-newsletter issue üîí  The Perfect Storm Causing an Insane Tech Hiring Market: Advice for Hiring Managers , which post covers: Observations  on what is happening in the tech hiring market, with quotes from hiring managers and job seekers. Root causes  as I see them on why the tech market is hotter than ever before, even more so than during the Dotcom Boom. Numbers  on what this all means for compensation and demand for senior tech talent pay increases. Many of these numbers are approximations, but they give an idea of where we are. Advice for hiring managers  on how to stay afloat. How to retain your staff, and what to do if you want to hire, and also the sensible approaches of companies which keep growing in this environment. Subscribe here  to read the full article. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/ask-the-em-debrief-panel-rejected/", "title": "I Want to Hire Someone, But My Team Said No to on the Debrief: Ask the EM", "content": "\n             An engineering manager shares how hiring can be complicated behind the scenes. He says: \"I'm leading a team that was on auto-pilot mode for some time. I recently made a decision to hire a great candidate that the team was not sure about. I found that the team's objections were not on solid grounds, and we could've lost the candidate to another company (he had other offers).  The CTO and HR backed me, saying that we can take into account the team feedback, but they don't get a deciding vote. This led to some team members feel hurt, and we ended in a heated discussion.  I'm 100% sure that the new candidate will be an asset to the team.  I'm planning to have a chat with the team and explain my rationale and try to have an amicable discussion. How could have I handled the decision better?\" - an engineering manager trying to do the right thing\" The Challenges of Hiring and Hiring Panels Hiring is challenging to do: after talking with someone for a few  hours , you need to get enough signals to decide if they could be a good fit for the team/company for  years  to come. It's a big decision for everyone involved: not just for the company, team, and manager, but even more so for the potential new hire. The cost of a poor hire is high , especially at places where it takes a long time of months to onboard. This is a reason  Big Tech is notoriously conservative in hiring people : a bad hire takes a long time to notice, can cause morale issues, plus Big Tech tends to get enough candidates to not worry about  not  hiring people who might have worked out otherwise. Committee-driven decisions are also almost always conservative.  In a group setting, all it takes is someone to voice a concern, and the group can quickly change its position to be skeptical. Especially for decisions that could carry lots of downsides - like hiring the wrong person - group decision making can result in most of the \"maybe\" cases turning into a \"no\". Debrief panels - the discussion where all interviewers share their thoughts on hiring and come to an agreement - mirror this behavior, in my experience. Debrief panels are common across Big Tech, and it's yet another reason for conservative hiring outcomes. Make it Clear Who Decides and Who Can Veto I personally believe in accountability for good decision-making. If someone makes a decision: they need to own the consequences of this decision. Hiring is no different. Who will own the final hiring decision?  It should be the person who will live with the consequence of a good or a bad hire. It should be the person directly responsible for the person: their manager. Will the hiring panel do regular check-ins with the new hire? Will they do their performance reviews? Will they put together promotion cases? Will they get a poor performance review for mismanaging the employee in question? No. This will all fall on the manager for the new person. Leaving the hiring decision just to the hiring manager can be risky, though.  Many hiring managers are inexperienced: I was one of these managers after I  became an engineering manager . I didn't have much to fall back on, beyond gut feelings, to decide if someone would be a good hire or not. Some companies compensate for this by adding a second, experienced person to the hiring loop who has the ability to veto a hire. At Uber, this person was what we called the Bar Raiser: a long-tenured manager or engineer who had extensive hiring experience behind their back. Amazon uses a similar role. Once it's clear who can have the final say - or veto - on hiring, things become more simple.  Everyone can share their observations and suggestions, but the decision - or veto - comes down to the people who need to make this call. In this case, there was no \"person with veto\", though this manager was smart to get a second opinion from the CTO and HR. If there had been a veto, that would have come from there. Use Disagreement to Educate People on the \"Why\" Ignoring a group decision on hiring is not the way to build trust.  People put in a lot of time and effort for hiring because they want to make sure the right people join the team. You need to respect this effort and make sure their voices are heard. Why is there such a big difference in viewpoint between team members and you? What is the root cause of objections not being on solid ground? Is the team over-indexing on areas that don't really matter to get the job done, like how fast this person coded? Or are these team dynamics that  will  matter, like poor communication? Do take your team seriously and come to a conclusion they can  understand . And be flexible in changing your mind if their reasoning is correct and has information you were missing. You might want to take this disagreement to clarify what the expectations for a hire are, to invest in training interview panel members, and to coach people on how to gather signals during an interview. You Cannot A/B Test Hiring, So Take Some Risks For most engineering disagreements, you can fall back to trialing decisions by prototyping, A/B testing, or timeboxing working on something. Not with hiring. You'll never know if a person works out on the team unless you hire them. Similarly, you'll  only  know if you hire them. I am a big fan of betting on people while giving them the support they need in their growth areas.  So I encourage people to take bets on hires - but also work with both the new hire and the team on addressing the concerns. Was the concern about coding? Have a plan on how they'll brush up on the language you use with the team, and ask someone on the team to mentor or pair with the new joiner. Was it about communication or some other soft skills? Take the lead, as the manager, to give feedback and have them act on it. Spend more time preparing for their onboarding and tracking their progress after they start.  While many organizations spend a lot of time on hiring, onboarding is often an afterthought. This is a mistake, as a great onboarding tends to make a huge amount of difference for a hire to succeed. Listen to your team, but know when you take risks, and bring the team with you when you do. Good luck! \n\n               \n                 \n                  This post is part of the  Ask the Engineering Manager series . Have a question on career growth, as a software engineer or engineering manager?  Ask it here . Read other parts of the series  here .\n                 \n               \n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-seniority-roller-coaster/", "title": "The Seniority Roller Coaster and Down-Leveling in Tech", "content": "\n             In tech, switching jobs almost always comes with either a financial or a title upside. However, it doesn‚Äôt always come with both. Switching for higher compensation can result in a ‚Äúlower‚Äù title, like going from Senior Software Engineer to SWE 2 or VP Engineering to Senior Engineering Manager. This is what I call the seniority roller coaster. The seniority roller coaster This article was originally published in  The Pragmatic Engineer Newsletter . This newsletter is especially relevant for engineering managers and senior and above engineers at high-growth startups and big tech.  Subscribe  to get weekly articles in your inbox - including subscriber-only ones. Reasons for Down-Leveling There can be several reasons for receiving a down-level in title while getting an increase in compensation. The most common are these: 1. Titles across companies can have different expectations ‚Äì and compensation.  For example, a senior title at Big Tech typically expects more from an engineer than a small developer agency, a non-tech-first company, or a recently founded startup does. Senior positions at Big Tech will also pay more in liquid compensation than many other companies. Also, some people with a senior title at a smaller company might not  ‚Äì  yet  ‚Äì  have the hands-on experience of working at the scale and complexity of these bigger places. 2. Tiers of companies pay differently.  The tech compensation landscape is becoming  increasingly trimodal,  where compensation for the same job title can differ by up to 3 to 5 times across different \"tiers\" of companies. However, a title cut can still mean a significant compensation raise and a new challenge, when going from a lower to a higher-tier company. 3. Compensation across tech is rising rapidly.  People who stay at the same company for a long time can get left behind compared to their peers, especially if the company does not move internal compensation bands to keep up with new offers. People who worked at the same company might have lower compensation expectations as a result. Given the choice of a significant raise and a \"title\" cut, most people will take the title cut when switching jobs. 4. Changing both companies and technology stacks  might result in a lower-level offer from companies which focus more on expertise with the  specific  technology. This is especially true for agencies, and non \"tech-first\" companies which judge candidates by years of experience in a given technology, over evaluating more holistically. My two cents is that this type of leveling makes little sense because an experienced engineer can quickly pick up a new technology, building on their experience. Still, down-leveling, for this reason, is common with roles where interviews are focused on depth in a specific technology. 5. Interview performance  as perceived by the people doing the hiring. How a candidate does on the interview almost always feeds into leveling decisions and is the most common reason for down leveling. Candidates whom interviewers are unsure about, would often get offered a level below the position they interviewed for. Down-leveling is especially common in big tech because expectations are typically high, onboarding takes longer than at smaller places, and companies often aim to hire people who \"raise the bar\" at a given level. I've  talked in detail  about the conservative nature of big tech hiring. As a caveat, there are many cases where leveling decisions have already been made even before the interviews. Based on the candidate's resume and their perceived experience, they typically interview for a specific position. 6. Having competing offers  or being willing to walk away from a down-level might help avoid down-leveling when your interview performance happens to be perceived right between two levels. A few people shared how when they showed competing offers from similar \"tier\" companies at a higher level or rejected an offer, they received an offer at the next level. As a hiring manager, I can understand why: this signal makes hiring managers re-examine interview feedback and could - in some cases - tilt a \"maybe\" feedback towards a \"yes\". Having a signal that another, similar, company levels the person higher also carries an additional signal: the threat of the candidate choosing that other company. Leveling decisions are often down to nuances: and information like this can push those nuances upwards. Handling Down-Leveling when Switching Jobs You got an offer at a level that is ‚Äúbelow‚Äù your current title but the compensation is more than you currently make. How do you proceed? Know that down-levels are common when moving to ‚Äúup a tier.‚Äù  There‚Äôs an invisible tiering of companies based on what they expect from engineers at each level. At the top would be the likes of Google, Facebook, and similar Big Tech companies, where engineers impacting millions or more of customers with each change can be common. Engineers are expected to know about ‚Äì and follow ‚Äì more processes and best practices, compared to companies where leadership is not as technical, or the impact of an engineer is magnitudes lower. It should be no surprise that a senior engineer at an agency building niche apps with thousands of users has different ‚Äì and easier to meet ‚Äì expectations than the senior engineer building an app with hundreds of millions of users. Rina Artstain , Tech Lead at Dropbox  notes  how once you move from a ‚Äúlow-tier‚Äù company to a ‚Äúhigh-tier‚Äù one, down-levels should not be common, going forward: \"This is exactly my experience moving from a low-tier company to a high-tier company, but moving within high-tier companies will usually not have the rollercoaster effect. And when it comes to a specific tech stack - what's expected from you as a senior SWE is to have a wide view of the org, know how to make things happen by getting support from stakeholders, mentoring others etc. They expect you'll catch up on the stack pretty quickly.\" Do your research on what this ‚Äúlower‚Äù title means at the new company.  Ask for the definition of the level and about the next one as well, so you can evaluate whether you are missing skills or experience needed for that level. If so, it might be your opportunity to gain these. All companies with a strong engineering culture will have well-defined competencies and clear expectations at different levels. For example, at Skyscanner, the principal level is one level above senior, and Skyscanner has roughly one principal engineer for every 15 - 30 engineers. Principal responsibilities range from squad-level, impacting 10-15 engineers, to org-level impacting closer to 100 engineers, depending on the person and the specific principal position and  senior+ archetype . Compare this with Uber, where the principal level is four levels above senior and two above staff. Uber has 1 - 2 principal engineers for their 4,000 software engineers. Principal responsibilities are company-wide. To attempt to compare the two; a principal engineer at Uber  could  have an ‚Äúimpact radius‚Äù which is between 20 - 100 times bigger than that of some principals at Skyscanner, in terms of engineers whom they influence. Of course, the two companies are different so any comparison is, at best, an apples-to-pears comparison. Talk with the hiring manager if you disagree with the leveling.  Voice your disagreement, show examples of your past experience, and ask if the hiring committee can consider you for the next level. You have nothing to lose and everything to gain, as long as you do this in a respectful way. When I was a hiring manager, several candidates have challenged leveling decisions. In every case, this made me take a closer look at interview signals and expectations for the level. In some cases, after gathering more information, we offered the next level, as we'll discuss in the \"Handling down-leveling as a manager\" section. Consider rejecting the offer if you still disagree with leveling.  Titles do carry significance both for your career and to signal your status within the organization. If, after getting more information, you disagree with the assessment, consider rejecting the offer. Interviews will always have a subjective component and this will always result in false negatives. These false negatives will result in either not extending offers to candidates who would excel at the job, or extending an offer a level lower than they merit. As a hiring manager, I have been on the receiving end of candidates rejecting offers because they disagreed with the leveling. I respected their decisions, and these rejections usually prompted us to double-check if we did leveling fairly and communicated expectations correctly. In some cases, candidates who respectfully rejected a position at Level X, we later contacted, re-assessed, and hired at Level X+1. They were right not to accept a level they deemed incorrect. What happens when people knowingly accept down-level offers? I experienced this first-hand as a manager, and it was not pleasant. Down-levels impact managers and if left unchecked, can also impact teams. Getting Ahead of Down-Leveling as a Manager I was starting my first 1:1 with a recent hire on my team. He jumped right in: \"My first question is: how do I get to the next level? It's clear that I've been down-leveled during interviews and that I should be at the next level. My goal is to get there in six months. What do I need to do?\" I was taken aback. How do I respond? I was used to having first meetings with people who were excited to get to work. Yet here I was with someone clearly frustrated on their first day of work, all thanks to a leveling decision. If you thought down leveling is only a problem for those who got down-leveled: it is not. It's just as much of a problem for their manager, and if handled poorly, it can spread and become a morale problem impacting the whole team. Here are things you should do to stop this from happening. 1. Be on the hiring loop for future team members . Down-leveling often goes unnoticed in larger organizations where hiring is done by rotating hiring managers and interviewers on loops. The team for a future new joiner is often only confirmed well after an offer is made, and is based on org priorities. My organization at Uber hired like this at times. I made hiring decisions for people who joined another manager's team, and other Engineering Managers (EMs) extended offers for people who would later join my team. While this setup was easier to manage in terms of time commitment, it came with downsides. One of these was down-leveling decisions I was not aware of, until the person joined. 2. Be the one extending the offer and do a \"temperature check\" .   At larger companies, recruiters can be the ones extending offers without the hiring manager being present. While this saves time for the future manager, it also means they miss signs of the candidate being unhappy with the level. At Uber, I always tried to be present when we presented the offer. I asked them how they feel, not just about the numbers, but the position itself. I often picked up the candidate was unhappy about the title at this point and made sure to follow-up about it. 3. Dig deeper if you suspect a down-level at play with leveling.  If when reviewing the interview feedback, you get suspicious that the level being offered is too low, take action. Confirm if the signals collected in the interview point to the candidate possibly being down-leveled. Signals that can indicate the wrong level being offered include the majority of interviewers being very strong supporters of hiring. A strong hire decision on a loop that was set up for a level below what the past experience for the candidate might point to, can also be a flag. 4. When in doubt, get more signals to correctly level.  The best way is to hold a follow-up interview to fill the gaps on signals that might have been missed. It's a good idea to bring in people calibrated to interview at the next level, share context with them, and ask them to focus on the gaps. After gathering this additional signal, you should be clear on what the right level is. 5. Explain the rationale and what's in it for them if they join.  Assuming you've confirmed the level is the correct one, take the time to explain to the candidate why. I prefer to share what the expectations are at their current level and the next one. I also aim to be clear about the areas that they need to grow in, to eventually get that promotion. This conversation is a great opportunity to commit to helping this person grow professionally, should they join. Explain what support you and others on the team can lend, the types of projects they'd work on which expand their expertise, and the challenges they'd face in this environment. 6. Set realistic expectations on promotion timelines.  Aim not to have people accept an offer with the false hope of being promoted on an unrealistic timeline. At most larger tech companies, promotion within a year seldom happens. Even at smaller companies, promotion within this timeframe is more of an exception.It almost always points to mis-leveling at hire. Avoid promising promotion timelines when you are not the final decision maker on promotions. Such promises only result in frustration when the time you‚Äôve mentioned comes around, and your direct report has not yet been promoted. It won‚Äôt matter that the promotion is outside of your control; they‚Äôll remember you promising a timeline that did not happen. 7. If your hands are tied in changing levels, be as up-front as you can be.  There will be cases when you determine the candidate should be offered a level above, but you cannot do so. This might be due to budgeting, or it could be because of someone up the chain blocking this decision. I like to be honest with people when we cannot offer a higher position because of {insert publicly shareable details}. I then encourage them to consider if they would be happy working at this level, in this environment, in this team, on these challenges, and with me, for at least a year with no title or compensation change. If this does not match what they are looking for, I'd suggest they pass on our offer and keep in touch in case new opportunities open up. Titles Don‚Äôt Matter. Titles Do Matter. ‚ÄúOf course it doesn‚Äôt matter to them.‚Äù Do titles in tech matter more than the impact and context of your work? There are two schools of thought; those who think they do not and those who have experienced first-hand just how much they do. Anyone thinking titles don't matter, know you are in a privileged position.  I was in this camp for a long time and when I talked about titles, most people around me nodded in agreement on how little titles matter. The people nodding shared how they were also not underrepresented in tech and were similarly established as me. Titles simply didn't matter for us, anymore. If you're established in tech, or you're in a position where your competence is never questioned, titles indeed do not matter nearly as much. Assuming that everyone else is in this group is ignorant thinking, though. For those in an underrepresented group, titles make a world of difference in establishing credibility.  I've talked to many women and other minorities in tech, who all told the same story. They are continuously challenged on whether they are technical. They have to prove themselves again and again, to people they have not worked extensively with. Many shared how they spend a staggering amount of energy to be taken as seriously as counterparts who have the privilege to regard titles as unimportant because their own competence has always been taken as a given. A principal engineer from an underrepresented group working at a medium-sized tech company said: \"Once I got promoted to senior, then to principal, things got better each time. Still, even with a principal engineer title I regularly get challenged on whether I am technical. Imagine what would happen if I did not have the title, and the signal it carries.\" If you're still in the camp of \"titles don't matter\", I suggest you read the dozens of responses to my  tweet on this topic  and the viewpoints of people from underrepresented groups. \"Titles don't matter in tech\". I used to think the same. Those around me agreeing were similar to me: guys who were established. Yeah: it didn't matter to us any more. Then I talked with others.  Turns out titles *do* matter a lot.  Especially when you're not in this group.  pic.twitter.com/2b5nk931ji ‚Äî Gergely Orosz (@GergelyOrosz)  August 27, 2021   Clarify what the title means in the career ladder of the company you‚Äôd move to.  Across tech, titles are not standardized, from what \"entry-level\" means at companies to what \" senior \" refers to. It is especially true above the senior levels. Lead, staff, and principal can all have vastly different responsibilities; just take the disconnect in the meaning of principal engineer at Skyscanner and Uber. Ask to see the career ladder at the company. Clarify expectations and confirm that the level would reflect the skills and experience you bring to the table. What would progression look like? How does it compare to where you are right now? For example, a principal engineer having an impact radius of 100 engineers at Skyscanner might map to a staff-level at Uber, but very likely not to Uber‚Äôs principal level, which can be expected to have an impact radius in the numbers of thousands of engineers across the company. Takeaways To avoid down-leveling  when changing domains, try to switch tracks within your existing company when you have the opportunity to do so. Lateral moves ‚Äì ones with no title change ‚Äì can end up helping your career in the long run. Many times, these can feel like a down-level ‚Äì especially if you are on track to get promoted to the next level ‚Äì and a lateral move does extend this timeline. However, the additional experience is something that might help you significantly in the long run. On top of titles, understand responsibilities and expectations  attached to the title at the new place. If you maintain your responsibilities, you‚Äôre likely setting yourself up for success. Taking on too much additional responsibility, coupled with a new environment, might set you up for less success, while a decrease in responsibilities might result in frustration or boredom. Senior engineering manager Luciano Holanda  shares similar advice . Down-leveling can be a natural consequence   of moving ‚Äúup the food chain‚Äù from a company with a not-so-great tech culture to one that is closer to, or at the industry-leading level. With these moves, a title cut is common and can feel like a fair trade-off. This is especially true if your learning has plateaued at your current company and moving to a new place opens up more career progression, more learning, and better financial outcomes. As a manager , the more involved you are in the hiring process, the more down-leveling situations you can notice ‚Äì and act on. For down-leveling that is no mistake, this is an opportunity to share career levels, expectations, and growth opportunities for your future team member. And in cases when the decision is incorrect, it‚Äôs an opportunity to fix it at the right time, before a new joiner accepts a level too low for their expertise. Up next:  In next week‚Äôs issue of  The Pragmatic Engineer Newsletter , we‚Äôll dive into product and platform engineering team splits, and take a deeper look at how Uber made this change.  Subscribe  to get this issue here. Thanks to  Luciano ,  Nicky  and  Yahya  for their input and help with this article. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/pragmatic-engineer-test/", "title": "The Pragmatic Engineer Test: 12 Questions on Engineering Culture", "content": "\n             12 questions to get a sense of what a tech company is like to work at, based on things most job postings do  not  mention.  I created this test to reflect healthy software engineering cultures in 2021 better. I've found the now 20-year-old  the Joel test  to be a baseline expectation at almost all companies by now, and missing many things you expect from great engineering organizations. Equity or profit sharing.  If you're a venture-funded startup or a publicly traded company, do all engineers get equity allocation? If you're a private, non-venture-funded company, do engineers get  generous  profit sharing? Caveats: publicly traded companies offering discounted equity purchases - also known as  ESOP  - does not count. Generous profit sharing means at least 15-20% of annual salary in good years. Roadmap/backlog that engineers contribute to.  Do you have one for most teams, and do engineers regularly contribute to the one for their team? Engineers directly working with other ICs.  Do engineers work directly with other individual contributors (ICs) like other engineers, designers, PMs, data scientists etc? Answer \"no\" if they are expected to go through e.g. (project) managers instead of direct communication. Code reviews and testing.  Are they both part of the everyday development process? CI and engineers pushing to prod.  Do you have CI in place? When engineers finish coding, does the code either automatically get pushed to prod (through CD), or can engineers manually trigger this step? Internal open source . Do you follow an internal open-source model, where any engineer can access and contribute to most other codebases - with appropriate code ownership in place? Healthy oncall as a priority.  For teams where developers are oncall, do you measure oncall health and the impact on developers? Does fixing an unhealthy oncall have priority over any product work? Technical managers.  Are managers software engineers report to technical - meaning they have also been software engineers earlier in their career? Career ladder  (when above 10 engineers) .  Do you have a career ladder, with levels, and expectations at each of the level defined? Parallel IC & manager tracks  (when above 30 engineers) . Do you have parallel IC & management career paths that run up to a level or two above the entry-level engineering manager role? Feedback culture .  When above 30 engineers: do you have at least two of the following three: ¬†a) 360 performance reviews (where directs also give feedback to managers) b) Peers giving feedback to each other c) Company-wide surveys collecting workplace feedback, and acting on this. When smaller than 30 engineers: do you encourage a culture where you give constructive and direct feedback to each other to improve? Investing in professional growth.  Do you have at least two of the following three: a) Professional development stipend for books/training b) Recognizing time taken to do learning as a good use of work time, and encouraging this. c) A mentorship program within the company. Take the test for your company here  and leave comments as feedback on the questions. I'd like to amplify companies who score highly on the above questions. A higher score reflects companies that have more engineering-friendly and predictable cultures, and are typically more  \"Silicon Valley-like\" in how they leverage engineers . The test is based on ideas explored in  A Software Engineering Culture Test .  Scores will be specific to teams, instead of companies, as questions like a healthy oncall, or even pushing to production can be different for various teams in a large organization. See companies who score high on this test, and are hiring on  The Pragmatic Engineer Job Board . Results based on 200 submissions  show that 31% of submissions check all 12 conditions (!) and 68% of these submission score at least 10 points. I realize there is lots of selection bias at play here - teams who score higher on these questions are more likely to fill it out. However, it's still impressive that there are a confirmed  ~ 120 teams at different companies scoring at 10 or above on this \"test\": The most common \"missing\" points are on equity and healthy oncall: A screenshot of some of the results from the test Companies with teams reporting a 12/12 score  (at least in  some  teams, that is):  Amazon, Apple, Facebook, Google, Microsoft, Netflix Atlassian, Cloudfare, GitHub, Robinhood, Roblox, Square, Twitter, Shopify, Spotify, Stripe, Uber Auth0, Expedia, Eventbrite, Freshbooks, HashiCorp, Intercom, Sumo Logic, Udemy, Yelp, Wise ClassPass, Gocardless, Glovo, Impala, KeepTruckin, Loom, NerdWallet, Miro, Monzo, Noom, Rippling, Scribd, Sonder, Zocdoc Birdie, Bud Financial, Butternut Box, CommonBond, Codat, Helge Scheil, Hubs, Indigo Ag, Kensho Technologies, Litmus, Pollen, Postscript, Orbit, Rev, Rows.com, Smartly.io, Quizlet, Northern.tech, ThoughtSpot Companies with teams reporting a 11/12 score  Oncall health missing  (props that they were honest on this): Box, OpenTable, New Relic, Wayfair, Delivery Hero, FindHotel, Good Dog, Kraken, Signal AI, Stash Equity/generous profit sharing for all engineers missing : BBC, Just Eat Takeaway, Skyscanner, moonpig, Trainline, Zalando Startups and small companies with less than 20 engineers answering \"no\" to #9 (career ladder), #10 (parallel career tracks) and #11 (feedback culture) is expected - but as the company grows, they won't have an excuse to not implement those improvements. Growing startups with a 10-11/12 score  where some of #9, #10 or #11 are missing (but engineering leadership confirmed they are addressing those as they're growing) include Fonoa, Linear Product Hunt and Udaan. Ask the above questions as part of \"reverse interviewing\"  companies, after you get an offer, to get a sense of how your future team operates, and how engineering-friendly the culture is. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/postmortem-best-practices/", "title": "Incident Review and Postmortem Best Practices", "content": "\n             One reason incidents are important is that they often reveal the  real  state of products, teams or organizations, which is often very different from the imaginary picture that engineering leaders have in their heads. Transparent incident reports and a good incident-handling strategy can inject much-needed realism into the development process. It‚Äôs hard to brush aside incidents that have caused specific damage, indeed these incidents are often powerful ways to make cases for work that would otherwise be delayed indefinitely. The only certain thing about outages is that they will always happen. Everything else is up to us. How much effort do we put into preventing them, or into mitigating them quickly, or learning from them? I‚Äôve talked with dozens of engineers at a variety of companies and have found that no one is fully happy with how they are handling incidents. In this issue we cover: Common incident handling practices across the industry.  What are the trends on how tech companies approach incidents today? Incident review best practices . What are processes, tools and approaches that we can point to as sensible practices? Incident review practices of tomorrow . A few teams and companies have moved beyond what we‚Äôd call the best practices of today. What is their approach and how is it working? What tech can learn from incident handling in other industries.  Incidents are not unique to tech; fields like healthcare, the military and many others have a long history of efficiently dealing with incidents. What can we learn from them? Incident review/postmortem examples and templates.  A selection of case studies you can get inspiration from and üîí subscriber-only postmortem templates . The oncall process ‚Äì monitoring and alerting ‚Äì is beyond the scope of this article. We cover what happens starting from when an outage or incident is confirmed. This article was originally published in the  Pragmatic Engineer Newsletter . In every issue, I cover challenges at big tech and high-growth startups through the lens of engineering managers and senior engineers.  Subscribe to get weekly issues . How Companies Handle Incidents More than 50 teams have shared information on how they respond to outages, and what happens afterwards.  See all aggregated results here. How teams respond to outages - some of the results. 98.5% of companies sharing details have an incident management process in place. The only exception was a Series C property management company which used an ad-hoc process on top of email, to manage incidents. I was expecting more variation on the process, the tooling and the steps, but there were large overlaps across companies. This might be explained by selection bias, meaning the survey was mostly filled out by engineers whose teams already take incidents seriously. The majority of companies sharing data follow a process that can be summarized like this: An outage is detected.  This could happen following an automated alert, or someone noticing that something is ‚Äúoff‚Äù. An incident is declared.  An engineer ‚Äì often the on-call engineer ‚Äì confirms that an outage is happening. They follow an agreed process to declare this incident, which is often a mix of declaring it over chat, and sometimes opening a ticket in a system used to track incidents. The incident is being mitigated.  During mitigation, the engineers involved provide updates. Some companies have more processes around this than others; for example, making it clear who the Incident Leader or Incident Commander is, or expecting regular updates to stakeholders when high-priority outages happen. The incident has been mitigated.  Everyone breathes a sigh of relief. Decompression period.  There is rarely an expectation for engineers to immediately kick off root cause investigation. This is especially true when the mitigation happened outside business hours, say in the middle of the night. However, many companies have a target window to complete analysis within 36-48 hours, which puts pressure on engineers to shorten this decompression time. Incident analysis / postmortem / root cause analysis . Almost every company calls the investigation that follows by a different name. The idea is the same, the people involved in the incident get together one way or the other, and summarize what happened, and what the learnings are. Incident review . For outages with a large enough impact, a bigger group reviews the analysis put together in the previous step. Some companies have dedicated incident management teams running this process, some have weekly or bi-weekly meetings with some managers present, while others do it ad hoc. Incident actions tracked for follow up.  In the analysis and review, teams come up with improvements on how to either prevent similar outages, reduce the time to mitigate, or the impact of the outage. During the review, these actions are captured, and added to the roadmap or backlog of the teams owning these. What tooling do teams use when handling incidents? Based on  survey responses , these were the most common mentions: Common tooling teams use when handling incidents, based on survey results. Less common approaches  that a few companies mentioned: Research the same day, postmortem the next day.   ‚ÄúOur team does a little research right afterwards, while the incident is still fresh. We then start the postmortem process the next day. It‚Äôs down to the engineers to decide how they go about it; the point is they don‚Äôt need to start the postmortem right away.‚Äù Dedicated decompression time.  ‚ÄúThe team which owns the service/system that failed takes time out from regular work to decompress (if it was a big outage) and to work on post-incident review and immediate follow-up actions.‚Äù Create low priority incidents to broadcast risky migrations.  Some companies with incident systems that are used to check the health of systems, often create low-priority incidents to raise awareness for risky migrations that could result in temporary issues, but which they are actively monitoring for. Incident Handling Best Practices What are practices that stand out in their effectiveness, when we think of incidents? Encourage raising incidents, even when in doubt.  It can be stressful to decide whether or not an incident should be created when something looks ‚Äúoff‚Äù. At the same time, many incidents are either delayed in their response, or are missed completely because someone did not ring the alarm when they had a nagging suspicion. Create a culture where it‚Äôs encouraged to raise an incident. Even if it turns out to not be an outage, it‚Äôs worthwhile learning to investigate  why  it felt like something was wrong. Be clear on roles during incidents . Make it clear who is in charge of mitigating the incident, and who should communicate with stakeholders. Many places call this role the Incident Commander. The role of leading mitigation and communicating might be the same. However, for high severity outages, or when many stakeholders need to be kept in on how it‚Äôs going, it might make sense to separate them. Define incident severity levels ahead of time . Have a shared understanding of what makes an outage more ‚Äòimportant‚Äô. Write down the definition, and use the same definitions across the organization. Most companies define severity levels based on how customers might be impacted, and the impact radius based on what percentage of these customers are impacted. Over time, you‚Äôll probably need to update your definitions as new types of incidents occur. Have playbooks ready  for common incidents, and make them easy to locate and use. Playbooks could be referenced as part of the alert, or listed at a place where it‚Äôs easy for the oncall engineer to find them. Playbooks help with onboarding new members to the rotation, while knowing what to check for ‚Äì and in what order ‚Äì can help mitigate outages faster. Leave time for engineers to work on an incident review/postmortem . While it‚Äôs always possible to rush this process, you‚Äôll get lower quality reviews if you do so. Instead, give people the space to get together and discuss what happened, and aim for all those involved to have their say. Dig deeper when looking into root causes of the incident.  Don‚Äôt stop at the first and often obvious, potential reason. Ask questions to understand how various factors could have contributed to the outage, and what are the things that contributed to those factors. Share incident analysis and learnings with a broader group , instead of keeping it within the small group which reviews incidents. Find and use tools built for efficient incident handling.  There are companies whose incident review tooling is email-based, and even a simple approach like this can work well enough. However, if you use tools that support the understanding of common incident workflows, you‚Äôll see less confusion, and less tribal knowledge being needed to handle outages. Many companies build their own tooling, and there‚Äôs a world of vendors and open source services teams can use. Contributors to this article include engineers from incident handling tools  incident.io  (dedicated incident response tools),  Jeli.io  (incident analysis platform) and  Blameless.com  (end-to-end platform). Do your research: you‚Äôll find plenty of others as well. Blameless reviews/postmortems  are worth talking more about. When doing a root cause analysis, avoid making it seem like a single person is responsible for the incident. Most outages will be caused by configuration or code changes that someone did, and it‚Äôs very easy to find out who it was. However, it could have been  anyone  else on the team. Instead of directly or indirectly putting the blame on one person, go further and look at why systems allowed anyone to make those changes, without providing feedback. If the conditions that allowed the incident to happen are unaddressed, these conditions could trip up someone else on the team in future. Some people resist the idea of ‚Äúpushing‚Äù the use of blameless postmortems across an organization. ‚ÄúWill this not lead to a lack of accountability?‚Äù they ask. But accountability and a blameless culture are two separate things in my view, which can ‚Äì and do ‚Äì go hand in hand. Accountability means people take responsibility for their work, and when things inevitably go wrong, they take ownership of fixing things. A blameless approach recognizes and embraces that it‚Äôs counterproductive to fault someone for doing something they were unaware would cause an issue. This is especially the case when those people take accountability for addressing the reasons that led to the issue. Well-run incident review meetings  are key to sharing context with all involved, and to coming to better learnings. Here is a structure that some of the best run review discussions followed: Do the work upfront.  By the time of a meeting, the people involved in the outage should have come together, discussed the incident and their take on it, and put together resources that can be used to give others context. Level set in the beginning.  Don‚Äôt dive in straight to the incident. Start with sharing high-level details and context, so everyone in the room gets on the same page. Walk and talk through the timeline as it happened.  Don‚Äôt just run a script, but talk through what was happening. What looked weird? Why did you have a nagging concern? If you‚Äôre in a review, jump in and ask questions. Understanding how things unfolded is much more important than most people realize. Keep it blameless.  Avoid referring to any one person being the one ‚Äúto blame‚Äù for the incident. Recognize what went well, and what can be improved.  Don‚Äôt focus only on what‚Äôs lacking, but call out actions, processes, systems that worked well, some of which might have been learnings from another incident. Track actions as they come up.  As ideas come up for things that can be changed or improved, keep a running list of these. Consider separating reviews and action items meetings.  By focusing on \"what can we learn\" in the first review meeting, much better improvement actions emerge in a second meeting focused on action item identification, held a day or more later. Record the meeting  so those who missed it can catch up, and have the full context. Open up the meeting to a wider group,  so people with additional context, or those curious can join. This practice can help with transparency and spreading of information. I sat down with  Chris Evans , co-founder and CPO at incident.io, formerly head of platform at Monzo. I asked him which other practices he‚Äôs seen adopted by engineering teams which are great at incident handling. Here‚Äôs what he shared: Avoid ‚Äúblameless buck-passing‚Äù.  When a high severity outage happens, there is often pressure from above on the team to ‚Äúdo everything so this can never ever happen again.‚Äù This approach, in turn, can turn reviews into blameless buck passing exercises, in which those involved try to shift any implied blame away from them or their team, to somewhere else. On the surface, it‚Äôs a blameless process. In reality, it‚Äôs a poor experience for everyone involved and creates unnecessary pressure. Remove the pressure  of it ‚Äúnever happening again‚Äù and of all reviews needing to have action items. Do these two things and you‚Äôll have far more effective incident reviews. Give ‚Äúsoak time‚Äù after incidents . After the outage, leave time for the team to talk and soak up what really happened. Think of incident reviews as a process, not as an artifact.  Too many teams focus on writing the artifact, basically a report, instead of the review being a process that starts before you write anything down, and does not end when a document is complete. Treat an incident as an ‚Äúaha moment‚Äù.  Every incident sheds light on something the team did not know before. What was it? Consider retiring the title ‚Äúpostmortem‚Äù.  Postmortem means examining a body to determine the cause of death. This has a grim association, and starts with the assumption that something terrible has happened. Beyond the Best Practices of Today Observability platform  Honeycomb  stood out in their responses to my survey. They were one of the few firms which are moving away from templates and do not track action items. Unlike most other teams which want to do this, they actually took the step. From many other teams, I would have interpreted this as trying out something that might or might not work. However, Honeycomb handles huge amounts of data, and provides stricter Service Level Agreements (SLAs) than most of their competitors. They also take reliability very seriously, so much that a 5-minute delay in data processing is  an outage they publicly report . I asked Honeycomb engineer  Paul Osman  why they made this shift, and how it‚Äôs working out. Paul shared how two years ago, they noticed that action items coming up during reviews were not particularly interesting findings; they were mostly things the team was going to do, anyway. Focusing on the learning during incident reviews, over explicitly tracking action items,  has been the biggest shift, Paul shared. Teams and individual engineers still create their own tasks, not just for incident reviews, but for everyday work. They‚Äôll also create those tasks even if there‚Äôs not an incident review. Paul said: ‚ÄòFor us, the review is more about ‚Äúwho knew what when and how did they know it?‚Äù and ‚Äúhow did our systems surprise us?‚Äù instead of ‚Äúwhat action items can we extract from this?‚Äù ‚ÄòMost of the interesting insights we‚Äôve found are in a different category from tasks. They‚Äôre things like ‚Äúnew traffic patterns can show up as red herrings when debugging‚Äù or ‚ÄúHey, this person is needed whenever we have a problem with this system, we should schedule someone to pair with them so they can go on vacation‚Äù. Honeycomb have left behind some practices that outlived their usefulness, and seem to be better off for it. However, I‚Äôd add that they‚Äôre still a relatively small group ‚Äì around 35 engineers ‚Äì at a place where everyone operates with high autonomy. Moving on from the  Five Whys  method  for gathering more information,   is another approach used by teams which are great at incident handling. The Five Whys is still considered as a best practice by many teams and is a common way to run the root-cause analysis process.   The idea here is to ask ‚Äúwhy‚Äù in succession, going deeper and uncovering more information each time. The framework is very easy to get started, when teams don‚Äôt do much digging into incidents. However, as Andrew Hatch at LinkedIn shares in the talk  Learning More from Complex systems , there are risks to relying on the Five Whys: ‚ÄúThe danger of the Five Whys is how, by following it, we might miss out on other root causes of the incident. (...) We‚Äôre not broadening our understanding. We‚Äôre just trying to narrow down on one thing, fix it, and hope that this will make the incident not happen again.‚Äù John Allspaw also advocates against using the Five Whys in his  The Dangers of The Five Whys  article. He says that asking ‚Äúwhy‚Äù is a sure way to start looking for a ‚Äúwho‚Äù, and to start looking for who is to blame for the outage. Instead of asking ‚Äúwhy?‚Äù multiple times, consider asking ‚Äúhow did it make sense for someone to do what they did?‚Äù. Then dig deeper in gathering the context that made the choices logical, in the context of the people acting. Here are  some other questions to consider asking  to run healthy debriefs. Take a socio-technical systems approach to understand the outage.  A root cause analysis or the Five Whys approach can be appealing because they simplify a post-incident effort, but they will not address the deeper systemic issues within your system, says  Laura Maguire , Head of Research at Jeli.io. Socio-technical systems approaches look at both the technical aspects ‚Äì what broke ‚Äì and the ‚Äòsocial‚Äô aspects; how the incident was handled. This gives an oncall team deeper information about software component failures. It also surfaces relevant organizational factors, such as who has specialized knowledge about different aspects of the system and which stakeholders need updates at what frequencies, in order to minimize impacts to their areas of the business. Some guidance for conducting a systemic investigation: Use human error as a starting point for an investigation . For example, if an engineer appears to have made a mistake, look at the processes they used, the training they received, how frequently they interact with that part of the system or codebase, their workload, their oncall schedule and other relevant details that put an error into the broader context. Sidney Dekker, founder of the Safety Science Innovation Lab advocates for this approach in the book,  The Field Guide to Understanding 'Human Error' . Consider organizational factors . Do teams have a headcount that allows them to execute on their roles and responsibilities in a manner that isn‚Äôt burning people out? Are there legacy systems that haven‚Äôt been dealt with? Is ownership of services clear? Gather contextual information relevant to the event . Questions such as ‚ÄúWere you on call?‚Äù, ‚ÄúHow did you get brought into the incident‚Äù, ‚ÄúHave you worked with this team before?‚Äù can reveal important information about the ad hoc or informal ways teams adapt to cope with unusual or difficult outages. Encourage participants to recount their experiences as they happened , not as they think they  should  have responded in hindsight. Focusing on what happened can surface partial or incomplete mental models about how the system works. It can reveal new ways of approaching a problem or monitoring anomalous behaviour and can help a team share specialized knowledge. If psychological safety is present, sharing these stories publicly can allow others to hear what may not be apparent to everyone else. A systemic investigation is about asking a different set of questions  and recognizing that individual actions and decisions are influenced and constrained by the system of work they take place in. Incident Review Practices of Tomorrow I sat down to talk about the future of incident management with  John Allspaw , who has been heavily involved in this space for close to a decade. He was engineer #9 at Flickr at the time of Flickr‚Äôs massive growth phase. He then became the CTO of Etsy, where he worked for seven years. For the past decade, John has been going deeper and deeper into how to build better resilient systems. He enrolled in Lund University in Sweden in the Human Factors and Safety program, a program where some of the leading thinkers in resilience engineering seem to have crossed paths. He has founded  Adaptive Capacity Labs , which partners with organizations that want to further improve how they handle and learn from incidents. As we talked for an hour, I kept being surprised by the depth of his understanding of resilient systems. It slowly made sense why he spent so much time studying non-tech related subjects, all connected to resilient engineering systems. John also exposed a world of decades-old research outside tech that I would have never thought to look to as inspiration to build better, more reliable systems, but which perhaps we all should. Here‚Äôs a summary of our conversation. My questions are in italics. Why have you been spending so much time on the incident space? ‚ÄòIncidents create attention energy  around them. When something goes wrong, people pay far more attention to everything around the event than when it‚Äôs business as usual. This is also why incidents and outages can be a catalyst to kicking off larger changes within any organization, not just tech companies.‚Äô What is your view on industry best practices which many companies follow, like templates, incident reviews, follow-up items? ‚ÄòIncident handling practices in the industry are well-intentioned, and point in the right direction. However, these practices are often poorly calibrated. We talk a lot about learning from incidents, and some learning is certainly happening. However, it‚Äôs not happening as efficiently as it could. ‚ÄòWe often confuse fixing things fast with learning.  Take the incident review that most companies follow. There‚Äôs an hour, at most, to go through multiple incidents. There is often more focus on generating follow-up items than learning from the incident. In fact, most people seem to think that by generating follow-up items, learning will also happen. However, this is far from the case. ‚ÄòWhen we talk with companies, we ask them to describe how they handle incidents. They jump in, talk about how they detect outages, how they respond, who plays what role, and which tools they use. They‚Äôll often mention cliches like ‚Äúwe never let a good incident go to waste.‚Äù ‚ÄòHowever, most teams cannot describe a major incident in detail. We typically ask them to talk us through a specific incident, instead of sharing their generic approach. The answer is almost always along the lines of there‚Äôs a document, or a ticketing system where this is written down. However, when we find and start reading this document, it‚Äôs usually a disappointment and does a poor job in conveying takeaways. ‚ÄòMost incidents are written to be filed, not to be read or learned from.  This is what we come across again and again. Teams go through incidents, they file a report, pat themselves in the back, and think they‚Äôve learned from it. In reality, the learning has been a fraction of what it could have been. ‚ÄòThe current incident handling approaches are only scratching the surface of what we could be doing. In several ways, tech is behind several other industries in how we architect reliable systems.‚Äô What Tech Can Learn From Other Industries What can we as software engineers learn from other industries? ‚ÄòLuckily, we have decades of studies on incidents and reliable systems across several industries. And there are plenty of applicable learnings that apply to tech. ‚ÄòA common myth is that distributing learnings from incidents is the biggest blocker on improving more.  Many teams and people will believe that if only they find a better way to share incident learnings ‚Äì like make them easier to search or email them out to a larger group ‚Äì then this will solve the issue of the organization improving from them. ‚ÄòHowever, this belief has been refuted by research many times. The key challenge is the author of a document cannot predict what will be novel or interesting for the reader. Whoever is writing the incident summary will not be able to tell what information will be well-known to the reader. The person writing the incident summary will also often not write down things they assume everyone else to know. However, many readers will not be familiar with them. ‚ÄòStudies repeatedly show that experts have a hard time describing what makes them an expert.  This applies to incidents; experienced engineers who mitigate incidents efficiently will have a hard time describing what it was that allowed them to act as swiftly as they did. ‚ÄòMuch of how we handle incidents is tacit knowledge, that which is not explicit. The question of ‚Äúhow do we build a better incident handling culture?‚Äù is not too different from ‚Äúhow do we help people become experts on a topic?‚Äù. And the answer needs to go beyond writing things down. A good example is how, to learn to skate, you cannot just rely on reading books about skating.‚Äô Before I talked with John, I doubted that tech had  anything  to learn from other industries. ‚ÄòWe‚Äôre in software, in tech, building things that have never been built before‚Äô, I thought. Look at mobile phones, cloud computing or Snapchat; none of this has  ever  existed! However, the more we talked, the more it struck home how outages or incidents; stressful situations when something goes wrong, are not unique to software. In fact, often they don't have anything to do with software. These types of unexpected, disruptive events have been happening since before the invention of the wheel. So of course it makes sense there is an accumulated knowledge on how to prepare people for an incident they are yet to experience. My biggest takeaway talking with John was how a written culture is  not  enough to create a great incident culture.  Writing things down is important, but it won‚Äôt cut it alone. I remember the best oncall onboarding process we had at Uber. It had nothing to do with documentation. It was a simulation of an incident. The facilitating team deliberately disrupted a non-critical service similar to an incident that happened in the past. The people being onboarded knew this was not a real incident, but they were called into a Zoom call in which one of them was named as Incident Commander and the facilitators played along. The team then did a debrief and analyzed what they could have done differently. This exercise achieved far more than any studying of documentation could have. I do not have data to base this on, but it  felt  to me like the people who went though this simulation were far more prepared for the real thing. It felt like they had more confidence going on their first oncall, as they had already been through an incident. This approach got me thinking. ‚ÄòIs this why the military does training exercises, despite the high cost?‚Äô John did not answer, but asked the question: ‚ÄòWhy do you think they do it? Would they do so if reading books or watching videos got them a similar result?‚Äô There‚Äôs a lot that we in the software tech industry can learn about how to build resilient systems, by learning about how other industries have been building resilient systems. The Opportunity to Build More Resilient Systems As our conversation closed, John mentioned how he thinks the software industry is, in some ways, ahead of most other industries in building resilient systems. He told me how he invited a person to the Velocity conference, one focused on resilience, performance and security in tech. This person spent decades researching resilient systems in healthcare, and assumed they would teach the audience. Instead, this person was amazed at how much they had to learn from tech. As John put it: ‚ÄòNo other industry has as much, nor as detailed incident data available, as tech does.  After an outage happens, engineers have access to code and configuration changes, logs and analytics, often down to the millisecond. You have all this data without having to do much preparation, or go through obstacles to get this data. ‚ÄòCompare this to, for example, the medical field. There, you have to do huge amounts of preparation to get data on what happens in an operating theatre. You need to install cameras and microphones. You get permission from all parties to record. You operate the recording equipment, then transfer all the data for processing after the operation. ‚ÄòAccess to data is far more strict in, for example, the aviation industry. Let‚Äôs say you want to investigate a plane near-miss incident. To access the logs, you need to start a special process, and after many approvals, you can talk with the pilot only in the presence of a union representative, and potentially a lawyer. If you forgot to ask something relevant, you need to start the process again. ‚ÄòMost engineers believe progress in the software industry means progress in how we build software. However, I believe the real progress is how we get more and more data to see how incidents unfold to the point that we‚Äôll be able to answer the question: what made this incident difficult?‚Äô Software organizations already have all the data they need to improve how they operate , we both concluded. This is a massive advantage compared to all other industries. I was left wondering, do we realize the privileged position tech puts us in, of having both the data to work with, and the autonomy to do so? And for those who do realize, will we take the opportunity to create much more resilient systems, challenging the best practices of 2021, and pushing ahead to a world where we use incidents to learn and adapt, not just track action items? Great Incident Review Examples Few things better show the privileged status of tech than how we already have access to some of the best incident reviews ever written. Companies from Cloudflare, through GitLab and many others, have made these available for anyone who wants to read them. Do keep in mind that public blog posts about incidents are not the same as incident analyses intended for an organization to learn from, and will often not represent the whole story. The Verica Open Incident database  built by  Courtney Nash  is the most exhaustive public incidents database you can find, and one I‚Äôd suggest browsing and bookmarking. Additionally, here are a few incident analyses that I especially enjoyed reading: GitLab database outage in 2017 . A very thorough, transparent, and easy to read report. I especially like how they  added a follow-up  on how the team member is doing who gave the command that started the outage. Cloudflare outage in 2019  that brought down core proxying, Content Delivery Network (CDN) and the Web Application Firewall (WAF). Cloudflare outage writeups are always pleasant and educational to read, with occasional stories, lots of details, and an easy-to-follow structure. This one is no different. Slack outage in 2021  as people returned to work on the new year. An easy-to-read summary that goes into details on how the outage unfolded, and how they resolved it, step by step. Monzo outage in 2019 . Another transparent and detailed writeup. GitHub outage in 2018  where the service degraded for over a day. The Azure Leap Day bug in 2012  and the secondary outage that followed. Conclusions We‚Äôve covered a lot of ground in this issue of the newsletter. Depending on where you are at on your team with incidents, I‚Äôll leave you with one of these pieces of advice: If you do not yet follow common industry practices  like having a well-defined process for raising an incident, doing regular incident reviews, and recording follow-up items, do give this a go. Start step by step, but try to get to a point where responding to incidents is deliberate, not ad hoc. If you already have incident review hygiene in place, challenge yourself to make this better.  Do you give ‚Äúsoak time‚Äù to teams ‚Äì the time to process what happened ‚Äì before doing a review? Are your reviews  truly  blameless, making people feel good about having gone through an incident, rather than being discreet finger-pointing exercises? Do you have reviews where the goal is not to get to action items, but to discuss learnings? Focus on learning over action items, if you want to take incident handling to the next level.  As a warning, you should learn to jog before you run. Don‚Äôt jump to this step if your team has not gone through all the previous stages. But  do  look at companies like Honeycomb or people like  John  as inspiration of how you can focus more on learning, and less on the processes. Are you making meaningful changes after incidents?  Analyzing why an incident happened is important, but without taking action and making changes, this analysis is not worth much. Often you‚Äôll find the changes you need to make are complex and time-consuming. Are you following through with this work, and making systemic changes to improve the reliability of your systems? Additional Resources Resources: Aggregated survey results  on how teams handle incidents. üîí  Postmortem templates  with a lightweight and a heavyweight example. Further related reading: Learning from incidents community  (LFI) - a community on incidents, software reliability, and the critical role people play in keeping their systems running, The airline safety revolution  from The Wall Street Journal. No commercial airline in the US has had a fatal crash since 2009. The story of how an industry came together and changed, to make this happen. Markers of progress in incident analysis  by Adaptive Capacity Labs. How can you tell if an organization is making progress in learning from incidents? Further related videos: Swim, don‚Äôt sink: why training matters for SRE and DevOps practices  by  Jennifer Petoff , head of SRE education at Google Food for Thought: What Restaurants Can Teach Us about Reliability  by  Alex Hidalgo , director of SRE at Nobl9 Hard problems we handle in incidents but aren‚Äôt recognized  by John Allspaw, founder of Adaptive Capacity Labs Thanks to  Chris ,  John ,  Laura ,  Paul , for their input in this article, and  Alexandru ,  John ,  Julik ,  Kurt ,  Miljian ,  Micha≈Ç  and  Marco  for their review comments. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/writing-motivation/", "title": "How I Motivate Myself to Write", "content": "\n             Since leaving Uber a year ago, in October 2020, I've been making a living from writing - one  with comparable income  to when I was employed. None of this would have happened if I did not start to write this blog several years ago. Writing which helped hone my writing skills, and build the credibility to  start publishing books , and to start  my weekly newsletter . How do you find the inspiration and motivation to write?  This is a question I frequently get - especially that regular blogging has led to making a living off writing. Here are the 12 approaches and steps that worked for me - some of which might be useful if you'd like to write more regularly. 1. Own Your Content Start a blog or a place where you can start share your longform writing.  I am personally a fan for  paying out of pocket  for the writing platform I use. By doing so, I own my content. I took this advice from software engineer and blogger Scott Hanselman after reading his post  Your words are wasted  where he writes: And still you tweet giving all your life's precious remaining keystrokes to a company and a service that doesn't love or care about you - to a service that can't even find a tweet you wrote a month ago. I pay a monthly fee of around $30 to use  Ghost as a hosted service . Paying every month reminds me that I  should  write something to not waste all this money. It's a small thing, but this guilt is what helped me get more articles out in the early days. Getting started on free places where you keep your copyright like  Hashnode  or  Dev.to  can also be an option. The nice thing about them is you might get better reach, and more feedback or comments.  The downside with free-to-write platforms is that you don't really own your content: those companies make a business directly or indirectly monetizing your writing and the traffic it generates. For example, see what happened with Medium: much of the content hosted there is paywalled. 2. Start Writing - Regularly Few people know, but I have been  blogging on another blog  for years. Those posts were irregular braindumps on whatever was on my mind. It was a mix of personal updates, debugging stories and sharing when I released a new version of my app. In 2015, I decided I want to write about software engineering - a field I had been working in for years. I took my inspiration from the once-very-successful Coding Horror blog by Stack Overflow cofounder Jeff Atwood. In the post  How to achieve ultimate blog success in one easy step , Jeff wrote: When people ask me for advice on blogging, I always respond with yet another form of the same advice: pick a schedule you can live with, and  stick to it . Until you do that, none of the other advice I could give you will matter. I don't care if you  suck at writing . I don't care if  nobody reads your blog . I don't care if you have  nothing interesting to say . If you can demonstrate a willingness to write, and a desire to keep continually improving your writing, you will eventually be successful. I read, re-read, and re-read this post. I then decided this is exactly what I need to do. I picked a schedule and stuck with it for months.  I decided to write an article every two weeks for the next couple of months. And this is what I did, shipping the first few articles on this blog: From software developer to software engineer Getting into the zone with a single Pomodoro The software development dilemma: move fast without breaking things? A comment is an invitation for refactoring If I started writing today, I'd join a community like  Blogging For Devs , where you have a community that can feel it keeps you accountable, and a group that gives feedback on your early drafts. I'm a paying member here and drop in when I have the time. Ship 30 for 30  is another great way to start. This is a program where you ship 30 writing assignments in 30 days as part of a cohort that keeps you accountable, which kicstarts this process and helps form this habit. The course is priced around $300: paying this amount and working in a cohort I'd expect will help you stick with writing through the 30 days. ¬† 3. Write For Yourself When I (re)started my blog, I was wondering who would be reading my articles. In the end, I decided I don't care: I'll just write them for myself, as a reflection of the ideas and observations I have come across. Approaching writing with this approach, it has been surprisingly therapeutic and a tool that helps me reflect. Writing my ideas down, in a form that makes sense requires a surprisingly large amount of thinking. Writing  is  a forced way to think more clearly  - and I'm not the only one to make this realization. Early Facebook employee Andrew \"Boz\" Bosworth shares a similar observation in  the article Writing is thinking :  Even when I write for my own benefit, it is undoubtedly a bonus that at the end I have a document which I can easily share to invite critiques or enlist support. I know of no more scalable way to engage a large audience than the written word. I'm glad I started out writing for myself: it helped my thinking, and it helped polish my writing as well. The early articles are noticeably shorter and, less pleasant to read, though they often took more time to write than later ones. They gave me early practice in forming and writing down my thoughts around various engineering topics though. 4. Copy Writing Styles You Like Most of my favorite writers and bloggers have a distinct style. When I started writing, this made me think: what would be my style? What writing setup should I chose? When starting out, I copied the writing style and approach of well-known bloggers.  Most of my early posts were inspired by the quotation style that Jeff Atwood uses in many of his articles. He takes a 1-3 quotes from various articles on the same topic, then adds his own cents. Take his article,  Swiss army knife or generalizing specialist . The article consists of three quotes from three different sources, and his comments surrounding these. As I browsed blogs, this approach struck me as one that can help me get started easier. Commenting on someone else's writing is a lot easier than writing from scratch. So this is what I did with my first few articles. If you look closely, the resemblance in style for these articles should be clear - but only if you know where to look for the inspiration: Many early Pragmatic Engineer articles were inspired by the writing style of Coding Horror. Can you see the similarities? As you start to write more, your writing style will evolve and you won't feel the need to \"copy\" another style. This is what happened in my case. Current articles don't lean on any one style: they're a mix of what I have found pleasant and useful, over the years. If you like this style - you're more than welcome to copy the approach. I do, however, recommend the quoting approach for an easy start: it's much easier for words to flow when there's already a few thoughts from someone else that you can reflect on. 5. Capture Ideas As They Appear Once I started writing, the biggest barrier I faced was the lack of ideas. After finishing an article, I'd be unsure what to write about next. Capturing ideas as they popped into my head has been very helpful for my writing  I almost always did this with a note taking app on my phone or my laptop - as ideas would often come when debating with a colleague, or having a conversation over lunch. I now use  Craft Docs  to capture these - both because of the slick UI, as well because my brother is behind the company - but any system works. Once I started to capture these ideas as they hit me, I no longer had a shortage of topics. After a while, I had the opposite: too much to choose from. Here's a screenshot of my \"blog ideas\" note in Craft Docs, and a fraction of my idea backlog: 6. Freewrite Once you have the idea, it's easy to get stuck on an empty page. One of the tricks that helps me break this block is to do twenty minutes of free writing. Here's how I do it: I set a timer for 20 minutes on my phone, and place it next to me. I proceed to do free writing, typing out everything that is in my head. I don't stop to correct grammatical errors, or to go back and fix anything. I don't stop to criticize my thoughts - this gets easier once you've done this a few times. If I cannot think of anything to write, I write  \"I cannot think anything to write... okay, now I thought of this new idea on...\" The interesting thing is how it works,  every time . After a few minutes I'm pushing out ideas, and I'm usually frantically typing when the timer goes off. 7. Draft Following free writing, I have a good chunk of ideas. I then proceed to write a draft piece. My approach is this: I write out key ideas I want to explore as bullets I write out each of those bullet ideas: either by copying from my free writing, or by adding a few paragraphs to each I personally like to bold out  the key ideas I'm exploring. It helps me focus on what I'm trying to say. I often do research during the draft stage, reading up on topics I'm writing about, then quoting or linking to relevant resources. My draft is complete when I wrote about all the parts I wanted to. 8. Edit Once a draft is ready is when a very different staging of writing comes: editing. This one is something I often leave for the next day. Even when I start doing it after the draft, I take a break to get into \"editing mode\". Editing is about making this piece digestible for the reader. I do a few things: 1. Add a closing section.  What is the takeaway of the piece? What is the one, or two things I should leave the reader with? For example, in the article  Data structures & algorithms I used working at tech companies , I added this summary section: Data structures and algorithms are a tool that you should use with confidence when building software. Know these tools, and you'll be familiar with navigating codebases that use them. You'll also be far more confident in how to implement solutions to hard problems. You'll know the theoretical limits, the optimizations you can make, and you'll come up with solutions that are as good as they get - all tradeoffs considered. 2. Make the opening count.  The first few paragraphs need to grab the attention of the reader, make it clear why the topic is relevant, and what they'll get out of it. I often set the context in the beginning as well. In the  Data structures & algorithms article , I decided to open with a question to the reader, then follow with a summary on what to expect: Do you actually use data structures and algorithms on your day to day job? I've noticed a growing trend of people assuming algorithms are pointless questions that are asked by tech companies purely as an arbitrary measure. I hear more people complain about how all of this is a purely academic exercise. (...) This article is a set of real-world examples where data structures like trees, graphs, and various algorithms were used in production. I hope to illustrate that a generic data structures and algorithms knowledge is not \"just for the interview\" - but something that you'd likely find yourself reaching for when working at fast-growing, innovative tech companies. 3. Tighten up the text.  Once the opening and the closing are clear, I go through the article to tighten up the text, make sentences shorter, and fix any grammatical issues. In the past, I used  Hemingway Editor  to spot overly complex sentences. I would then proceed to make them shorter and easier to read. Over time, I learned to write more clear sentences myself: Making text easier to read with  Hemingway Editor : before and after I also use  Grammarly  to catch spelling, and grammar issues, and sometimes take suggestions the tool gives - though I just as frequently reject them. 4. Hire an editor.  This last one I wish I had done earlier. For years, I wrote without an editor. I hired my first one when writing my books  Building Mobile at Scale  and  The Tech Resume Inside Out . An editor not only makes your writing more clear, but it's a fantastic way to learn on how you can improve it. I would not recommend an editor for every blog post: but hire one if you're serious about wanting to write better.  9. Publish Pressing the button to make my writing live is one I like to delay. However, I've always found that done is better than perfect. Most of my blog posts go out after light edits, and I set it live. 10. Feedback For most of my early posts, I got no feedback, and probably very few readers. However, as soon as I start to get feedback, I often go back and tweak my writing based on what people say. The most frequent feedback I used to get was on typos. I sometimes do get corrections, and additional ideas, mostly as emails or messages - both are more common since more people read what I have written. 11. Audience Writing and people reading your writing is a chicken-and-egg problem. When you start out, there's no one to read. When there's no one to read, there's little point in writing. As uncomfortable as it is, you do need to share your writing to where interested people could be. This can be social media like Twitter, LinkedIn or Facebook. It can be groups like subreddits, Hacker News and other tech forums. It can be chat groups on Discord or Slack. Self-promotion is something you'll need to be wary of on forums: if you only join these communities for the sake of sending a link to your article, you will - rightfully - not be welcome at these places. This is where it's helpful when you start to write for yourself: you have less of a pressure to want to get people you don't know read your writing. 12. Again. And again. And again. The hard thing about writing is not on publishing an article: anyone can do this. The hard part is doing the writing on a consistent basis. I found that setting up dedicated time - an hour each week, on a weekday - helped me get into the habit of writing. This is how I wrote most of the posts on this blog. Over time, some posts resonated with people, while others saw very little interest. Still, every piece helped one person: me. Every time I published, I had the satisfaction that I've understood or explained something for myself - and maybe, for others as well. And this satisfaction is what gave me the motivation to do it again. And again. And again. The result of repeating this for years is  this blog , the  weekly newsletter , and  few books . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/platform-teams/", "title": "Platform Teams", "content": "\n             Platform teams are the building blocks that product teams use to ship business-facing functionality. Products are built on top of platforms, which platforms enable product teams to move faster. Platform teams are key in scaling up high-growth engineering organizations. Platforms teams share the following characteristics: Focused on a technical mission.  Platforms are focused on technical goals like scaling a key area, achieving performance or availability goals, or building an easy to extend and maintain architecture that serves multiple teams and areas. Customers are usually internal engineering teams.  Most customers for a platform team are engineers of other product teams or, in rare cases, people from the business side also using the platform. Consumed by multiple verticals .   Each platform typically has multiple customers - products or other platforms. Below are articles I've written on platform teams.  They both share my own perspective on these teams, and also include interviews with experienced engineering leaders and engineers who have built platform teams.  This article is an ever-updating collection issues touching on platform teams. Mobile Platform Teams .  What they typically are and how to create them. Excerpt from my book  Building Mobile Apps at Scale . The Platform and Program Split at Uber .  The change that shaped the engineering culture for years to come, and my take on Platform teams üîí  Platform Teams with Ganesh Srinivasan, Chief Product & Engineering Officer at Confluent . Getting the timing of platform teams right, funding them, and the platform team mindset. Interesting thoughts on platform teams Quotes from the above articles that you might find particularly interesting. When to spin off the first mobile platform team is always a challenge.  Large mobile teams clearly need one - or more - of these teams. But what about teams that are still small - say, at 15 engineers? Starting a platform team too late can mean lots of redundancy in the code, poor abstractions, and little reusability between identical functionality. Were a platform team in place earlier, this team would have been the natural owner of several - shared - features and would have also taken ownership of the app-wide architecture. - from  Mobile Platform Teams Uber decided to restructure to platform and program teams ahead of having the sufficient number of people in place  for all ‚Äúlanding parties‚Äù to be complete. What this meant was several teams were still operating as skeleton crews and were expected to catch up with hiring. - from   The Platform and Program Split at Uber Platform teams improve organizational efficiency . They reduce duplication of work and help with standardization of approaches, when standardization is a benefit for the organization. For example, setting up a Backend Security Platform team can help with standardizing security vulnerability checks across the company. They would also help uncover duplicated ‚Äì and inconsistently implemented ‚Äì security approaches. - from  The Platform and Program Split at Uber . The idea of setting up a \"mobile platform team\"  will probably come around to you if your area has around 20 or more mobile engineers working on one or more apps. You'd probably be able to identify areas that could make more sense to be owned by a single team. But how do you go about this? Should you champion this cause? I have set up a mobile platform team at Uber, creating the Payments organization's first mobile platform team - from  Mobile Platform Teams If you don‚Äôt create platform teams in time, you fail to stay ahead of the growth curve.  When you don‚Äôt create any platform teams, the incentive for the product engineering teams is to build the next product feature. Companies are there to solve problems for their customers, so this is what product engineering teams focus deeply on. For example, on the Billing team, the product managers will be thinking deeply about how they can launch the next bill payment feature that improves the customer‚Äôs experience. - from üîí  Platform Teams with Ganesh Srinivasan, Chief Product & Engineering Officer at Confluent . Put the ease of use of your platform first.  Many platform teams don‚Äôt consider this as one of their main priorities, but they should. Your API, the interfaces, and the ability to self-service all fall into here. Ease of use is very important in scaling your platform. Your goals should be to build a platform that other engineers  want  to use, and feel good about using. It should not be the other way around, where engineers  need  to use it, but they don‚Äôt like to. - from üîí  Platform Teams with Ganesh Srinivasan, Chief Product & Engineering Officer at Confluent . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/off-cycle-compensation-adjustments-for-software-engineers-in-2021/", "title": "Exceptional Off-Cycle Compensation Adjustments for Software Engineers in 2021", "content": "\n             The data is in: many companies have taken a drastic step to adjust compensation during the year, responding to a  beyond heated tech hiring market  and attrition numbers for senior engineers rarely seen before. I talked with more than 30 hiring managers and employees at different tech companies across the globe. These firms have all done off-cycle adjustments since Jan 2021. Most of these adjustments happened June-Nov 2021, and are all above the \"usual\" annual raises that tend to raise salaries in-line with inflation. A good part of the market has moved exceptionally the past 12 months in ways I've not seen the past decade.  I predict that exceptional raises will be necessary to keep pace with the market, and not risk attrition of software engineers - especially senior engineers - driven by compensation. This article shares data points I've collected and verified across companies and regions. Numbers are the same as ones published in the article  More Follow-Up on the Tech Hiring Market . Europe 30%  increase for all Data Engineers at a publicly traded company with a large office in Portugal. Other engineering expected to follow: however, Data Engineering attrition was too high to not act. 25%  base increase for engineers at a Series B startup based in Prague, Czechia. This company saw iOS and Android native engineers being poached from them. 25%  increase for engineers   in the UK and Germany at a Series B startup with an US HQ 20-25 % base increase for managers   at a Series C FinTech in London. 20-25%  base increase for engineers at a Series A startup with most engineers based in Hungary. 20%  base increase for a Seed startup in London 20%  increase for ‚Äúhigh impact loss‚Äù tech employees   at an EU tech company with offices in Germany and Spain. FreeNow:   15-25%  raise for tech managers at FreeNow   in Germany. Engineers expected to get a raise later. 15-20%  increase for senior engineers   at a sports tech company in London 15%  increase for a seed-stage startup with remote employees across Europe. GitLab: 15%  base increase for engineers in the Security business unit at GitLab. The security org re-benchmarked their salary against the market and did an out-of-cycle increase for everybody currently working there. 15%  increase or ¬£10K increase (whichever higher) at a FinTech scaleup in London ONLY IF people commit to coming to the office 4 days/week eBay: 15%  base increase at an eBay subsidiary in one of the countries in Europe in Aug 2021. 15%  base increase for all remote developers working in countries like Romania, Serbia by a London-based startup 14%  raise for engineers at a UK bank subsidiary effective 1 Nov. This was after management told engineers in June there will be  no  raises until Apr 2022, answering questions. 25 engineers, mostly seniors (20% of staff) left over the summer and fall, most quoting unhappiness with pay, promoting this emergency measure. Mendix: 10-30%  increase for software engineers.  ‚ÄúLikely because stock from acquisition by Siemens vested this month (after 3 years) and lots of people are leaving (two founders, two other C-levels).‚Äù 10-20%  increase for Tech, R&D+Ops employees in a Series B startup in Israel Booking.com: 10%  base increase for almost all software engineers at Booking.com in the Netherlands and the UK.  ‚ÄúSo Booking decided two days ago to randomly give a flat 10% raise to all Software Developers, SREs, EMs, Production Engineers, Data Scientists in Analytics and security engineers. However, ML Engineers, Product and Design were left out of this raise.‚Äù ‚ÄúNow a senior developer at Booking.com, in Amsterdam, is making 100-130k base, 20% bonus, $40-$60k RSUS refreshers.‚Äù Trivago: 8% increase  in Dec 2021 for all staff. This is on top of the regular, annual increases happening in Q1 of every year. Adyen: 5-20%  base increase for all software engineers at Adyen in the Netherlands   July-Aug 2021. Engineers with less experience closer to 15-20%. Senior engineers closer to 5%.  ‚ÄúMost juniors got a 10-20% bump‚Äù 5-20%  increase for a Series D FinTech in London: mid-level: 5-10%, senior: 10-15%, staff: 15+20%. 5%  spot increase in a Series C   company with EU engineers (UK, Finland & other offices) Coolblue: 4-10%  increase at Coolblue in the Netherlands, based on seniority. Juniors: ‚Ç¨1,608/year increase (‚Ç¨125/month + 8% holiday). Seniors: ‚Ç¨6,480/year increase (‚Ç¨500/month + 8% holiday). Principals: ‚Ç¨9,720/year increase (‚Ç¨750/month + 8% holiday) 2%  spot increase at DMG Media for all staff in the UK (Daily Mail, Metro etc) US & Canada FactSet: 20-25%  one-time adjustment for Software Engineers 2 & 3. FactSet is a US-based financial institution. Edios: 20% less working days : dropped to a 4-day workweek but kept the same salary for everyone (basically, a 20% raise given 20% less workdays for the same salary). Edios is based in Canada. Accenture: 15-25%  base salary increase at Accenture in parts of the US, in certain groups in June this year. Part of marketplace adjustment increase. 15-20%  increase for remote engineers at a Series B startup across the US (Midwest, Texas etc) 10-15% increase for all engineers  at a Series B company with most employees in NYC 10%  increase at bootstrapped Aha.io ,  a SaaS company with around 200 employees, mostly US.  Details in a public post. 5-10%  spot raise + doubling profit sharing at a non-VC funded company in the Midwest (<100 people)  ‚ÄúI was already fairly compensated, in my opinion, but the reason given was the current state of the market. Over the summer we had a couple people leave, and compensation did play a role.‚Äù Ubisoft: 5%  minimum raise at Ubisoft, Canadian studios 5%  spot raise for tech at a publicly traded FinTech company Employees being pulled up to the bottom of increased bands: common at many tech companies Global $100K-150K  one-off stock grant   (vesting over 4 years)   for Staff+ levels for both existing employees and new offers at a recently IPO‚Äôd tech company 15-25%  raise + equity bump at a Series F company with US, EU, Asia offices.  ‚ÄúI received a 20% salary raise and about a 12% bump in options. My teammate received a salary bump of about 17%.‚Äù. Capital One: 12%  base increase for engineers in July. New Relic: 8%  base increase in June, plus $10-25K RSU for software engineers. They predicted attrition if they did not act. In the past years, the base increase was 2%.  ‚ÄúEven with the increases we've still had very high attrition due to this market.‚Äù 7%  global raise for remote engineers at a Series B company with US and EU remote engineers. Another 10-15% raise planned based on attrition risk and location. Amazon: $3,500  spot-bonus: several employees were granted 1 RSU (trading at $3,500), vesting immediately. Targeting those at high attrition risk. ServiceNow: 4-10%  increase .  IC2s got 6% increase AMEX: 3%  base increase on top of the regular annual increases, globally. Policy to allow counter offers up to +30%  without heavyweight process at several mid-size companies Red Hat  to hire fewer senior engineers to control costs ( source ) ‚ÄúAn internal email sent on Wednesday by Timothy Cramer, SVP of software engineering, to Red Hat managers directs hiring requisitions to be made at a lower level of seniority than usual.‚Äù Asia & Australia 60%  increase   for people planning to resign, plus 10% retention bonus for 3 years in Bangalore, India at a non-tech company facing high attrition PhonePe: 40%  increase for all tech staff at PhonePe, a payments company in India Atlassian:  20-25% base + more equity for certain people. ‚ÄúWas done in a fairly indiscriminate way‚Äù 15%  base increase for engineers working remotely in India from by an EU-based startup $1,500  (100K INR) retention bonus for India engineers at a Series B company in exchange to agree to stay until 2023. Paid out in two installments in 2022. Latin America 50%  raise in Chile   for software developers working remote at a company to fight attrition. They now make $100K: this was $65K beforehand. Amazon Brazil: 10%  increase for all engineers Africa 20%  increase   for remote senior engineers in Cape Town, South Africa at a Series B US company Counteroffers 100%  increase on a counteroffer in India, at a Series B startup to retain (and match new salary) 80%  raise via increased stock   for a staff engineer who received an even higher offer from a pre-IPO company desperate to recruit them, very specifically due to specialization 40%  raise via base salary + increased equity   at a pre-IPO company in the Netherlands for a key tech lead, after they got an even higher offer from a FinTech startup 30%  raise in counter offer   for a staff engineer at a German car industry company, after receiving that much higher of an offer. 25%  as a remote engineer working remote, for a US company: ‚ÄúI told my boss that there‚Äôs a big difference between what the market offers, and what I‚Äôm being paid‚Äù Location-independent remote pay Etsy  is moving to location-independent pay per country over the previous location-based one. Ranges are pegged to metro area locations This means in the US they‚Äôll pay a single SF/NYC pay scale regardless of location, Canada pegged to e.g. Toronto/Vancouver rates. Reddit and Spotify  have done the above earlier the year RevenueCat  (Series A) is paying global location-independent salaries More well-funded seed & Series A & B startups are doing location-independent pay per country No raises - and their impact I‚Äôm assuming that the majority of companies have not done off-cycle adjustments. Here are a few companies where I have talked with managers on the impact that holding off on one-off adjustments has had Meta (Facebook), Google, Apple Uber, Lyft, Microsoft  not doing out-of band adjustments Impact: upleveling is far more common during interviews, in the opposite of what you‚Äôd expect based on The Seniority Rollercoaster I have confirmed examples from the above companies on candidates being offered a higher level when those companies could not match compensation expectations Klarna, RedHat, Solarisbank  (for years: leadership said they are considering) Impact: attrition, very challenging to hire, heavy upleveling Dutch scaleup expected to IPO the next year  where all engineers are issued equity (and value has gone up). Market salary is now well below what they could get elsewhere. CEO on all-hands:  ‚ÄúWe‚Äôre aware of the market but we don‚Äôt think we should be competing with companies that are more aggressive towards recruiting)‚Äù Impact: none right now (stock increase + IPO coming up), likely increased attrition after IPO Series B US company:  ‚ÄúRight now we are ignoring the fact that the hiring market is hot. Many good candidates we want just refuse to join after hearing our salaries. From what I see the company is now lowering the hiring bar to keep salaries the same. Also no stock refreshers.‚Äù I wrote the article  The Perfect Storm Causing an Insane Tech Hiring Market  in September, when I suggested lobbying for one-off compensation increases to get ahead of attrition, responding to this major market shift: ‚Äú Lobby for out-of-cycle increases and spot bonuses . Most nimble companies are giving raises to all their staff. You‚Äôll need to do it at the beginning of the year anyway, but if you wait until then, you will have lost people who would have stayed otherwise. Assume the compensation data you buy is outdated and that the market could be up 15-30% on last year‚Äù Well, it seems plenty of companies acted accordingly this year. Advice for hiring managers:  if your company has not yet made off-cycle compensation changes, you‚Äôll likely have to make a case for a larger than usual raise for the new year. Start engaging your leadership now. The market has moved exceptionally the past 12 months: exceptional raises will be necessary to keep pace with it, and not risk attrition due to finances. Subscribers will find more advice in the next section. Are you a hiring manager looking to budget for next year? üîí  Subscribers have access to more in-depth data points that can help with budgeting  and determine compensation levels for software engineers - so you can stay competitive in the middle of this very hot market. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/hiring-a-diverse-engineering-team/", "title": "Hiring (and Retaining) a Diverse Engineering Team", "content": "\n             Stories from six engineering leaders who succeeded in building and growing diverse teams What are hiring approaches that help with hiring and growing a more diverse engineering team?  Such an important question, and one that more hiring managers should ask. Gender, race, educational background and other forms of diversity are important. The experience of several leaders I talked with ‚Äì as well as several studies ‚Äì show that diverse teams  perform better  and innovate more. Diverse workplaces, in my observation, also tend to be more inclusive and equitable; nicer places to work at, of which you can be proud and where you feel a strong sense of belonging, whatever your background. So how do you hire more diverse teams? In this issue, I hand it over to managers in tech who have done this successfully, to hear it straight from them. From top right: Sarah Wells, Samuel Adjei, Franziska Hauck, Uma Chingunde, Gabrielle Tang and Colin Howe This article was originally published in the  Pragmatic Engineer Newsletter . In every issue, I cover challenges at big tech and high-growth startups through the lens of engineering managers and senior engineers.  Subscribe to get weekly issues . Many subscribers expense this newsletter to their learning and development budget. Building a diverse team at the Financial Times Sarah Wells  started at the Financial Times (FT) engineering department in 2011, as a developer. Ten years later, she is a Tech Director. The Financial Times is a success story for how they improved diversity over time. As I was looking to learn more about this issue, almost everyone suggested I talk with Sarah, who was in the middle of the effort. Here‚Äôs her story in her own words: ‚ÄòWhen I joined as a Senior Developer, I was one of 4 or 5 women in the development team. The CIO was a woman, but everyone else more senior than me was a man, including all director-level roles and all of our architects. I didn't have any role models for senior women in engineering, I had never worked with any woman engineer more senior than me. ‚ÄòNow, across permanent engineers in London we are around 35% women and non-binary, and that is pretty evenly spread at all levels. And for our CTO's direct reports, the Tech Leadership Group, it is men who are in the minority. ‚ÄòI'm talking about gender diversity here because it's the only aspect I can say much about from that period; we didn't have data about the less obvious aspects of diversity. That doesn't mean it's the most important, although gender diversity is perhaps the one we've made most progress in improving. ‚ÄòThere are two aspects that I think matter if you want a diverse team. The first is whether you can hire people. The second is whether you can keep them. 1. Hiring. ‚Äò Can you hire people from underrepresented groups? Here‚Äôs how we at the FT approached this. Visible diversity . ‚ÄòIt's a risk to join any new company. I am more likely to believe your company is inclusive and that I will like the culture, if I can see people who look like me in leadership positions. That might be because those people are speaking, or on Twitter/LinkedIn. It could also be because all your public presence as a department makes sure they are visible. Forget pictures of ten white men and a dog on the ‚ÄòAbout‚Äô page for the company. Job specs, make sure they are inclusive.  ‚ÄòDon't ask for a long list of technologies. Don't talk about beer pong. Focus on collaboration and learning, rather than ‚Äòcrushing it‚Äô. Run job descriptions past a range of people. Ask them, \"is there anything here that would spook you?\" Personally, I applied for Principal Engineer at the FT, despite a job spec that talked about being a software engineering ‚Äòrockstar.‚Äô I hope we wouldn‚Äôt use that terminology now! Networking. ‚Äò Ask people to use their social media ‚Äì Twitter, Linkedin ‚Äì to share job postings. Be aware that people's networks can look a lot like them. Be prepared to say you want to see applications from underrepresented groups. Don't assume everyone has lots of free time to spend completing a coding project.  ‚ÄòPeople from underrepresented groups often have more caring commitments that take up their time. Be clear about the process, so people know the timescale and the commitment needed from them. Let them know what they can expect in return. Make sure interviewers aren't all white men.  ‚ÄòBut be aware, when you don't have many people from an underrepresented group, ensure they don‚Äôt spend all their time interviewing. You also want to avoid the few underrepresented people being 'the token interviewers' in an interview. I still remember the first time I was invited to help out at an interview for a different team, where the person made it clear they invited me for my knowledge of Java and not because they needed a woman there. This was super refreshing! Partner with organizations offering non-standard routes into coding. ‚Äò We have had a lot of success recruiting through organisations like  Code Your Future  (training refugees) and  Makers Academy  (coding bootcamp). Many of the people who came through these routes have stuck with the FT. We have at least one Principal Engineer who came through one of these programs. 2. Retaining.  ‚ÄòOnce you have hired diverse candidates, can you hold on to them? Here are areas we focused on: Stay inclusive and give opportunities to underrepresented people.  ‚ÄòYou keep people by being an inclusive place, and one where historically underrepresented people get opportunities and promotions. This is essential, because if you're starting from a pretty non-diverse team, you will probably find it easier to recruit at the junior level; fixing a lack of diversity can be a long term project. Data is crucial.  ‚ÄòYou need to know how you are doing, and to see the trends. Gender diversity was the first thing we were able to track, because this was where we had some data. We have since amended our HR systems to track other aspects of diversity. Make sure the options you offer make sense to people, get advice on the language to use. Explain why you are collecting this information because people will be suspicious. Use the data, but do so intelligently . ‚ÄòOn our promotion boards, we look at the data to make sure we aren't biased in who gets a promotion or a pay rise. We compare the minimum, average and maximum for each grade. We have been doing this for nearly four years now. It takes time to fix things like this, but I am confident we have been moving in the right direction. Measure what matters to you as an organisation.  ‚ÄòIf you don't have any OKRs relating to culture, diversity and inclusion, you are sending a message to your teams that those things aren't important. Our recently departed CPIO,  Cait O'Riordan  deserves a lot of credit here. Several years ago, she set a clear, ambitious and public goal: \"Gender parity in our Product & Tech department by 2023\". Our OKRs reflect this at an annual and quarterly level. For example, we might have something like: \"50% of the people we hire this quarter will be women, trans or non-binary\". Show diversity with everything you share.  ‚ÄòLook at the diversity of people writing for your tech blog and pictured on your blog posts. If it is overwhelmingly men displayed on all these channels, then you have to be intentional on your public image and reflect more diversity. Training . ‚ÄòOffer people training, for example on neurodiversity and mental health. Make sure white men and your leadership team attend. It‚Äôs easy for senior people with packed calendars not to prioritise this, but it sends the message that these topics are not a priority. Stand up for people . ‚ÄòIf someone gets spoken over, make space for them. For example, by saying ‚ÄúI think Clare has a point that I‚Äôd like to hear.‚Äù Set up employee support groups.  ‚ÄòWe have several of these, such as: FT Embrace : to inform and educate individuals about Black, Asian and minority ethnic experiences and create and maintain a supportive environment for all. FT Access : to improve attitudes and provide a positive working environment for people with disabilities. ProudFT : to help build a workplace where LGBT+ individuals can truly be themselves. FT Families : to support families, carers and parents-to-be, across the FT Group. FT Women : to connect, support and empower women across the Financial Times with the goal of promoting gender parity. FT Mental Health : to promote awareness of mental health issues, establish mental health support within all departments and provide clear information and resources for FT staff. ‚ÄòSponsor these groups at the highest level, for example people from the board. Recognise the work of running groups takes up time, so make that time available. And consult groups about things that have an impact on people from that group. For example, ProudFT was consulted on our trans-inclusion policy. ‚ÄòBe prepared for friction and difficult conversations as you go from a monolithic culture, to a more diverse one,‚Äô   Sarah says. She closes with this advice: ‚ÄúRealise that when you are striving to make things more equal, a white man might feel his opportunities have shrunk. So you need to explain why this is a positive change, repeatedly. You are not lowering the bar, you are fixing the things that stopped you from being able to attract some great candidates.‚Äù Increasing diversity at Charlotte Tilbury Samuel Adjei  is currently a Software Development Manager at Amazon. He joined Charlotte Tilbury in 2020, right as the UK went into lockdown. After joining, he increased the diversity across his engineering team by 26%. 80% of new hires were women, the rest non-white men, hiring a mix of frontend and backend engineers. Here‚Äôs the approach that worked for him: ‚ÄòIncreasing our pool of diverse candidates was the first step. I was straightforward with our internal recruitment team and external agencies on this goal and challenged them to only present a balanced mixture of candidates. I made it clear that I did not want any ‚Äúbox ticking‚Äù. This means that I wasn‚Äôt going to interview a female candidate or a black candidate just because of that reason. ‚ÄòMy Head of Engineering was supportive, which was important. Ensuring that both recruitment and my management chain were both in, was key. ‚Äò It‚Äôs easier to attract diverse talent if an organisation invests in seeking out ‚Äúdiverse‚Äù leaders . I‚Äôm speaking as a black man in technology, who is an EM and currently at a FAANG (Facebook, Apple, Amazon, Netflix, Google) company. ‚ÄòI‚Äôm a minority in this space for sure, and it attracts a more balanced talent pool. I understand the hurdles of the industry. This means my interview style and approach to hiring is probably different to my white male counterpart. By no means does that mean that it‚Äôs easier, though. It‚Äôs just different, and that difference resonates with candidates within this ‚Äúdiverse‚Äù pool. ‚ÄòThese are things I would recommend for leaders who are serious about hiring a more diverse team: 1. Be flexible.  ‚ÄòTry to understand what the candidate could be facing, or has faced at interviews. Leave your bias at the door. You need to adapt your ‚Äúpitch‚Äù to ensure it resonates with the candidate based on their own experiences, as opposed to your assumptions. Leaving your bias at the door is easier said than done. Here‚Äôs a few approaches Samuel outlined that you can take to do so: Know that they will be less experienced at interviewing . ‚ÄòUnderstand that as a minority or woman, they‚Äôve likely had less interviews than peers from non-underrepresented groups. Know that they have likely had more bad interview experiences such as micro-aggressions or women being ‚Äòmansplained‚Äô to. Create an interview environment that allows them to showcase their skills . ‚ÄòAsk questions in ways that resonates with the candidate. No two candidates are the same. Use your emotional intelligence, as a leader. Evaluate each candidate as an individual over comparing.  ‚ÄòAvoid comparing what company they worked at, what education they had, or what bootcamp they came from. Focus on the only question that matters: all things being equal, does this person meet requirements for the job? Be conscious of the language you use.  ‚ÄòEven small things like referring to groups of people as ‚Äúguys‚Äù can rub people the wrong way. ‚ÄòTalk to women in your organisation, black team members, disabled colleagues. Try to understand their journeys. What has worked for them? Use this understanding to shape your interview style and build trust with candidates. Many candidates who accepted offers cited my interview style as a major reason for accepting. In fact, at my last role, all but one candidate accepted offers where I was the hiring manager and interviewed them. 2. Track what is working and what isn‚Äôt, but don‚Äôt put a number on it.  ‚ÄòI never set out to increase our diversity by a set percentage. I set out to increase our diversity, period. 'Look at what is working and what is not. Tweak your approaches based on your level of success. This tweaking applies to your recruitment team and recruiters as well. Have frank conversations with them about approaches that are bringing results, and ones that are not. Deep-dive into the data where possible, and make changes based on this information. 3. Understand that improving diversity is a journey.  ‚ÄòThere is no value in spending all the time and effort trying to increase the diversity in your team, just to fail at onboarding or providing career support to a newly hired engineer. ‚ÄòWhere do you need to make changes to your onboarding? How can you improve your team culture? How do you make these changes to create an environment where people from all walks of life can thrive? If your current employees are happy, they will gladly refer their peers to work here. Diverse candidates typically know more diverse candidates, and therefore your current employees will help create a more diverse pipeline.‚Äô Closing the gender diversity gap at SAP Signavio Franziska Hauck  is a People Lead at SAP, in Berlin. She improved the diversity ratio from 20% up to 40% on her teams in her first year, as they embarked on a growth phase. She shared how the team bought into the idea of balancing gender diversity from when she started: ‚ÄòI started to lead a team with members from several countries that later split into two teams. When I took on this team, they shared how proud they were of this diversity; a great stepping stone! They were motivated to continue on this path. However, this team was one with only one woman, everyone else men. The team expressed how they wanted to see a more equalized gender ratio, especially with a hiring phrase coming up. ‚ÄòMost the team were involved in the interview process and it was imperative to me that they reflect on their conscious and unconscious biases. All interviewers participated in interview training. I also gave workshops on positive communication and providing feedback. In 1:1 coachings, I positively challenged and encouraged team members. ‚ÄòIn my hiring, I make it a practice to consistently challenge my bias. Our talent acquisition team does the same and they are motivated to increase diversity. This combination of both the hiring manager and the talent acquisition team being bias-aware reduced the proportion of already overrepresented groups in most of our pipeline. ‚ÄòStill, it‚Äôs hard to escape the reality of the market. The more senior a position, the harder it can be to directly interest candidates from underrepresented groups. Hiring women candidates of a higher seniority, in my case, has mainly worked via referrals from my own and team members‚Äô networks. ‚ÄòThe actual work begins after the hiring. Ensuring psychological safety on the team. Making sure that everyone, regardless of background and perceived markers, feels comfortable giving feedback and positing challenging ideas.‚Äô I asked Franziska which approaches worked in this setup, and why she thought they were efficient. ‚ÄòTo change an existing system, one single approach is not enough. Instead you need to take a combination of various approaches,‚Äô she said. 1. Have a strategy. ‚Äò We introduced a department-wide hiring and people strategy, where we defined what we mean by diversity, and set our high-level goals. With the strategy set, all objectives and measures can be derived from that. 2. Unconscious bias. ‚Äò Every person from an underrepresented group has experienced some aspect of unconscious bias and every person has unconscious biases. What can we do about it? ‚ÄòRecognize and question your own biases, consistently, at every opportunity. A good example is ‚Äúmeditating‚Äù about known biases before you enter the interview as a hiring manager. For example, ask yourself: ‚ÄúAm I hiring this person because I like them or because they‚Äôre qualified, or both? Why do I ascribe a lower technical acumen to women than to men?‚Äù ‚ÄòBias can, to a certain degree, be quantified. Run a salary survey: are people of overrepresented groups paid more? Assess the outcome of hiring processes by gender: are men, on average, assessed better? 3. Retain women and minorities in tech.  ‚ÄòIt is sad but true that highly-educated women leave tech sooner. I wrote more on  how to get women in tech and keep them there , collecting strategies and frameworks to retain women in tech. 4. Invest in allyship. ‚Äò If a team ends up hiring a woman and then her voice isn‚Äôt heard, it won't be long before she moves to another company with better conditions. For context, there are about 2,000 senior engineers in Berlin who use she/her pronouns. Companies simply cannot afford to  not  set them up for success.‚Äô Using structure to drive diversity outcomes at Stripe and Render Uma Chingunde  is the VP of Engineering at Render, and previously headed up the Compute group at Stripe. When I asked about her approach to building diverse teams, Uma started by recalling the structured approaches of Stripe, which she applies in her current role. Render is currently ~20% women in engineering and ~33% company wide, which is above industry average for a Series A startup. ‚ÄòIt‚Äôs a chicken-and-egg problem,‚Äô Uma says. ‚ÄòTo attract people of different backgrounds, you need to start with an inclusive and diverse team. How do you get here? ‚ÄòThere are the tactics you can use that are fairly well-known. Inclusive job descriptions. Running a less biased hiring process. Onboarding people better. A fair performance management approach. Making space for people from different backgrounds and amplifying their voices. ‚ÄòYou need to walk the walk, not just talk the talk. There‚Äôs a lot of theory that you can apply, but are you actually doing so? ‚Äò Implement structure to get the diversity outcomes you‚Äôre looking for.  This was something I observed my former manager at Stripe, Will Larson do very well.  (Gergely‚Äôs note: Will Larson is the author of An Elegant Puzzle, a book I  reviewed and highly recommend  for engineering managers.) ‚ÄòWhat does implementing the structure mean? For example, at Stripe, we noticed that while our university hiring pipeline was diverse, this was not true for our industry-recruiting one. So we put in a structural change, the whole team spent an hour per week in a room improving the diversity of this pipeline. This meant both  sourcing , improving interview processes, and also brainstorming and trying out new approaches. By doing this every week as a conscious effort, we improved the outcome, one step at a time. Importantly, we also tracked the data and saw great results with team composition becoming broader over time. I continue to do this by actively building relationships with people from various backgrounds that I hope to work with some day. ‚Äò A structured approach to internal promotions was key in retaining people from diverse backgrounds.  At most companies, promotions are often done by offering the role to those who were already doing the role. While this process can feel like it makes sense, it doesn‚Äôt offer everyone the same chance. This was an extension of adding structure by surfacing all meaningful opportunities to a broad group of people. It‚Äôs something I have continued to use because it is an extremely valuable tool for any leader. ‚ÄòOne example that applied to me personally was that Will introduced a structured process for defining the opportunity of a role change, to manager of managers. After defining the process, he encouraged various people to apply. As a result, multiple people would apply, including some people who in a previous setting might have not done so. It was also by design not a promotion, but a change in responsibility. ‚ÄòThis process provided legitimacy to many people including myself. In most other organizations, I don‚Äôt think I would have gotten the manager of managers role, but with this process I applied and got the role via this structured approach. ‚ÄòA structured process also provides legitimacy for underrepresented people. Without a process, even if someone from an underrepresented background is promoted, there‚Äôs often a shadow of doubt among others. People think ‚Äúdid they get the role because of their skill, or was it only because of their background?‚Äù A transparent process with clear rules for everyone removed this kind of doubt. ‚Äò Reflect on this, how do  you  go about surfacing opportunities in your team?  This can be anything from deciding who interviews the next engineering manager, to who will lead the next project. Do you just tap someone on the shoulder and offer them the opportunity, or do you run a process where you invite people to apply? And even more importantly, once people take the opportunity, how do you make these people successful? ‚ÄòMany of these decisions might seem inconsequential, but over time, they add up. If you keep picking the same people you create a culture that can seem like playing favorites, or as developing a bias towards certain people. Uma closed with this piece of advice: ‚Äò The biggest pitfall of running structured processes is the friction it causes.  Asking people to step up for an opportunity is time-consuming. It‚Äôs tempting to think ‚Äúlet me sidestep this process just this once, and pick David for this opportunity.‚Äù Whenever you find yourself in this position, take 15 minutes to be more conscious about picking people. Write down a list of candidates, why you‚Äôd pick them, and what they would gain from this opportunity. You won‚Äôt always be able to follow a structured approach, but aim to do this 90% of the time.‚Äô Hiring a more diverse team at Prolific Colin Howe  is the former Head of Engineering at London-headquartered Prolific. Here, the team grew from 7 people to around 20, in just under a year. About 50% of the new hires were from underrepresented groups; women, LBGT+ and non-white people. Here‚Äôs what Colin shared on the approaches that helped hire more inclusively: Sourcing from different backgrounds . Colin asked the sourcers not just for underrepresented candidates, but those coming from different backgrounds to those already on the team. If you want to hire a truly diverse team, you cannot just hire computer science graduates from top schools. You need to try harder. Be more lenient at the screening stage for underrepresented people.  As Colin put it, ‚Äòthe screening stage is about minimising the chance of interviewing candidates that fail the interview. I'd happily absorb more risk and have more failures, if it means we see more people with non-traditional profiles.‚Äô Inclusive job adverts . ‚ÄòWe made sure our job ads and collateral weren't putting people off. We minimised the number of things that were \"requirements\" and removed additional requirements entirely. I think it's fairly well documented now that requirements put people off if they come from less advantaged backgrounds.‚Äô Set up candidates to succeed in interviews . ‚ÄòFor example, we‚Äôd give people topics to think about beforehand. So in the interview we‚Äôd talk to them about something they've thought about, rather than putting them on the spot. We aimed to judge candidates for their best, not for their mistakes.‚Äô The importance of ‚Äòbelonging‚Äô to retain diverse hires Gabrielle Tang  is Director of Community at  SheSharp , an NGO in the Netherlands, fostering more diversity in the tech industry. SheSharp has a strong focus on gender and intersectional diversity, and provides opportunities and support for underrepresented demographics to explore and accelerate careers in tech. SheSharp‚Äôs community and mentorship initiatives target improving inclusivity and advocacy throughout the industry. Gabrielle has grown, coached, and managed several diverse teams over the years in tech companies, including Booking.com and ASOS. I asked her what she‚Äôs learned about diversity over time and Gabi started by sharing her personal journey: ‚ÄòI have been in the minority since I began studying for my software engineering degree. The joke at the time was that if there were more than 5 women in there, we had the wrong room. Additionally, as an Asian woman, I always felt different and like I didn't fully belong, which led me to adapt to behave more like everyone else. I didn't recognise that I did this and that my experience wasn't the same for others, until much later in my career. ‚ÄòImproving the sense of belonging is key for hiring and retaining people from underrepresented backgrounds . Improve the pipeline with more diverse people; interests, education, background, abilities are all important. After those people join a company, it is a sense of belonging based on who they already are that keeps them there. ‚ÄòThese are my main learnings from hiring and managing diverse teams for years: 1. Be clear on  why  you want to hire diverse teams.  ‚ÄòMore often than not, people cannot explain their motivation for building diverse teams, beyond they 'know diversity is good‚Äô. This argument is not strong or relatable enough to motivate people. Without motivation, all the talk about improving diversity does not turn into real action. Make it clear  why  diversity is important and  why  others should be motivated to help with this effort. Communicate  what  initiatives the company and the team are taking to achieve these outcomes. 2. Diverse teams attract underrepresented people.  ‚ÄòPeople who are underrepresented want to see people similar to themselves, we don‚Äôt want to be the sole minority. Start by ensuring that you have a diverse hiring panel. Underrepresented people can have similarity (or affinity) biases toward other underrepresented people, relating to their own experiences. This in turn can counter biases other members of the panel have. 3. Be empathetic and curious.  ‚ÄòI have never felt more seen than when a manager acknowledged that my path had been hard, being both female and Asian. Listen to people who are different from you to gain that understanding, even if that means going beyond your immediate circle. I have found mentorship relationships to be an effective way of doing this, based on feedback from mentorship programs that I have set up and been involved in. 4. Recognise the value that diversity brings . ‚ÄòDiverse teams may present more of a challenge when it comes to communication and collaboration. However, they make up for this with more creativity, better ideas and better outcomes. The challenge with diverse thinking is that this equals conflict, or disagreement. To benefit from diverse teams, it is important for leaders to cultivate an inclusive environment that supports differences and conflict, and is approached with curiosity. Otherwise, there is a risk of building a monoculture in which the team just adapts to thinking and behaving the same way.‚Äô Advice for hiring managers with a privileged background I asked Franziska Hauck about advice she would give to hiring managers from a privileged background, such as myself. How can we become better allies and hire more diverse teams? Here are her thoughts on this topic: Question yourself and reflect frequently . Realizing that you have internalized bias is a painful process. It hurts. It‚Äôs also a catalyst that will set free a whole lot of energy. And you will need this energy to change the system. Be empathetic.  Just because you have experienced something does not mean that someone else has not. Listen, then reflect, and only when you have done both, should you take action. Speak up and out.  You have power and you have privilege. Use it to make good changes. Learn how to read the room by being empathetic. Whenever you observe something that is not okay, give feedback and provide impulses. Your voice  will  be taken seriously. Be prepared to step back from privileges.  This is a tough one. However, by doing so, you create opportunities for those who would have to go the extra mile to even get near them. Imagine how powerful that is. Source actively . Ask, promote, push. Research good sourcing channels and develop knowledge about them. Review your job ads and process . If you want ‚Äústrong‚Äù candidates with ‚Äú10+ years of experience‚Äù and ‚Äúhigh resilience,‚Äù the chances are high that you will not hire a diverse team. You can also think about slimming down interview processes and giving candidates options. Train people . Several companies have set up internal training programs or bootcamps, or cooperate on vocational education like training or dual studies. Design inclusively and accessibly . If your processes, your organization and your product have accessibility at their core, this will attract great talent which might otherwise not have crossed paths with you. Takeaways You  can  hire and you can retain diverse engineering teams. All the stories above are successful examples of this. Is it easy to do? No, it takes deliberate effort and time. While every contributor‚Äôs story is different, a few themes repeat over and again. If you only take three things away from everyone‚Äôs experiences above, these are the ones I‚Äôd suggest: Underrepresented leaders make a difference.  If you don‚Äôt have managers from diverse backgrounds, you will have a much harder time attracting diverse candidates. Make it a priority to hire and to grow underrepresented people into leadership positions. There are lots of tactical wins you can start using now.  Inclusive job adverts, panels with underrepresented interviewers, setting up candidates to succeed on interviews, bias training, partnering with organizations, and many other things listed in this article. You can already choose approaches to put in place that make your hiring process more inclusive. Use structure to drive diversity outcomes.  Instead of only hoping that people do the right thing, create processes that make it easier to do so. Define hiring processes that result in more hires from underrepresented backgrounds and structured promotions processes and structuring of opportunities to retain them. You need a strategy on diversity if you  really  mean it.  Tactics only go so far, and underrepresented people will leave if they don‚Äôt feel supported. How can they feel supported if there‚Äôs no clear strategy or goals related to diversity? If you‚Äôre at a director or-above level, drive the effort to define and execute this strategy. If you‚Äôre a manager or engineer, push your leadership to do so.  For example, forward them this article to show what‚Äôs possible! Thank you to the leaders who contributed to this article. I recommend following them on LinkedIn and Twitter: Sarah Wells , Technical Director at the Financial Times ( LinkedIn ,  Twitter ) Samuel Adjei , Software Development Manager at Amazon ( LinkedIn ,  Twitter ) Franziska Hauck , People Lead at SAP ( LinkedIn ,  Twitter ) Uma Chingunde , VP Engineering at Render ( LinkedIn ,  Twitter ) Colin Howe , former Head of Engineering at Prolific ( LinkedIn ,  Twitter ) Gabrielle Tang , Director of Community at SheSharp ( LinkedIn ,  Twitter ) \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/holiday-tech-book-recommendations/", "title": "Holiday Book Recommendations for Software Engineers, Engineering Managers and Product Managers", "content": "\n             Books perfect as reading or gifts during the end-of-year break for those working in tech. More than 100 book recommendations. I‚Äôve always found books are an underrated way to learn something new. Great books contain years of hard-earned experiences compressed into what you can read in hours. However, you do need to give hours-long attention to them. This allows books to convey ideas that shorter-form content like Twitter, blogs, or even this newsletter can not do. With the holidays coming up, it was me who asked  the question on Twitter : \n \n What are the best books you've read as an engineering manager or software engineer this year? Books that taught you something new related to your job, provided inspiration, ideas. ‚Äî Gergely Orosz (@GergelyOrosz)  December 13, 2021   \n \n People replied with titles that taught them something new related to work, provided inspiration or ideas. I‚Äôve collected the most-mentioned books with a quote from a reviewer - either the person recommending it on Twitter, or one from one of the most helpful reviews. ‚≠ê I‚Äôm marking books that are also my choice with a star. These are standout books I've read. Note that none of the below links are affiliate links or sponsored ones. See  my ethics statement  on the lack of such links. This article was originally published in  The Pragmatic Engineer Newsletter .  Subscribe here  to get articles like this in your inbox, every week. It's a pretty good read and the #1 technology newsletter  on Substack .  Books by genre Software engineering careers Software engineering interviews Software engineering Software engineering: specific domains or technologies Engineering management Engineering leadership and organization design Product and strategy Leadership and business Software engineering careers The Software Engineer's Guidebook  by me, Gergely Orosz. Published in November 2023, after four years of writing.  More details on the book . The Staff Engineer's Path  by  Tanya Reilly . ‚≠ê I reviewed the book before publishing and this is my recommendation - as also printed in the book: \"If you're a senior engineer wondering what the next level is, a staff-level engineer or a manager of staff engineers, this book is for you. It covers so many of the things no one tells you about this role-things that take long years, even with great mentors, to discover on your own.\" Staff Engineer  by Will Larson ‚≠ê ‚ÄúIncredibly helpful in both better understanding how to operate at Staff+ and how to better support the sr engineers on my team as they move toward those roles.‚Äù -  Luis Ramiez , engineering manager at Loom Building a Career in Software  by Daniel Heller \"Written by my former colleague at Uber. I like the opinionated and concise advice Dan presents across a variety of topics.\" - my take The Effective Engineer  by Edmond Lau \"This book changed how I approach problems and prioritize work. I've recommended it to everyone I work with.\" The Pragmatic Programmer  by David Thomas, Andrew Hunt \"I am reading in small chunks to give me time to thoroughly digest each nugget. It should be required reading for all programmers.\" The Software Craftsman  by Sandro Mancuso \"This author is a passionate developer who walked a long journey to mastery and is sharing with us all the real life stories, gotchas and mistakes that he (or people he worked with) made along the way.\" The Passionate Programmer  by Chad Fowler \"This book was a mixed bag of discussions about becoming a passionate programmer and advancing your career. Some of the tips were useful, while others were pure anecdotes from the author, not backed by much evidence.\" The Missing README  by Chris Riccomini and Dmitriy Ryaboy \"The Missing Readme covers all the practical aspects of day-to-day engineering that are not covered in most CS studies or technical books.\" Growing as a Mobile Engineer  by Gergely Orosz ‚≠ê - I wrote this book. \"This book concentrates on the career strategies instead of the technologies. It helps to connect the existing parts of a bigger mental model in my head.\" Communication for Engineers   by Chris Laffra. Chris was my colleague at Uber. ‚ÄúA great introductory book on communication skills for developers, especially those early in their careers or developers whose career has hit a plateau.‚Äù Software engineering interviews Systems Design Interview : an Insider's Guide by Alex Xu  ‚≠ê \"I've so far not seen good book resources to prepare for the systems design / architecture interview. This book from Alex Xu is the most promising one as of yet.\" - my take.  Read my full review here. Grokking Algorithms  by Aditya Bhargava ‚≠ê \"A great intro, or refresher for all the  algorithms that you'd likely need to use at a tech company .\" - my take Cracking the Coding Interview   by Gayle Laakmann McDowell \"A classic to prepare for the data structures and algorithms interviews. The author, Gayle, trains large and small tech companies on  how to do coding interviews well : she did this at Uber, where we made changes following her help.\" - my take A Common-Sense Guide to Data Structures and Algorithms   by Jay Wengrow \"This book got me to finally understand how quicksort works. I have a CS degree and a decade of work experience and to this day there was no resource that explained sorting as well as this book. I highly recommend this for interview prep.\" Software engineering Software Design: Tidy First?  by Kent Beck.  ‚≠ê My new favorite book on how to refactor software. 30 simple, yet powerful ideas in a book that wastes no time when you read it.  A Philosophy of Software Design   by John Ousterhout  ‚≠ê ‚ÄúThere are few books that discuss software design in a simple and approachable way, while leaving the reader novel and practical concepts to use. A Philosophy of Software Design is a standout and recommended read for this reason.‚Äù - my take.  Read my full review here . Designing Data Intensive Applications  by Martin Kleppmann ‚≠ê \"The most practical book I've found so far on distributed systems. It covers the different large scale concepts - both those that I've gone through in this post on distributed systems - together with real-world examples\" - my take The Art of Doing Science and Engineering   by Richard W. Hamming. A book written by the mathematician and computer science legend, and inventor of the Hamming code and Hamming distance. This book looks at the fundamentals of engineering, as well as predicting the likely future of the field, including how AI will evolve. Published in 1996, the book is surprisingly relevant ‚Äì I found myself questioning how I look at software engineering, as I was reading this book. Effective Software Testing   by Maur√≠cio Aniche. A pragmatic overview of automated testing approaches. Software Engineering at Google  by Titus Winters & others.  Read it for free here. \"Not targeting on algorithm, language, tools or libraries, it focuses on ‚ÄúSoftware Engineering‚Äù as a system, i.e., stuff that is not taught at any school. The book disambiguates ‚Äúprogramming‚Äù from ‚Äúengineering‚Äù, and walks through the hardest engineering challenge - how to scale.\" Understanding Distributed Systems   by Roberto Vitillo \"Fills the void between the deep theory and the 'interview preparation' focused books. The book walks through practical concepts like failure detection, replication, scalability, resiliency, and operating large systems. It's the book I'd recommend to start with if you have less hands-on experience with distributed systems.\" - my take. Working in Public : The Making and Maintenance of Open Source Software  by Nadia Eghbal ‚≠ê \"The book gives a nuanced overview of the many communities and economics of open source, from the idealistic communities of 30 years ago that we usually think about to the modern GitHub era.\" The Programmer‚Äôs Brain  by Felienne Hermans. ‚ÄúThe book shows and explains studies about what happens when we read and write code and what we can learn from it.‚Äù -  Jerry Erbs , developer Seriously Good Software  by Marco Faella \"It‚Äôs quite a good book about how to design a simple system and improve it from different perspectives.\" Refactoring  by Martin Fowler \"For those who don't know what to do when handed a bunch of legacy code, but don't know where to start, this book is for you.\" The Timeless Way of Building  by Christopher Alexander ‚ÄúDiscovering this book has changed how I think about building software more than anything I've ever read before it.‚Äù -  Greg Hynds , software at Tesco Modern Sofware Engineering  by David Farley ‚ÄúI could have only read one book in my whole career so far it‚Äôd be this!‚Äù -  Lewis Greenway-Jones , software engineer at Zoopla Thinking in Systems   by Donella H. Meadows \"This book so simply and elegantly explains any and every problem, scenario, and reality out there. Once you read and understand it (which is so easy because meadows writes so straightforward and beautifully) you can't unsee all of the systems traps and levers that are being used in the real world everyday.\" Good Code, Bad Code  by Tom Long \"If you are a seasoned or a rookie software engineer, you will find a lot to benefit from.\" Kill It with Fire : Manage Aging Computer Systems (and Future Proof Modern Ones) by Marianne Belotti \"Despite the flashy title, this book does not urge to throw away ‚Äúlegacy code‚Äù but does a great job of dispelling the myths around it.\" Implementing Service Level Objectives  by Alex Hidalgo \"This book has transformed the way I view SRE. A definite must read for anyone working in the field.\" The Architecture of Open Source Applications  by Amy Brown & Greg Wilson \"This is a good book about real world software architecture and how it came to be. It consists of essays on many different software systems by the designers of those systems.\" Code: The Hidden Language of Computer Hardware and Software  by Charles Pretzold \"It is truly a book on code, and not just \"how to code\" or \"what to do with code\" but \"what on earth is code\" and where did it come from.\" Dependency Injection Principles, Practices and Patterns  by Mark Seemann & Steven van Deursen \"I thought I knew what dependency injection was until I read this book. The authors broke the concept down to its core and I finally understood the 'why' of DI, not just the 'how'. \" Software engineering: specific domains or technologies Creative Selection : Inside Apple's Design Process During the Golden Age of Steve Job by Ken Kocienda \"This is the real deal, written by an insider (I was also there during that time). This book accurately describes Apple's software engineering during the second Steve Jobs era.\" Androids : The Team That Built the Android Operating System by Chet Haase \"This is a fantastic book; not too technical for non-techy people (but in that case why would you read a book about the inception and delivery of Android?!) and delightful for techier people. I would warmly recommend this book to anyone interested in Android.\" Building Mobile Apps at Scale : 39 Engineering Challenges by Gergely Orosz ‚≠ê - I wrote this book. \"An interesting journey for several important topics we need to tackle during the process of building mobile apps. All backed up by actual examples and references from Uber Engineering team.\" Java Concurrency in Practice  by Brian Goetz  ‚ÄúGoes into sufficient detail about Concurrency and is relevant for most languages, not just Java. Explains non-trivial topics in an understandable manner, something many CS books fail to do so.‚Äù -  Preslav Mihaylov , software engineer at Bottlepay iOS Unit Testing by Example  by Jon Reid \"Outlines why TDD is so important to use prophylactically (in order to avoid headaches during development) and gives concise examples on how to use practically\" -  √ñzg√ºn Yildiz , iOS engineer Software Design for Flexibility  by Chris Hanson \"This is a book for high-intermediate-to-expert Schemers. Extensive general programming experience and/or functional programming experience in, say, Python or Lua, will not cut it in the least\" Container Security  by Liz Rice \"This is the best book I've read on the internal implementation of containers: cgroups, namespaces, and the other underlying linux constructs of containers.\" API Security in Action  by Neil Madden   \"Incredibly detailed and modern approach to all things API security design. This is an industry reference that you will refer back to time and time again.\" Threat Modeling : A Practical Guide for Development Teams by Izar Tarandach \"For those looking to understand the concepts of Threat Modeling and how to integrate it into development workflows, it is really well done. The ability to shift-left these concepts through continuous threat modeling is an important step in helping teams go faster, more securely.\" Kubernetes in Action  by Marko Luksa ‚ÄúOnly read through half of it but it proved to be much much more helpful than 50+ tutorials that I have tried to learn Kubernetes from.‚Äù -  Siddhartha Chowdhury Node.js Design Patterns  by Mario Casciaro \"I have worked with NodeJS for a long time and this book is one of those books that works well for readers of all skill levels.\" Driven : The Race to Create the Autonomous Car by Alex Davie \"This is the book about the origins of the self-driving car industry that I've been waiting for. Alex was at the right places at the right time with the right access and it shows.\" Engineering management An Elegant Puzzle  by Will Larson. ‚≠ê ‚ÄúThe most hands-on perspective on engineering management within a high-growth, tech-first organization, that I have read‚Äù  -  my take,  Read my longer review . Become an Effective Software Engineering Manager  by James Stanier. ‚≠ê ‚ÄúWhat I most like about the book is that it is a \"modern\", 2020 take on engineering management - with the focus being on the \"hard to get right the first time\" parts.‚Äù - my take.  Read my longer review. Engineering Management for the Rest of Us  by Sarah Drasner.  \"Loaded with immediately applicable steps that engineering managers can take today to improve their approach to management and create more productive, happier, healthier teams.\" The Manager's Path  by Camille Fournier ‚ÄúFull of insights, especially for people starting at leadership and management engineering positions.‚Äù -  Andrew Nester , senior software engineer at AWS Resilient Management  by Lara Hogan ‚ÄúAs a new manager, this book was the best introduction I could have hoped for.‚Äù -  Evan Smith , engineering manager at Squarespace Managing Humans  by Michael Lopp \"The book that opened the door for me into engineering management.\" -  Tamara Forza , development lead The Art of Leadership  by Michael Lopp \"The 'small things' are like finely crafted gemstones -- faceted and polished to focus their light of wisdom. Each small thing manages to capture and distill an ‚Äúunspoken truth‚Äù about what makes effective management and leadership (as well as the difference between them!)\" The Making of a Manager  by Julie Zhou \"The first half of the book is excellent and helpful for almost anyone. The second half of the book may be for you if you work at Facebook or a company very much like it.\" Multipliers   by Liz Wiseman & Greg Mckeown \"We've all worked with the opposite of multipliers, what the book calls 'dimishers' and this book gives helpful tips on how to develop the skills to be a multiplier.\" High Output Management  by Andrew S. Grove \"Former Intel CEO, Andy Grove's thoughts on management, what is important and what's not. He provides a detailed analysis of the methods he used to become the success he was.\" Engineering leadership and organization design Team Topologies   by Matthew Skelton and Manuel Pais. ‚≠ê ‚ÄúAs someone that has had to build teams, and not just manage them in an existing structure, it was game changing for me‚Äù -  John Wards , head of engineering at The Economist The DevOps Handbook  by by Gene Kim, Jez Humble, Patrick Debois, John Willis and Nicole Forsgren ‚ÄúDescribes the essence and philosophy of DevOps with real-world examples.‚Äù -  Edwin Torres , software engineer at MITRE Ask Your Developer  by Jeff Lawson ‚ÄúNot just because the philosophy behind it is spot on, but also because it hit the nail on the head around the biggest problem in tech ‚Äì estimating timelines and roadmaps.‚Äù -  Ben Furfie , development manager at The Webinar Vet Accelerate   by Nicole Forsgren, Jez Humble and Gene Kim ‚≠ê \"A study of thousands of companies, the development practices they use and whether they succeed or not.\" The Phoenix Project   &  The Unicorn Project  by Gene Kim ‚≠ê ‚ÄúDevOps in a funny & fictional way.‚Äù -  Sandro Volpicella , software engineer The Mythical Man-Month  by by Frederick Brooks Jr. \"It is remarkable how well this book has aged after 20 years. We continue to invent new methodologies and structural fads in the software and computing industry - and we continue to stub our toes and rediscover much of what is in this book\" Scaling Teams  by Alexander Grosse & David Loftesness \"Packed with practical, battle-tested advice, Scaling Teams is an essential read for managers and founders seeking to grow their teams. Rather than present broad philosophical approaches to management, the book focuses on the practical\" Leading Lean Software Development  by Mary and Tom Poppendiek \"Leading Lean Software Development speaks to a variety of leaders in an IT organization. While managers will benefit greatly, architects will also find great value.\" Product and strategy Empowered  by Marty Cagan ‚≠ê \"My experience at Uber matches that of the book. My only regret is I could not read it earlier.\" - my review.  Read my longer review . Inspired  by Marty Cagan \"The best articulation of how to be successful in product management and how to create successful products that I have ever read.\" Measure What Matters  by John Doerr \"A great introduction to the origins of OKRs, followed by many examples of how companies and a nonprofit used OKRs to improve organizational effectiveness.\" No Rules Rules : Netflix and the Culture of Reinvention by Reed Hastings \"How should a modern company run? We are told that a modern company needs to be customer centric, employee empowering, deliver broad stakeholder returns and with agility to move from one opportunity to the next. This book provides a provocative answer to these questions direct from the CEO.\" The Hard Thing About Hard Things  by Ben Horowitz ‚≠ê \"If you‚Äôre planning to start a company, whether it‚Äôs a high-tech company or the kinds of companies that I started and ran, read this book. If you‚Äôre going to be someone in charge of anything in any kind of a company, read this book.\" Escaping the Build Trap  by Melissa Perri \"This book is about creating an effective product management organization. However, it is valuable to every team member, not only the product manager.\" The Innovators Dillemma  by Clayton M. Christense \"The book seeks to explain why certain businesses are successful in their ventures and why other firms fail in response to new technologies.\" Trillion Dollar Coach  by Eric Schmidt \"A book summarizing the lessons of legendary Silicon Valley business coach Bill Campbell.\" Crossing the Chasm : Marketing and Selling Disruptive Products to Mainstream Customers by Geoffrey A. Moore \"If you've ever had an 'awesome' idea for a product or service and failed in its implementation (as I have several times), this book is like the advisor/counselor you wish you had when things were going off track.\" The Mom Test : how to talk to customers and learn if your business is a good idea when everyone is lying to you by Rob Fitzpatrick \"Highly useful for product management and really cutting away the fat and the formality around customer interviews. Especially when it's a product that's been around and customers are quite familiar with it.\" Good Strategy/Bad Strategy  by Richard Rumelt \"If you aren‚Äôt sure what a strategy is, you would probably have your mind blown by reading the book. Having a strategy means you align all of your efforts in a cohesive design so that your scarce resources like time, energy, and money all reinforce one another.\" Alchemy : the dark and curious science of creating magic in brands, business and life    by Rory Sutherland \"Anyone who makes any kinds of product ‚Äî software products, physical products, experiences, processes, workplaces, cultures, etc ‚Äî will like this book.\" Understanding Michael Porter : the essential guide to competition and strategy \"If you are a fan of Michael Porter's work, or you simply want to get a deeper understanding of competitive strategy ‚Äì I cannot possibly recommend this book highly enough.\" 7 Powers : the foundations of business strategy by Hamilton Helmer \"This is one of the very best business and strategy books written in the past 30 years, up there with Innovator's Dilemma, Lean Startup and Good to Great.\" Playing to Win : How Strategy Really Works by A.G. Lafley \"Playing to win discusses the way P&G and its brands approach strategy.\" Creativity, Inc  by Ed Catmull \"The intertwined stories of Ed Catmull and Pixar Animation.\" Leadership and business The Five Dysfunctions of a Team   by Patrick Lencioni ‚≠ê ‚ÄúTeaches very basic concepts such as trust and attention to results but that are so often overlooked!‚Äù -  Ludovic Heyberger , head of Mobile SDK, Contentsquare Death by Meeting  by Patrick Lencioni \"Similar to Patrick previous book, ‚ÄúThe Five Dysfunctions of a Team‚Äù, this book is written as a novel which is used to build the framework of Patrick‚Äôs vision on how and when meetings should be conducted.\" Invisble Women  by Caroline Criado Perez  ‚≠ê \"I‚Äôm a man, and I knew the problems with women‚Äôs data not being collected and women‚Äôs needs not being met in the world were bad, but not THIS bad. There are many great sources of data for these claims throughout the book; so many, in fact, that I started to feel overwhelmed after a while.\" Turn the Ship Around  by L. David Marquet ‚≠ê \"A novel on empowerment, teamwork and breaking down the hierarchical structure. All of it taking place onboard a nuclear submarine (really!).\" - my review Crucial Conversations  by Kerry Patterson, Joseph Grenny, Ron McMillan, Al Switzler \"One of the most life-changing books I've ever read (and I'm a voracious reader). What you'll learn in this book applies to your personal and professional life.\" Working Backwards  by Colin Bryar & Bill Carr ‚ÄúI thought all the skills needed to be in leadership positions were innate. It dawned on me there are tools/processes you can use to be successful. This clicked after reading the book.‚Äù -  Rachel Bentley , software engineer at Datagrail Radical Candor  by Kim Scott \"A great read for anyone considering starting a company or for managers everywhere.\" Just Work  by Kim Scott \"Super recommended for any manager looking to create more inclusive, fun, just environments.\" The Culture Code  by Daniel Coyle \"If you want to create a high performance culture Daniel Coyle gives you plenty of examples of successful business cultures, failed cultures and why they failed.\" So Good They Can't Ignore You  by Cal Newport \"I had mixed feelings towards this book. It has a brilliant and very good premise, where following your passion is bad advice. Instead, you need to sweat to get to work you love, and that's captured brilliantly by the author in what he calls \"career capital\". He refers to a vast array of experiences and research to support his argument.\" Connect   by Carole Robin and David Bradford \"This book belongs in the top tier of practical books on leadership and emotional intelligence.\" Dare to Lead   by Bene Brown ‚ÄúIf you are a leader or aspire to be one, this book will speak to you on a very emotional level, particularly her chapter on ‚ÄúArmored Leadership.‚Äù The 4 Stages of Psychological Safety  by Timothy R. Clark \"Knowing psych safety is important and knowing what to do about it are very different things. This book enabled me to feel knowledgeable about the concepts, as they were simple and tangible, and confident to use them.\" The Fearless Organization  by Amy C. Edmondson \"Edmondson does nice job sharing her research, anecdotes from companies she has studied, and providing specific guidance to leaders who want to create Psychological Safety in their organization.\" Teaming : How Organizations Learn, Innovate, and Compete in the Knowledge Economy by Amy C. Edmondson \"In Teaming, Amy Edmondson focuses on the process of creating a team, which she refers to as teaming.\" Are Your Lights On? : how to figure out what the problem really is by Donald C. Gause & Gerald M. Weinberg \"This engaging little book helps you step back and see your problems from a broader perspective, which helps you solve them more effectively.\" Thanks for the Feedback  by Douglas Stone & Sheila Heen \"We have always focused on how to deliver feedback, but the authors are correct when they say all the control is really in the receivers hands. Switching the focus from giving to receiving could have more wide spread impact in our organization because we all get feedback but many of us don't have a lot of opportunity to give effective feedback.\" The Art of Action  by Stephen Bungay \"For anyone leading a product organization who wants to get the true value of agile and customer focused cross functional teams, this book is required reading.\" Humble Inquiry  by Edgar Schein \"A very good examination of the interpersonal and cultural dynamics at work in organizations and families: the balance between individual success and healthy team dynamics.\" Sooner Safer Happier  by Jonathan Smart \"Great and very practical book on how to successfully introduce or improve ways of working\" Think Again  by Adam Grant \"The three hardest things to say in English are \"I was wrong\", \"I'm sorry\", and \"Worcestershire sauce.\" Adam Grant can definitely help you with the first two.\" Give and Take  by Adam Grant \"This book is a case for giving: who gives, how to give, and where it takes us. There is one caveat to all this: it has to be authentic. Giving to get ahead is matching, not giving. People can see right through that.\" The Coach's Casebook  by Geoff Watts and Kim Morgan \"I enjoyed it for the archetypes of common issues that crop up in the coaching relationships.\" The Righteous Mind   by Jonathan Haidt \"The book was for me very illuminating for understanding the psychological and behavioral reasons behind our inability to get along with those we disagree with.\" Nonviolent Communication  by Marshall B. Rosenberg \"A wonderful solution to the problem of how to communicate pleasantly and effectively with other human beings and to how to considerably increase the chances of you getting your needs met and thus not feeling bad.\" Extreme Ownership  by Jocko Willink \"Most leadership books simply talk about how to lead those in your charge. This book reminds us to first lead ourselves, and own our actions.\" The Infinite Game  by Simon Sinek \"Starting from this premise, Simon Sinek's main contribution is to setup a framework to help you keep playing (remember you cannot win an infinite game) at the infinite game of life, supported with very illuminating examples from both past and present companies and entrepreneurs.\" The Meaning in the Making   by Sean Tucker \"How humans deal with the need to be creative\" -  Jeoren Jacobs , ops engineer Managing Transitions  by William Bridges \"The book has nice, concrete examples of poorly managed transitions (mistakes are useful to learn from).\" Never Split the Difference  by Chris Voss \"This is one of the two best books anyone can read on negotiation. The other is Cialdini's famous, \"Influence: The Art and Science of Persuasion.\" While there are many good books on the subject, I can't think of any others that are as complete and useful as these.\" \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/coaches-and-mentors-for-engineering-managers/", "title": "Coaches and Mentors for Engineering Managers and Engineering Leaders", "content": "\n             I sometimes get asked if I do mentoring for engineering leaders - managers, directors or senior+ engineers. I cover topics relevant to these people in  The Pragmatic Engineer Newsletter  and share actionable advice. Sadly, I have no bandwidth for one-on-one mentoring on top of my writing. Luckily, I both know several people who specialize in this type of coaching. I also  asked around  for more recommendations: \n \n Who are some great coaches/mentors for engineering managers and senior eng managers / directors you know of? Asking about people who do external, paid coaching. I get asked about this every now and then and would love to point to more people who do this. ‚Äî Gergely Orosz (@GergelyOrosz)  December 8, 2021   \n \n Below is a list of paid coaches for engineering leaders who come recommended  - either by myself, or from other people I trust. As an engineering leader, investing in an external coach is a high ROI investment for your company to make. If you don't have access to experienced mentors or coaches within your company, I suggest you make the case for an external engineering coach to maximise your growth and impact. A word of advice : finding a coach who \"clicks\" won't happen without talking to a few people. In the past, I've recommended coaches who worked wonderfully for some people, but there was no \"chemistry\" with others. Do an intro call, and if you feel you're getting on the same wavelength: this is a good sign. If not: it's not a big deal, and talk to someone else. As usual, I have no affiliation with the below folks ‚Äì beyond knowing some of them personally ‚Äì and have not been paid to recommend any of them. For more details, see  my ethics statement . My recommendations These are people I either personally know, or people I know well shared good experiences with. Anton Drukh  - formerly VP of Engineering, mentor to several tech executives. Based in Israel. Laura Tacho  - VP of engineering and engineering leadership coach. Formerly at Codeship, Cloudbees and well-known in the Docker community. Based in Austria (Vienna).  Lena Reinhard  - engineering executive turned coach for engineering leaders and managers. Formerly VP Engineering at CircleCI and TravisCI. Based in Germany (Berlin). Pat Kua  - formerly CTO of N26, author of  Level Up Engineering  newsletter, creator of  Tech Lead Academy . Coaches VP/Director levels. Based in Germany (Berlin). Edward Taylor  ‚Äì formerly worked with Ed at Skyscanner, where he hired me and was my first manager. He is currently mentoring CTOs, VPEs, EMs and senior engineering managers. In his words: \"I have particular experience in mentoring those who have prematurely leapt a few rungs on the leadership ladder, now thrown in at the deep end. Some solid personal experience right there.\" Colin Howe  - startup CTO. Based in the UK (London). Further vetted recommendations The below recommendations came from Twitter, with one or more people sharing good experienced with the people below. Matan Kubovsky  - former CTO, CPO, and VP of Engineering (Portugal / Lisbon.) Alvaro Moya  - experienced CTO, founder of tech leadership training  LIDR  (Spain / Barcelona). Aviv Ben-Yosef  - mentoring CTOs and VPEs globally for several years (Israel.) Cate Huston  - engineering director at DuckDuckGo, formerly at Google. Coaches managers (Ireland / remote.) Esther Derby  - coach and consultant (US / Minnesota.) F√©lix L√≥pez  - VP Engineering, formerly at Eventbrite and Google (Spain.) Jason Wong  - leadership coach, formerly at Sr Director of Engineering at Etsy (US / NYC.) Joel Chippindale  - CTO coach (London.) Keith Adams  - formerly chief architect at Slack, engineer at Facebook, senior staff engineer at VMWare (US / San Francisco.) Kirsten Clacey  - faciliator coach at Automattic (South Africa / Cape Town.) Lara Hogan  - formerly VP of Engineering at Kickstarter, author of the book  Resilient Management . Engineering manager coaching -  more details  (US.) Raphaela Wrede  - engineering leadership coach, formerly engineering leadership at Contentful and Travis CI (Germany / Berlin.) Rod Begbie  - engineering leadership coach, formerly senior EM at Dropbox (Spain / Barcelona.) Saurya Velagapudi  - engineering leadership coach, formerly tech lead manager at Google (Singapore.) Tony Piper . Mental fitness coach, formerly having worked in the tech industry (UK / London.) Coaching lists and groups A list of women in tech coaches  curated by coach  Lulu Cheng Best Practicer . 1:1 coaching from domain experts. CTO Craft . CTO coaching and mentoring. LIDR  - a mentoring program and community. VPE Coach . Leadership coaching for engineers, by engineers. Engineering Manager learning circles An alternative to one-on-one coaching is joining a learning circle for engineering managers. Here are ones I know of, and can recommend: VPE Learning Circle  organized by Will Larson and Uma Chingunde Down Left  organized by Oren Ellenbogen CTO Craft  learning circles Other places to find mentorship You can find free or paid mentors on  sites listed in these mentoring resources . Missing someone from these lists?   Reply to this thread  on Twitter - I update the list based on it. People formerly on this list These are people who did coaching in the past, but have stopped, for now. Paulo Andr√©  - formerly VP of Engineering and HelloFresh alumni. Mentoring engineering leaders at all levels. Based in Germany (Berlin). \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/becoming-a-better-writer-in-tech/", "title": "Becoming a Better Writer as a Software Engineer", "content": "\n             Writing is an increasingly important skill for engineering leaders. Indeed, poor writing can hamper career progression, above a certain level. Tactics for more clear, more frequent and more confident writing. I‚Äôve observed that my writing is not up to par with my peers. How can I improve my professional writing, as someone working in tech? I get this question from many people: senior engineers who realize they need to level up their writing if they are to grow to a staff position and engineering managers who feel they are not at the same level as their peers in expressing their expertise and thoughts. This article covers: The importance of writing  for software engineers and engineering managers. The process of writing well.  Editing approaches to make your writing crisper and getting feedback on your writing. Improving how you write.  Observing and copying great writing. Habits to build your writing muscle.  This article was originally published in The Pragmatic Engineer Newsletter.  Subscribe to get weekly issues . The below article has recommendations for various paid products. As per  my ethics policy , I have not been paid to recommend any of these, and no links are affiliate ones. Why is writing important? With remote work and distributed teams becoming more common, strong writing skills are a baseline for most engineering leadership positions. In fact, writing is becoming so important that companies like Amazon start their engineering manager screening process with a writing exercise, as I covered in the issue  Hiring Engineering Managers . Other companies that have writing exercises during the interview process include Stripe ‚Äì for Staff+ engineers ‚Äì and TrueLayer, for principal engineers. If you are a software engineer at a high-growth startup or Big Tech, the chances are you write more words per day than you write code. Everyday writing includes: Commit summaries. Code review comments. Chat messages. Emails. Engineering planning documents. Comments on proposals, Project Requirement Documents (PRDs) or engineering planning documents  like RFCs . Postmortems. Performance reviews: peer reviews, self reviews and  promotion documents . If you‚Äôre an engineering manager, a tech lead or a staff engineer, then you‚Äôll likely be writing even more of these: Emails and chat messages. Meeting agendas and meeting summaries. Proposals for projects, headcounts. Status update emails and documents for projects. Presentations. Crisp writing can help accelerate your professional career. As I wrote in the article  Undervalued software engineering skills: writing well : ‚Äú It is at a larger organisation that writing becomes critical  because messages reach a bigger audience. For software engineers, writing becomes the tool to reach, converse with and influence engineers and teams outside their immediate peer group.  Writing becomes essential to make thoughts, tradeoffs and decisions durable. Writing things down makes these thoughts available for a wide range of people to read. Things that should be made durable can include proposals and decisions, coding guidelines, best practices, learnings, runbooks, debugging guides, postmortems. Even code reviews. For people to read what you write, it needs to be written well.  If you grab people's attention early on, they will keep reading and receive the message you intend to get across. More of them will respond to it and do so with fewer misunderstandings of what you meant.  By writing well, you can scale your ability to communicate efficiently to multiple teams, to an organisation or across the whole company. And the ability to communicate and influence beyond your immediate team is the essential skill for engineers growing in seniority; from senior engineer to what organizations might call lead, principle, staff or distinguished engineer.‚Äù The greater the influence of your position, the more people your writing will reach. In senior leadership positions, writing skills are yet more important. Engineering leaders who are also prolific writers include  Andrew ‚ÄòBoz‚Äô Bosworth  the future CTO of Meta,  Michael Lopp , formerly VP of Engineering at Slack,  Will Larson , CTO of Calm and  Steven Sinofsky , former head of Microsoft‚Äôs Windows division. As Steven Sinofsky writes in the article  Writing is Thinking : ‚ÄúWriting (and reading) really helps people if they are remote, if there is not a shared native language, or both. Writing can be difficult for some, for sure. That is why it is important to focus on the function, not the form. Don‚Äôt be afraid to help people (especially as a manager) through the process of the ‚Äúbasics‚Äù of writing.‚Äù The Process of Writing Well When you read a piece of well-written content, know that several steps happened behind the scenes: Writing: a first draft was written. This draft captured most of the ideas and content seen in the final version. Editing: the piece was edited for readability and ease of understanding. Getting feedback: others might have given feedback, resulting in content changes and more editing. Editing Approaches When you write a first version of anything ‚Äì from an unsent chat message all the way to a pages-long document ‚Äì it‚Äôs in its draft stage. You have captured the content. However, to make the message as clear to readers as it is to you, the writer, you‚Äôll probably want to edit it. Re-reading your writing by putting yourself in the recipient‚Äôs shoes  is the first step in editing. Before you send a chat message, re-read it, and imagine how the person on the other side will interpret it. Is the tone right? Are the contents accurate? Are you sharing the context? Anything beyond a sentence or two will raise questions on the structure of your writing. How easy is it to follow? For longer writing, will your target audience have any incentive to read the whole text? Common editing approaches for any writing longer than a few paragraphs are these: 1. Break it into readable chunks . Avoid an off-putting wall of text that will make most readers lose interest in reading it. Use paragraphs of a few sentences each, where each paragraph conveys one thought. Take the medium you use into account. If you are writing emails that could be read on phones, consider making your paragraphs shorter, so one paragraph won‚Äôt take up the whole screen. If you are writing a Google Doc that most of your readers will view on their laptops, longer paragraphs are fine. 2. Remove unnecessary and distracting elements.  The longer your writing, the more tiring it is for readers to process. It‚Äôs no coincidence that companies with strong writing cultures like Amazon are strict in limiting all project proposals to a six-pager, often preferring one-page summaries. As I wrote about Amazon‚Äôs planning process in the article  Preparing for the annual or biannual planning : ‚ÄúWriting a relatively short planning document ‚Äì where the length is capped at six pages ‚Äì in practice often takes significantly more time than one that would not have a length limit. Because of the length limit, every paragraph is valuable. Those writing this document will put in lots of work to cut the unnecessary parts and make the content crisp and easy to read.‚Äù While writing clearly takes effort, writing clearly  and  concisely is even more effort. As French philosopher and mathematician Blaise Pascal famously wrote in one of his letters: ‚ÄúI would have written a shorter letter, but I did not have the time.‚Äù Remove filler text that distracts from your message. For example, when writing emails, some people try to be polite by adding things like ‚Äú[I probably don‚Äôt yet fully understand the thought process here and I apologize in advance but] could you please explain why‚Ä¶?‚Äù Practice polite, but to-the-point writing in these cases. You can often shorten your message without taking away from the tone and meaning. 3. Use shorter sentences.  The longer a sentence, the harder it is to follow for your readers. Longer sentences can also become confusing as the clauses pile up. I recommend using  Hemingway Editor  to highlight parts that can be broken down. Hemingway Editor helps detect hard-to-read sentences, overly complex phrases and adverbs that can be removed. The tool is free to use on the web, and is a one-off $20 fee for Mac or Windows as a desktop app. 4. Check grammar.  Faulty grammar will leave the reader second-guessing and cause confusion. I use  Grammarly , and it‚Äôs a tool I can strongly recommend, and one you could consider expensing at work ‚Äì assuming you‚Äôll use it day-to-day. Grammarly  improves grammatical correctness, writing clarity and keeping your writing engaging. 5. Use bullet points or numbering  where they make sense. Bulleted lists are a good way to present several points. They can be used: In emails, proposals, tickets: almost every form of writing you‚Äôll be doing day-to-day. To organize your thoughts. If the individual bullet points become too long, consider combining them in a paragraph. To list related items in a way that‚Äôs easier for the reader to go through than writing paragraphs, just like this example of a bullet point list. Numbering is another tool you can use in longer documents. This list of six editing techniques is an example where bullet points would not work well, as each point consists of multiple paragraphs. However, by using numbering, the reader can keep track of where we are. 6. Use bolding  to make documents easy to scan. Use  bold font  sparingly so you can save this styling element for key thoughts, takeaways, or asks. As an additional suggestion,  avoid bolding inside sentences  like I‚Äôve just done. It‚Äôs harder for readers to scan things bolded inside a wall of text. Instead, re-structure your sentences so you can bold the first part of them. You‚Äôll notice my newsletter issues use bolding in varying quantities. This is a style I keep iterating on, with the goal of making each newsletter easy enough to scan and find relevant sections. 7. Use visuals, not just words.  With technical documents, a screenshot or a diagram is often worth a thousand words. So use these in the documents you create. For inspiration, see how  Cloudflare explained the reasons behind the 2021 Facebook outage , with strong use of visuals. There is a picture for almost every paragraph of the text. Without these pictures, the summary would have been multiple times longer, and much harder to follow. Excerpt from a well-written Cloudflare postmortem, which is easy to follow thanks to the good use of images. 8. Value the reader‚Äôs time more than your own.  The reason for editing your writing is to make it easier for others to digest your thoughts. If you‚Äôre sending a direct message to one person, a quick scan of what you typed should be enough. If the same message is going out to a group chat of 100 people, take a little time to edit it for clarity. And if we‚Äôre talking about a document read by many people in an organization, then put in the time to make it easier for all those people to read it. As former Amazon engineer Curtis Einsmann shares: 3 writing tips that have worked for me: - Simplify the language - Start with ‚Äúwhy‚Äù then ‚Äúhow‚Äù then ‚Äúwhat‚Äù - Value the reader‚Äôs time more than your own ‚Äî Curtis Einsmann (@curtiseinsmann)  January 12, 2022   Get Feedback After editing your writing, you might think it‚Äôs clear and crisp. But will readers agree with your assessment? Ask for feedback from colleagues  on emails, documents and other writing for which you could use another pair of eyes. A good approach is to share what you wrote in another collaborative editor like Google Docs or similar. Example of comments and suggestions using Google Docs. Collaborative editing tools with commenting and suggestion features are excellent ways to get feedback asynchronously. Ask people directed questions  when sharing your writing. Most people will be unsure what feedback you‚Äôre looking for, if you just ask for generic feedback. Ask specific questions that narrow down what help you need. Prompts you could consider include: ‚ÄúHow easy to read did you find this? What is one improvement you‚Äôd suggest?‚Äù ‚ÄúWhat resonated the most? And what part did you find redundant?‚Äù ‚ÄúWhat would you suggest to make the takeaways more clear?‚Äù ‚ÄúWhat part of this document was the most confusing?‚Äù Consider jumping on a call with your manager  when writing an important document. As VP Financial Engineering Chris Henson suggests: I've become favorable towards treating writing (emails, documentation, etc.) like pair programming.  Jumping on a call with my manager as we write something usually helps to clarify what we want to communicate, sometimes to the point of realizing work needed first on our end ‚Äî Chris Henson (@_chenson__)  January 12, 2022   You might be worried that you‚Äôll annoy your colleagues or manager by asking too frequently for feedback on your writing. But in my opinion, almost everyone seeks too little feedback. Just like there‚Äôs rarely a problem with wanting to do pair programming frequently, there‚Äôs little harm in asking for feedback on what you write. Make notes of suggestions, and apply those suggestions to your writing next time. Hiring an editor  is the most expensive way to get feedback, though it can be a high-quality way to do so. The first time I hired an editor was for my first book, The Tech Resume Inside Out. I have since worked with editors for all my books. As hiring an editor is an investment, most people save it for writing that goes out to larger audiences. If you are writing a press release or content that will be published externally, you might be able to justify hiring a copyeditor. If you have the option, I‚Äôd suggest going for it. There might already be editors or technical writers at your workplace. If your organization publishes an engineering blog, there‚Äôs a fair chance they hire copyeditors to review these articles. If this is the case, commit to writing an external-facing post, and ask for editing by one of the in-house or contract professionals. There are ways to get professional editing for free: write an article for a publication that provides this editing. This includes writing for publications listed in  Who Pays Technical Writers . Some of these titles not only pay a few hundred dollars for an article, but they often provide copyediting. Relying on automated writing tools for feedback  can dramatically improve the readability of your writing. This is true for both Hemingway Editor and Grammarly, as well as others. However, these tools will occasionally give suggestions that are either incorrect, or don‚Äôt fit your style. Don‚Äôt accept suggestions you disagree with, or ones you feel leave your writing in a worse state. The more confident you become with your style, the more suggestions you will ignore which the tool makes. In my case, I have learned which suggestions and rules to always ignore, which ones to consider based on the context, and which ones to accept and incorporate into my writing. Improving How You Write There are several ways to improve your writing skills. Let‚Äôs go through them. Observe and Copy Great Writing What does great writing look like? Chances are, you already know. But have you paid conscious attention to it? Here are ways to be more deliberate in observing, saving and copying the ingredients of great writing. Read fiction  and find books you cannot put down, which you read every sentence of. Then revisit those books and analyse their style. How are sentences written? What made you want to read more and not skip ahead? People pick up nonfiction writing because they want to learn something. It‚Äôs because of this that nonfiction that is written poorly might still become popular. However, fiction needs to draw people in to read more. Good fiction uses a variety of techniques, including storytelling style, varying the length and rhythm of sentences and paragraphs, and many other elements. But reading fiction won‚Äôt make you a better writer by itself. However, finding great fiction will expose you to great writing which you willingly consume. I still frequently end my day picking up a novel, reading for up to an hour before bed. Find and save some of the best professional writing you come across at work and outside work.  Collect a few of the best-written examples of: Emails: Project status reports. Project launch announcements. Welcoming a new joiner. Organization-wide announcements. End-of-year summary. Engineering planning documents or proposals that are informative. Look for not just great writing, but great use of diagrams. Postmortems that are to the point. Product specifications like PRDs or other product planning documents that are easy to understand. Tickets defining work well. Discussion threads that are concise and to the point. Analyze these written artifacts. What characteristics made them good to read? Use some of these artifacts as templates to copy from  the next time you write something similar. For example, if you plan to put together an engineering proposal, copy the style of the proposal that resonated most with you. After you write your document, compare it with the inspiring one and aim to make yours equally clear as it. Build Writing Habits We‚Äôve covered the theory of improving your professional writing. However, the only meaningful way to improve is to put all of the above into practice, then rinse and repeat. Teach yourself touch typing if you do not yet type without looking.  Until typing on the keyboard is seamless, you‚Äôll likely write less and slower, than when you can type without looking at the keys, and do it fast enough to not break your stream of thought. You can find countless courses online that help master this technique. Put writing habits in place. Repeat activities where you make time for editing and getting feedback. These are efficient ways to improve your writing with deliberate practice. You‚Äôll also want to create the habit of observing great writing, and feed these observations back to your own improvement process. Define writing activities where you commit to editing and seeking feedback.  You write a lot throughout the day, and it‚Äôs not realistic to add the overhead of an involved editing and feedback-seeking process to every document. However, you should define which existing or new writing activities, you‚Äôll pay more attention to. For example, if you already create lots of long-form writing during your day job, define the most important and most widely-circulated of it. Commit to spending more time editing these documents and ask your manager or a peer for feedback. Below are writing activities that are ideal for following a more involved editing and feedback process: Start writing weekly  5-15 updates . Spend 15 minutes at the end of each week on a report that can be read in five minutes. Send this out to your manager and a few peers at work. This exercise is an excellent one to do for anyone in an engineering leadership position; I used it with great success. In reality, it will likely take more than 15 minutes to write and edit this report, but over time you‚Äôll get better at it. A weekly project summary to stakeholders.  Are you leading a project at work? If so, start to put together a crisp summary of the overall progress, the risks, and what happened since the last update. Make this update easy to read and take inspiration from the best project update emails and documents you see in the organization. Subscribers have access to a üîí Project reporting example  to use as inspiration. Volunteer to take notes at meetings  and send out summaries. Taking notes, then spending additional time writing up a crisp summary of decisions made in a meeting, might seem like a thankless task. True, it is time-consuming for you, but it can save time for many others, on top of helping you get better at summarizing. Initiative proposals.  Do you have an idea for a project you or the team should do? Write up the idea, the problem it solves, the impact, and your ask. Edit it, and ask for feedback to make it more clear, then send it out to the relevant group, asking for comments. A well-written proposal is more likely to get the feedback it needs to succeed, than one that people stop reading midway. Design documents.  Take time editing and getting feedback on design and planning documents you write. Use visuals to convey information more clearly. Collect great design documents and copy structures that work for them. Ask about tools others used to create easy-to-understand diagrams and images. Tools I recommend using for technical visualization are  Excalidraw ,  Lucidchart  and  Miro . Documentation.  For documentation you expect more than one person to read, follow similar advice to when writing design documents. Continue Learning Below are high-quality resources that can help you become a better writer. Note that none of the below links are affiliate links or sponsored ones. See  my ethics statement  on the lack of such links. Free online resources The Writing Well Handbook  by Julian Shapiro. An e-book for writing nonfiction blogs and books. Technical writing courses by Google . A collection of courses and learning resources to improve writing technical documentation. The Craft of Writing Effectively : an hour and a half video from Leadership Lab. One of the best talks about technical writing. As senior staff engineer  Stefan Buck  summarized it: \"Writing isn't about explaining what you think. It's about changing what the reader thinks.\" Books On Writing Well  by William Zinsser. The classic guide to writing nonfiction. The book that helped me write more concisely. Dreyer‚Äôs Englis h by Benjamin Dreyer. An entertaining book to make you a better writer. The Elements of Style  by William Strunk Jr and E.B. White. A succinct book to help eliminate clumsy and incorrect use of English. Courses There is an ever-growing collection of paid writing courses which aim to help improve writing via practice and feedback. I don‚Äôt have first-hand experience with these: do your own research on them. Tools Hemingway Editor  for help making text easier to read. Grammarly  for helping with both readability, grammar and tone. Takeaways Writing becomes more important as you grow more senior, regardless of where you work within tech. For many people, their lack of writing skill becomes a blocker to progress beyond certain levels. This issue was a summary of systemic approaches you can take to improve your writing skills: Edit your drafts before you publish them. Get feedback and iterate on some of your writing. Observe what great writing looks like, and copy elements that make it pleasant to read. Put habits in place so you work on your writing muscle on a regular basis - at the very least, weekly. Continue educating yourself about writing better through resources ‚Äì books and courses ‚Äì dedicated to this topic. This issue is packed with advice that is only worth something if you take action on it. I suggest you make a plan on how you will improve your writing. Subscribers have access to a üîí Writing goals and accountability document  to do so. Technical skills combined with writing skills are a superpower in a world that is increasingly writing-heavy. Writing skill takes time to build and the best time to start doing so is now. Good luck on your writing journey! Thanks to  Zsombor  for reviewing this article. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/what-do-tpms-do/", "title": "What TPMs Do and What Software Engineers Can Learn From Them", "content": "\n             This is Part 1 on a deep-dive of the TPM role. Read Part 2 here:  Scaling engineering organizations with the TPM role . üëã Hi, this is  Gergely  with this month‚Äôs  free issue  of the Pragmatic Engineer Newsletter. In every issue, I cover challenges at big tech and high-growth startups through the lens of engineering managers and senior engineers. Subscribe  to get weekly issues - if you‚Äôre not already. It‚Äôs a good read, and the #1 technology newsletter  on Substack . Q: What is the TPM role that is becoming more common in large tech companies? I‚Äôm curious to learn more. Great question. TPM stands for Technical Program Manager. This article covers: Why learn about the TPM role.  What‚Äôs in it for engineers or engineering managers to learn more about TPMs? What the TPM role is.  What the role stands for, and why this role came to be. What do TPMs do?  Examples of areas which TPMs own. The evolution of the TPM role.  At Big Tech and high-growth startups in particular, this role is today more common than it used to be. How did the role evolve and why is it more common these days? How do people typically become TPMs?  And how do software engineers transition successfully into this role? What are things people need to be good at, to succeed in this role? Working with TPMs as engineers and Engineering Managers (EM).  What are good approaches? How can engineers and EMs best help their TPM counterparts? What can engineers and EMs learn from TPMs?  I‚Äôve found there is much we can all learn from TPMs, and I‚Äôm sharing the most common lessons. I first mentioned this role in the  Engineering career paths at Big Tech and high-growth startups  newsletter issue and expanded more on it in the article  Engineering leadership skill set overlaps , in which I visualize the similarities and differences between the TPM role and other engineering leadership roles: The TPM role and the overlap with others. Source:  Engineering leadership skill set overlaps newsletter issue . Both these articles scratched the surface of this role. In this issue, I go in-depth with five experienced TPMs working at tech companies: Bernard Ng , Staff TPM at DoorDash Grenville Fernandes , Senior TPM at Uber James Dayhuff , TPM at Twitter Sophia Vicent , Senior Director of Engineering Operations at DoorDash Yixin Zhu , Senior Manager of Tech Programs at Tempo, formerly Senior TPM at Uber This article was originally published in the  Pragmatic Engineer Newsletter . In every issue, I cover challenges at big tech and high-growth startups through the lens of engineering managers and senior engineers. Subscribe to get weekly issues . Many subscribers expense this newsletter to their learning and development budget. It's a pretty good newsletter and the #1 technology publication  on Substack . 1. Why learn about the TPM role? This issue covers topics relevant to software engineers and engineering managers at Big Tech and high-growth startups. How does the topic of TPMs relate? I‚Äôll quote James Dayhuff, TPM at Twitter, observation about this role: ' I see the TPM role as undervalued within some non-tech companies . Tech companies which understand the importance of the role and how it unlocks organizations to operate more efficiently tend to hire regularly for this role exactly because of these benefits.' Robert Chokr, Product Director at Delivery Hero  refers to  TPMs as a force multiplier on a different level: 'PMs are a force multiplier. One PM is responsible for the work of ~8 engineers and a product designer.  But TPMs are a force multiplier on a whole different level.  They can make or break large programs where dozens of tech teams and hundreds of people are involved. 'TPMs can make the difference between a large project being delivered smoothly in 6 months, or having it choke up multiple departments during a 2-year long effort, with projects becoming the butt of the joke, and people openly talking about how bad that program/project was. 'TPMs are where it's at. But most folks don't understand this role, confusing it with Project Management.' Emily Nava is building out a TPM team at MainStreet and was a TPM at Amazon and Twitter, previously. In  an issue of TPM Stories  she shares how one of the biggest challenges as a TPM is people not fully understanding this role: ' We‚Äôre at an interesting time with the TPM role in our industry,  in that different companies and even different organizations within the same company vary in how they implement the role. So it can be an increased burden on the individual TPM who has to do a lot of educating about their role in parallel with driving the program. And a lack of understanding about the role can also lead to TPMs getting pulled in once a program is already in execution mode.' Although the ratio of TPMs is relatively low compared to engineering managers or product managers, this role is steadily gaining popularity at fast-moving tech companies, especially medium to large-sized ones. We cannot talk about how Big Tech and fast-moving companies work with the efficiency they do, without diving into this role. If you‚Äôre an engineering leader, you should already be either working partially as a TPM, or hiring one.  In this issue we‚Äôll cover ways TPMs make tech organizations more efficient. If you are an engineering manager, senior or staff engineer, you‚Äôre likely to be already doing a partial TPM role, so understanding what TPMs do might help you be more efficient. And if you‚Äôre heading up a larger organization, you might start to see the need to introduce a TPM role to keep up with your engineering organization‚Äôs growth. 2. What the TPM role is What do TPMs do, and what does the role consist of? Yixin Zhu  is the Senior Manager of Tech Programs at Tempo. Here‚Äôs how he describes it: ' The TPM owns the ‚Äòwhen?‚Äô and ‚Äòwho?‚Äô  questions. The PM owns the ‚Äòwhy?‚Äô and ‚Äòwhat?‚Äô The EM and the engineering team own the ‚Äòhow?‚Äô This is the shortest elevator pitch I have. 'In practice, there are three pillars I see this role encompassing: Strategy and execution . Planning, prioritization and getting things done. Design and architecture . By design and architecture I mean less the engineering side, although more senior and more hands-on TPMs might get involved here, as well. I‚Äôm talking about information architectures, organization design, people processes and technology. I think of TPMs as a ‚Äòright hand‚Äô to the CTO. Culture . Investing in the engineering brand both internally and externally. Helping with recruitment.' Based on how Yixin describes the role, this is a mental model I‚Äôve drawn up for it, taking into account how TPM roles make sense in engineering organizations above a certain size (usually 50+ engineers). What do TPMs own? A mental model. Bernard Ng  is a   Staff TPM at DoorDash. He shares his perspective on how the role differs at various companies: ‚Äò The TPM role is different at companies  like Google, Meta, Uber and DoorDash. Internal culture and mindset makes for differences in the day-to-day details. The role could also change based on the structure of the organization a TPM operates in. ‚ÄòIn larger companies with deep hierarchies, the TPM role is often closer to how an engineering manager would operate. A significant part of your time is spent working with other TPMs. ‚ÄòIn lean organizations, you don‚Äôt have the luxury of enough TPMs to cover all areas. This means, TPMs are expected to show more autonomy. ‚ÄòDoorDash right now is on the lean side when it comes to TPMs. We have around 15 TPMs for a bit under 1,000 people working in tech. At Uber, this ratio was around 70 TPMs for a tech org of 4,000 people. However, you‚Äôll find companies like Google or Amazon where there could be 50-100 TPMs working only in one sub-organization of the company.‚Äô Afiya Chohollo, Director of TPM at Onfido  defines  the role like this: 'As a function and a role, TPMs drive the delivery of company objectives through the tech organization. They do this by leading complex, multidisciplinary and cross functional initiatives.' 3. What do TPMs do? Now that we‚Äôve heard TPMs describe their role, let me flip it around and describe what us engineers may observe TPMs working on at most companies: Leading complex and long-running projects that involve many teams.  TPMs owned implementing GDPR across Uber in line with the new regulations, which was well over a year-long effort. Even after the systems were updated, certain TPMs kept leading compliance-related efforts. Leading engineering programs that don‚Äôt qualify as products.  The ownership of products and platforms is clear within tech companies. Product managers and engineering managers are on-point for these efforts and teams. But what about work that is not a product, not a platform, but is still important? Such as work like migrating from on-premises data centers to a cloud provider, or improving reliability of systems. These are areas of which a TPM might take ownership, and work with several engineering teams to prioritize work that moves the needle across the organization. Owning migrations and long-term tech debt efforts.  If a migration or paying down tech debt can be done within a team, that team owns this effort. But what about the more common case where a migration impacts dozens of teams, or paying off tech debt needs several teams to move in parallel? Without dedicated ownership, these efforts fall between the cracks. TPMs tend to take ownership of these engineering efforts that need an owner, but for which an engineering team might not be the best owner because their incentives might be to move on quickly, rather than do what needs to be done. Owning engineering delivery for a domain like mobile, frontend, infrastructure.  A TPM for mobile would be responsible to ensure the mobile engineering team can keep delivering at the same pace, even as it grows. A TPM here would have significant mobile domain understanding, and would aim to predict upcoming pain points, and solve for them with a variety of technological and organizational processes and also people strategy. They would work with engineers and engineering managers. Leading one-off, but complex and important projects.  When Uber rewrote the Rider app, about 30 teams with close to 200 mobile engineers and dozens of backend engineers participated. Similarly, in 2017, Uber decided to ship tipping functionality in a matter of months. Again, TPMs stepped in to coordinate a project that spanned dozens of teams, and had to be shipped on a short deadline. At certain companies, the TPM role is often much closer to what the CTO does. TPMs often end up working as a ‚Äòright hand‚Äô to the CTO, and they might own some of these areas as well: Engineering brand and engineering blog.  Hiring and retaining engineers is more challenging than ever. One of the best ways to hire is to broadcast the excellent work these teams do, and to have this come from the source; engineers writing about their challenges and successes. Organize events where the engineering team shares their learnings with the community. An engineering brand and an engineering blog strategy can fall under the responsibility of a TPM. Engineering strategy.  How does the engineering team plan and prioritize work? How do they get things done, and how are these tracked (or not tracked)? TPMs often get to drive the evolution of these processes ‚Äì and the tooling related to them ‚Äì as the engineering team grows. Top-level engineering programs or OKRs  (Objectives and Key Results) . ‚Äã‚Äã These are usually efforts around security, compliance, reliability, quality, scaling effectively, and developer velocity. They are often driven in coordination with areas like infrastructure, security, and data leadership. Engineering processes.  TPMs could step in to drive areas like release management,  incident management , collaborating with support, interfacing with vendors or reporting on measuring and reporting engineering metrics and key performance indicators. Engineering learning and development.  Defining and driving programs to onboard engineers faster, invest in them and grow them in their careers. 4. The evolution of the TPM role How did the TPM role come about? Talking with TPMs, I found two routes. Program Manager roles started to gain popularity at Microsoft,  starting around 20 years ago. As Microsoft grew, the complexity of its products and the growth of the engineering teams building these products needed to be coordinated. Microsoft created the Program Manager role to solve this problem. Here‚Äôs how former Microsoft program manager Hussein Kanji  described  this role in 2011: 'Program Manager is a uniquely Microsoft role that is a combination of product management, project management and user interface design. At Microsoft, program managers own the product spec. They don't have any control over the engineering team, but it's their job to make sure the product is built the way customers will want it. 'At most companies, product managers are a link between marketing and engineering and have some business training (quite a few are MBAs). Not so at Microsoft. PMs are freshly recruited engineering graduates who want to do more than code, or are PMs who have grown up in the organization. They often have zero business training. 'The PMs aren't project managers either since there are others in the engineering org who make sure the releases happen on time. The PMs also don't report into engineering or marketing, so they are self standing, the only true authority they have is persuasion and the spec.' This description of what Program Management meant at Microsoft a decade ago closely resembles how Product Managers operate at Big Tech and high-growth startups these days. Amanda Song was a Program Manager at Microsoft from 2017 to 2020. She  describes  how the role at Microsoft compares to the rest of the industry: 'On some teams, a Program Manager at Microsoft will resemble the industry definition of a product manager: they develop and advocate for the product vision, build the roadmap, interact with customers to collect feedback, and work cross-functionally with engineering, design, marketing, customer support, etc. over the product or feature lifecycle, from ideation through launch and beyond. At Microsoft, this kind of role may be referred to as a ‚Äòfeature Program Manager or ‚Äòproduct Program Manager.‚Äô 'On other teams, a Program Manager at Microsoft may be closer to the industry definition of a program manager or technical program manager. This role can be heavier in terms of operations, business development, or account management. This might look like working with other Program Managers to design and execute internal business processes, communicate with partners to troubleshoot issues, and align multiple internal business or development teams. 'In Windows, for example, this can look like building and maintaining relationships with important partners up and down the hardware stack, at various levels of manufacturing, which can include: OEMs (original equipment manufacturers), who bring together all components for an overall device, such as Lenovo, Dell, and Acer; ODMs (original design manufacturers), and ISVs (individual software vendors).' The Microsoft Program Manager role strongly influenced the rest of the industry. Microsoft was the first company to hire new grads into intern Program Managers roles, training them on the job. Several experienced TPMs today, started their careers as Microsoft Program Manager interns and carried that experience on to companies they later worked at. Large tech companies often come to the same realization that Microsoft did: that there‚Äôs a gap in organizing teams, owning product or program goals, and working across several teams to get complex things done. Tech startups exiting the 'survival' stage and entering a more predictable growth stage, naturally tend to put a role similar to TPM in place.  Yixin Zhu leads the TPM organization at Tempo. These are his observations on why high-growth companies often find a need for the TPM role: ‚ÄòEvery year, there‚Äôs a huge number of startups founded. The majority of these startups fail, but those that survive keep growing. These companies all hit a point where they need to figure out how to optimize how they operate, how they grow their organization and think about not just technology, but people working in technology. ‚ÄòWhen these startups get to the stage of asking the question of ‚Äòhow are we going to grow our technology organization?‚Äô they often don‚Äôt reinvent the wheel, but take proven approaches from other companies ahead of them. Startups stand on the shoulders of giants. ‚ÄòTake technology approaches. Twenty years ago, if you only had one machine, you had to take down your website while you made changes to it. Today, you can host your site on AWS while actively developing it, and not having to worry about downtimes. AWS helps scale your infrastructure. The same goes for scaling a technology organization. Startups take roles that worked well for other high-growth companies such as the TPM role and use it to skip to executing, instead of having to reinvent the wheel. ‚Äò There are also more people talking about TPM roles externally.  While Microsoft was the one which introduced the Program Manager role, the concept has spread since. The awareness of the role is spreading, resources like  TPM Stories  are being published, and more TPMs share their experiences like Sophia Vicent wrote about  principles of world-class TPM teams .‚Äô 5. How people become TPMs I asked several TPMs how they found their way into this function. All of their stories were different: From finance.  Bernard Ng has a computer science degree and initially spent a decade working at investment banks including Goldman Sachs, JPMorgan, and Morgan Stanley. He had various roles including program management, regulatory/compliance, and sales & trading analytics. He joined Uber as a data analytics program manager, and transferred internally to TPM. Utilizing his computer science foundation and varied finance experience, he has never looked back. From a testing lead.  Grenville Fernandes was leading a testing function at a bank, working with a dozen TPMs. His former manager asked if he would be open to taking on a part-time TPM role, which he did. From there, he moved to a TPM role at the payments tech company Ingenico, and came to Uber in a TPM role. He was the first TPM hired in the Amsterdam office, which was where we worked together. From software engineer.  Yixin Zhu interned as a software engineer at Microsoft, returned the next year to do a Program Management internship, then interned as a software engineer at Google and worked for a few years as a software engineer at Coursera and Uber. He never felt fully at home in software engineering, and took the opportunity to move to the TPM role at Uber. The rest as they say, is history. Crafting an internal TPM role.  James Dayhuff has a Master‚Äôs in Information Systems and Business Intelligence. He started working at Exxon Mobil in a data analyst and system support role and later on transitioned internally to a more technical role, so he could better utilize his computer science background. He became an API developer, and as the team grew, he took on the leadership of this team. It was around this time he read about the TPM role, and decided this was exactly the type of job he wanted. So he made changes to his work, started to introduce practices used by TPMs and successfully became the TPM in an organization that had never heard of the role. Yixin shared the observation that there is no single path to becoming a TPM: ‚Äò The common path to become a TPM is the ‚Äòuncommon‚Äô one.  For engineers, product managers and designers, there are paths that are tried and true. For TPMs, it‚Äôs often the case that the outliers end up here. Many of the folks don‚Äôt really fit into any of the conventional boxes. I‚Äôve seen great TPMs come from software engineering, product management, engineering management, testing and consulting backgrounds. ‚ÄòWhile most TPMs in their past have done a variety of different roles, what connects them is their love of solving hard technical problems and solving them with a people, process and technology mindset. ‚ÄòThis is also why there‚Äôs a huge variety of TPM roles in Silicon Valley and outside it. Every organization is different, and those organizations have different people, process and technology problems. And this is a great thing, as it creates a wide spectrum for people who want to work in tech and solve these problems, but who don‚Äôt fit into the fairly constrained box of software engineer, product manager or designer.‚Äô Grenville shared the same observation. He categorized the most common transitions into the TPM role as being people who were previously project managers, engineering managers, business program managers, software engineers or product managers. It‚Äôs easier to switch onto the TPM track at your current company . All the TPMs I talked with transitioned into their role at a company at which they held a different job title. It‚Äôs also the path they observed most other TPMs take. It‚Äôs definitely easier to try to transition to a new role within your current organization where you already have built up credibility. This is true not just for TPM roles, but all transitions. 6. Working with TPMs as engineers and EMs What are good ways to work with a TPM, as an engineer, or an engineering manager? I asked this question from  Sophia Vicent , Senior Director of Engineering Operations at DoorDash. Here‚Äôs advice she shared: ‚Äò Treat it like a partnership from the start and play to the strengths of a TPM.  A common mistake I see by many engineers is assuming the TPM is there to project manage or be a Scrum Master. While there are companies where the role leans towards this, if you work with a strong technical TPM, it‚Äôs a waste to put that person into this small role. ‚ÄòFind ways to really work well with the TPM. This means taking the time to get them up to speed, just like you would with a new joiner engineer. This is especially true if you‚Äôre at a younger company without much documentation, or places where it‚Äôs hard to get up to speed. ‚ÄòKnow that the TPM role is breadth-heavy, but they need to gain the right amount of depth to be successful.   Hopefully you‚Äôre working with a TPM who understands they cannot just go broad, but they also need to dive in. ‚ÄòMake sure the TPM spends time with the engineers to understand the technology and decisions made.  Assuming this TPM works with a broad set of teams, they want to get the right level of depth with your team, as well. Unless you have amazing documentation, you need to spend time with them to get them up to speed. ‚ÄòYou should have similar discussions with the TPM that you would have with a new engineer about the technology your team uses, and the tradeoffs you‚Äôve made. What are the constraints of your system? How are you thinking about scale, reliability and tech debt? What are your key business metrics? Upstream and downstream dependencies? How is your team organized and what does your delivery cadence look like? All of these things will factor into larger decisions that this TPM will influence. ‚ÄòThe better a TPM understands your engineering reality, the more they can push in the right areas to make the project successful, while also not going against your constraints or engineering priorities. ‚Äò If you‚Äôre lucky to have a TPM embedded in your broader team to help with ongoing work, take advantage of this.  This embedding can happen via medium-sized projects that are cross-functional, helping with planning on a quarterly or other cadence, or playing a product manager-type role in a more technical or platform space that‚Äôs missing product managers. They might come in to help improve your operational cadence or to help analyze and reduce oncall burden. They could be here to improve postmortem processes, or to track and drive migration/tech debt efforts. ‚ÄòIn all the above cases, a TPM working with your team can coach and mentor more junior engineers on things that are TPM ‚Äòsuperpowers‚Äô like planning work, organizing small efforts and communicating well. Make the most out of this setup! ‚ÄòDon‚Äôt forget what‚Äôs in it for you as an engineering manager or engineer, in working with a TPM.  By being able to work with a TPM, you have someone who worries ‚Äì and takes care of ‚Äì the project being shipped across multiple teams. This means you can spend more time on your own work and less time worrying about other teams. ‚ÄòTPMs adding a specific value is why I don‚Äôt think TPMs should be involved in projects that involve only a few teams. In these settings they would not add much value to engineering managers or tech leads, as there‚Äôs little need for breadth. ‚ÄòBut on projects with several moving parts, the TPM takes care of making sure that the breadth of teams moves forward in a coordinated way, and in a way that dependencies are understood and accounted for. This means you won‚Äôt end up in a situation where you built what you promised, but it doesn‚Äôt match up to what the other team expected. ‚ÄòTPMs also help in decisions where you would otherwise be stuck in a deadlock. This doesn‚Äôt mean they‚Äôre making the decisions, but they will share project-wide context you might be missing, share other decisions that might impact you, and if you need a tiebreaker they can help with that as well. ‚ÄòTPMs are an ally in pushing the project to be successful. For example, if your part of the project is behind and you need extra people in order to catch up, the TPM is one who will fight for you, and work with management to see if you can get help. Or if the deadline is not realistic, they‚Äôll push for setting it to a time that is more achievable, or helping to reduce the initial scope of the project to something that can be delivered successfully. ‚ÄòIn all the above cases, it‚Äôs not you who will have to talk with tech leads from five other teams, and then update the VP of Engineering. The TPM can and will represent you, and you can keep focusing on shipping your part of the work. ‚ÄòIf there is conflict between teams on which approach to take, TPMs can facilitate a discussion in a neutral way and help drive a decision that is the right answer for the project, as well as communicate the decision outcome and help the teams with resourcing to accomplish it. Their facilitation of the discussion might lead to less tension than if one of the teams in the disagreement were to take the lead. ‚ÄòTPMs can save engineering leads time, share relevant context, facilitate conflict resolution within projects and synchronize teams so they move together . They‚Äôll help you out with parts of the job that you can do, but aren‚Äôt your ‚Äòbread and butter,‚Äô and it would be time-consuming for you to take on. So build trust with them, work as partners and you‚Äôll both be better off with this approach.‚Äô 7. Learning from TPMs What are useful approaches that engineers and engineering managers can learn from TPMs? Bernard Ng shared several: ‚ÄòThe more senior you become as an engineer, the more you need to be able to manage across the organization. This is the ‚Äòbread and butter‚Äô of TPMs and an area you can learn from them. TPMs regularly communicate and influence cross-functional stakeholders, all the way up to directors and VPs. ‚Äò Consider getting mentorship from a TPM  if you‚Äôre at the senior-or-above levels and want to get better at influencing people, or at leading cross-team projects. I mentor software engineers and data scientists via our mentoring program at DoorDash. People come to me for help on topics including how to run programs, how to influence other engineers, how to make their presence on the team more prominently felt, or how to get to the next engineering level. ‚ÄòTPMs oversee lots of breadth across the organization and this gives them a unique perspective, as opposed to working only in a single area. Most of them will be more than happy to share approaches or even mentor, assuming they have the bandwidth.‚Äô Further resources How can current or aspiring TPMs learn more about the role? Here are resources TPMs recommend for learning and inspiration. TPM Stories : collected experiences and journeys, written by several TPMs at Stripe. The TPM Blog : articles, podcasts and training resources related to TPM topics. Published by former principal TPM Mario Gerard. TPM Career : Yev Geyfman is a Director of TPM at Salesforce and shares advice and insights in the TPM field.  Six principles for building a world-class TPM team : a blog post from Sophia Vicent, Senior Director of Engineering at DoorDash. PMP (Project Management Professional) resources: several TPMs shared how PMP study materials were helpful for their roles. TPM job descriptions: people who successfully broke into the TPM field shared how they 'reverse engineered' the job by scouting job descriptions, and studying and practicing the topics that were expected for various TPM roles. Closing I find the TPM role fascinating for three reasons: Every senior engineer and above already does lots of things ‚Äì like  leading projects  ‚Äì that TPMs do full-time. The fastest-growing tech companies rely heavily on TPMs to scale up their engineering organization‚Äôs efficiency. While the TPM role is different at each company, the role itself is spreading steadily across the industry. For this reason, understanding the TPM role is not only useful for those working with TPMs, or who are TPMs themselves, but for anyone in tech who cares about efficiency and wants their team to execute better. In a follow-up article, we covered the TPM topic from the angle of becoming a TPM and examine common TPM career paths. We‚Äôll also dive into how and when to hire the first TPM in an engineering organization, and how to support TPMs in their career growth. Read this issue here:  Scaling organizations with the Technical Program Manager role . Thank you to  Bernard Ng ,  Grenville Fernandes ,  James Dayhuff ,  Sophia Vicent , and  Yixin Zhu  for sharing their expertise in their issue. An ask if you‚Äôre in the frontend domain:  I‚Äôm running the  State of Frontend 2022  this study in collaboration with  The Software House . I‚Äôll share my own in-depth analysis of the frontend world in the newsletter after the survey closes. I‚Äôd greatly appreciate your help  by filling out this 8-minute survey . You don‚Äôt need to share your email (handled by The Software House.) All newsletter subscribers will get survey results. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-ukraine-crisis-impact-on-tech/", "title": "The Ukraine War - and Its Impact on the Tech Industry", "content": "\n             This is an updated version of the original article published on  The Pragmatic Engineer Newsletter . Updates include the section on The \"Great Russian Tech Brain Drain\" and more details on evacuation efforts at Booking.com and EPAM. We are not living usual times, and so this is not the usual Pragmatic Engineer article. Russia has launched a full-on invasion on Ukraine on Thursday, 24 February. This event has started the largest war in Europe since World War 2 (WW2), and is the largest geopolitical event in Europe since the breakup of the USSR in 1990-1991. This article covers the impact of the war on the tech world. Impact that is already visible: The impact of this war on the tech industry.  What companies will feel the impact of this war and how much? Companies scrambling to support staff in Ukraine and Belarus.  What are they doing right now, and is there anything else they can do? Tech companies implementing their own sanctions against Russia.  In what is unprecedented, companies are not waiting for national mandates, but are taking sanctions into their own hands, often going against their economic interests. International tech companies with a large Russian presence under stress.  Can successful tech companies with mostly international customers keep a heavy Russian presence or will they be forced to make drastic changes? Simplified immigration for Ukrainians across Europe.  Could we be seeing the start of a ‚Äúgreat tech migration‚Äù from Ukraine? The \"Great Russian Tech Brain Drain\" . Will we see this happen? If so, where could experienced Russian tech workers emigrate to? Ways you can help in this tragic situation.  How you can help those in Ukraine, and advice if you have colleagues in Eastern Europe or Europe. I try to be independent in all my articles. However, it‚Äôs particularly hard for me to stay neutral in this situation. This war is not just some distant event for me, but it hits very close to home both at a personal, and a professional level. On a personal one, I‚Äôm from Hungary, with my great grandparents and grandparents living through WW2, and the horror stories living through war passed down generation after generation. Hungary also shares a border with Ukraine and many of my friends are now helping some of the more than 62,000 refugees who arrived from Ukraine to Hungary in the past four days. On a professional level, I know several software engineers from Ukraine, all of whom are now worried for either their lives or those of their loved ones. One of my best hires at Uber, in Amsterdam, was  Dmytro , with who I worked on the same team for over a year. For the past four days, his family in Ukraine - mother, grandmother - have been bombed,  Dmytro giving phone support on how to hide during air missile attacks . News of bombings and of civilians killed is not just emotionless news for me: with every casualty, there‚Äôs a chance that someone I personally know and know well, has suffered an irrecoverable loss. 1. The impact on the tech industry This war will feel closer to many people working in tech - especially in Europe and the US.  The  Ukrainian diaspora  - Ukrainians and their descendants - ¬†is especially highly respected in the world. Companies like PayPal, Whatsapp, Affirm, Grammarly have been founded or cofounded by Ukrainian software engineers. Ukraine has become a preferred destination for many companies to both hire full-time employees, and especially to contract from. Ukraine has been so popular because there is good senior engineering talent to hire, and because - unlike most of Europe - notice periods are short, and given a good budget, it‚Äôs easy enough to hire senior tech talent, relatively quickly. EPAM  is Ukraine‚Äôs largest tech company, employing more than 10,000 people, the majority of them software engineers. They are a higher quality outsourcing shop working with US and UK companies like Google, Expedia, Microsoft, Barclays, Oracle, UBS, SAP or Thompson Reuters. Anyone working at these companies might have come across engineers who are now in the middle of a war zone. Other outsourcing and tech companies worth mentioning based on the  Top 50 Largest IT companies in Ukraine  list via Jobs.dou.ua are: Softserve : 9,000 tech employees in Ukraine. Outsourcing. GlobalLocic : over 6,000 tech employees. High-quality outsourcing company with Silicon Valley headquarters, working with a large number of Silicon Valley startups. Luxoft : over 3,500 tech employees. Outsourcing. clients include Boeing, Dell, IBM, and Deutsche Bank. How much will this war impact the software industry?  For any company where the majority of the staff has been working from within Ukraine, and which companies had little to no preparation for such an event, the impact will be massive until things get back to normal. However, I‚Äôd expect that in the case of large companies working with local teams in Ukraine, the impact visible from the outside will be negligible. Internally, work for teams where engineers are based in Ukraine has already come to a halt. However, for anything critical, there are other teams to step in. Anything non-critical will be prioritized and not shipped in Q1 of this year. In a tweet from Lambda School founder Austen Allred, he shared his observation on how many Silicon Valley companies have Ukraine engineering hubs, but also how many of these companies put emergency plans in place to help people move, and executed on them: Two things I‚Äôve found interesting this past week: 1. I knew a lot of Silicon Valley companies had engineering hubs in Ukraine, but I still underestimated how much of the work in Silicon Valley happens there 2. Many of those companies anticipated this and had planned well ‚Äî Austen Allred üá∫üá¶ (@Austen)  February 26, 2022   I do expect a ‚Äútech migration‚Äù to happen from Ukraine to other European countries. However, it‚Äôs hard to predict if this movement of people will have any visible impact even on the European tech market. I cover this angle in more detail in the  Expedited immigration opportunities  section below. 2. Companies scrambling to support staff in Ukraine and Belarus A couple of tech companies with offices in Ukraine have moved early and started to relocate employees before the Russian attack started on 24 February. Companies taking this step included  Wix ,  AppsFlyer ,  Fiverr ,  Cimpress , and  Ciklum . As  Iain Martin  wrote the Forbes article  US and Israeli tech companies evacuate Ukrainian staff from possible frontline  on 17 February : ‚ÄúThe threat of further military conflict with Russia prompted Nasdaq-listed Cimpress to offer to evacuate its 500 Ukrainian staff outside the country, or to safety further west in Ukraine. Israeli website builder Wix has offered its 1,000 local staff, and their families, temporary evacuation to Turkey while a number of other tech companies like Ukrainian outsourcing giant Ciklum, and San Francisco-based startup AppsFlyer, have plans to relocate Ukrainian staff to safety. (...) Israeli freelance marketplace Fiverr, which is listed on the New York Stock Exchange, says it had a plan to evacuate Kyiv-based staff out of the country and was supporting those who remain in Ukraine.‚Äú From Thursday, 24 February, Ukraine became a war zone.  Most tech companies responded rapidly to the invasion. Some companies have transferred months‚Äô worth of bonuses ahead of time and committed to paying full salaries to any employee joining the Ukrainian armed forces for the duration of their service. Startup Lemon.io has done all the above, and also set up a safe house in Western Ukraine. As  The Information writes : ‚ÄúAt that time, Lemon.io sent employees two months‚Äô worth of salary in advance and doubled the frequency of its payouts to developers. In addition to offering relocation to anyone who requests it, the company rolled out new policies to ensure that if any employee joins Ukraine‚Äôs civilian defense force to fight against Russian forces‚Äîwhether by conscription or voluntarily‚Äîthey will be paid their full salary while at war, and developers who are stuck in regions under attack will retain their jobs and be paid in full. (...) Lemon.io also set up a safe house in Lviv, a city located in western Ukraine, where employees can get assistance and seek accommodations if the country loses internet and phone access.‚Äú Booking.com  managed to take action just before the war started. On Wednesday, 23 February the Booking.com Global Security & Resilience team sent an email to all staff, informing them that before this message had been set, they have helped colleagues in Ukraine prepare for domestic relocation, advised preparation of shelter at home, and how several Booking.com employees have already relocated with their families. Hopin  has two dozen of employees in Ukraine. Here is an excerpt from an email that CEO Johnny Boufarhat sent our on Thursday, 24 February to all staff, hours after the Russian war effort started: ‚ÄúLike many of you, I‚Äôve been tracking the situation in Ukraine closely and am deeply concerned - particularly because we have 27 Hopineers living there. I wish there was more I - we - could do to help, but we must at least do what we can to help our people there. To that end, here‚Äôs what we‚Äôre doing: - For current Hopineers: We‚Äôve issued an emergency fund of $3000 that will be executed today (along with regular salary) - Hopineers impacted by our recent restructure: We‚Äôre paying out February salary, three months‚Äô separation pay, the emergency fund of $3000, and an additional three months‚Äô salary. - We have a Slack channel set up where we‚Äôll be sharing comms and answering questions - We‚Äôve activated an Alert Team comprised of People Ops and People Partners to check in with employees in the Ukraine and have an open line of communication on their safety. Managers have also been asked to check in and remove any workload from those employees. If that‚Äôs you, please do so.‚Äù EPAM  is the single most impacted company with the events, with around 12,000 staff based in Ukraine. While the company is silent from the outside, I‚Äôve confirmed that there‚Äôs a massive internal effort to provide transportation, accommodation, health care, psychological help, facilitate donations, and volunteers. The company is helping many of its Ukrainian employees move over to Poland. EPAM has roots in Belarus and is no stranger to mass evacuation efforts. Prior to 2020, they had close to 10,000 staff in Belarus. However, following the election were a  series of mass political protests  against the Belarusian government which resulted in  countrywide raids  targeting right groups, activists, and journalists. This government-wide crackdown prompted  many tech companies  - EPAM included - to relocate their staff to other countries on short notice. EPAM developed internal tools to quickly and efficiently move thousands of people and their families: and they have used the same tools to evacuate and relocate employees and their families in Ukraine. Companies like  Snap ,  Lyft ,  Cloudflare ,  Grammarly ,  Amazon ‚Äôs Ring division, ride-sharing app  Bolt,  or gig marketplace  Fiverr  all have software engineering employees or contractors in Ukraine in varying numbers, from the dozens to the hundreds. The safety of employees is a priority for all companies as I‚Äôve learned and covered by sources like  Fast Company . Males banned from leaving Ukraine has been introduced on Friday, 25 February. Ukrainian men aged 18-60 are not allowed to leave. As many tech workers are male, this makes it impossible to evacuate or relocate these people, even if they wanted to leave. Several companies are helping move families in these cases as well, and are trying to lend support to those needing to stay behind. It‚Äôs not just Ukrainians wanting to leave Ukraine: some are going back to Ukraine.  On the first day of the war, an estimated 30,000 people crossed the Polish border to go to Ukraine. Some of them went to bring their families back, while some others did so to join the fight for their homeland like this  Ukrainian war veteran did . Several tech companies in Poland are granting no-questions-asked PTO for their staff, even if they do not advertise this fact. Support for Belarus staff  is also very much needed.   With the Belarus also having joined in actively waging war on Ukraine, there is a growing fear that men will be drafted to join the army and sent to the front line in Ukraine. Tech companies in Belarus are making plans to evacuate staff who are willing to leave to countries like Georgia or Poland. Male employees I talked with all shared they are scared of the prospect of military mobilization and forced drafting, and were looking to leave via trains or flights to any remaining country they can get to. 3. Tech companies implementing their own sanctions against Russia Several tech companies put in place bans of their own within days of the invasion of Ukraine starting. Facebook  banned  Russian state media from running adverts or monetizing content. The step came after Russia started to limit Facebook, as a response to Facebook rolling out fact-checking for Ukraine. Google   banned  Russian state media from running ads and monetizing across several Russian YouTube channels. Apple Pay  suspended  its service in Russia. Intel  and  AMD   halted  processor sales to Russia. Twitch  and  Onlyfans   blocked  the ability to withdraw money to Russian bank cards or banks. Scaleups  have joined in with the dozens. MessageBird - Dutch scaleup and competitor to Twilio -  shut down  API access for Russian customers. Startups . Omnisend - an email & SMS marketing automation platform -  stopped services  in Russia and Belarus. Lithuanian fintech  Paysera  and London-based payments transfer company  TransferGo  halted transfers to and from Russia. Small tech companies  joined in with even larger numbers. Atlassian vendors Rozdoum, CollabSoft, Softlist, and eazyBI suspended services to Russian customers. Polish company PartsBox - selling inventory parts management software -  suspended  subscriptions for Russian clients. A crypto mining pool  also joined in, with  Flexpool  - the fifth-largest Ethereum mining pool, globally - stopped services in Russia. Is blocking Russian customers the best approach in this case?  Sure, it‚Äôs tempting to follow the footsteps of sanctions that countries are doing. But will it have the effect that these companies hope: that is, helping to end the conflict sooner? From a Russian friend of a tech worker: Seeing some people on my feed removing their apps from Russian stores. Wanted to share this perspective from a Russian friend.  pic.twitter.com/ibA5PzTQNu ‚Äî Jordi Bruin (@jordibruin)  February 26, 2022   I don‚Äôt have the answer to what is the right approach. Still, instead of ‚Äúsanctioning‚Äù Russian customers, why not help refugees and contribute to humanitarian efforts? For example, game developer CD Projekt Red  donated  1M PLN ($240K) to humanitarian aid. It‚Äôs unprecedented to have so many tech companies take geopolitical stances so swiftly , in three days since the Russian invasion has started. The pace at which tech companies announce their own ‚Äúsanctions‚Äù on Russia also track the very fast pace on how Russia became fully isolated in the world, their only ally being Belarus. Two days ago, on 25 February, even one of their closest allies, Kazakhstan, denied Russia‚Äôs request to join the Ukraine invasion. And then there‚Äôs Elon Musk pulling another improbable act. Mykhailo Fedorov, Vice Prime Minister and Minister of Digital Transformation of Ukraine tweeted to Elon musk, asking for Starlink stations. Ten hours later it  was done . Ten hours from tweeting to Elon Musk, asking him to provide Ukraine with Starlink service, and to Startlink service being active in Ukraine. 4. International tech companies with a large Russian presence under stress In just three days, the attitude of Europe and the US has gone from confused to standing unified against Russia. In a previously unimaginable measure, a number of Russian banks will be  excluded from the international payments system Swift  and a series of sanctions across Russian citizens have been passed like a  prohibition of bank deposits of more than ‚Ç¨100,000  ¬†by Russian nationals. I have verified that several internationally successful companies with large Russian presence - in some cases, Russian HQs - are in panic mode right now, fearing the sanctions could hit them overly hard. Emergency meetings are in place about the option to relocate offices - or parts of it - from Russia, the possibility to move headquarters, and other ways to mitigate sanctions that could be announced as early as Monday, 28 February. My sources explicitly asked to not share the names of these companies. They are well-known tech companies that could be described as tech startup success stories coming from Russia. However, the overwhelming majority of their business is no longer in Russia, but in Europe, the US, and the rest of the world. 5. Simplified immigration for Ukrainians across Europe Companies with offices and employees in Ukraine, Belarus, or Russia are now considering offering to their staff to move to another European office - companies which have these other offices, that is. Companies based in Ukraine have little choice at the time of writing, as the war is in full force here. At the same time, Belarus and Russia are increasingly seen as unstable places to operate from, and I expect more companies with tech employees in these countries to at the very least explore opening offices in the EU, and relocate employees who are open to this opportunity. In the wake of this war, uptake should be high. Several European countries have relaxed entry requirements from Ukraine . Most neighboring countries on the West of Ukraine are allowing Ukrainians through,  often even without a passport . Poland is the main entry point, with more than 124,000 Ukrainians passing the first 3 days of the war. The United Nations estimates that another 1 to 3 million Ukrainians could join the current, roughly 2 million Ukrainians in Poland. Both Ireland and Portugal removed the previous visa requirement on entry for Ukrainians, opening borders to refugees. It is not yet clear how those fleeing the country will be allowed to work in the respective countries: however, I would hope that neighboring countries will allow for this, and more European countries follow. EU nations  agreed  to accept Ukrainian refugees for 3 years without going through an asylum process  on Sunday, 27 February. See this  extensive resource for Ukrainian refugees and supporters  on more information. Companies have started to take initiatives to help secure work visas for tech worker refugees.  In the Netherlands, Ali Niknam, founder of neobank Bunq  announced an initiative  to help people immigrate to the Netherlands on a highly-skilled visa. The Dutch regulations are strict in how they don‚Äôt allow sponsoring people as highly skilled migrants once within the EU, so the current plan is to help people get to Georgia, and apply for this visa from there. The benefit of such an approach is how people have the right to work from day one, and can set up a normal life, as opposed to having to jump far more hoops if coming to a country on asylum. Academics are also taking the initiative to help. An associate professor in Belgium  started an initiative  to help out with a 6-month long stay. Will we see a ‚Äúgreat Ukrainian talent migration‚Äù across Europe?  Even assuming the war is over quickly, Ukraine will keep living in the shadow of a future conflict: but with Russia that will be even better prepared. And if the war stretches out, many families will have no choice but to evacuate Ukraine. It‚Äôs a given that we will see many Ukrainians immigrate to other European countries. As those working in tech typically qualify for highly-skilled visas in several European countries, many of the experienced tech workers will have plenty of choices of moving within Europe. Add to this the expedited visa requirements many European countries should introduce for Ukrainians, and it‚Äôs certain that we‚Äôll see a ‚Äútech brain drain‚Äù from Ukraine to the rest of Europe. Until now, Ukraine had the pull of family, low taxes in the IT sector, and relative stability, save for the East of Ukraine. The stability is now gone, and low taxes are unlikely to compensate for an ongoing threat of war for many people. At the same time, it won‚Äôt be the first time that Ukrainians migrate in large numbers to other European countries. In Poland, a country with a population of 38 million people, an estimated 2 million Ukrainians are living here. The majority of them moved over after the 2014  Russo-Ukrainian War . 6. A \"Great Russian Tech Brain Drain\"? Will Russia see a speed up in the ‚ÄúRussian tech brain drain‚Äù? There are, after all, many companies with Russian offices who would want to move staff. And I expect that many people working in tech in Russia will want to move away from a country where all Russian media outlets are  forced to refer to the biggest war in Europe since WW2 as a ‚Äúspecial military operation‚Äù  and  detains thousands  who protest against this war. Companies are starting mass evacuation efforts from Russia, starting on 28 February.  A software engineer working at an international company with Russian offices shared: \"Management announced that they want everyone who can move out of Russia to move within one week. Chartered flights are booked for employees and families to move effective immediately. The company stance up to this point has been that no one needs to move - something changed over the course of the weekend.\" Companies employing remote Russian contractors are starting to see major problems paying these contractors.  As a CTO contracting with several software engineers in Russia shared: \"Securing future payments to Russian contractors is now a huge challenge. Most banks are already under sanctions. There are also heavy restrictions in Russia on foreign account holders such as the newly passed requirement on this morning, 28 February, to convert 80% of all incoming payments to Rubles.\" Another reason that could push Russian tech professionals to either work remote for USD / EUR compensation or to consider moving abroad is the ongoing collapse of the Rubel, following the financial sanctions and  banning some Russian banks from the global payments system . I talked with a software engineer based in Moscow who shared how the currency lost half its value over the past few days leading up to Monday, 28 February: From an experienced software engineer in Russia: ‚ÄúThe RUB to USD rate is 158 on the street‚Ä¶ from 80 a few days ago. That‚Äôs it. I‚Äôm done here. Starting to look where I can move abroad ASAP. Based on the visa options it‚Äôs likely Dubai, maybe Spain.‚Äù ‚Äî Gergely Orosz (@GergelyOrosz)  February 27, 2022   Expect sanctions to hit US and EU companies, banning them to work with contractors based in Russia.  I have received reports of Google terminating contracts with companies based in Russia. I expect this to be only the start of most companies headquartered in the US or EU following. Governments sanctioning such contracts to be in place might follow. We're seeing a new cold war start between the US+Europe and Russia. Google already terminating contractors in Russia.  Expect government mandates to follow, banning business w Russia. If you work with contractors/employees in Russia: time to make emergency plans. E.g. relocate.  pic.twitter.com/Lsjr3aH3H8 ‚Äî Gergely Orosz (@GergelyOrosz)  February 28, 2022   It would be the interest of Europe and the EU to make highly skilled immigration - and even asylums from Russia - easy. This would both help European countries hire sought-after software engineers in the middle of the hottest hiring market. Such a move would also hurt Russia, by losing tech expertise that is hard to replace. However, we‚Äôre already seeing the opposite happen. According to information from Nomadlist founder Pieter Levels - yet to be confirmed officially -,  Portugal is banning all visas  for Russian citizens. I would not be surprised at the measure given the sanctions, and I expect most, if not all, EU members to follow. Still, Europe should do exactly the opposite: make it very easy for highly skilled Russian workers to move to Europe, with the tech sector being an obvious destination. At the time of writing, Spain and Dubai are the  two most reasonable alternatives  visa-wise for Russian citizens. We‚Äôll have to see if Spain stays open, or they follow what Portugal has done in shutting the door on highly skilled Russian tech workers. I expect a ‚Äúgreat Russian tech exodus‚Äù to happen, but spread to global destinations.  Those working in tech in Russia are some of the most employable people, and also those with likely some amount of savings. Many of them will leave - while they can. The EU, as a destination, is out of the question as of now, but other destinations will be options. I am in touch with several software engineers in Russia whose international companies are strongly supporting relocating to other offices - may those offices be in the US, the Middle East, Asia, or even Europe. BTW, expect to see a massive exodus...from Russia. Anyone with means and a passport is trying to get out right now. Many urban, educated Russians are horrified and terrified, and they know that it won't just face economic hardship at home but political repression, too. ‚Äî Julia Ioffe (@juliaioffe)  February 27, 2022   7. Ways you can help in this tragic situation To help those in Ukraine: Help refugees  if you are in Europe. The UN estimates 5 million people to flee: all who have left on short notice, with little to no savings and few basic items. Ways to help include offering a shelter to stay, helping buy groceries and basic necessities, offering medical supplies, helping with transportation, donating blood, and donating money to charities for the above efforts. Many of these efforts are  already on the way  in several countries and you can join in. Your voice.  Express support for Ukraine and condemn the Russian aggression on social media or on protests on the streets. Every voice matters. Donate . Send money to the Ukrainian Army. Most of my Ukrainian friends suggested this is the best immediate support they can use. You can donate  via bank transfer  or  via cryptocurrency . Both are official accounts - even the crypto one. Amplify . Amplify initiatives that help those in Ukraine either with supplies or with fleeing. Look up sources  before sharing controversial articles and verify the information coming from trusted places. There are lots of made-up information circling around, especially on social media. Urge your government . If your government has not yet acted decisive enough, contact your MPs and urge economic sanctions and aiding support. If you have colleagues in Ukraine:  hopefully your company is already making efforts to support or evacuate employees and their families. Their safety comes ahead of anything and everything. If you have colleagues from Ukraine : understand that they are all likely going through the toughest periods of their lives and work might be the last thing on their minds, with all the uncertainty. Give them space. If you are in a managerial position, understand what would help them best, and use your authority to make it happen. If you have colleagues from Belarus or Russia : know that most of these people will be having a very tough time, even if their livelihood has not been impacted - or at least not yet. However, they will doubtless be terrified of what the future brings and might need to make preparations. For Russian residents: they face full uncertainty in the wake of international sanctions, and the threat of their savings vanishing. For Belarus residents: men are likely fearing more drafting for the army, and whether international sanctions are extended to Belarus. For Russian citizens: they will most likely get hit by sanctions, ones of which they do not know the details of, and even if they have not lived in Russia for an extended period of time. They could have visa problems in the future. Here‚Äôs a helpful thread on ways you can check-in and help: and one that applies to anyone, not just students and postdocs. A message to PIs and others who have students and postdocs from üá∫üá¶ and üá∑üá∫ working in their teams. Check on them. Ask them how you can help. It'll matter to them more than you can imagine. I'm speaking from own experience of being a grad student in the üá∫üá∏ 1/4 ‚Äî Marija Backovic üíéü¶†üî¨üò∑ (@marija_backovic)  February 24, 2022   If you have colleagues from Eastern/Central Europe , especially in countries neighboring Ukraine or Russia (Finland, Poland, Romania, Moldova, Slovakia, Hungary) know that most of them will be stressed and worried if and how this war can spread and impact them. They will very likely be following the news and could be less present at work. As an engineering leader in Poland shared with me on the second day of the war: ‚ÄúI‚Äôm terrified and feel the situation is as bad as it gets for Europe. Way worse than COVID. It‚Äôs the worst geopolitical event in my life.‚Äù Since the first few days, the same person shared how their morale is much better, with refugees arriving and this person and their friends and colleagues helping them. Some engineers are proposing to use their entertainment budgets and volunteer days to help refugees, instead of spending it on team events, with companies supporting this. If you have colleagues from Europe, know that many of them will be worried and unsure what will happen next. The news will feel closer to them as well, and their own countries will be announcing measures to support Ukraine. They might have friends in Ukraine, Russia or Belarus who they worry about. Be kind to them. How Putin‚Äôs Lies Are Driving the War in Ukraine  by historian Timothy Snyder The 12 Causes of the Russo-Ukrainian War  by war theory professor William Spaniel. In a previous version of this article, I recommended a video by John Mearsheimer, which has since been  proven to be inaccurate in its analysis . Thanks to  Jacek  for reviewing this article and Rustam for additional input. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/amazon-notable-systems/", "title": "Notable Internal Systems at Amazon", "content": "\n             Amazon has a large number of internal systems. Here are ones worth knowing about as a software engineer and engineering manager. When joining as a SDE (Software Development Engineer) or SDM (Software Development Manager), you will have to learn to use the custom Amazon stack, which is still surprisingly different from the stack AWS customers would use. Below are systems you'd likely come across. Internal systems highly relevant for SDEs Code:  code search and VCS (Git). Crux:  Amazon‚Äôs code review system. Brazil : Amazon‚Äôs build system. See a  writeup of Brazi l which although dated, is still relevant. Sage:  Amazon‚Äôs ‚Äúinternal Stack Overflow‚Äù. Amazon internal wiki system:  This has a few neat features, like making it very easy to embed graphs from AWS Cloudwatch or the prior system ( PMET  - Performance Metrics) on the page. NAWS : Native AWS. The ‚Äúmodern‚Äù stack using current AWS. MAWS : ‚ÄúMove to AWS‚Äù (old, legacy AWS systems). Many system are migrating off of this, especially on the Retail side. MAWS requires services to be spun up on EC2 machines via a system called  Apollo , but this is basically obsolete with native AWS (for which you're expected to use Lambda, or ECS, or raw EC2 if absolutely necessary). Isengard/Conduit  - AWS Account management (all systems are isolated so that each region, service and stage has a unique AWS account.  Last Week in AWS  author Corey Quinn, calls this service  The AWS Service I Hate The Most . He writes: ‚ÄúThe fact it‚Äôs the internal service used to provision AWS accounts means that AWS engineers building AWS are insulated from the way that the rest of the world manages AWS accounts. They don‚Äôt have to deal in the same way with AWS Organizations or Landing Zones or Control Tower or AWS SSO. And that‚Äôs the crux of my beef with the service.‚Äù Pipelines:  CI/CD system with support for multi-stage deployments of up to 4 stages: beta, gamma, prod, local. An AWS engineer described it like this: ‚ÄúPipelines is one of the best examples of 'making easy things difficult to make hard things possible' at Amazon. Services deploying to 3-4 stages (beta, gamma, and prod across different locales) are probably going to be apathetic about pipelines. However, services like much of AWS with hundreds of deployable units in pipelines, are pleased with it.‚Äù LPT:  Live Pipeline Templates. Ruby libraries that generate CloudFormation or CodeDeploy templates, along with defining the pipeline, Isengard accounts and other scaffolding. Each service often has an LPT package to create the needed resources. AWS CDK:  there‚Äôs a push to use this instead of LPT, but as of early 2022 it‚Äôs still a less mature system to LPT. Most teams are moving and some teams say they are especially fond of the TypeScript support it offers. 2PR:  second person approval system for sensitive operations like Isengard and SSH access to systems. Accessing systems without this required approval leads to a team ticket created automatically, which can escalate to management. Organizational systems AWS Chime:  used to be the chat and video calling application. Amazon now uses Slack for chat, but AWS Chime is still used for video calls, including interview calls. Kingpin:  goal tracking system for team, organization and Amazon-wide goals. Accolades:  a tool to give out kudos to employees with comments, with a way to easily ‚Äúcc‚Äù in managers and others. Connections:  pre-installed on company laptops. It asks a simple question at the start of your day like \"how do you feel about your manager\" or \"how much focus does your team have on Operational Excellence (OE)\" and asks for a rating out of 5. Everyone across the company is asked the same question each day.  Forte:  the Amazon-wide performance feedback process, running from late December until the end of January. Employees use the Forte tool to ask peers and people with whom they work for feedback. This is short, at 60 words or fewer. Aggregated and anonymised results go up the chain to management, whose goal is to improve their connection scores over time. They are shared with the team and the team gives feedback that their manager acts upon. Programming languages The majority of services are written in Java. However, teams are autonomous and can choose whichever language and framework they want. While Java is dominant, there is a wide variety of other languages in use across services. Want to know more about Amazon's engineering culture?  This article is an excerpt from my article  Inside Amazon's Engineering Culture . It's my longest article so far, containing more information on this topic than any one publication has attempted before. The article is available to subscribers of  The Pragmatic Engineer Newsletter . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/typical-migration-approaches/", "title": "Migrations Done Well: Typical Migration Approaches", "content": "\n             This article is an excerpt from  Migrations Done Well: a guide for executing migrations well, at both small and large scales , published in  The Pragmatic Engineer.  To get deep dives in your inbox like this issue,  sign up here . Migrations are one of the most overlooked topics in software engineering, especially at high-growth startups and companies. As a company‚Äôs operations grow, new systems and approaches are adopted to cope with extra load, more use cases, or more constraints. From time to time, engineers need to migrate over from an old system or approach, to a new one. And this is where things can get interesting, unexpected‚Ä¶ and even ugly. 1. The story of four different migrations Each migration is a story in itself, so here are four migrations. Each is distinctly different from the others. The migration with planned downtime In 2012, PayPal  announced  it would take all of its global payments processing systems down for an hour, within a three-hour window. This was to be while it moved over to a new infrastructure. It was decided that taking the system down, moving data over to the new infrastructure and then spinning it up, was the safest way to go. Even though the scheduled time was at night in the US, this migration caused losses thanks to transactions by global customers not being processed during this time. However, the migration did complete as planned, while the disruption and losses to the business were within the realm of what PayPal had planned for. The migration gone terribly wrong UK bank TSB has 5 million customers. It performed an IT migration in 2018, which ended up locking close to 2 million customers out of their accounts, unable to withdraw cash. Fixing the issues of the migration took many months; five months after the migration went wrong, some customers were still locked out of their account, and the CEO of the bank was forced to  quit  over the episode, after seven years in post. Although the root causes are still opaque, it seems this disaster was down to a lack of proper testing ahead of the migration.  Press covering the incident  mentioned configuration problems, lack of infrastructure capacity and coding issues, all contributing to the problem. The outage cost the bank at least $480M in costs, not to mention heavy reputational and business damage. The zero downtime migration When I joined Uber in 2016, the company had two payment systems: one processing pay-ins from customers (Riders and Eaters) and one dealing with payouts for partners (Drivers and Couriers). We started building a new, single payment system to replace these two standalone systems. In 2017, we switched over to the new system ‚Äì codenamed Gulfstream ‚Äì to handle Uber‚Äôs payments. The switch to a new payments system was invisible from the outside and the migration was done without downtime or major issues. This was a case of a zero downtime migration executed well. However, the long tail of the migration stretched on for years, and this long tail later turned out to cause problems. The migration long-tail causing an outage Although the new payments system worked as the primary system, Uber still had dozens of internal systems that were dependent on the old payments infrastructure. The new system did writebacks to these old systems to support consumers that had not yet migrated over. Long migrations can be risky and this case was no different. In 2018, drivers were  unable to use Instant Pay for several days . The reason was an outage in the writeback system which pushed production data to the legacy system. The system which handled driver payouts still used this old system, and as writebacks were not arriving, this caused problems with payouts. The engineering team didn‚Äôt immediately detect the outage because while the production payments system had robust monitoring, the writeback system ‚Äì meant to be in place for months and not years ‚Äì did not have sophisticated monitoring and alerting. Migration long-tails are common, risky and often cause outages, just like they did in this case. 2. Types of migrations The word ‚Äòmigration‚Äô describes a broad range of activities. Here are the most common types of migrations we engineers come across. Service replacement .   Replace OldService with NewService and move all customers over to eventually use NewService. An example is replacing an old, legacy payments system with a new one like Uber did, in the example above. Service replacement. This type of migration is very common at any fast-growing company. There might be many reasons to write a new service instead of improving the old service, such as: The old system not supporting enough business requirements. The need to improve nonfunctional characteristics like handling extra load, achieving lower latency, storing more data. The language or framework the old service was written in, is no longer supported or preferred within the organization. Service integration . Integrate a new service or approach. Service integration. Examples include: Integrate a new API for use. For example, integrate a new payments processing service. Migrate to a new version of an external service. For example, move from the v1 API of a provider to a v2 API. Migrate to a new version of a service where instead of polling for events, the new service pushes events. Or instead of synchronously consuming inbound events, inbound events are consumed asynchronously, triggering callbacks. As the examples above show, service integration migrations can include many things. There are engineers who might not even consider some of the above to be migrations, but treat them as a change in functionality. But I argue that we should treat them as migrations. This is because these are changes where an external service alters, and your code also changes to ensure correct future behavior. This characteristic is what makes them risky changes, and why it‚Äôs wise to proceed with caution, following a migration playbook. Service extraction . Move from an in-system dependency to an external one. This is a common approach at high-growth startups when large services get split up into smaller ones. Service extraction. On the surface, service extractions seem like some of the most simple migrations. After all, we‚Äôre just moving code that already works into a new service, right? Wrong. Service extractions are much more risky than simply moving code around. There are risks around networking and the correctness of the new service; especially as the code is rarely copied and pasted. Also, extracting a service comes loaded with future operational risks. While service extractions are one of the easiest types of migrations to pull off successfully without any monitoring or alerting in place, I suggest to avoid this temptation and to follow a more thorough migration runbook, like that we discuss below. Code migrations . Moving a part of the codebase to use a different framework, library or a programming language. Code migration. The biggest challenges of this type of migration are: Large-scale change.  It‚Äôs not uncommon to have to change a very high number of files and lines of code. Hard to rollback . Because the change is so large, it‚Äôs also difficult, or sometimes impossible, to easily roll back the change. This is the opposite of most code changes which are small and can be unwound very easily. Harder to test in production . As the change is large-scale, it can be harder to test the full change under production traffic. A few examples of code migrations: Migrating to a new language. For example, Stripe  migrated  3.5M lines of code over a weekend, from JavaScript type checked by Flow to Typescript. Upgrading to a new major version of a library, which introduces API-breaking changes. Changing coding patterns across the codebase. For example, updating a JavaScript codebase codebase to use  promises  instead of callbacks. Data migrations . Migrating one or more databases to a new schema or database engine. Data migration. Data migrations are one of the most risky types of migrations. There are several reasons why: Difficult to roll back.  When code is changed, it‚Äôs easy enough to roll back a migration by rolling back the code. But this isn‚Äôt always the case with data. Difficult to do in an atomic way.  Ideally, a data migration is done as an atomic step. From one moment to the next, the old database or schema stops being used and all data moves to the new database or schema. But in practice, moving data takes time. This is why it‚Äôs much easier to do a data migration with downtime. Data migration is often tied to code changes . For the migration to work as expected, code changes often need to be made at the very same time as the data is migrated. More edge cases to worry about . You will need to worry about edge cases like producers writing to the old database or using the old schema, or consumers not being able to understand the new schema. Infrastructure migrations.  Move storage, computing or networking infrastructure to a new provider or a new location. Infrastructure migration. Infrastructure migrations are the most risky, as they impact all services using that infrastructure. An infrastructure migration gone wrong can take down all dependent services with it. For this reason, these are the ones that typically need more preparation than even data migrations. While all other migrations are virtual in the sense that they typically involve moving code or data, infrastructure migrations are when the physical infrastructure might also need to be moved or changed, and onsite work might be needed. Although most companies use cloud computing providers like AWS, Azure or Google Cloud, plenty of companies still operate their own data centers, or run their own server boxes. Infrastructure migrations can mean changes to these as well. Service and tool upgrades  are also changes which can cause outages. Examples of this include upgrading the CI/CD system to the latest version, updating JIRA to a new version, and other tooling infrastructure changes. But for upgrades, the vendor of the tool is the one performing the migration. It‚Äôs advisable to understand how this migration happens under the hood and if it‚Äôs a high-risk upgrade, and to use the approaches in this article to reduce the risks of the update. This was part 1 of 3 on how to do migrations well. Read the rest of the guide here:  Migrations Done Well: a guide for executing migrations well, at both small and large scales . Part 2: Executing a migration.  Read it here. Preparation Pre-migration The migration After the migration The migration‚Äôs long-tail Part 3: The people and the business side of migrations.  Read it here. The people aspect of migrations Selling migrations to the business Closing advice for migrations Further reading \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/scaling-customer-support/", "title": "Big Tech and the reality of scaling customer support", "content": "\n             There are plenty of good examples to take from Big Tech when it comes to software engineering: from how they  empower engineers , through how they  run projects  or even how they  architect systems . However, customer support is not one where Big Tech has much thought leadership to offer. Take this full-page ad posted in the JS Mercury News on Monday, 22nd January, which was a call for help from an agency that spent more than $800K on ads with Google: A full-page ad serving as a plead to Google on 2022, 22 January. See  a thread of comments here . Customer complaints handling at scale is broken at most tech companies.  The easiest way to experience this is by starting to work at a consumer-facing company. Choose Google, Meta, Bytedance, Spotify or any other one. As soon as you update your LinkedIn profile to the new gig, you start to get messages from friends of friends asking to solve one of their problems. They message you because you're the only human they can get hold of at these companies. Every now and then you'll see how broken the process is in public.  Note: a year later, this article was heavily quoted by the New York Times article  Help! I Was Banned From Lyft and No One Will Tell Me Why . Down the rabbit hole of customer support When working at Skype, and at Uber, I got plenty of these inbound messages. An account blocked. A video call not working with a contact on a regular basis. A payment stuck. At first, I was eager to help. I'd open a support ticket and try to route it to the right internal teams. I sometimes would be able to find someone working on the functionality that was broken. However, none of my tickets got resolved. Some sat idle. Some got closed as duplicates of known issues. And some resolved as \"won't fix.\" What was going on? Why was no one fixing these issues? The longer I worked at these companies, the more I understood the rationale. There were two underlying reasons: 1. ML black boxes . For complaints related to fraud, this almost always came from a machine learning system flagging an account for suspicious activity. The fraud teams had to balance false positives (tagging people as bad actors who were, indeed, not, causing users churning) and false negatives (tagging bad actors as good users, causing a loss to the company).  When an ML model decided to ban an account I was told by a friend of a friend was legit, I had no options but to hope the team owning the ML model would do something: either whitelist the account or tweak the model. For the most part, nothing changed as a result of my report. 2. Functionality broken for some users.  Several bug reports indicated issues that were happening in certain edge cases, often in a non-deterministic way. I spent countless hours trying to reproduce some of these issues. Unfortunately, what I've seen is there's an 80-20 rule in play here. 80% of customer reports were useless in the sense that they were really either hidden asks for new features, exceptions or were non-issues that were resolved by using the feature in the way it was intended.  About 20% of the reports pointed to something fundamentally broken which might have impacted more users. Getting to this 20%, and figuring out what the issue really is, took up a lot of time. And yet, even when I figured out the root cause, made a well-written bug report with reproduction steps and estimated impact, almost none of these got fixed. The carrot and the stick at Big Tech To understand why customer complaints are rarely addressed at large companies, it's important to understand the incentives structure. Carrots  are things that these companies reward. Stuff that gets people better performance reviews and promotions - and, at the end of the day, better financial and career rewards. At most of Big Tech, carrots are: Business impact Increase revenue significantly Decrease costs significantly Fixing customer issues impacting a few customers - and well below 0.1% of the population - is not in this box. So it won't be rewarded. Alright, but won't anyone get in trouble for not attending these issues? Let's look at what gets people into trouble. Sticks  are the opposite of carrots: things that pull down your performance ratings, block you from promotions, and can get you fired. At most of Big Tech, sticks are: Not delivering adequate business impact Unprofessional behavior  Poor feedback from your manager, peers, or direct reports (the last one only if you're a manager) Not spending any time on one-off customer issues won't trigger any of the \"stick\" parts - unless your business impact is measured by doing so. Unless you work in customer support, this is unlikely to be the case. Amusingly, spending too much time on customer issues might even get you in trouble.  If you spend a considerable time fixing customer issues, you will likely only deliver a small impact. This, in turn, can activate the \"stick\" that comes when you don't deliver adequate business impact, and result in a poor performance review and no promotion.  The Amazon exception Even though I've been generalizing Big Tech, one company does not fit the above. This company is Amazon. And it's for a simple reason. Amazon has made Customer Obsession the single most important company principle.  The company has 16 Leadership Principles, but - as I've covered in  Inside Amazon's Engineering Culture  - has insisted that Customer Obsession is always the most important one. At Amazon, Jeff Bezos built an efficient escalation chain. Customer complaints could be routed upwards, or sent directly to him. Jeff would review many of these himself, and when he found it an issue where the customer was right, and it should have been fixed, he would forward the issue to the team owning the problem area, typing a single message along, which was this: ? This is a message Amazon teams dreaded to get. It meant the  Eyes of Sauron were on them  and needed to fix the underlying issue, and respond with the fix.  If Jeff Bezos was not happy with the fix, he would summon the leader of the team to him to present a better fix in two week's time. I know this because I talked with a senior Amazon leader who confessed the trip to Jeff's office was the single most stressful walk he'd done over his career, and he sweated through his shirt by the time he got to present. Amazon has a very powerful \"stick\" in place that most Big Tech does not.  There is no option to ignore customer complaints: and this attitude starts at the top. The Google approach of automating customer support Google is on the other scale of customer support. The company has been a pioneer in launching projects with no customer support, and filling the gaps with self-service tools. In 2011, when I was a paying user for the beta version of Google Apps Engine, I spent more than $1,000/month on the product. Still, the only support channel was a Google Forum where fellow customers would advise on problems. If we were lucky, a member from the Google Apps team would show up - but there was no guarantee of ever being able to interact with anyone from the team. Even after building the largest email system in the world, Google does not offer human support for customers.  Gmail has more than 1.5 billion users, and has scaled up thanks to great engineering and with the help of self-service tooling. And yet, if you get locked out of your email, you have no options to contact a human, even if you wanted to pay for this. The support page for  getting locked out of your Google Account  ends with no option to contact any support channel. The  page for requesting to restore a Google Account  is a form where someone at Google might review your account one final time. Google hides the fact that they do offer paid support from most of its customers.  Reading through all official Gmail help pages, there is no indication that Google offers any means to purchase paid support for Gmail. However, this is not entirely true. Google launched a new product called  Google One  which is a plan to get more storage, and a vague promise of \"access to experts\". It's unclear if this means customer support versus Google enthusiasts, and Google, seemingly deliberately does not clarify what \"experts\" mean beyond someone who \"speaks fluent Google\", whatever this means: You have access to \"Google experts\" with Google One. Is this customer support? Or just people who can read out the FAQ for you? Google makes this unclear, likely on purpose. Will Big Tech change? Most of Big Tech is going down the same path Google has chosen. Build self-service systems and minimize the customer support surface. Even when offering customer support, limit the surface area, and have no incentives for engineers to tackle one-off customer problems. And you know what? Not investing much in customer support is profitable.  Google, Meta, and other companies following the self-service automation model are doing great profit-wise. So much that companies which have historically offered good customer support are cutting down on these costs. Booking.com has been known for its decent customer support. Now they are   firing most in-house customer support people  to replace them with an outsourcing agency. Given that Big Tech rewards decreasing costs, it's little surprise that cutting down on customer support will be an initiative that frequently comes up - and a temptation hard to resist on the long-term. As a former Amazon engineer put it, it's hard to measure the dividend of customer support. This is why most of Big Tech de-prioritized investing in this area. But it doesn't have to end gloomy for all of Big Tech.  As I was researching how Big Tech does customer support, another example stood out: Apple. I have heard relatively few horror stories on Apple customer support. Apple seems to offer a mix of self-service, but also human touchpoints in their support. Turns out, Apple has incorporated customer satisfaction scores - CSAT - as a target for teams to focus on. And so they do. And it's not just Apple. Since I  tweeted  about how Big Tech does a terrible job at customer support, I've heard that Meta is launching a new customer support organization, sponsored by Mark Zuckeberg. I'm not holding my breath, but we could see customer support across Big Tech improve. Voting with your feet While we wait to see meaningful customer support changes, is there anything we can do? There is. Vote with your feet, and with your wallet. Gmail might not offer support for customers, but plenty of email providers which charge for their service do. Both  Fastmail  and  Protonmail  are examples where customers have clear support paths, should they run into any issue. Instead of getting frustrated for being unable to reach support at Google Analytics even when paying, choose a smaller tool like  Plausible analytics  - like  I am doing  - and get a direct line to the team for questions and queries. While Booking.com might be cutting down on customer support costs, the smaller travel agents and hotels and accommodation providers depend on providing this support to scale. Going small, of course, always carries risk. Smaller companies might go out of business - or they might grow, and start to optimize on their customer support costs. Still, you're more likely to get the service you expect when things go wrong, versus using Big Tech companies that are deliberately under-investing in this area. And, who knows: these competitors gaining business might be just that nudge that Big Tech companies need to up their game. Perhaps with enough people switching email providers, Google might even one day change the term \"Google expert\" to \"customer support\" and include it in their help pages. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/how-to-become-a-full-time-creator/", "title": "Becoming a Full-Time Creator as a Software Engineer: Controversial Advice", "content": "\n             I'm making a living by writing, full-time.  My newsletter  is the #1 paid technology newsletter  on Substack . I'm what some describe as a full-time creator.  With remote work becoming more common in tech, I get more and more messages from people asking the same: how can they do what I do? Despite being considered a successful creator, I don‚Äôt think that ‚Äúcreator‚Äù is a real thing  - at least not a category anyone can or should aim for. This post collects my thoughts on how to become a full-time creator. Or, as I prefer to think of it, run a one-person, bootstrapped, profitable startup. My background When  I left my job  as an engineering manager at Uber in late 2020, I had nothing lined up on purpose, and decided to spend the coming 6 months writing  a book , and then found a startup related to platform engineering, likely with VC funding. Things turned out differently. 18 months later, I  published several books , but am still writing  The Software Engineer's Guidebook .  However, I never raised funds to build a startup. Instead, I doubled down on writing, starting my newsletter in September 2021. 4 months after starting this newsletter, it hit the #1 paid technology newsletter spot on Substack - here is  the summary of what this meant . My advice is controversial The \"creator economy\" is booming, and there are many examples where people make a seemingly amazing living by having a huge number of subscribers. They make a living from their ‚Äúfame‚Äù. Excel Girl  with a million followers, and making six figures is such a story. If you work in tech, a former Google and Facebook engineer going by the brand  TechLead  regularly boasts about being a millionaire. TechLead makes most of his living through sponsorships in his YouTube videos and through dubious activities like  selling his own crypto coin ,  misleading his followers , and profiting  millions of dollars . Many people assume that a large following, and somehow \"cashing in\" on a following is what they should aim for.  I think these examples are poor ones. They are outliers both in how well they are known, but also they don't reflect how most people leaving employment make a living. My advice is controversial because it goes against the traditional advice most creators share which is usually limited to building an audience or a following. I won't touch on this: even more, I'd caution making audience building your  main  end goal. Instead of talking about succeeding as a creator, I'll instead talk about how to succeed as a small business. Making a living, but NOT as an employee Making a living as an employee at a tech company is straightforward: get the job, perform in line with expectations, get paid. Get promoted or switch jobs for more money, more challenge, or for both. What happens when you quit employment? Assuming you want to make a similar amount as an employee, you have a few options: 1. Become a freelancer or a contractor . Do almost the same work for similar companies. You get paid a higher rate but have to manage your own books and source your work. Contracts are often for fixed lengths, and you need to find your next contracts. Even if on longer contracts, you're laid off easier than if you're an employee. 2. Bootstrap your own business and employ yourself . Start a business offering services or selling goods. As a freelancer, you might sometimes do this for tax reasons, or if you get more business than you can handle and need to hire others. For selling goods, most of us in tech would sell digital goods like building a SaaS and selling seats for it, selling digital education goods like courses or books, and so on. As the business brings in profits, you then either employ yourself, pay out dividends from business profits, or do both. You're truly your own boss now! 3. Raise funding and start your own business, employing yourself.  If you want to earn comparably as much as you did working in tech, bootstrapping might take too long at times. Some people will instead opt to raise funding such as venture funding to accelerate hiring and building their business. You are still in charge, but not nearly as much as if you bootstrap. Investors now have preferences in several cases, and they will hold you accountable for the money they put in. One thing to keep in mind is raising venture funding usually requires you to have done upfront work and show traction, often done through bootstrapping. 4. Invest your savings and live off of gains.  If you've worked in tech for a while, there's a good chance you have savings. You could use these savings to invest in stock markets, day trade with them, and - hopefully - make a profit. I know several people who started day trading full-time. Buying real estate and renting it out is another approach. Investing some amount of your savings is a good idea, regardless of if you‚Äôre an employee or working for yourself. Amazing enough, the above four categories cover most cases on how you can make a living when not an employee. So why is \"creator\" not listed anywhere? It's because being a creator is one of the above categories, depending on how you approach it. Instead of \"creator\" think \"one-person business\" Being a creator sounds like this wonderful opportunity to do whatever you want, people paying attention, then somehow making money off of this. The concept of \"I get to do what I want, how I want it\" is exactly the same with any one-person, bootstrapped business. As long as you don't take external funding, you are fully in charge, and get to decide how you want to make money. Most creators are B2C (business to consumer), bootstrapped businesses . They typically make their revenue through selling: Own digital products  and subscriptions. For example, this is how former Stripe engineer Julia Evans makes a living creating  Wizard Zines  which are visual programming explainers. In 2019 she already made  more than $30,000 in a month . Small software products  that can be built by one person. These include apps, games, SaaS software and many others. For example, software engineer Riley Tomasek started to build  Standard Resume  as a resume generator when he applied for tech companies. This was the tool that got him his job at Dropbox. A few years later, this side project grew  to $5,000/month in revenue  and Riley later quit his fulltime job, and is currently working on this product. Sponsorships and advertising . This is a typical model of how many creators with a large audience monetize the fact that many people pay attention to them. Affiliates  - where they get a cut of all sales. B2C creators are ones who often build in public. Doing so often attracts future buyers, and it helps build their brand. One of the first people who started building in public movement is  Pieter Levels , founder of NomadList, RemoteOK, and other sites. He is currently at $2.9M/year revenue rate and  openly shares  how his business - and revenue - progress.  Tony Dinh  is also someone who shares his business journey and earnings path as he‚Äôs building SaaS tools, as he‚Äôs currently at around  $70K/year revenue rate . There are exceptions to the \"bootstrapped business\" concept, though very few. YouTube creator Marina Mogilko  has taken  a $1.7M VC investment in return for 5% of her creator earnings for 30 years. She'll likely use this money to invest in expanding her YouTube and other offerings by hiring more support: just like a business would. Her setup is closer to a one-person VC-funded business. How do you prepare for running a one-person business? Instead of asking \"how can I one day be a full-time creator\", anyone aspiring to do this should ask \"what are things I can do today to prepare to run a one-person business?\" Turns out, there are plenty, even as you work full-time, as an employee of a tech company. Become more product-minded . Learn about how the business works and how it makes money. You'll need this skill to decide what products you'll ultimately offer. Sell something online . It could be anything: an ebook, a course, or sponsorship for your blog. You'll learn more about becoming an entrepreneur this way than by reading any number of books.  At least I did . Understand what others do, and how they do it . Follow people who have successfully pivoted from working in tech to being full-time creators.  Daniel Vassallo  is well-known for leaving Amazon - and $1M over the next two years - and launching a series of small bets. Many people in the  Small Bets community  are following in Daniel‚Äôs footsteps.  Julia Evans  makes a living selling Zines,  Josh W. Comeau  and  Kent C. Dodds  make a living educating on technology and  Justin Welsh  is building a portfolio of one-person businesses with millions in revenue. There are more and more publications covering the reality of one-person businesses and the creator economy. The ones I read are  The Information Creator Economy  and  Simon Owen's Media Newsletter . Read articles that outline the  gritty reality of the creator middle class , not just success stories. Pay for niche resources . The Information's  Creator Economy column  will set you back by $20-40/month. You might decide it's not worth paying for it, after all. But here's a lesson to learn as you think about this: anything niche that only interests a small number of people needs to be paid, or else it won‚Äôt be a profitable business. Think about this lesson as you'll consider how to get people to pay for what you'll offer. Another reason you should sell  something online . Become a \"tech influencer\" . Although the \"influencer\" description can feel click-baity, I really liked the  well-grounded advice  Will Larson gives on what you can do to have more people pay attention to your thoughts and work. Will is the CTO of Calm and author of  An Elegant Puzzle . Will's advice is that it's both hard work, and strong leverage to have the attention of many people who expect that you have interesting, valuable, or entertaining things to say. Understand the models of making money The biggest challenge most people quitting employment face is this: how do I make enough money, on my own? The good news is, that as someone working for yourself, you have lots of options to make money. However, not all are easy, and some might be out of the question, depending on the type of one-person business you start. Here are common ways one-person businesses make money: Common ways one-person businesses make money. 1. B2C: selling to consumers.  A popular model, as it's easy to get started, and it's the approach you see popularized on Twitter the most. Here's what many businesses sell: Books . Especially easy to do these days with self-publishing tools like  Amazon‚Äôs KDP platform . This is how my friend  Alex Xu  published the #1 Amazon computer science bestseller  The System Design Interview Volume 2  after writing it full-time for over a year. Several software engineers self-published books they wrote on the side, while working fulltime jobs. Shawn Wang  made $25,000 in his launch  on The Coding Career Handbook, Randall Kanna made  $30,000 in a few months  on The Standout Developer, and Emma Bostian made  $40,000 in pre-sales  of Decoding the Technical Interview Process. I also self-published  all of my books . Courses and webinars . Platforms like  Podia ,  Gumroad ,  Teachable  and others make selling courses and digital goods easy. For example, this is how former Amazon software engineer  Curtis Einsmann  created the course  Master the Code Review , earning $18K in two months. Tools . Designer Traf  made $101K in 6 days  by selling  an icon set  for iPhone. Fellow creator Louie Bacaj suggests for engineers to start with this category. He says: ‚ÄúI really believe it's easier than ever to build some small software tools and make some money. Afterward, you can even sell them on  Microacquire . This is how I am building  ThreadX , a small app to get feedback on Twitter threads before publishing them.‚Äù Subscriptions . Charge recurring fees to access newsletters or SaaS services for consumers. This is how I am writing  The Pragmatic Engineer Newsletter  which has thousands of paying subscribers. It‚Äôs the model former software engineer  Dru Riley  started his newsletter Trends.vc which made  close to $300K/year a year later . Your time . Offer your time to be booked for mentoring, coaching or advice in exchange for payment. Your sawdust . If you‚Äôre someone with years, or decades of experience working in tech, you can likely just sell your sawdust: things that are already in your head, like your past experience. This is what former Director of Engineering  Louie Bacaj  did when recording a course on  Timeless career advice for software engineers . Louie took a few days in total to record this course, building on a decade of experience. The person who coined this term is  Daniel Vassallo  who, after working for years at AWS, wrote a book in two weeks about  The good parts of AWS . This book made more than $40K in  just a few weeks . 2. B2B: selling to businesses.  While you‚Äôll hear lots about B2C strategies, and revenue numbers shared, you will come across far less transparency when it comes to B2B. Selling to businesses means selling to fewer customers, but charging each customer much more. In fact, when selling to businesses, you might be able to charge each customer a different rate! Selling to businesses is harder to get started, and more difficult to get traction. Once you do so, it is usually less effort to keep it up, and a B2B approach can be more profitable than many B2C strategies. Here are a few B2B approaches: Ads . When you have enough visitors on a website or social media, you might be able to monetize with generic ads.  I made $2,300 in a year  through small ad placement on this blog - an ad slot I have removed at the beginning of 2022. Producing content.  Businesses are open to paying freelancers to produce articles and videos for them, and they tend to pay more for technical content. This can range from a few hundred to thousands of dollars per piece. See the site  Who Pays Technical Writers  for resources. Sponsorships . A more profitable version of advertising is sponsoring websites, videos, newsletters, and podcasts. The creator customizes these and chooses ones that are more relevant for people consuming these. Revenue from sponsors is usually much higher than placing generic ads. Sponsorships might start at a few hundred dollars, and could go all the way to millions of dollars. Here's how Pieter Levels  sold $600,000 worth of sponsorship  for one of his sites. Sponsored articles or videos.  When you have a large enough targeted audience, businesses might be open to \"super sponsorships\", when a whole piece is about this. This is  the business model for the Not Boring newsletter  which covers companies as part of sponsored deep-dives, which can cost $20-50K a piece. Online courses . Kent C Dodds created the course  Epic React  and has sold  more than 10,000 licenses , generating revenue in the millions. I'm listing this course under B2B as it's an example where although it's sold as B2C, the biggest customers are likely companies buying these as training for their staff. Workshops . Offering live group workshops for teams. This is what Pat Kua does with  Tech Lead academy . Cohort-based courses . This category is one that has taken off only in the past few years. One of the oldest and most successful cohort-based courses is  Write of Passage , running twice a year. Although the price of $4,000 to attend is high, this is a good example of a premium offering that deliberately prices itself for people who have far more than $4,000 to gain by becoming influential writers. I‚Äôve talked with people who have taken the course and have nothing but praise for both the content, and the network of people they met: many of them current or future influencers through writing. People who took this course include fellow creator  Loue Bacaj , who shared how this course changed his mindset on the creator economy and contributed to him eventually leaving Big Tech. Developer tools . Tailwind CSS. In the five months after releasing Tailwind UI, this tool  brought in $2M  for creator  Adam Wathan . Since then the formerly one-person business has expanded to a small business. SaaS offerings . There are a host of SaaS services to be sold to businesses that can be built as a one or two-person business. Plausible analytics - the analytics tool I use on this blog - has grown  to $500K/year in revenue  with this approach. Selling a whole business.  Many software engineers manage to create SaaS offerings and tools which gain some traction, but not enough to generate a full-time revenue. Instead of keeping it on a lifeline, you can sell these businesses on  Microacqquire . Here‚Äôs a story on how a software engineer  sold their profitable SaaS for well above $35K . What are things people and businesses pay for?  This is a question you need to understand if you want to make a living as a solo business. Neither people, nor businesses like to part with their money. Here are a few categories that they do spend it on, though: To make more money . The most obvious approach. If, by paying you $100, a person or business can make $1,000 directly, or indirectly, you'll find your offering easier to sell. For professional education.  If you can teach people things that make them professionally more valuable - and thus allow either them to make more money, or their business to operate more efficiently - they will pay for this. My newsletter is in this category. For entertainment.  A common reason - however, as you'll compete with the likes of Netflix or Spotify, it's rare to pull this off as a one-person business. For edutainment . Although entertainment is a hard category to crack for a one-person business, edutainment - a mix of education but done in an entertaining way - is much easier. Courses and videos which explain concepts in fun ways and which tell stories are excellent ways to get people to pay. To sell to your audience . If you are someone who has a large number of followers, companies will be interested in paying you so they can advertise tho this group, and - ultimately - make money from them. Because they like you . Yes, this is also a thing. The more people know and care for you, the more likely there are several who would pay just so they know they support your journey. Admittedly, it‚Äôs not the most stable business model to plan for. Social media not used as a channel to make a living off Many of the traditional \"creators\" try to make a living purely off social media. They're the YouTubers who post videos several times a week, running sponsored videos. The Instagrammers with millions of followers doing the same. Many of these people ineviatebly either burn out, or lose their income stream as The Algorithm starts showing their content less. A much better model for the \"sustainable creator\" is creating on the side of the one-person business.  Basically, focus most of your energy running your business which makes money, and create some related content to this business. This is my approach, for example for  my YouTube channel , my  Twitter  and my  LinkedIn . I post videos or content when I have time. I try to keep it useful, and often take things from my main work - my newsletter - and share ¬†it on these channels. I'm not the only person who is following this approach.  A commenter on Hacker News  shared their observation with me that photographers with as much as 500K YouTube subscribers are doing the same: \"Recently, I've started getting into Youtube again, but following a couple of different hobbies much more closely; woodworking/making, and photography. What you describe is echoed by a few of them, namely, they do not really attempt to make a sole living purely off of Youtube. Instead, Youtube is kind of a marketing channel for them with auxiliary advertising revenue. Basically, they sound a lot like you, in that they're all running a small business, typically as opposed to pure client work. But I don't think any of them see Youtube as a basis of their revenue; it's more of just another marketing channel. Examples include  Sean Tucker, photography  and  Lincoln St Woodworks .  I suspect the best generalization is the \"1000 true fans\" approach, where they're just trying to use different media to just contact those true fans. And build a business around that interaction, and just monetize everything else they can. While many aspiring creators are dreaming of audiences of millions of followers, I suggest looking at these more grounded examples. Build a business that generates revenue, and use creator tools and social media as a tool to help market this business, and not as a means to an end. Experiment with multiple revenue streams The nice thing about building your own business is you can experiment, have several streams of income, and over time decide which ones you focus more on. If you‚Äôre just starting out, try to get started with a revenue stream earlier, rather than later. Making your first dollar that doesn‚Äôt come from a paycheck changes your understanding of money, business, value, and how they are connected. Of the above models, I‚Äôve made use of ads, affiliates, sponsorships, B2C book sales, and B2C and B2B subscription or education-related sales. Note that I have since retired ads and affiliates. Here's how much I  made on ads , and  how much on affiliates . People who create content that has a wide reach often start with ads, sponsorships, and affiliates as their income streams. Those starting off with a more specific niche tend to start off with subscriptions, sponsorships, courses, or books as streams. In most cases, you won‚Äôt know what works better until you try. Books are an interesting area, as they don‚Äôt sound terribly profitable, and they are the most work to produce. However, because they take so much work to do, there‚Äôs less competition among excellent tech books for a given topic, than there is for videos, articles, or even courses. Run your one-person business like a proper business If you think of yourself as a one-person business, how many people work here? One person, right? Wrong. Highly profitable one-person businesses work with several people so the person in the middle - you! - can leverage their time the best possible way. This means investing in people and tools to spend your time more efficient. Buy tools that make you more productive.  In my case this means paying for  Grammarly ,  Canva  or my note-taking tool ( Craft ). I buy equipment like noise-cancelling headphones which helps me focus when writing, bought an ergonomic desk for home and also rent an office where I usually get things done more efficient. Hire specialists for things that are not your core competencies.  My core competencies are networking with people, researching interesting topics on software engineering, and writing about these. Things I can do, but I'm not very good at include copyediting my writing, editing videos, and filing my tax records. So I hired contractors who help me with these tasks. I believe that working with contractors is a partnership and invest in these relationships accordingly. The best contractors usually have too many clients and inevitably dump clients who don't treat them with respect, or who are not profitable ones. I aim to not be this client who gets dumped. Treating contractors as your equals and helping them where you can go a long way. Decide if you want to grow beyond a one-person business. Former MD  Ali Abdaal  started off as a one-person business. Today, he employs close to 20 people running Part-Time YouTube Academy, publishing courses and podcasts. In 2021, his business made  $4.8M in revenue .  Ali is one of the extremely transparent creators, which might be surprising to see. For example, he recorded an in-depth guide on  starting a YouTube channel and growing it to a professional business . However, looking through the lens of a successful business, Ali's strategy makes perfect sense. He runs a B2C business where most of his revenue comes from three sources: People buying his chort-based course for YouTube creators People buying his courses on Skillshare Sponsorships As a B2C business, being transparent on his numbers serves as a marketing channel, attracting people who aspire for similar success as Ali. These videos are both a sales funnel for his courses, and also an opportunity to run sponsored ads thanks to the large viewership. What is worth noting about Ali is he decided early on that he will run a profitable, but not one-person business, and hired staff accordingly. Not all creators are one-person businesses. In fact, the most successful creators have large teams working with them in the background: except most of them are not as transparent about this as Ali is.  Prepare to take a risk You can do all the research you want, but if you'll never make a leap, you'll never know if you could make it as a one-person business. A few things that help are these: Build up a nest egg.  Save up as you work in tech, so you have a financial cushin to do something risky later on. Build side projects to learn more about yourself.  I have always done this, building  dozens of side projects over the years . Consider small bets on the side . Former Amazon engineer Daniel Vasallo is the pioneer of the small bets strategy for which he offers a course. Several engineers I know  took this course  and started to do their own small bets approach. Build up unfair advantages . As a one-person business, you'll have to somehow stand out among the crowd of businesses offering similar things - advice, education, entertainment and so on. While you are working full-time, can you start to build out things that will become your unfair advantage? Former Gatsby engineer Josh Comeau had published on his blog well before launching his CSS course which made  $500K over the launch . I  wrote this blog for 6 years  before launching  my newsletter  off the back of the success of the blog. Think of alternatives to one-person businesses . Don't box yourself into the idea that you  need  to start a one-person business. Keep the door open for other, even better, opportunities that might come your way. There is no one beaten path The biggest surprise I had after leaving the corporate world is how little of a beaten path there is in succeeding as a one-person business. While working at Uber, my career options were clear. Get promoted as an individual contributor all the way to the Principal Engineer levels, or switch to the manager path and make it to Director, VP Engineering, or CTO one day. As a one-person business, such career paths don't exist. It's down to you to define what success looks like for you. And not only is it ok to think outside the box: the most successful creators consistently do this. Copying what works for others is a strategy, but I found more success by experimenting with new ideas, and doubling down on them when I feel they are doing well. When you work for yourself, there are no rules, which is both scary, and a huge opportunity.  After years of working for corporate, this means you need to let go of old habits and embrace new ones. If you make the leap, know that everything changes. As a result, you will, as well. You rarely hear about failures There is no shortage of success stories from people who seem to be successful \"creators.\" I know plenty of people who have the right \"vanity\" metrics, but lack a meaningful business behind it. Even amongst the people who are perceived to be successful as \"creators,\" only a subset of them have a sustainable business. And then, there are the people who you rarely hear about: ones who gave building a one-person business a go, and it didn't work out. I met a software engineer who, after working at a Fintech startup for 6 years as employee #1, decided to become an \"indie hacker.\" For almost a year, he built a several businesses from the ground up. However, none of them took off. After a year, he returned to work at the same Fintech startup he left, and told me that while he was happy he gave the indie business a go, he realized that the reality was not as glamorous as he thought. The stream of \"success stories\" can be deceiving in assessing how easy it is to build a sustainable business.  An unusually honest reflection on this comes from  a post on Hacker News , where a software engineer writes: \"I'm writing this post because I'm done. I can't do this anymore. After three failed attempts at building a successful startup and spending time institutionalized, I'm giving up on my entrepreneurship dreams. (...) But it's not just the lack of success that's getting me down. It's also the constant stream of digital nomad influencers on Twitter who sell extremely distorted, rosy, and often times false dreams to indie entrepreneurs like myself. They make it seem like building a successful startup is easy and anyone can do it with the right mindset and a few key tips. But the reality is that it's not that simple. It's fucking hard and it takes more than just a positive attitude to make it. (...)  To all the indie hackers, hacker news, and Reddit readers out there, please don't be fooled by the false promises of digital nomad influencers. Building a startup is hard work and it takes time.  One of the best pieces of advice, in response to this post, is  this one : \"Having done several options -- entrepreneurship, job, internal entrepreneurship, and consulting, my advice: - Entrepreneurship isn't a lifestyle. Stay in a job unless you have a good idea and are ready to execute. - Try your idea internally. Starting a new product in a company is easier than outside. It doesn't have a $1B upside, but it has enough upside, in all respects (not just financial -- learning, credibility, etc.). - If that doesn't pan out, go external only once you're pretty confident of success. My experience is that entrepreneurship isn't so much hard or take luck, as it takes a lot of groundwork: - You want a diverse set of skills. Management. Finance. Sales. Technical. Legal. Market research. Etc. It's not a place for specialists, and it takes time to develop those skills. You also ought to enjoy (or at least not hate) most of them. - You want good market timing, which comes with experience. - You want a good idea with traction. That's where nights / weekends fit in. Nights / weekends don't give enough time for a successful startup, but they give enough to do early prototyping. Doing a (failed) startup as a student is a good learning experience. I wish I had done it. I don't wish I had done it three times, or as an adult. Oh, and selling false dreams is part of being a successful entrepreneur. You'll get zero customers if people think you're on the verge of going broke.\" Even when a business takes off, it can take years.  Former Google engineer  Michael Lynch 's story highlights how challenging it is to build a sustainable business. Michael  quit Google to work for himself  in 2018 after he was passed on promotions 4 times straight. He has shared an annual review ever since, sharing his financial results (which is the amount he could pay himself a salary on): Year 1 : -$20,000 (on $2,200 in revenue) Year 2 : -$2,400 (on $7,200 in revenue) Year 3 : -$3,900 (on $63,000 in revenue) Year 4 : +$14,500 (on $479,000 in revenue) Year 5 : +$6,000 (on $807,000 in revenue) It took 4 years and half a dozen projects launched for Michael to find a product that took off - the hardware project  TinyPilot . For the first 3 years, Michael could not afford to pay himself a salary: and it is by year 4-5, this trend seems like it could be changing (although he still does not pay himself).  Starting a business has a very real opportunity cost. In the case of Michael, he gave up years of salary (and equity!) he could have earned by working at a place like Google for the uncertainty of finding product-market-fit and building a one-person business. At the same time, he gained the type of experience it's hard to get by working as an employee: but he needed to fund this experience up front.  It's rare for people to be as transparent in how their business grows as Michael is - even though I suspect that most one-person businesses are more similar to what he is building. Everyone's path is unique: do what makes sense for  your  circumstances.  Treat success stories with context - and reasonable scepticism, and know that building a one-person business is a mix of spotting a market opportunity, executing on it, past experience and a lot of luck. Those who sell you \"proven\" ways to create a thriving business usually run a business of selling advice - which can itself be a good enough business, but not every customer will get the success they thought they pay for. These are the observations I have, and I'll close by  not  giving advice. You know your circumstances, the opportunities and risks around you: and you are in the best position to decide if it's worth pursuing a business idea, experimenting with it on the side, or if it's better to let it rest for now. Thanks to  Loue Bacaj  for reviewing this post and offering feedback. Louie quit his Director of Engineering job in Big Tech to start his creator journey which he regularly  tweets about . I thoroughly enjoyed his  Timeless Career Advice course  which is unfiltered advice for software engineers and engineering managers. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/layoffs-at-klarna/", "title": "Inside the Layoffs at Klarna", "content": "\n             Late last month, midday, Monday, May 23rd 2022, employees at Klarna were growing increasingly nervous. In the early hours of the morning in Europe, an all-hands meeting had appeared on the calendars of all ~7,500 employees. Attendance was mandatory. A few minutes later, this invite vanished. Employees I have talked to told me they felt something was not right; this kind of notification simply disappearing had never happened before. Two hours later, the same meeting reappeared, with mandatory attendance at 4pm in Sweden, 10am on the US East Coast. Employees told me that dread and speculation spread fast, with people unsure if it was bad news or just business as usual. The mandatory meeting turned out to be very bad news. In a pre-recorded video message, Klarna CEO Sebastian Siemiatkowski announced Klarna would lay off employees. On the call, he didn‚Äôt mention numbers, only that ‚Äúthe vast majority will not be impacted‚Äù and that those impacted would receive emails soon. After the meeting ended, an article was posted on one of the main Klarna Slack channels; it was published by Techcrunch and went live during the video call. Most employees learned from this article that Klarna was laying off 10% of staff, about 700 people. In the two weeks after the layoffs, I talked with more than 30 current and former Klarna employees to understand how the layoff was executed, how it has impacted people, with an emphasis on those working in tech like software engineers and engineering managers. This article walks through how the layoffs happened, takes a pulse of how people are feeling. A recurring theme of this round of layoffs was poor internal communication. Employees tell me that struggles with internal communication started much earlier, and a major internal event in 2020 whose consequences continue to be felt today. This article was originally sent to subscribers of  The Pragmatic Engineer Newsletter  - the #1 technology newsletter  on Substack , with more than 100,000 readers. If you've not signed up yet,  subscribe  to get weekly articles like this one in your inbox. 1. The pay cut of 2020 which became permanent It‚Äôs May 2020 and Klarna has reported fantastic quarterly results for the first quarter of the year. May is around the time when pay rises and promotions are usually awarded. However, the date of raises and promotions just keeps being pushed back, with leadership saying they‚Äôre being cautious because of the potential impact of COVID-19 on the business. Fast forward to summer and Q2 results are out. The numbers are also fantastic. However, there‚Äôs still no news of raises. The majority of employees in Sweden start their summer vacation; with many going away for up to a month. Out of the blue ‚Äì and while many employees are on holidays ‚Äì everyone receives an email that needs action within a week.  The email is along the lines of ‚ÄúAll raises going forward will be paid not in cash, but in stock (RSUs). You need to sign this form within 7 days, else you will not get any stock awarded.‚Äù The email closes by telling people to discuss questions with their managers. People now scramble to understand what‚Äôs going on, many of them interrupting their vacation. They get in touch with managers ‚Äì also on vacation ‚Äì who likewise have no idea what is happening. Update from Klarna: ‚ÄúAll communication to managers included information on the setup of the review and equity component related to this update ahead of time.‚Äù Employees told me that at this point the mood was close to a riot, with people assuming Klarna was walking back on pay rises and trying to trick them into not getting RSUs either, by sending these emails right when everyone was away. The company‚Äôs leadership had quite the confusion to clear up. During the following weeks they explained that not issuing cash raises and bonuses was a precaution, in case COVID-19 did hurt business. In 2020, employees did not get cash bonuses. From 2021, bonuses and pay rises were a mix of RSU and cash . Leadership communicated this as they wanted everyone to own a piece of the company. The difference is how most private startups award cash  and  shares for employees as bonuses. In 2020, raises and bonuses were awarded only as RSUs, not in cash. Starting from 2021, the setup is more nuanced. Bonuses are still paid as RSUs. For raises, each level had an RSU target. Until this target had been reached, the raises are split 50:50 between cash and RSU. For example, take someone with a 5% target, who is awarded an 8% raise. They would get 4% in RSUs, and 4% in cash. Someone awarded a 11% raise would get 5% in RSUs (hitting the limit) and 6% in cash. Employees I talked with understood they took a hit for the company to be able to operate with stability, and to avoid potential layoffs. But these layoffs have now happened anyway, despite the cash savings made since mid-2020. Employees told me this panic-inducing internal communications mix-up over bonuses and managers not having clarity ‚Äì despite employees being told to talk with them ‚Äì was typical of the company. As an employee summarized: ‚ÄúI loved working at Klarna for plenty of reasons, but internal communications were always a mess, and one that did not get better over time.‚Äù 2. The road from a $45B valuation to layoffs Klarna was on a fundraising and growth spree during 2021. In March, the company  raised  $1B on a $31B valuation. Just three months later in June, the company  raised  another $639M at a $45.6B valuation. The firm doubled down on hiring, product development and launching new initiatives. Winning in the US became an increased focus  from early 2021. The company  bought a Superbowl advertisement  in February 2021, and started a hiring spree for US employees, claiming explosive growth in the US. In a June 2021 article, CEO Sebastian Siemiatkowski  confirmed  Klarna was using part of the newly raised capital for this growth. Some employees I talked with later shared how they thought that overspending on the US ‚Äì with too little to show for it ‚Äì was something that might have contributed to the later layoffs. Klarna‚Äôs ‚ÄúSuper App‚Äù was an area getting lots of investment in 2021.  This investment was a step away from the core offering of the handling of payments. The vision of this app was to create an experience where people could do all their shopping within a Klarna super-app. However, this super app never launched as planned. Internally, confusion arose when it emerged the super app would use scraped data from customers who were already partners of Klarna. The super app efforts are still progressing slower than originally planned, and some employees think the company is spending too much on this area for too little return. Cost cutting exercises started to become more common in 2022.  Some teams were asked to look into lowering vendor costs this year. An example of lowering vendor costs was how Klarna decommissioned data platform Splunk during one of these exercises. People I talked with did not think this was unusual, or something to worry about too much. There were plenty of reasons for employees to believe Klarna was doing well.  The company  completed  its acquisition of PriceRunner in 2022, paying $124M, of which 40% was in cash. The acquisition was ongoing when Klarna mandated cost-cutting across the board. This did not sit well with some employees, and there were questions asked on Klarna‚Äôs internal Slack channel about why the company was acquiring PriceRunner if it needed to cut costs. The company also announced the opening of a new development center and its intention to hire another 500 employees on May 4th, less than three weeks before the layoffs began. Again, an employee wrote in Klarna‚Äôs internal Slack channel:  \"Why did we acquire the PriceRunner if there is cost-cutting?\" Performance reviews and promotions happened as planned in May 2022. But from the inside, it mostly seemed like growth was good and the business was, too. Hey, Lisbon! üáµüáπOur Chief Technology Officer,  @yaron_shaer , has announced the opening of a new product development centre - set to create hundreds of jobs while supporting our rapid global expansion.  @Moedas , Mayor of Lisbon, also attended the event to welcome our investment üôå  pic.twitter.com/8p2vgBspOW ‚Äî Klarna News (@KlarnaNews)  May 4, 2022   A hiring slowdown.  Starting in March this year, Klarna gradually rolled out a hiring freeze across some departments. In early May, the company stopped hiring and I talked with several candidates interviewing for software engineering or engineering manager positions, whose applications were put on hold. Promotions and big spending events still went ahead.  In what employees still find odd: the annual review and promotions ¬†process happened as scheduled in May 2022, and raises were paid around the 20th May. This raised the question for employees: did leadership  really  not know 3 weeks out that they would do layoffs? On the 29th March, Klarna also announced how Smooth week - a major Klarna event with all employees attending - would be held in-person, travel provided by Klarna, and it would be held in an European location. Holding this event signalled that cost saving was not  that  important; otherwise this event would have not been organized to be in-person. I asked employees if they noticed warning signs before the layoff.  The overwhelming answer was ‚Äúno.‚Äù As a current employee shared: ‚ÄúThe culture and expression within the company for the last couple of years has been all about success and growth. We pushed hard to expand our recruitment programs and to hire more employees than we engineers thought was needed. The culture of ‚Äúwe are awesome‚Äù has dominated most internal communications for the last couple of years, including in 2022. We all believed that we were awesome and would continue growing and winning.‚Äù One criticism I heard was how Klarna ‚Äì and most employees working there ‚Äì ignored the change in the market, while the major FinTech players were responding to it. In February 2022, PayPal announced it was no longer focusing on growth. In a memo, PayPal shared: ‚ÄúWe are shifting our emphasis more towards engagement and towards driving higher value (net new active account-holders). Consumers who are more engaged drive incremental sales for our merchants and they drive growth at much higher margins and ROI (return on investment). ‚ÄúMoving forward, we will continue to grow our users, but our focus will be on sustainable growth and driving engagement.‚Äù Given the market was already shifting earlier this year, some employees felt Klarna could have hit the brakes sooner, like PayPal did. 3. Layoffs: Day 1 Monday May 23rd was a terrible one for all Klarna employees I talked with. At 10am EST / 4pm in Sweden, Klarna‚Äôs CEO announced the news of the layoff in a pre-recorded video call. The cut would mean 10% of staff being let go via either a follow-up email sent to all staff. At this time, Klarna‚Äôs internal Slack had 7,539 members, so some quick maths showed around 700 people would be let go. Layoffs in the US kicked off immediately after the news announcement.  Klarna has less tech presence in the US, but some US-based software engineers were to be let go at once. In the US, those impacted had a call scheduled about an hour after the pre-recorded call. This Google Meet call was led by a Klarna US leader and another person whom employees were not familiar with. The call lasted 2-3 minutes and no questions were allowed. At the end of reciting the script, the leaders said they appreciated everyone‚Äôs time on the call and then logged off. People to be let go got a calendar invite to talk with HR, some having to wait until the end of day at around 5pm, for this conversation. Meanwhile, none of line managers ‚Äì Accountable Leads or Competence Leads, as Klarna calls them ‚Äì had information about what will happen. Hearing about layoffs for the first time, some managers tried and failed to argue with the People‚Äôs Advisory Board and HR to remove people on their team from the redundancies list. I have confirmed a story where a manager tried all day to make this happen, failed to do so and then was laid off, along with most of their team. In the HR meeting, people got no answers on why they had been laid off, or what the criteria for firing people was. In the article  Preparing for Layoffs in Tech , I suggest to those needing to execute layoffs to prepare for this question, ahead of time: ‚ÄúPrepare for the common question of ‚Äúwhy me?‚Äù People will ask how they were selected to be laid off. Was it performance based? Tenure? Based on job family? Business organization? Know how HR and managers can answer this question. Ideally, the answer to ‚Äúwhy me‚Äù will be that the layoffs are based on the business need for roles, and have nothing to do with performance. However, in practice companies sometimes make performance-based decisions on layoffs. Be clear what you can and cannot share, but never share reasons that aren‚Äôt true.‚Äù In the US, people laid off had access restricted to all their systems that same day. During the US layoffs, Klarna HR could not answer how much health insurance people would get.  I talked with two employees laid off who assumed their health insurance runs out at the end of the month, but HR could not answer any questions about it. A few days later, Klarna communicated by providing 2-6 months of coverage, depending on tenure. This setup attracted backlash from both the people let go and current employees. Klarna increased the severance package on 1st June in response to this backlash. People laid off in the US started posting messages to the #general Slack channel.  One of the messages getting the most reactions was from an employee sharing their experience of the layoff: ‚ÄúAt the beginning of this month, I was actually given a promotion, raised up a level, and given a salary raise. All of a sudden, we have the mandatory meeting with the news that 10% of the company will be laid off. I get an email saying that my position has been affected by these changes and I will have a meeting with HR. Obviously, I realize what‚Äôs coming. Meanwhile my AL (Accountable Lead) and my CL (Competence Lead) know nothing! Absolutely nothing - no news about this, me, or how it will even impact our team.‚Äù I heard disturbing news about how those laid off in the US did not have their health insurance covered beyond the end of the month, which gave them only 7 days to figure out their insurance situation. This lack of interest in employee benefits shows both a rushed and poorly planned layoff in the US, one that will hurt the company‚Äôs image in this region. Employees laid off created and started to circulate a Google Sheet spreadsheet with their contact details.  As people learned they were laid off, many added their details to this document, which is intended for hiring managers and recruiters to reach out with opportunities.  See the spreadsheet here . 4. The night of dread for many Klarna employees While the layoffs were underway in the US, people in Europe still had no news. Managers and employees were equally in the dark. Klarna made a major mistake in not letting the majority of employees know if they were safe from layoffs or not, for a whole night.  I exchanged messages with agitated managers and employees throughout the night of 23rd May, and here are some quotes showing their dread: ‚ÄúWhat is crazy is the uncertainty right now. I‚Äôm a people manager for several people, some of whom are new to business, others junior, and I‚Äôm reduced to chatting with my US based colleagues to see if anyone from our part of the business is affected, and speculate if we will have layoffs in our team tomorrow.‚Äù ‚ÄúMorale is very low because almost the entire staff has watched Klarna rise like a rocket and suddenly the confidence is gone in a heartbeat. People are questioning everything, but don‚Äôt know anything.‚Äù ‚ÄúI have been in tech for 20 years and I have never seen a more poorly executed round of layoffs. They announced a mandatory meeting and immediately canceled it. Then rescheduled it two hours later. All day we were filled with dread and speculation, only to have it confirmed and then extended while we waited all week for a dreaded email.‚Äù ‚ÄúA lot of people in the company are very young - e.g., everyone is under 30 in my team - and almost all of us relocated. So, there‚Äôs just huge worry and uncertainty. The whole situation is a shame because working at Klarna is truly fantastic on a normal day.‚Äù ‚ÄúI have no idea if I need to send out my CV tomorrow to apply for jobs, or if I‚Äôll still have a job. I am updating my CV as we speak.‚Äù ‚ÄúI‚Äôm (for now) still a Klarna engineer but that could change tomorrow. I‚Äôve never felt this kind of stress before.‚Äù At 3am, I got this message from a tech employee in Sweden: ‚ÄúNobody knows what will happen. We were told that tomorrow, from 8:00 to 9:00 AM Swedish time, those who will be let go will get an email with an invite to a meeting. Only affected ones will get an email. So you can imagine what an awful night this is for all of us.‚Äù It was a bad night of waiting for everyone involved. 5. Layoffs: Day 2 It took Klarna until 10:00am Swedish time on Tuesday to provide clarity on what to expect from the rest of the layoffs. This was the time when leadership shared the process of how the layoffs will proceed. They did this through an announcement on Klub, the internal portal for Klarna. The message read: Process Timeline - Week 21 - Klarnauts should work from home this week: Monday, May 23 : individual meetings start in the US with all employees that are impacted. Tuesday, May 24:  Individual meetings with employees across all other jurisdictions begin. Calendar invitations go out each morning ahead of meetings taking place that day:  Impacted employees will receive a calendar invite titled ‚ÄòMeeting regarding your role at Klarna‚Äô from one of your leads in your domain. The invite will be marked ‚Äòprivate‚Äô and not visible to anyone but meeting participants. Only employees that are impacted will get a meeting invite. Following the meeting with your lead, People Advisory will contact you and follow up on the next steps and what this means for your employment at Klarna. Wednesday, May 25: We are aiming to have all impacted individual conversations complete by Wednesday afternoon. However, there will be some domains where this will take longer. Sebastian and the CXO team will then host a company-wide meeting at 4pm CEST, an invite will be sent out shortly. Subsequently in coming days: Employees who have a new role or teams whose scope has changed will connect with their leads on this as soon as possible after the individual meetings have taken place. Competencies and Domains will host All Hands to bring further clarity on the new organizational structure to those impacted. How to support colleagues during this uncertain time We ask one thing - please be kind to each other in this difficult situation by not asking insensitive questions, but rather let your colleagues and friends share their personal news should they want to. This is also not the time to speculate in our open messaging channels about teams and individuals. By the time the above message went live on Klarna‚Äôs internal wiki, individuals were receiving invites for their meeting with HR, indicating they were likely to be laid off. Some teams took to Slack to announce when they were done sending out invites. Here is a message that received hundreds of ‚Äúthumbs up‚Äù and ‚Äúsupport‚Äù emojis as a response: ‚ÄúHi everyone. This is a tough day. I want to inform you that invites have now been sent out to all the [Org name]. No additional people from our domain will receive an invite. Please take care and support each other in these challenging times.‚Äù The way people knew they were ‚Äúsafe‚Äù was by not getting an invite in the morning. The reason some org leads announced all invites had been sent out in their domain, was to communicate that anyone without an invite could now relax a bit. Several long-tenured and respected people were laid off, making people speculate that layoffs in Sweden did not follow the LIFO (last-in-first-out) principle.  When conducting mass layoffs, Swedish regulation suggests letting go of the newest staff first. Klarna did not follow this principle, and seemingly randomly laid off people across teams. Those I talked with saw no real pattern. Here‚Äôs how an employee summarized their observations: ‚ÄúThere are people who were let go who relocated less than a month ago, as well as people with more than five years‚Äô experience. There is no pattern. The only way I know I am safe is if I did not get an invite.‚Äù By this point, frustration was high enough for several people that they asked their managers if they could volunteer to take a severance package and just leave the company. In all cases ‚Äì unsurprisingly ‚Äì this was rejected by managers. Unless someone was on the list, they could not ‚Äúvolunteer‚Äù to leave. This is consistent with how the process usually works with layoffs. Those laid off were read a script by HR in their meeting, with the person delivering the news unable to answer questions. People were told to wait for further instructions that would arrive later that day. Klarna did not technically lay people off, it offered a mutual separation package with more severance than required by law.  As the first people got the packages, it became clear that Klarna offered better terms than they needed to. The deal Klarna offered to Swedish employees was this: 3 months of garden leave and severance for those at the company less than 3 years 5 months‚Äô severance for those with the company more than 3 years Keep laptop and phone A Google form was sent to all employees, asking if they had any questions, and was promised to be answered on the Q&A next day. This form gathered more than 500 questions in just a few hours, well above usual engagement rate for all-hands questions. Some departments held internal Q&As on the day.  I talked with a software engineer who shared the contents of one such meeting: ‚ÄúNo C-level leaders were present. Our department leadership apologized that all of us had to go to bed not knowing if we will have a job the next day. They said this approach was the fairest option for all. Product teams were apparently less impacted by layoffs than the administrative parts. Leadership prepared this process for the past 2 weeks. Leadership emphasized that this is not a layoff, but that people are being invited to leave. ‚Äã Affected people have 10 days to decide if they take the offer from Klarna. Direct managers were briefed only in the morning. The reason for this decision was the ongoing concern that people would learn about this event from the Press if it was shared with managers. The people who were supposed to join Klarna should get more information today. Apparently, some of them will still be hired. Tomorrow we will have a large Q&A with the whole C-level team.‚Äù 6. Layoffs: Day 3 & the Q&A By Wednesday, most HR conversations were done and people had clarity if they were safe or not, by which I mean in Europe they had been invited to leave Klarna, with 10 days to think about it. The C-level leaders hosted a Q&A where they gave more context on the layoffs and answered 8 pre-vetted questions of the more than 1,000 which employees submitted. Here is what was shared at this meeting. The principles of the layoffs : Minimize the time from the layoffs announcement, to the meeting invite. Minimize the time from the invite arriving, to the in-person conversation. Have a person who participated in the layoff decision at this in-person meeting. The leadership team felt they executed the layoffs in the right and quickest way, given they had to juggle several time zones around the world. They chose 4pm CEST for the layoffs announcement so no Klarna employee would get the news in the middle of the night, regardless of which office they worked in. The leadership team admitted the timing of the meetings was a tradeoff. They thought it would be better if people received the invite on the day of the meeting, and not before and acknowledged it was a hard time for everyone involved. Leadership then talked about layoffs in Sweden. They shared that if they would have done layoffs the ‚Äústandard‚Äù way, it would have meant about 6 months of uncertainty until a decision was reached and people would be let go, based on tenure. The C-level felt that would have not been the right decision, even though going through the standard process would have been cheaper for the company, as there would have been no severance pay if they had followed that process. The C-level said they saw these layoffs as the ‚Äòfinal‚Äô round and did not forecast more to follow.  The leadership team mentioned they were sad to see rumors about future layoffs. Honestly, this was an odd comment to make, given it‚Äôs a natural assumption for people to make after an out-of-the-blue layoff. Leadership blamed macroeconomic factors for the layoffs. They mentioned the economic downturn and how the global economy is trending downwards. Klarna‚Äôs CEO then took a dab at unions.  In the past day, the interest in joining a union in Sweden had skyrocketed among Klarna employees, as they learned that unions offer some layoff protections. The CEO said employees at Klarna are superstars, and superstars don‚Äôt want unions negotiating for them. Swedish companies must negotiate with unions before layoffs. However, this was not the case at Klarna, nor is it the case at most Swedish tech companies. Klarna does not have a collective bargaining agreement (called ‚Äúkollektivavtal‚Äù in Swedish) in place. This means that Klarna as an employer is not forced to negotiate layoffs with a union. Instead, Klarna is entitled to negotiate directly with each affected employee, which they are doing. I can imagine the spike of interest in unions is not good news for Klarna‚Äôs leadership, as with a strong union and a collective bargaining agreement in place, any future layoff will be more difficult to execute. Talking with employees, those not interested in unions started to look into how these organizations work, and how they can join. There‚Äôs few better adverts for unions than a CEO condemning them, while wielding the ax on people‚Äôs jobs. I have heard mixed feedback on how helpful this Q&A was for employees.  Roughly half of the staff said their confidence in Klarna leadership increased compared to the past few days, and these people said they felt leadership took some accountability for the layoffs. The other half saw it the opposite way; that leadership showed no empathy and no accountability during the Q&A. This group recalled the negative statements in this Q&A; leadership taking a dab at social media and the Press for what they felt was incorrect reporting, and taking a stab at unions. Forbes reporter  Iain Martin  shared more details about this call, and  wrote  that the CEO voiced his disappointment about ‚Äòunfair and uneducated‚Äô criticism: ‚ÄúOn the Wednesday call Klarna‚Äôs billionaire co-founder voiced his disappointment at ‚Äòunfair and uneducated‚Äô criticism of the staffing cuts, which sidestep Sweden‚Äôs tough labor laws and unions with buyout offers for the startup‚Äôs staff.  Some staff outside Sweden were let go after the call, and others have also received buyout offers. 'Considering the complexity‚Ä¶it disappoints and I must say I would have expected a better climate where 48 hours is an acceptable time limit to have that conversation internally,' says Siemiatkowski, who holds a $3.2 billion stake in Klarna.‚Äù Almost everyone I talked with was disappointed by the performance of CEO Sebastian Siemiatkowski, who sounded bitter and angry about the media backlash and did not hide his feelings during the Q&A. What most people missed was the leadership taking responsibility for how the company did not prepare for the downturn in time. Takeaways If you‚Äôre a leader at a company: I suggest you consider the damage a layoff can do to trust.  I‚Äôve talked with a variety of people, mostly those not laid off, who used to be huge fans of Klarna and its leaders. The loss of trust in leadership is palpable and surprising to hear and is echoed by almost everyone. The fact so many people not laid off are job searching, should also give pause for thought. Klarna laid off 10% of its employees. Would it have been better to slow hiring several months ago, and not hire some of the ~700 people who have now been let go? I am strongly of the view that there are a  lot of things every company can do to avoid brutal layoffs . It starts with responsible planning and paying careful attention to the business environment. I‚Äôll close with my conversation with a software engineer who joined Klarna a few months ago and who used to be full of enthusiasm: ‚ÄúMy manager is great and supportive. However, I already lost my trust in my company, despite not being laid off.  I‚Äôm getting so many messages from recruiters - it‚Äôs overwhelming. I finally decided to respond and try to find a company that can offer more stability. I don‚Äôt need another layoff out of the blue. I have seen no assurance that Klarna would not do this again, unannounced, just as it has done now.‚Äù Read the extended version of the article , which additionally includes: Numbers  on how many tech employees and managers were let go US severance package details  on the \"before\" and \"after\" packages Takeaways for engineering leaders  to learn from: the good, the bad, and the \"could be good or bad\" of this layoff. Read the extended article here. Read more advice on  preparing for and executing layoffs in a humane way . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/job-ads-for-software-engineers/", "title": "Job Ads to Hire Software Engineers: My Advice", "content": "\n             I've been running  The Pragmatic Engineer Job board  for several months. This is a job board targeted at software engineers and engineering managers. It's one of the few job boards with a money-back guarantee in case of no qualified applicants: and I've issued 4 full refunds from about ~100 job posts. I've analyzed posts that have done exceptionally well, and those that did poorly. This post collects my advice on how to write a job posting that is more likely to get qualified applicants in the current, hot hiring market.  I also share reasons I observed job posts get no qualified applicants. Characteristics Well-Performing Job Ads Share The best-performing job posts shared several of these: Above market salary, advertised.  The simplest and most effective way to get an outsized number of applicants - and many qualified ones - is to pay well, and be specific about it. For examples of the ranges that are competitive, see my article  A CTO's Guide to Remote Compensation Strategies . Salary range.  Posts that listed a range got  3-5x  as many applications as ones that do not list one. The more competitive the range, the more applications. My theory is that when a company not known to most people does not post a range, most people assume that the range is low. Saying salary is \"competitive\" makes people assume the salary is in the bottom tier of the  trimodal compensation model . A strong brand . For companies which are well-known tech organizations, they see far more inbound even if they ignore much of the advice in this list. Even more, many of these companies see healthy traffic for their own career pages, making it less important to advertise roles that are not specialist ones. If your company is a startup or lesser known, this naturally does not apply. Reduce the number of \"must have\".  The more expectations you list, the fewer applicants will apply. Try to keep this list as low and reasonable as possible. Selling as well, not just listing expectations.  Unless your company is well-known in the industry, sell the position in the posting as well. The mission, what people joining will own and what they will learn. Interview process lightweight enough and explained . Posts that make it clear what the interview process is tend to get more applications - especially when the process is lightweight. While there is no shortage of people who will go through an 8-step process at Google to get a $500K/year position, most people will not engage with places that have heavyweight processes and do not compensate similar to Big Tech. Offer remote and t arget a larger region.  If you can accommodate remote applicants from a region like the US or EU, you'll see more response than if you're only hiring in a given city. While it's understandable to have preferences, posts that get better response rates which are hybrid setups often list their main city and leave a remote option within the timezone open as well, as they feel out the market. Inclusive language . Avoid language that puts off certain groups from applying. Read more advice about  hiring - and retaining - a diverse engineering team . Get in front of more eyeballs.  Once you have a job ad, you need to get it in front of many people so it catches the attention for those who are passively - or actively looking. To get the attention of those looking actively: post on job boards. To capture passive folks: post on channels they are present. For example, my featured jobs show up on the bottom of this blog and on my Twitter. There are other job boards which advertise on surfaces outside the job board. For more advice on writing a job advert and defining a hiring process, see my articles  Hiring a Software Engineer  and  Hiring an Engineering Manager . Characteristics Poorly Performing Job Ads Share The type of job ads that got very few, or no qualified candidates typically had one or more of these: Targeting small markets (cities) AND no salary or low salary.  A company listing a posting for a software engineer to work from  only  from onsite in Amsterdam, listing a salary considered low for a senior engineer (‚Ç¨50-70K) saw no applicants. Another listing to hire only in Lisbon and Barcelona, and with no salary range also saw no applicants. Asking for too many expectations ¬†AND not sharing a competitive salary range.  2. Asking for too many expectations AND not sharing a very competitive salary range in-line with what you are asking for. Here's a job ad that would get applicants... only if it had a high compensation package also advertised. Else these senior people won't bother applying.  pic.twitter.com/Gh0EAYCjJn ‚Äî Gergely Orosz (@GergelyOrosz)  April 14, 2022   Offer too low a salary.  A company in the US advertising a mid-level position as \"$100K+\" got no qualified candidates. Most candidates assumed they pay $100K, which is too low for this market. If you can pay up to $180K, say \"$100-180K\". A wide range is not ideal: but it is better than a very low number. Suggest that knowing the local language is a massive advantage.  A company that added how speaking fluent Turkish is a big plus saw no qualified applicants. They were basically telling people if you don't speak Turkish you'll be singled out, as everyone else already does. 80% asking for things, and 20% or less selling the position . Unless you're a well-known brand you need to sell yourself as part of the job ad. This job market is not a company's market: it's a job seeker's market. I hope these pieces of advice help in crafting a great job ad. For more tips, see my article  Hiring Software Engineers . If you're a hiring manager working at a company with a great engineering culture, and want to reach software engineers and engineering managers both actively and passively looking: consider posting a featured job on  The Pragmatic Engineer Job Board . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/netflix-levels/", "title": "The Scoop: Netflix‚Äôs historic introduction of levels for software engineers - exclusive", "content": "\n             Originally published on 1 Sep 2022 as an exclusive to all Pragmatic Engineer subscribers. Publications have taken over the details shared here weeks or months later - such as Levels.fyi  sharing  a subset of the below details 3 weeks later. To be the first to hear about changes like this,  subscribe to the newsletter . üëã Hi, this is  Gergely  with a bonus, free issue of  The Pragmatic Engineer Newsletter . In every issue, I cover challenges at big tech and high-growth startups through the lens of engineering managers and senior engineers. Today, we cover one out of five topics from  the full The Scoop issue .  Subscribe  to get weekly issues. In April of this year, I covered how Netflix intended to introduce levels for software engineers in  The Scoop #9 : Netflix is considering the following leveling system: - Engineer 1 - Engineer 2 - Senior - Staff - Principal The details of the system are still being worked out, and a proposal has been circulated within engineering. The proposal, understandably, has resulted in lots of questions, especially around whether existing engineers will be getting Staff or Principal titles. The original proposal made it seem that everyone would stay Senior, and with promotions, they could get to the next levels. Why would the company introduce levels if it got on just fine without them for the past 25 years, growing to close to 2,000 software engineers with all of them senior software engineers? I suggested there are problems with the system: The first cracks in the ‚Äúone level across all of engineering‚Äù started to show about a year ago, when Netflix formalized the hiring of new grads in 2021. These engineers were not senior engineers by any means and were given the title of Software Engineer. A problem Netflix faced was defining the career path for these new grads.  A possible approach could have been to have a Software Engineer level and a Senior Software Engineer one. The problem with this approach is it can take a long time for new grads to grow into the senior role. Instead of waiting years, many are more likely to leave. For Netflix to retain new grads, it would have been sensible for them to create a ‚Äúmid-level‚Äù career position, which most companies call Software Engineer 2. This is a position most engineers realistically reach in about 2 years. In a further 2-3 years, they then grow into the Senior role. Another challenge Netflix had with its leveling was consistently attracting above-senior talent.  As everyone is a Senior Software Engineer, Netflix typically receives less interest from staff-and-above engineers in Big Tech. This is not to say it cannot hire from this group and it has done so. Thanks to paying top-of-the-market compensation, they have poached staff engineers from the rest of Big Tech. Still, lacking a formal ‚ÄúStaff‚Äù level or similar, many Staff+ engineers in Big Tech tend to assume Netflix either doesn‚Äôt need or doesn‚Äôt reward Staff-and-above people. This is somewhat different to Facebook, where everyone has the Software Engineer external title, but internally, Facebook has granular levels, from E3 all the way up to E10. I covered Facebook's engineering culture - including levels and career progress at Facebook -  in this two-part article . Netflix has since clarified to engineers why it made these changes to levels.  In an internal document, leadership shared: Netflix has evolved and grown in terms of members, employees and overall complexity. While the business has changed and our organization has grown, we have not evolved the way we build our engineering teams. We believe that additional structure is required to evolve team composition to maximize the impact of our people-cost budget, facilitate more consistency and transparency of our compensation practices, and create clarity to guide and recognize growth. We aim to provide the innovative technical solutions required to support business innovation and Netflix‚Äôs long-term success, at a cost commensurate without business growth. To help achieve these goals, we plan to introduce an IC career pathway. In Engineering, the levels being introduced will apply to the job families including Software Engineer, Security Engineer, Test Engineer, Technical Program Manager, etc. In a shorter update, leadership outlined the reason a bit more concisely: Introducing an IC career pathway solves some of our key challenges by allowing us to: 1. Evolve team composition to maximize the impact of our people cost budget 2. Improve consistency, rigor and transparency of compensation practices 3. Create clarity to guide and recognize career growth‚Äù The main driver behind Netflix‚Äôs new levels seems to be cost.  It just was not efficient to pay everyone as a senior engineer, on what would sometimes be a staff engineer or principal engineer budget at another Big Tech firm. I talked with senior software engineers in Latin America making $150,000/year, one in the US making $425,000/year, another making $525,000/year and another making $800,000/year. Before these changes, everyone‚Äôs expectations were the same. Still, one of them was paid in what‚Äôs likely to be a senior-level band, and another paid in what might be a staff or principal band. Those paid in higher bands will now be held to higher expectations, and I‚Äôd expect there to be fewer openings for the higher positions. Here is what the new leveling system looks like: E3: Software engineer E4: Software engineer 2 E5: Senior software engineer E6: Staff software engineer E7: Principal software engineer On Wednesday, 10th August, the ‚Äògreat reveal‚Äô happened.  This was the day when the corporate directory was updated, and everyone was able to see the levels of everyone else. Before this, people were told what their level was, and they shared this information with close colleagues. The levelling process has had its tensions over the past few months.   I talked with an engineering manager who wanted to get all their reports into the E6 position, as all these folks are long-tenured engineers with the work impact to justify it. Their director was not supportive in the least. In the end, this manager was able to get only 20% of their team to the E6 level. The rest stayed as E5. The typical distribution between levels looks something like this. It comes from the levels of a Netflix organization with about 150 engineers: Most software engineers were re-levelled as E5 (Senior engineer) as part of the recent changes. Some got E6 (Staff). Very few got E4 (Engineer 2) and E7 (Principal) was the rarest levels of all. Lots of tenured software engineers left Netflix during the past few months, as the re-levelling project moved ahead. In many cases, the reason for leaving was they were not happy with how they were to be levelled as E5 in the new levelling system, and not the higher level they felt was appropriate. Many departing engineers had joined Netflix from another Big Tech company where they were a staff or principal engineer. When joining, they gladly accepted the Senior Engineer title, understanding that everyone had it. Many preferred this setup, where titles no longer carried weight. However, with the new levelling, several of those engineers who were Staff or Principals before, were now levelled as E5 (Senior), which prompted them to look for a job with the title they were accustomed to. In an internal survey on Netflix‚Äôs anonymous Blind channel, only 24% of respondents who answered the question ‚ÄúE5 folks: Now that levels are out, how many of you are leaving‚Äù indicated they plan to stay. In another survey which asked, ‚ÄúAre you happy with the level you are recognized with?‚Äù 68% responded as ‚ÄúNo‚Äù and 32% as ‚ÄúYes.‚Äù I would treat surveys on Blind carefully, as they tend to over-index on negative emotions. However, the discontent with getting an E5 title is clear. The biggest worry software engineers have in getting levelled as E5 level, has to do with compensation.  Right now in the US, those levelled as E5 make between $400,000 to $800,000 in total compensation. Clearly, the higher end of this range will be E6 or E7 levels. So, what will happen to those earning on the higher end? Netflix employees will find out soon, because the annual compensation review has started. The annual compensation review runs from 22nd August to 21st October. This is when the compensation numbers ‚Äì and the raises ‚Äì are decided. Between 24th October and 11th November, managers will communicate the new numbers to all employees. The vast majority of Netflix employees expect that those making above the band they are in, will see their compensation frozen until they move up to the next band. This is the most likely ‚Äì and most sensible ‚Äì approach Netflix can take. Cutting compensation encourages attrition and I‚Äôd be very surprised to see them do this. The introduction of levels also likely marks the end of Netflix matching external offers and encouraging people to interview.  When Netflix had no levels, the company would encourage employees to find out their market value and to interview; but only if they shared the numbers they got to Netflix, so the company could adjust it. With levels in place, and these having internal budgets, I expect this novel approach to become a thing of the past. Netflix introducing levels marks the end of the longest policy of ‚Äúone level‚Äù for everyone.  I‚Äôm impressed the company was able to scale to close to 2,000 software engineers with one, single level, and no internal levels, for so long. While it‚Äôs not uncommon for companies to operate with a single level up to around 100 software engineers, Netflix was able to run this setup successfully for far longer. It‚Äôs worth reflecting on the benefits Netflix got out of having a single level: Hiring . It was able to hire people attracted to the idea of a ‚Äúflat‚Äù hierarchy, at least levels-wise. A unique culture . While there are several companies without external levels ‚Äì  like at Facebook  ‚Äì they do have internal ones. Thanks to the absence of internal levels, Netflix created a unique culture, unseen anywhere else at this scale. Always paying the top of the market.  By encouraging employees to interview externally, and matching external offers, Netflix kept paying the top of the market. It‚Äôs an open secret in the industry that to get the highest cash-only total compensation, you should interview with Netflix. Well, at least until now. This truism may also be a victim of the change. And here are my takes on why this single level was bound to break down, sooner or later: Cost . Netflix was overpaying by a good amount for the folks it hired, without setting explicit, high expectations of them. Of course, setting expectations doesn‚Äôt matter when there‚Äôs intrinsic motivation. That‚Äôs why this setup can work well with small groups. That intrinsic motivation will slowly fade as a small startup becomes a massive enterprise. Inability to hire less experienced engineers.  With a single level in place, Netflix was never a place that hired junior software engineers. This also likely impacted the culture. Most of Big Tech relies on the intern and new grad hiring pipelines to grow talent in-house. Netflix just bought this talent, paying a premium for skills picked up elsewhere. This also relates to the cost aspect. Unclear expectations.  When people with different experiences and different skill levels are given the same expectations, this leads to some level of confusion. This is true both for performance reviews, but also the day-to-day job. The same expectations that stretch an engineer with four years of experience, might just be coasting for an experienced engineer with twenty years on their CV. This was one out of the five topics covered  The Scoop #23 . A lot of what I share in  The Scoop series  is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it.  Subscribe to the newsletter  and get exclusives like this in your inbox. The Scoop #23  additionally covers: Large pay raises ‚Äì but still some discontent at Shopify . The company announced inflation-beating pay adjustments, with software engineers getting some of the highest raises. Still, people are grumbling and upset about some draconian policies. What is happening at the company formerly known for its transparent culture?  Exclusive . Friction on compensation at Microsoft.  The company is giving more generous stock awards to its graduates, than it does to industry hires. This is causing friction among L61-62 team members, whose total compensation can be less than new L59-60 engineers make.  Exclusive. Shopify‚Äôs updated governance structure.  In April, most small investors and several Shopify employees voted against changes to ‚Äòlock in‚Äô the current Shopify CEO ‚Äòfor life.‚Äô Yet this change still passed approval. A summary of what happened and a comment from a current Shopify employee on why they opposed it. Business back to normal at Oracle.  The layoffs that were never announced to start nor to end seem to be over, according to software engineers I talked to, and raises were communicated. I checked in with current employees on how things are going at the company.  Exclusive. Read The Scoop #23 here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/zenly/", "title": "Inside the Shutdown of Zenly by Snap", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of  The Pragmatic Engineer Newsletter . We cover one out of six topics in today‚Äôs subscriber-only  The Scoop issue . Zenly is a location-based social network that helps people see their friends on a map, and communicate with them. The app launched in 2015 in Paris. In 2017, as the app was starting to show traction, Snap acquired the company for $213M and kept it running as a separate division‚Äîand app. The Zenly app and some of its features. Zenly became the leader in location-based social networking in several countries. Image sources: Zenly Back then, the app had fewer than a million monthly active users (MAUs). I talked to a software engineer who worked there at the time, who estimated that this number was a few hundred thousand. Five years later, the number was more than 40M MAUs, which was around 8% of Snap‚Äôs roughly 500M ¬†MAUs. There were a few months in 2022 when Zenly had about a third of the number of global app downloads that Snap had: The number of global Zenly app downloads 2015-2022. The app exploded in popularity starting in 2021. Data source:  Appmagic . The team at Zenly felt they were doing great. When Snap acquired the company, the guidance Snap leadership provided to Zenly was to focus on growth, not on monetization. The company did just this. By 2021, growth had picked up significantly, and this growth expanded. Zenly was having a fantastic year in 2022. In March 2022, the app was the tenth most downloaded social app, globally, according to data.ai. The company  launched a major update  in April, which was less well received by users initially, but even so, usage from 2021 was up, and started to trend upwards a few months later. In the middle of the highest growth Zenly has seen since Snap acquired it, the app is being shut down and the team let go.  On Wednesday, 31st August, Snap announced that it is laying off 20% of its workforce and shutting down Zenly. I talked to software engineers at Zenly when this news was announced, and they were stunned in disbelief. Why would Snap shut down one of its fastest growing products? Why invest years in the growth of Zenly, only to throw it all out the moment that work bears fruit? Zenly was run by a lean team of ~70 employees . The majority of these employees were based in Paris. Given that there was no other staffing for the app, which reached ~40M+ MAUs, I find it curious to close it all down. On the one hand, this division was not making any money. On the other, Snap never asked Zenly to monetize, and engineers at Zenly told me they could have easily shipped money-generating features, if this was a goal. So why not sell Zenly, given that the product they built is valuable? Snap could potentially make more in a sale than the $213M that it paid for a company with less than 1M MAUs back in 2017. Employees I talked with speculated that perhaps Snap does not want to create competition by selling Zenly. The app was growing faster than ever before, validating that there is large demand for a location-based social network. If Snap sold off Zenly, it would result in revenue, but the competitor created could become a problem for Snap down the line. By shutting down Zenly, Snap can both write off the acquisition cost and not have to fear creating a competitor. Snapchat also launched its own location sharing maps feature, Snapchat Maps, in 2017. This experience is bundled inside Snapchat, and was not built by the Zenly team. Because of the overlapping features, I can see how Snap leadership might have seen shutting Zenly down as a strategically wise decision. Looking at countries where Zenly was popular also helps explain why Snap leadership is removing the app. ‚ÄòGrowth comes from the East‚Äô was how some Zenly employees referred to the growth trajectory of the app. The most popular markets for the app included Japan, Vietnam, Indonesia, and Russia. These are markets where Snap was not popular. However, they are also markets that are less monetizable. Given that Snap is focused on revenue generation, it makes sense that it would cut an app that is strong on markets where monetization is likely very far out. Zenly employees feel that Snap leadership did not take time to understand how Zenly works.  Talking with employees in leadership positions, I was told multiple times how Snap leadership seemed disinterested in understanding how Zenly operated. Although Snap leadership visited the Zenly offices years ago, they have not done any due diligence or deepdives on how this unit was run. My sources tell me that this was not a problem until April 2022, when CEO and cofounder Zenly, Antoine Martin was heading up Zenly. However, after his departure there was also no interest from Snap to get more details on the workings of this team. Between Antoine Martin leaving in April, and now, with the layoffs in September, Snap made no efforts to map out the cost structure of Zenly, an employee in a leadership position at Zenly shared. This person shared that if cost was the issue, they could have easily reduced the running costs to a fraction. They could have also built revenue generating features quickly. My source was bitter about what they felt was ignorance from Snap‚Äôs US leadership, in not taking any time to look into the inner workings, the structure, and the dynamics of Zenly before deciding to shut it down. The Zenly team prided themselves on moving fast, executing quickly and having no trouble with rapid direction changes. It felt to me they would have adapted to new constraints - which adoption opportunity Snap never gave them. So what happens with Zenly?  The team which has built and is maintaining the application is in the process of being let go. The application is still live in the iOS and Android app stores, but I am told it will be removed at some point. Zenly employees to be laid off created their own  Zenly Talent Hub . They did this because they are not yet eligible to be listed in  Snap's Talent Hub  because Snap only lists employees who are laid off, and Zenly folks are in a pending stage. There are no plans to move Zenly users over to Snap, at least not at this time. The Zenly team is currently busy navigating the layoffs process in France, and most of them are preparing to put a closure to this journey - which was as long as seven years for some of them. In a statement, a Snap spokesperson shared additional background on the plans with Zenly's wind-down, and confirming that they will allow Zenly users to download their data before the app is removed from the stores: \"Snap has now filed a proposed job protection plan with the French Labor Authority that includes the economic rationale for the wind down of Zenly, which details the social measures the company intends to implement and provide to impacted team members. We expect a decision on this filing in the next two months.  In the future we intend to let the Zenly community know about the plan through a variety of channels ‚Äì including in-app, on Zenly‚Äôs website, and via social channel ‚Äì and will make it easy for every user to download their data. As part of its social commitment, and under the supervision of the French Labor Authority, Snap has been presenting a restructuring plan with a full set of measures in order to support each employee in securing their next employment. Measures include training budgets, relocation package, financial support for job interviews (in France or abroad), company creation funding and support with outplacement companies.\" What can be learned about acquisitions from the fate of Zenly?  Once a company is bought, the acquirer is in charge. Zenly was never truly in charge of its destiny: It was always up to Snap whether it kept investing, froze investment, or‚Äîlike now‚Äîshut the app down, and let the team which built the app. The CEO of Zenly, Antoine Martin, left the company in April 2022. This departure surely did not help the internal strategic position of the Zenly team. With Zenly‚Äôs CEO gone, I‚Äôd speculate that there was no one to defend the division when Snap had to decide what teams to cut to reach a 20% saving. Snap seems to be retreating from markets it does not expect to monetize, and is no longer investing in products that won‚Äôt bring revenue in the short term. Zenly was popular in markets where monetization would have been challenging, and made no money. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. I‚Äôm adding an ‚ÄòExclusive‚Äô label to news which features original reporting direct from my sources, as distinct from analysis, opinion and reaction to events. The  full The Scoop edition  additionally covers: The layoffs at Zenly and Snap.  How is this process progressing? I talked with people on the ground and gathered details on the packages offered.  Exclusive . Uber is shutting its Vilnius, Lithuania engineering office.  Eight years after opening the engineering hub, Uber is shutting down this location. The official reason? The difficulty of hiring, local senior leadership. What is the history of this engineering office, and how is this shutdown phased?  Exclusive. Are more seed-stage startups running out of money?  I‚Äôve noticed more early-stage startups across founders I know running out of money, and going up for sale or being shut down. I asked other investors what they see in this space. Is it business as usual or is there an uptick?  Exclusive . Apple‚Äôs return to the office (RTO) in London . Software engineers working at Apple in London are already back at the office. How was this RTO executed, what are the challenges, and what are current Apple engineers saying about this work setup, versus remote work?  Exclusive . Google starting to hire software engineers again?  Some good news from the Big Tech giant from candidates in the interview pipeline.  Exclusive. Read the full issue here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/affiliates/", "title": "I removed all affiliate links from my blog: numbers", "content": "\n             I added the first affiliate link to this blog in May 2020, a bit over two years ago. I've now removed all affiliates from both this blog, and my YouTube channel in-line with my  ethics statement  which includes no ads, no affiliates, no sponsorships. Affiliate links were on track to make $15,000/year before I pulled the plug on them . In total, the affiliates earned a bit over to $24,000 over these two years - which is far more impressive than the  $3,500 in ad revenue  over a three-year period. This post is breakdown of the numbers, and closes with what I learned using affiliates. I hope it will be useful for anyone considering using affiliate links on their blog or website. Summary The blog had three types of affiliates: Amazon affiliates . Typically offers around 4.5% on book purchases and a varying amount on other purchases. On this site, I only linked Amazon for books on their site. Gumroad affiliates . For digital books which had a Gumroad version, some authors offered an affiliate percentage of their choosing: usually around 30%. Starting 2021 I started to ask authors to reduce this to the lowest option - 1% - so I could still get a sense if people were buying, but not make any money off of sales for fellow authors (Gumroad does not have a 0% option). Grammarly Pro . Offering $0.20 per a signup for the Grammarly service and $20 for a customer converting to a pro user. Manning affiliates . Used with Manning titles. Offers an 8% payment from the revenue customers spend. Here's how earnings from the various channels ended up: Affiliate earnings 2020-2022 on The Pragmatic Engineer Blog Why remove affiliates? Affiliates were on a run rate of $15,000 per year, and I did not recommend anything with an affiliate that I would have not recommended without an affiliate. As a testament to this, all book recommendations on this site are exactly the same now, with affiliate links removed, as they were before. So why remove affiliates? There were several reasons. 1. Affiliates create a financial pull to recommend things that people will buy.  Affiliates were starting to make a considerable amount of money, and one where anyone could rightfully question if I'm making truly independent recommendations. Would I recommend something that does not have an affiliate program? While my answer would be \"yes\", there's always a financial pull, to at least prioritize affiliates. For me, people trusting that I recommend things without financial incentive is more important than getting additional revenue as a form of kickbacks. 2. Disclosing affiliates is cumbersome, but not disclosing them is not ethical.  When a link is an affiliate one - meaning you get a kickback from it - it's only fair to mention this fact. My site had small text on the side informing people that links can be affiliates, and some of the articles with more affiliate links had this text on the bottom as well. Still, both my site and most sites which put affiliates in place try to avoid showcasing the fact that the links come with a kickback. The affiliate text was not as clear as it should have been, and the disclaimer at the side and on the bottom were easy enough to miss. In my case, I'd like to not have to disclose that links are affiliates: because none of them are as of now, or going forward. 3. The newsletter never had any affiliates.  In  The Pragmatic Engineer Newsletter , I never placed affiliate links. It would have not been ethical to do so for paying subscribers. And if I didn't place it for paying subscribers, would have it been ethical to do this for free subscribers? It didn't feel like that for me. 4. Because I'm lucky enough to be able to say to no to affiliates and advertising.  When I was writing this blog on the side, the additional income from ads and affiliates covered things like my hosting-related costs, and the rest was a nice bonus. Now that I'm writing  The Pragmatic Engineer Newsletter  full-time, I'm lucky enough to be able to cut out these revenue streams from my business model. Affiliates are a great additional income stream for many people - and one I also list in the article  Becoming a full-time creator as a software engineer: controversial advice . However, similar to advertising or sponsorships, if you rely on affiliates as a source of income, your goal will be to generate large amounts of traffic for these properties. I'd like to cut out anything that pulls me to write things for the sake of popularity, as opposed to because it's an interesting and nuanced topic. 5. Link directly to publishers, not always to Amazon.  I debated keeping Amazon affiliates because those fees do not come out of the pocket of authors.   Unlike affiliate earnings from the likes of Gumroad where that earning comes out from the revenue cut for the author, this is not the case for Amazon. Amazon pays a fixed percentage of the net price of the book to the author. The 4.5% affiliate fee for books comes out of Amazon's profits, and the author's earnings are the same whether an affiliate link is in place, or not. In the end, I removed Amazon's affiliate links both to not have to keep putting out disclaimers to them.  In the process of removing these links, I started to directly link to the publishers or to landing pages for books, instead of to Amazon directly. Many of these publishers have their own Amazon affiliate links set up for customers wanting to buy off Amazon, so they'll make an additional 4.5% of revenue from customers buying Amazon books off of their sites. It's a win for the publishers, and - indirectly - for the authors as well. Amazon affiliates Amazon brought in well over 80% of affiliates earnings. At the same time, this program was the trickiest one to sign up to, and to manage. Each Amazon region has a separate affiliate program.  This means you need to register to each one of these. In my case, I registered to 12 different affiliate programs: Australia, Canada, France, Germany, India, Italy, Mexico, Netherlands, Spain, Sweden, UK and US. Every month, I'd then receive payouts from up to twelve different places. Here's how the summary of these payouts looked like: Amazon affiliate payouts over two years Redirecting links to the right Amazon store is tricky.  When a user browses your site from Australia, you'll want to redirect them to Amazon.com.au, and not the Amazon.com site.  Amazon has a service called  Amazon OneLink  which does this redirection. However, this service only supports seven of the top Amazon markets. Also, in my experience, it worked unreliably. On the flip side, this service is free, and should be a good enough solution for those making less than $20/month off affiliates. Geniuslink  is a paid service which does the same redirection, except it supports all Amazon marketplaces, and it does it for a fee: $5/month for up to 2,000 clicks, then $2/month for every 1,000 clicks in that month. This service is the one I settled on, and I'm happy that I did. The service comes with rich analytics, and smart features like alerting when a frequently clicked link points to an Amazon item that is out of stock. So how much traffic generated that $20,000 worth of Amazon referrals? Quite a lot of clicks, it turns out 205,000 clicks: Statistics on the clicks that resulted in $20,000 worth of Amazon affiliates revenue. The average revenue per click was around $0.10. The most purchased books Amazon affiliates offers a neat dashboard to see what books people ended up clicking on, and buying, presenting this data in an aggregated form. Below are the most purchased books on this blog: Other affiliate programs Gumroad .  Gumroad  - together with  Podia  - has become a popular destination for self-publishing books. This is because both platforms offer authors to keep up to 95% of the purchase price for authors. These platforms also offer an affiliate program that's easy to set up. Most authors offered a 30% affiliate rate. This meant that I would make ~$8 when someone bought at $24 book via a Gumroad affiliate link. In comparison, Amazon would credit me $1.08 for the same purchase through its affiliate program. What I didn't like about Gumroad affiliates is how the revenue  did  come out of the pockets of fellow authors. A few months into having these links in place, I asked all authors to lower the commission to the lowest, 1% tier. One author refused to do so - despite me asking them multiple times - and the bulk of the revenue comes from that book. Grammarly . Grammarly's affiliate program pays per signup. I love using Grammarly, and mentioned this tool in articles about writing, when I listed tools I would recommend. Grammarly earned a total of $1,400 through 2,400 clicks and 450 \"conversions\" - which likely means signups. The bulk of these earnings came sometime in March of 2022, and I don't know what caused a spike in the earnings. Otherwise, this channel did not bring much revenue. Grammarly earnings through The Pragmatic Engineer Manning.  I'm a fan of linking directly to the publisher, especially after a Manning author shared how  Amazon is shipping counterfeit Manning books  for several titles. A Manning representative reached out with details of their affiliate program - which pays double that of Amazon at 8% - and so I added these links next to the Amazon ones. Unfortunately, people rarely buy directly from the publisher, given the choice of Amazon. Over a year, this channel generated 48 Manning book sales in what accounts for $91 in total. Most of these purchases were for Grokking Algorithms: Still, after removing the Amazon affiliate links, I'm now linking directly to the publisher - Manning - for Manning books. Learnings One piece of context that's important to add for all of the above earnings: the traffic which resulted in the 205,000 Amazon affiliates clicks, plus the other clicks. That was 2.5M unique visitors with 3.9M pageviews during the same period of time: Traffic for The Pragmatic Engineer Blog from August 2020 to Aug¬† Considering that a similar amount of traffic resulted in  ~$3,500 in ad revenue  on this blog, affiliates coming mostly from book recommendations fared surprisingly well. Still, if the goal is to monetize web traffic more efficiently, sponsorships would have likely been a path to generate more revenue. As I wrote in  Three years of advertising on my blog : \"Today,  SwiftLee  - an iOS blog - charges $2,000 per week or $7,000 per month for a sponsor slot with traffic of ~100,000 visitors per month and 400,000 pageviews per month.\" However, unlike with generic ads, where you typically need to choose between sponsorship and an ad, it's acceptable to have sponsorships and affiliates. So for most publications, it's not an \"or\", but an \"and\". A few learnings from using the various affiliate programs : Amazon affiliates: a lot of work  to set up for each country. Later, setting up payouts is additional work. In some countries, you won't be able to be paid out. For example, in Brazil or Japan, I would have needed to have a local bank account that I did not have. Bookkeeping challenges.  The bookkeeping of Amazon affiliate revenue is challenging when you are also publishing books on the site. Amazon makes bank transfers for everything - book sales and affiliates - at the end of the month, and it's a lot of work to separate what came from where. Geniuslink  was a great investment to maximize revenue from Amazon affiliates. Frankly, I'm surprised that Amazon does not invest more in their own  OneLink service , which feels like an afterthought in comparison. Whitelabel providers . Most other affiliate programs run on a white label solution. Building an own affiliate program makes little sense, so companies don't do it. The good part is that most of these providers have roughly the same functionality: overview, reports, and payouts. The bad part is that the publishers sometimes move between these providers, and then you might need to take additional action to keep earning. Manning used  Post Affiliate Pro , and Grammarly used  HasOffers.com . A traffic game.  Unless you have lots of traffic - like I've had - expect affiliate revenue to be negligible. Even with decent traffic, most of the affiliate channels brought in relatively small amounts. This post closes a chapter of affiliates on this blog. Going forward, no links on this blog bring any kickback - and I intend to keep it this way. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/ads/", "title": "Three years of advertising on my blog: numbers", "content": "\n             In June 2019, added a small, non-intrusive advertising block to this blog in hopes of making enough revenue to cover the hosting costs. In March 2022, I removed this advertisement for good, partially because of the success of my newsletter and also because, in line  with my ethics statement , I want to avoid ads, hidden ads, or sponsorships on any property I own. This post summarizes my experience with these ads and revenue numbers.  In 33 months of these ads running, they generated a total of  $3,541  after 2.1M ad views. Read on for more detailed statistics. I'm writing this article for those interested in the monetization aspect of an advertisement solution on their blog or website. When I debated whether to add ads to this blog or not, I would have appreciated details like this. I have no affiliation with Carbon ads or any other providers mentioned. See my  ethics statement  for more details. Choosing an advertising provider I wanted to have a less intrusive advertising provider and avoid irrelevant spam-like ads that Google Ads and other advertising providers. I also wanted to avoid the dark pattern of ads re-appearing as you scroll, which are trademarks of many online magazines. Carbon Ads  was the one provider that checked all these boxes. Carbon ads is a provider tailored to reach developers and creators, and most of their advertisers are tech companies and startups. I liked two things about Carbon Ads: Deliberately limiting the number of ad blocks to one small one per page. No dark patterns. Filtering sites that apply. I also had to apply, submit details of my site - like the topic and traffic - and wait for a response. In what is confusing, after I applied to join Carbon Ads, I got a contact form from a company called  BuySellAds . Apparently, Carbon Ads was bought by BuySellAds in 2013, but the brands are treated differently. I would only interact with BuySellAds from there on. BuySellAds verified my ad placement before approving. I received this email from an accounts representative: The response to my application being approved. Well, almost: I still needed to show the final ad placement. Adding ads was what made me remove  Disqus  comments from my blog.  Up to 2019, I had a Disqus widget that allowed people to add comments to the blog. I used the free version, which version would inject ads into the comments box. Carbon Ads would not approve my application while there were other ads on my blog. I looked at the ads Disqus served and didn't like how many of them were dark patterns and some ads linked to questionable online money-making schemes. Also, I did not get much value from the comments: moderation was more work than joy. So I removed Disqus at the same time I added Carbon Ads. Here's what the ad looked like on the sidebar on my site, on a desktop layout: The ad on the desktop version of my site. It appeared on the bottom of most screens - people often had to scroll to see it. On mobile, the ad would not show up unless scrolling to the very bottom of the page. I did not want to clutter the mobile experience on mobile and Carbon Ads seemed to either not care or not notice, so I kept it this way. I was happy: I now had a minimalistic ad towards the bottom of the page, barely visible on mobile, and it would start making some money. So let's talk about that part. Site traffic Before I launched Carbon Ads, my blog saw 3-4,000 pageviews a month. In May 2019, this was 20,000, and in June, it was 30,000, climbing upwards. Site traffic is important if considering the earning potential of any ad solution. I did not have any targets beyond hoping that my monthly blog hosting bill of $30/month or ~$300/year could be covered with this ad. Earnings BuySellAds sends an email every month with the earnings. In June, this was at $13, and in July, at $45. That was more than my bill for hosting! My imaginary target was hit. Earnings in the second month of running ads Here's how the earnings would add up in the following months and years: $474 in the six months of 2019. $563 in 2020. $1,892 in 2021. $604 in the first 3 months of 2022. Ad earnings in 2019 for The Pragmatic Engineer Blog Ad earnings in 2020 for The Pragmatic Engineer Blog Ad earnings in 2021 for The Pragmatic Engineer Blog Ad earnings in the first 3 months of 2022 for The Pragmatic Engineer Blog Are these ads worth it? In a bit less than 3 years, the ads paid out a bit over $3,500. While this number is nothing to sniff at, the traffic behind these numbers that was sizeable: close to 2.2M impressions: Total ad revenue generated on The Pragmatic Engineer Blog During the same time, traffic on the blog climbed to more than 100,00 pageviews per month, with a total of 3.5M pageviews.  For every 1,000 page views, about $1.60 in revenue was generated. If monetization was the goal, other approaches would have generated more revenue.  Sites covering topics on technology that have similar traffic can likely make more revenue with sponsorships. When I  spent $5,000 advertising my mobile book on websites and newsletters , sites with similar traffic charged me $750 for a week-long sponsor slot. Today, SwiftLee - an iOS blog -  charges $2,000 per week  or $7,000 per month for a sponsor slot with traffic of ~100,000 visitors per month and 400,000 pageviews per month. In a month, SwiftLee could make twice as much in sponsorships than my blog did over three years with this small ad unit. If you're thinking of monetizing your blog or website to cover hosting costs as I did, these drop-in ads could be a good start, though. They are the simplest solution and one that doesn't require additional effort to manage sponsorships. You can add sponsorships on top of these - and remove these types of ads if you gather interest from sponsors. However, with sponsors, expect to be more hands-on in selling, communicating, and sharing reports on their campaigns. I'm certain that the ability for e.g. SwiftLee to charge $7,000 for a months' sponsorship is a result of years of interesting and relevant iOS-related writing on his blog, and building up relationships with his advertisers. As far as non-intrusive ads go, I was happy with the results.  My goal with the ad slot was never about maximizing revenue, though. I wanted the ad to be as unintrusive as possible and deliberately pushed it as low as I could both on desktop and especially on mobile. Considering how little visibility the ad had, I've been impressed that it made enough to cover hosting costs - and then some more. I started to think about removing advertising after I started to  publish books  and kicked off  The Pragmatic Engineer Newsletter . Would it still make sense to have a third-party ad on this site, which is more of a distraction at that point? There are still 'ads' on the site, but they point to my business.  With BuySellAds gone, this blog is not 'ad-free.' In the middle of each post, there's a mention of my  newsletter , and at the bottom of all posts, I mention my other businesses: The Pragmatic Engineer  Job Board  and  Talent Collective  and  my books . I control the placement of these blocks and position them to be unintrusive, don't follow dark patterns, and don't get in the way of reading articles. Plus, in the case of featured jobs - many of which have salary ranges - hopefully, they also are useful for a few people browsing the site! \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/oncall-compensation/", "title": "Oncall Compensation for Software Engineers", "content": "\n             This issue is the second part and final article in a series about oncall. Part 1 ‚Äì published last week ‚Äì covers  healthy oncall practices . In this issue, we dive into: Oncall philosophies across the industry.  How do groups of companies approach oncall practices and compensation? Companies which pay and those that don‚Äôt.  An overview of more than 120 firms and their approach to paying, versus others which do not. How much do companies pay?  Data points from 80 employers, the largest data set of this kind published to date. Companies which don‚Äôt pay.  How do they approach oncall? Poor oncall cultures . What are examples of places where oncall can be a reason for churn? In this issue, we‚Äôll go through more than 80 data points on how much different companies pay for oncall. A preview of some of the data we‚Äôll discuss: How much do companies pay for oncall? 20 of the 80+ data points in this article. This article was originally sent to subscribers of  The Pragmatic Engineer Newsletter  - the #1 technology newsletter  on Substack , with more than 100,000 readers. If you've not signed up yet, subscribe to get weekly articles like this one in your inbox. üëá Sign up the newsletter 1. Oncall philosophies across the industry Looking across the industry, there are several different philosophies. 1. ‚ÄúBeing oncall is your one and only job.‚Äù  Some companies hire dedicated tech people whose only job is to be oncall, handle alerts, and improve the oncall infrastructure. This role is called ‚ÄòDevOps Engineer‚Äô at some companies, SRE (Site Reliability Engineer) at others, and may also be called ‚ÄòOperations Engineer.‚Äô The role is constructed so expectations are clear and shifts are staggered, so the workload is reasonable. These roles are typical at more traditional companies, many of which are transitioning from an Ops model, (see  Part 1 of this series  for detail on what an Ops model is,) to one with more continuous delivery. The role is also widespread in highly regulated industries. Companies which prioritize software engineers‚Äô wellbeing might also opt for this model, or at least utilize dedicated people to be oncall to lighten the burden on the engineering organization. 2. ‚ÄúIt‚Äôs not part of the job outside business hours.‚Äù  Plenty of businesses don‚Äôt expect engineers to be oncall outside of business hours. These companies are typically: Local businesses serving local customers who use the service during normal business hours. Many B2B services might fall into this category. In these cases, customers are fine with the system not working at times when they don‚Äôt usually contact company employees. Businesses where downtime outside core hours is not a major problem. These are either small businesses, or those operating with little to no competition. Startups without many ‚Äì or any ‚Äì customers. Developer agencies and consultancies usually don‚Äôt cover for oncall, though there might be exceptions depending on client contracts. 3. ‚ÄúIt‚Äôs not part of the job outside business hours, but we might still try to reach you during those times.‚Äù A variation of the above two cases, when the company does not expect software engineers to be available. However, they do have someone oncall, and that person might try to reach out to software engineers during an outage. However, it's not expected that the engineer answers their phone. This is a typical setup at small businesses and startups where incidents are too few and far between to warrant making oncall ‚Äúofficial.‚Äù It‚Äôs more common at companies where the founders are hands-on, and can resolve most issues themselves, thereby bearing most of the oncall burden, rather than the engineers. 4. ‚ÄúIt‚Äôs part of the job for all software engineers and we operate in regions which regulate how it needs to be compensated with pay and time off.‚Äù There are plenty of countries that regulate oncall pay and time off, the list of which  we covered in Part 1 already . Most companies operating in these regions structure their oncall compensation to adhere to local regulations. I say ‚Äúmost‚Äù as two groups will technically violate regulations: Companies with a satellite office and leadership which is unaware of the local rules. In such situations, it might be down to local employees to communicate the regulation and lobby to put compliant oncall compensation in place. Small companies for whom following regulations unfit for tech companies would do more harm than good. In some countries, regulations for oncall have been drafted for groups like firefighters or police. While such regulation makes sense for many non-digital professions, the requirements of the regulation might be overly rigid for smaller tech companies to follow. So, they might sidestep it and compensate in line with the spirit of the regulation, while not following it to the letter. 5. ‚ÄúIt‚Äôs part of the job, but we acknowledge the disruption with pay and additional time off.‚Äù Empathetic companies acknowledge going oncall is another burden that needs to be compensated, regardless if there is no local regulation mandating it. These companies offer pay, and might also offer the ability to choose time off, or a mix of compensation. Companies that typically use this approach: Traditional firms which pay for oncall in other parts of the business, already. For them, paying software engineers to be oncall is a given. Companies paying at or below the middle of the market. Without paying for people's time, these places would see high attrition, as engineers would seek opportunities elsewhere. Companies aiming to minimize engineer attrition. Unpaid oncall will always be a reason to look for a new job. Employers looking to  minimize software engineer attrition  will seek to recognize this work at the very least with cash, but perhaps also with time off. Companies investing in healthy oncall practices. These companies look at oncall as a cost that should be quantified, and do so. 6. ‚ÄúIt‚Äôs voluntary for most people, and we encourage it with pay and time off.‚Äù The final group are companies which do need people oncall, but manage to structure this so it is voluntary. They get enough volunteers by generously compensating for being oncall. Often, these places have dedicated people oncall along the lines of DevOps engineers or SREs. What if there are not enough people to cover oncall? The company might reserve a mandate for anybody to go oncall until there are enough volunteers, but pay generously for their time. In most cases, the companies I talked to which implement oncalls this way manage to recruit enough volunteers. For example, an engineer at The Guardian ‚Äì the UK-based newspaper and website ‚Äì shared that their oncall is voluntary and works well: ‚ÄúOur oncall is paid at ¬£750 per week. It‚Äôs a voluntary rota of 2 engineers each week. On top of the pay, you are encouraged to take rest after your shift. Oncall is popular and we don‚Äôt have issues filling the rotation.‚Äù Voluntary oncall can work well if the effort it takes to staff oncall, is far lower than the number of engineers at the company. 7. ‚ÄúIt‚Äôs part of the job for all software engineers and not paid additional.‚Äù This approach is common at many companies. A few which stand out: Companies paying top of the market. Places which sit in the top tier of the  trimodal nature of salaries  usually pay far more without compensating for oncall, than lower-tier companies with very generous oncall compensation do. Big Tech. Most of Big Tech don't pay for oncall with cash compensation. Google is the only exception. Startups low on capital. Oncall is part of the job at startups that don‚Äôt have large amounts of funding. This is the case for most Pre-seed and Seed startups, while plenty of Series A ones operate like this, too. Companies which can get away with it. Even if not paying the top of the market, compensating for oncall is an additional expense. Many companies will try to avoid it, if they can get away with it. Some firms compensate with time off, instead of cash. This can range from inviting people to start late if they got paged the previous night, all the way to offering a specific number of days as paid vacation for each week worked of oncall. For companies which already offer unlimited time off, offering lieu days is no change to the existing policy, and so it won‚Äôt be seen as a supportive measure. Although I list seven different philosophies: in reality, there are two main ways of thinking about oncall: A: Oncall for software engineers is additional. 1. ‚ÄúBeing oncall is your one and only job.‚Äù 2. ‚ÄúIt‚Äôs not part of the job outside business hours. 3. ‚ÄúIt‚Äôs not part of the job outside business hours, but we might still try to reach you during those times.‚Äù 4. ‚ÄúIt‚Äôs part of the job for all software engineers and we operate in regions which regulate how it needs to be compensated with pay and time off.‚Äù 5. ‚ÄúIt‚Äôs part of the job, but we recognize the disruption with pay and additional time off.‚Äù 6. ‚ÄúIt‚Äôs voluntary for most people, and we encourage it with pay and time off.‚Äù B: Oncall is part of the job: 7. ‚ÄúIt‚Äôs part of the job for all software engineers and not paid additional.‚Äù 2. Companies which pay for oncall, and those that don‚Äôt Being oncall means you need to be on standby and have your laptop with you at all times, so you can respond to pagers, and start resolving incidents within minutes. Most software engineers who are oncall tend to have this responsibility for a week at a time. Being oncall can be quite disruptive in two major ways: It disrupts your personal plans, outside of work.  Going to the movies with your kid, or perhaps on a date? Bring your phone and your laptop and be ready to exit midway through if you get a page. For any event in the evenings, at weekends or during the holidays, you either need to schedule cover with the secondary oncall ‚Äì if they are around ‚Äì or be ready for your private time to be disrupted. Some people move their social events around so their oncall week is clear. It disrupts your sleep . Alerts don‚Äôt care what time it is and they can wake you up in the middle of the night. You might also have to do an investigation at 3am. This has happened to me more than once. Disrupting your sleep can also have short and long-term health consequences,  according to scientific research . Several countries have strict regulations around oncall, with some going as far as mandating the right to a certain number of hours of uninterrupted rest per day or per week. Incident management scaleup  indcide t.io  (disclaimer: I am an investor) ran an oncall survey where they collected 200 responses, and found that while 70% of respondents said each team was responsible for their oncall rota, about 40% were compensated for oncall. An interesting finding  from their summary : ‚ÄúInterestingly, this was more common in larger organizations (5,000+ people) than in small to mid-sized organizations that participated in the survey. Where companies did provide compensation, most paid a fixed amount for time spent oncall (e.g., $X per hour, day or week). But the actual dollar amount paid ranged significantly, from $5 to $1,000 per week, with the average weekly rate at $540.‚Äù For this series about oncall, I  invited people to share  whether their company pays for oncall, and if so, how much? Here is a collection of companies which do not pay for software engineers to be oncall ‚Äì but still require it ‚Äì and ones that do. This is a collection of data that people shared with me anonymously. The list is not exhaustive, and there are companies missing from this list. However, it's the largest data set of this kind published, to date. Note that companies in the ‚ÄúUnpaid oncall‚Äù column need to follow local regulation for oncall compensation in countries which mandate this, as discussed in  Part 1 of the series . So which companies pay, and which ones do not? Companies that pay, and ones that do not pay for oncall - part 1. Companies that pay, and ones that do not pay for oncall - part 2. Let‚Äôs address the elephant in the room: Big Tech generally does not pay for being oncall.  Except for Google, and except for regions where paying for oncall is mandatory, they don‚Äôt compensate for this. Why is this? A major reason is these companies pay top of the market: in the third and highest bracket  in the trimodal compensation model . So even when not paying for oncall, they offer higher compensation than most other companies which pay lower, but compensate additionally for oncall. And it‚Äôs reasonable to argue that they have a point. Between these two offers, which one sounds more appealing? $140,000 in total compensation. Oncall is paid additionally, as $800-1,200/week, meaning about an additional $8,000-12,000 per year. $310,000 in total compensation ($180,000 base salary + the rest in stock). Oncall is not paid. Many well-funded startups which pay closer to the top of the market also make oncall as part of expectations as well. The only curious data point is how Google, on top of paying top of the market, also pays for oncall, and  invests in healthy oncall practices  on top of these, as we‚Äôve covered in  Part 1 of the series . 3. How much do companies pay? How much do companies pay which compensate for being oncall? The answer is, it varies a lot. This ranges from about $100 per week, all the way to around $1,250 per week ‚Äì and even higher for some engineers at Google. Compensation approaches  are split between these three buckets, ordered by frequency: Flat rate  per week or per day of being oncall. The same amount is paid, regardless if there are incidents that need attention or not. Most companies which pay for oncall follow this approach. A common reason for going with this, is that it incentivizes quiet oncalls: there‚Äôs no financial benefit to working on outages out of hours. Flat rate for standby, plus pay for hours worked outside core hours.  Another approach is to have a flat standby rate. However, when an incident occurs and engineers need to spend time mitigating it, they can claim additional compensation for that time. This is usually a multiple of their regular hourly rate, and is often more for a weekend or a public holiday. Several countries mandate this approach, even if companies pay a decent standby rate already. Only pay for incidents worked on out-of-hours.  Some companies don‚Äôt pay for people to stand by, but do if they need to do work during the night or at weekends. This work is usually the mitigating of an incident. Most companies that pay this way do so because of local regulation, which mandates paying for overtime at night or during weekends. Here is a summary of how various companies compensate. I go into far more details on each company's compensation philosophy  in the subscriber-only article . Companies paying at or above 1,000 USD/EUR/GBP per week. Companies paying 600-1,000 USD/EUR/GBP per week. Companies paying 400-600 USD/EUR/GBP per week. Companies paying 300-400 USD/EUR/GBP per week. Companies paying at or below 300 USD/EUR/GBP per week. For far more details on each company's compensation philosophy  see this ¬†subscriber-only article . A few curious insights into the above rates: Brazil and Spain: regulated on pay.  Both countries have clear regulations for oncall pay that evey company with a local subsidiary needs to follow. Germany: frequently paying despite no such regulation.  German companies frequently pay for oncall, even though local German regulation only mandates rest time, and  not for paying for standby oncall . UK: some companies pay despite no such regulation.  Even though the UK does not mandate paying for oncall, it‚Äôs more common to see companies pay for oncall duties here, versus, for example, in the US. This might be due to UK companies often hiring remotely in other European countries where oncall is mandated. US: few companies pay.  However, those that do, tend to pay globally. Google, Intercom, Spotify, LaunchDarkly, CircleCI and PayPal are a few places worth mentioning that do compensate for standby oncall, evenin the US. 4. Rewarding oncall at companies that don‚Äôt pay At companies which don‚Äôt compensate for oncall, is there a different approach? As I talked with software engineers oncall at these companies, several shared that they do get various benefits, mostly related to time off. Here‚Äôs a summary of approaches: Companies with a culture of offering some time off, instead of cash. Companies without a culture of offering time off for oncall. 5. Poor oncall cultures During my research, I came across a few examples of poor oncall culture. Twilio  is a company about which I received an unusually high number of complaints to do with oncall. All contributors had a negative view of how the current approach to oncall works at the company. Here is how a current software engineer detailed the oncall expectations at Twilio: ‚ÄúShift duration is also freely discussed within teams. Generally, it is 7 days, but inside teams with few members like 2 or 3, they can also do 3 days‚Äô rotations. If you are a team of 4, you're almost in ‚Äòoncall prison‚Äô for 2 out of 4 weeks (secondary + primary week.) Lately, there have been strong discussions internally within the R&D teams (mostly involved in oncall) because of this. General rules ‚Äìagain, the team can slightly vary them: 1. Expected to engage within 10 minutes of an alert. 2. Expected to engage within 5/10 minutes on POC (point of contact ‚Äì paged by other teams or people.) 3. No drugs or excessive alcohol while oncall. 4. Escalate early if you encounter problems. 5. You can travel, if you can ensure all the above.‚Äù Several engineers working at the company told me oncall operational load is high, teams are understaffed, oncall is not paid, and someone even used the term ‚Äúoncall prison,‚Äù as quoted above. A few additional quotes from software engineers and engineering managers at this company: ‚ÄúTwilio does not pay anything additional for being oncall, nor do I get breaks after a rough shift. I hate oncall life and once it's time to move on, I would prefer no oncall. I'm oncall every 4 weeks.‚Äù ‚ÄúThere are critical services that are staffed at way too low levels, with the managers of those services denied headcount/backfills because ‚Äòthey aren‚Äôt moving the needle.‚Äô‚Äù ‚ÄúPeople are starting to vote with their feet for the high oncall load and quitting. So now, added to the stress is a high level of IC attrition from those services‚Äô lack of institutional knowledge.‚Äù What is the reason for the high oncall lead? I talked with a few engineers who had two or more years of tenure. This is what they shared: Lots of ‚ÄòAmazon DNA.‚Äô  Much of the previous engineering leadership came from Amazon, and focus a lot on operational excellence. This means strict oncall rules, as well. Growing too fast  in a short amount of time. Engineers I talked with shared how the company grew aggressively in 2020 and 2021, more than doubling the size of the engineering organization in 2021, while growing 5x over the past three years from ~1,500 employees in 2019, to more than 7,000 full time staff by the start of 2022. Too many custom systems.  These custom systems make it very hard to fix the root causes of noisy oncalls. Also, because so many systems are custom, it‚Äôs not practical to merge oncalls between teams. Attrition for experienced people.  Twilio was hit badly in 2021 with attrition, thanks to the hot market. Engineers told me several people with in-depth knowledge of custom systems have left. These people leaving was a setback in resolving the root causes of high oncall loads. No backfills.  From an engineer: ‚ÄúMy org lost more than half of its engineers in two months. No backfills are coming and the oncall load has increased significantly. People will most likely keep leaving and it‚Äôs a massive operational risk to stay here.‚Äù A barely acknowledged tech debt problem.  Engineers tell me they feel the company has not acknowledged just how bad tech debt has been, until recently. There are now replatforming efforts which ‚Äì once complete ‚Äì should also address oncall issues. Light at the end of the tunnel.  Several people mention how new leadership joining from the likes of Google is putting more focus on healthy oncall practices, advocating for the current setup being unsustainable. The good news at Twilio is that leadership seems to be aware of the unsustainable oncall setup, and is working on addressing this problem. Engineers I talked with shared how while burnout is hitting many of them, they do feel that leaders are trying to fix things and empower engineers. Someone I talked with shared how they feel the thing holding the company back is the mindset which many tenured engineers have; they assume things are fine just the way they are ‚Äì including the high oncall load. Amazon  is another company where oncall stress is high and oncall is not compensated ‚Äì unless regulated locally, like in Brazil or Spain. Within Prime Video in the UK, oncall compensation is historic: when Amazon acquired startup LoveFilm in 2011 ‚Äì a startup which transformed into Prime Video ‚Äì oncall compensation was part of all current and future contracts, and it has stayed that way ever since. Oncall is one of the main negatives of working at Amazon, as I write in  Inside Amazon‚Äôs Engineering Culture : ‚ÄúThe bad: Heavy oncall and operations load in many cases. Teams are expected to operate their systems well, and this is often done in a way that results in stressful oncalls. Operational issues need to be addressed immediately instead of letting them escalate.‚Äù Different teams and organizations, of course, have varying oncall loads. People who work in the Alexa and Redshift organizations have shared stories of extreme oncall loads. Engineering managers ‚Äì called SDMs (Software Development Managers) ‚Äì at Amazon have been known to step in and try to ease the oncall load by offering days off. As a current Amazon engineer shares: ‚ÄúAfter rough oncalls in the Alexa Devices organization, several SDMs have been lenient with PTO to compensate (if up late, then come in late, if working the weekend, then take an extra day off, etc.) This was not an official policy and any change-ups in the manager (like a re-org which happened somewhat often) and any accumulated off-the-books PTO time would vanish.‚Äù However, I have heard several stories of staff suffering extreme burnout due to Amazon‚Äôs relentless oncall load, and this burnout persisting with them to their next position. A software engineer I talked with shared how they burnt out so badly because of Amazon‚Äôs oncall culture, that they struggled during the first several months of their next job at a startup, as they were recovering mentally and physically from the oppressive operations load at Amazon. Other examples . A few engineers have cautionary tales which I‚Äôm sharing as warnings: ‚ÄúSome teams have had dramatically different pager volumes for years at my company. There are teams which people like to work on thanks to their great mission, but those same teams have a noisy oncall. There is no way I would move to those teams, where moving would come with so much unpaid overtime at unsociable hours.‚Äù From a publicly traded tech company valued at $13B. ‚ÄúI had never done oncall before I worked at this company, and it was my only real hesitation about joining it. As it turns out, it was one of the main reasons I ended up leaving. The oncall for my team didn't seem terrible, but I have less than zero interest in having to be ready to jump online at all hours of the day. If I were paid for my time, my feelings might've changed.‚Äù From a publicly traded tech company valued at $3B. ‚ÄúOncall duty was expected to be part of the job, but it was not clearly mentioned in the contract. Your annual review could be impacted for not fulfilling certain expectations during oncall.‚Äù From a financial data company in the US. ‚ÄúWe have a culture of still expecting to ship updates when you have been up all night handling a SEV-1 outage‚Ä¶ we have problems because of this.‚Äù From a warehouse automation scaleup. Why are poor oncall practices painful?  They can directly impact  software engineer attrition  and wellbeing. Simply put, poor oncall practices will lead to more engineers quitting, more people getting burnt out and fewer people recommending a company. Twilio‚Äôs example can be a cautionary tale in my view. While the company has been a business success, it has seen large attrition struggles, and not getting a handle fast enough on healthy oncall means they might see things get worse in terms of attrition, before they get better. Takeaways Based on my in-depth, anecdotal research of the industry right now, it appears there are two main philosophies when it comes to rewarding oncall: Oncall for software engineers is part of the job.  Many companies operate like this, most notably Big Tech ‚Äì save for Google ‚Äì and many high-growth startups. The more an employer compensates software engineers, the more likely they expect oncall to be a given. Oncall for software engineers is additional.  Companies which care either about healthy oncall practices or want to minimize attrition for software engineers, make it clear oncall is additional and offer some sort of compensation. Compensation may be cash, or it could be time, or it could be lightening the load with dedicated SREs or DevOps people, or making the rotations voluntary. I can safely say I was living in an ‚Äúoncall bubble‚Äù before researching this topic that has such a big impact on many people‚Äôs work and personal lives. Having mostly worked at companies where oncall is part of the job, is unpaid, and comes with high pressure, I assumed this is how it works everywhere. However, this article and its underlying research reveals that oncall duties being taken as a given, is actually far from the case across the industry. Many companies ‚Äì small and big, startups and traditional ‚Äì do pay extra compensation for it. Some places don‚Äôt pay cash, but they do offer time off in return for being on oncall duty. We‚Äôve explored  healthy oncall practices  in part one of this series. I hope the data points on which companies pay and how much, help shape your oncall policy. And don‚Äôt forget that engineers can shape oncall practices, not just managers; as software engineer Anna Baker at LaunchDarkly  shares in Part 1 : ‚ÄúWe had a former Intercom engineer take part in developing the new oncall process here, and they advocated for some of the practices they'd seen work well. Pretty incredible to have an engineer championing their former company's oncall. Although we ended up with a slightly different model, we definitely took note and I want to make sure to acknowledge that.‚Äù Update on 5th Aug 2022: corrected oncall data rates for Amazon (Germany), Auth0, and added Atlassian. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/advice-for-junior-software-engineers/", "title": "Advice for Less Experienced Software Engineers in the Current Tech Market", "content": "\n             In October 2022 I wrote about the  Big Tech hiring slowdown  for subscribers of  The Pragmatic Engineer , predicting the slowdown will hit new grads, hard . In December 2022, the New York Times reported on new grads struggling getting positions at Big Tech in the article  Computer Science students face a shrinking Big Tech job market . This article, written in August 2022, when the job market for new grads was already very tough, is advice I have for new grads. Subscribe to  The Pragmatic Engineer  to keep up to date of the tech industry changing. I mostly cover insights about the software engineering industry for more experienced software engineers and engineering managers. This article is a break from these topics. In the second half of 2021, we were in the middle of the most heated tech job market of all time. I wrote about  why this market reached all-time highs in a 'perfect storm' . However, while there was huge demand for software engineers, one thing stood out. Even in 2021, the market for less experienced software engineers was already chilly.  For experienced engineers, job opportunities were plenty, and large compensation increases were common. However, the opposite was true especially for entry-level software engineers: demand for these folks did not increase, neither did their compensation. In October 2021,  I already shared advice for this group . A year later, the  market has cooled down  for experienced software engineers. Where does this leave engineers with less experience? The market for these people is even worse than it was in 2021. There's far more competition - bootcamps and universities have not stopped in graduating new entrants to the market - however, companies are still more likely to hire for experienced engineers, and they are more likely be able to afford these people versus in 2021 when the market  was on fire . This article is advice I can offer to entry-level software engineers.  To be clear, I am not selling hope. We are likely to be in the middle one of the most difficult year to break into software engineering in the past decade. This is especially true if you lack pedigree - e.g. you did not graduate from a well-known school, you have not done an internship at a well-known tech company or you do not have a strong network where people can refer you entry-level positions at the company they work at. All of the below advice is what I tell people who ask me what they could do to maximise chances of getting their first - or second - jobs as software engineers.  Note that none of the below links are affiliate links or sponsored. I am not affiliated in any way with any of the resources I recommend save for  The Tech Resume Inside Out book  that I wrote and is  free for anyone without a job . See  my ethics statement  on the lack of advertisements, sponsorships or affiliate links. The reality of the 2022 tech market Know that it will be very hard to get that first job this time.  Bootcamps oversell how easy it is to get job in tech: because they need applicants to come, so they make money. Success stories from people getting jobs without experience both have  survivor bias , and those are usually stories from years ago, when the job market was not so hostile to entry-level engineers. The reality is that the job market is cooling off for experienced engineers as well. VC-funded companies and even some traditional companies are freezing hiring or laying off. Those hiring with a limited headcount are more likely to prioritize experienced engineers. In what has never happened before: Meta  did not issue new grad return offers for its interns . For new grads, the current tech climate can safely be compared to how challenging it likely was to get a first job in tech in 2008 - following the financial crisis - or in 2001 - after the Dotcom Bust. Consider joining a support group  if you are not part of one already. Try to find a place where there are other people in your shoes. This is where having education at a college or being part of the bootcamp is helpful, as you already have such a group. Alternatively, look for new grad Discord channels or communities with low fees like  Scrimba  and other, similar ones. It's easier to figure out what works, and what doesn't, and get motivation as part of a group. For free resources, look for Discord communities like  CS Career Hub . Join  r/cscareers  on Reddit to learn about how others are starting out on their careers. Forget about only applying to 'amazing' companies Aim wide when applying.  Don't only apply to the best-known companies, or ones offering full-remote. Those companies will be getting hundreds, if not thousands of applications to entry-level roles. In 2018, when I was a hiring manager at Uber, in Amsterdam, we opened internships for software engineering students. Within three days of advertising this position, we received 500 qualified applications - meaning people who checked the boxes on what we were asking for. We had four headcount to fill. This was in 2018, when the market was not nearly as challenging. While I'm not saying to not apply to well-known places, know that without references, your chances of even hearing back will likely be slim. Find smaller, lesser-known companies. These can be startups who are struggling to find any applicants, and businesses who will not spend the budget to advertise on job boards like LinkedIn, but you can find job adverts on job aggregators like  Indeed . Apply to less competitive companies, including 'unsexy' ones.  Look for local, non-tech companies, and ones who are not offering full-remote positions. Not only do these positions get fewer applicants: if they are onsite or hybrid, they'll also hire more juniors. This is because they can onboard junior people better. Apply to local companies, not just remote ones.  Full-remote roles will get much more applications than local ones. Those full-remote roles are also far more likely to hire someone with past experience, as the hiring manager is more likely to see such a hire as a lower risk one. Know that you'll have far better chances if applying locally, especially if it is for a position where being in the office - at least a few days a week - is a requirement. Many of the experienced people won't apply, neither will people outside the area. When getting your first or your second job, you should consider the competition you might have, and try to apply to places that will have less of this. Apply to consultancies/developer agencies as well.  The software consultancy business model requires hiring and training junior developers. They also give exposure with different environments and technologies. Agencies are a great stepping stone into the industry, and one many people move onto higher paying opportunities a few years later.  Be aware that some agencies have poor working practices: if you land in one of these, try to move on, instead of being stuck for too long. Know that almost no company will sponsor relocation with visas for entry-level positions.  For people who need relocation, some companies do sponsor visas: but they do these for key positions that they cannot hire for locally. New grad positions almost never fall into this category. There are a handful of exceptions - like some of Big Tech will offer visas for interns to return from strategic locations they want to hire for. There are, however, several companies that sponsor visas for university new graduates already in the country. For example, in the US, it's common enough for tech companies and startups willing to sponsor students on OPT with STEM extension, and the same is true in the UK. The difference is that these are students who are already in the country, and graduates of a locally known university or college. However, you can safely assume that for any position which is in a different country and needs a visa for you to work at: you will not hear back if applying if you are an early-career software engineer, or someone looking for your first job. You might as well save an application that will not go anywhere. Improve your resume while you keep applying Tailor your resume to each position  you apply to. If you don't have a job - yet - you request a copy of my book,  The Tech Resume Inside Out  for free. More than 1,000 people have done so: I approve all non-spam requests. Build your experience while you are job hunting.  Which person is more likely to be hired the next 12 months: one who spends 12 months applying nonstop, or the one who spends time applying, but also built a side project that anyone can try out, contributed to an open-source project, and did a contract gig on one of the popular freelancer marketplaces? It will be the latter.  Balance time between applying, and between making your profile stand out more. Contribute to open source in non-trivial ways.  Most people you compete with will have similar, non-production-grade projects on their resume. Those who contribute to popular open source libraries used by thousands of people and companies in production really stand out. Look for projects like  Awesome First PR opportunities  and explore open-source projects you use.  This route  will  be hard: much harder than just applying to jobs all day. This is why you stand out from other applicants if you persevere, and start contributing. Read and apply   How to Be a Kickass New Software Engineer  from bootcamp grad turned senior engineer  Raymond Gan . Also read the  featured articles in Raymond Gan's LinkedIn profile  which are all first-hand advice pieces on what does, and what does not work for bootcamp grads, in Raymond's experience. Consider taking on short projects for little payment or for free.  If you are unable to land a fulltime job, it might be because you lack experience of shipping something in the real world. One way to get this experience by doing shorter term projects, where you might be losing money on your time spent, but you ship something in production. You could build a website or a mobile app for a friend or someone you know who needs something like this but cannot afford to pay market rate. You could build your own such app as well. You can also connect with strangers for projects: but this latter is the one I'd suggest the least, as there's a slippery slope between having your skills exploited, versus getting references on real-world work, even if you are not paid market rates. When I started out, I did several freelance projects while I was at university where I charged below market rates. Those projects served as good references later, and helped me stand out from candidates who only had classroom projects and the usual CRUD app to showcase. Not all new grads will get job offers. How will you stand out?  The new grads software engineer market is vey much an employers market: meaning there are fewer open positions than people applying to those positions. This means not all new grads will succeed in securing a job. Knowing this: you need to stand out. What are ways that you will do this, knowing your competition? Standing out can be done in several ways: Pedigree . The most obvious one and the hardest to get. Graduate at a well-known school, intern at a known company, have references who refer you to their workplaces. Depth . Bring more depth in a field or two than your peers. Are you already an expert in programming language, having read the 'in depth' books and have a GitHub repository using advanced features of the language? Do you contribute to core projects in the space: something mostly experienced engineers do? Breadth . Do you have experience shipping a web app, a mobile app and a backend service, even if a small one? Most new grads lack such breadth. Non-trivial projects.  Have you shipped things well beyond your curriculum, which all of your peers have? As a hiring manager, it catches my eyes when I see people who have built more complex solutions - that I can take a look at - that are outside the CRUD apps that most bootcamp grads and new grads showcase as part of their college work. Papers and in-depth blog posts.  Have you published about your experiences and learnings either as an academic paper or on a professional blog? Motivation . Are you motivated to grow in the field, and have some ways to prove this is not just words? It could be anything of the above, or others as well. Putting in extra effort.  When applying to a company, do you put in any extra effort that very few - or no other - applicants does? For example, when applying to a startup which as a public API to use, did you build a project that uses this API, and add it to your resume on the first line? You bet almost no one did it. When aiming to break into DevRel  (developer relations): here is  advice from Harry Tormey  and from  Nader Dabit . The above ones are some of many ways to stand out. Putting in the effort to stand out might not get results immediately. However, without standing out from a crowd of applicants, you are far less likely to see success with your applications. Don't be picky with offers If you only have one offer: take it . You'll read advice about how to negotiate compensation between different offers, and how hot the market is in tech. Ignore this: as most of this applies to people with much experience behind their back.  I've personally had  a pretty good career , eventually making it to places like Skype and Uber: but, when starting out, I just took the first job that I was able to get in Hungary - as my first job. For my second job, when moving to the UK, getting a first offer at a company I was not excited to work at - long commute, not interesting domain - luckily, resulted in other companies calling me back and I got two more offers. Without this, I would have absolutely taken that one job offer I had. It's more important that you get started over getting a perfect start.  You can course adjust as you go. It took me about 8 years to work my way up to work at Uber. I freelanced during university shipping a variety of projects. My first fulltime job was a consultany in Hungary, then a consultancy in the UK, and only then did I get my first \"bigger name\" of JP Morgan on my resume. From there on, it was much easier to have better-known companies to notice me and about five years into my career I got a call from Skype, which was the first widely-known tech company I worked at. Getting started in the industry, and taking that first opportunity with the local Hungarian company was far more important for my career, than taking a perfect start. And I'm still grateful for all that I learned during two years at the company called  Sense/Net  you've probably never heard of. If you're a bootcamp grad : know that some of the \"learn to code in X months\" bootcamps don't do a good enough job in giving you the skills needed to get a software engineering job. Consider programs like  Launch School  that take much longer than a bootcamp, is  not a bootcamp-like approach , but their graduates  get offers even in this heated market . A note to hiring managers For hiring managers and engineering managers reading this article: be aware of the current market dynamics. While as a new grad software engineer it is very hard to find that first job, as a hiring manager, it's never been easier to hire very motivated and talented new grads. If you have headcount to fill, consider opening up at least a few new grad positions, once you have the seniority ratio in-place to support these people. You'll save budget by hiring these people, bring enthusiasm, and you could change the career trajectories for every such hire you make. If you hire new grads, see my advice on  growing a junior-heavy team  and on  onboarding engineers to your team . Know it will be challenging Getting your foot in the industry is very hard.   Much of the online resources of 'how I got 5 offers in 2 weeks' are all about survival bias and won't reflect the reality of most people, or how challenging it is to get started. As a ray of hope: once you'll make it in, it will only get easier with every passing year. Good luck, and it is an especially challenging time to get started in the industry. After you land that first position, you might find  advice to myself when starting out as a software developer  relevant. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/shipping-to-production/", "title": "Shipping to Production", "content": "\n             How you ship your code to production in a way that is fast and reliable, is a question more engineers and engineering leaders should educate themselves on. The teams and companies that can do both ‚Äì ship quickly / frequently and with good quality ‚Äì have a big advantage over competitors who struggle with either constraint. In this article, we cover: The extremes of shipping to production. Typical processes at different types of companies. Principles and tools for shipping to production responsibly. Additional verification layers and advanced tools. Taking pragmatic risks to move faster. An extended version of this article was originally published in  The Pragmatic Engineer Newsletter . If you're not a subscriber yet, sign up here for free: Subscribe now 1. The Extremes of Shipping to Production When it comes to shipping code, it‚Äôs good to understand the two extremes of how code can make it to users. The table below shows the ‚Äòthorough‚Äô way and the ‚ÄòYOLO‚Äô way. Two ‚Äúextremes‚Äù of shipping to production: YOLO and thorough verification 1. YOLO shipping  - YOLO stands for ‚Äúyou only live once.‚Äù This is the approach many prototypes, side projects, and unstable products like alpha or beta versions of products, use. In some cases, it‚Äôs also how urgent changes make it into production. The idea is simple: make the change in production, then see if it works ‚Äì all in production. Examples of YOLO shipping include: SSH into a production server ‚Üí open an editor (e.g. vim) ‚Üí make a change in a file ‚Üí save the file and / or restart the server ‚Üí see if the change worked. Make a change to a source code file ‚Üí force land this change without a code review ‚Üí push a new deployment of a service. Log on to the production database ‚Üí execute a production query fixing a data issue (e.g. modifying records which have issues) ‚Üí hope this change has fixed the problem. YOLO shipping is as fast as it gets in terms of shipping a change to production. However, it also has the highest likelihood of introducing new issues into production, as this type of shipping has no safety nets in place. With products that have little to no production users, the damage done by introducing bugs into production can be low, and so this approach is justifiable. YOLO releases are common with: Side projects. Early-stage startups with no customers. Mid-sized companies with poor engineering practices. When resolving urgent incidents at places without well-defined incident handling practices. As a software product grows and more customers rely on it, code changes need to go through extra validation before reaching production. Let‚Äôs go to the other extreme: a team obsessed with doing everything possible to ship close to zero bugs into production. 2. Thorough verification through multiple stages  is where a mature product with many valuable customers tends to end up, when a single bug may cause major problems. For example, if bugs result in customers losing money, or customers leaving for a competitor, this rigorous approach might be used. With this approach, several verification layers are in place, with the goal of simulating the real-world environment with ever more accuracy. Some layers might be: Local validation.  Tooling for software engineers to catch obvious issues. CI validation.  Automated tests like unit tests and linting running on every pull request. Automation before deploying to a test environment.  More expensive tests such as integration tests or end-to-end tests run before deployment to the next environment. Test environment #1.  More automated testing, like smoke tests. Quality assurance engineers might manually exercise the product, running both manual tests and doing exploratory testing. Test environment #2.  An environment where a subset of real users ‚Äì such as internal company users or paid beta testers ‚Äì exercise the product. The environment is coupled with monitoring and upon a sign of regression, the rollout is halted. Pre-production environment #3.  An environment where the final set of validations are run. This often means running another set of automated and manual tests. Staged rollout.  A small subset of users get the changes, and the team monitors for key metrics to remain healthy and checks customer feedback. The staged rollout strategy is orchestrated based on the riskiness of the change being made. Full rollout.  As the staged rollout increases, at one point, changes are pushed to all customers. Post-rollout.  Issues will come up in production, and the team has monitoring and alerting set up, and a feedback loop with customers. If an issue arises, it is dealt with by following a standard process. Once an outage is resolved, the team follows  incident review and postmortem best practices, which we‚Äôve covered before . Such a heavyweight release process can be seen at places like: Highly regulated industries, such as healthcare. Telecommunications providers, where it is not uncommon to have ~6 months of thorough testing of changes, before shipping major changes to customers. Banks, where bugs could result in significant financial losses. Traditional companies with legacy codebases that have little automated testing. However, these companies want to keep the quality high and are happy slowing down releases by adding more verification stages. 2. Typical processes at different types of companies What are ‚Äútypical‚Äù ways to ship code into production at different types of companies? Here‚Äôs my attempt to generalize these approaches, based on observation. The below is a generalization, as not every company‚Äôs practices will match these processes. Still, I hope it illustrates some differences in how different companies approach shipping to production: Different ways various companies typically ship to production. Notes on this diagram: 1. Startups:  Typically do fewer quality checks than other companies. Startups tend to prioritize moving fast and iterating quickly, and often do so without much of a safety net. This makes perfect sense if they don't ‚Äì yet ‚Äì have customers. As the company attracts users, these teams need to start to find ways to not cause regressions or ship bugs. They then have the choice of going down one of two paths: hire QAs or invest in automation. 2. Traditional companies : Tend to rely more heavily on QAs teams. While automation is sometimes present in more traditional companies, it's very typical that they rely on large QA teams to verify what they build. Working on branches is also common; it's rare to have trunk-based development in these environments. Code mostly gets pushed into production on a schedule, for example weekly or even less frequently, after the QA team has verified functionality. Staging and UAT (User Acceptance Testing) environments are more common, as are larger, batched changes shipped between environments. Sign-offs from either the QA team or the product manager ‚Äì or project manager ‚Äì are often required to progress the release from one stage to the next. 3. Large tech companies : Typically invest heavily in infrastructure and automation related to shipping with confidence. These investments often include automated tests running quickly and delivering rapid feedback, canarying, feature flags and staged rollouts. These companies aim to keep a high quality bar, but also to ship immediately when quality checks are complete, working on trunk. Tooling to deal with merge conflicts becomes important, given some of these companies can see over 100 changes on trunk per day. 4. Facebook core : Has a sophisticated and effective approach few other companies possess. Facebook's core product is an interesting one. It has fewer automated tests than many would assume, but, on the other hand, it has an exceptional automated canarying functionality, where the code is rolled out through 4 environments: from a testing environment with automation, through one that all employees use, through a test market of a smaller region, to all users. In every stage, if the metrics are off, the rollout automatically halts. From the article  Inside Facebook‚Äôs engineering culture , in which a former Facebook employee relates how an Ads issue was caught before causing an outage: ‚ÄúI was working in Ads and I remember this particular bad deploy which would have made a massive financial loss to the company. The code change broke a specific ad type. ‚ÄòThis issue was caught in stage 2 out of 4 stages. Each stage had so many health metrics monitored that if something went wrong, these metrics would almost always trigger - like this first safety net had done. ‚ÄúAll Facebook employees used the before-production builds of the Facebook website and apps. This means that Facebook has a massive testing group of ~75,000 people testing their products before they go into production, and flagging any degradations.‚Äù 3. Principles and tools for responsibly shipping to production What are principles and approaches worth following if you are to ship changes to production in a responsible manner? Here are my thoughts. Note that I am not saying you need to follow all the ideas below. But it‚Äôs a good exercise to question why you should  not  implement any of these steps. 1. Have a local or isolated development environment.  Engineers should be able to make changes either on their local machine, or in an isolated environment unique to them. But it‚Äôs more common to have developers work in local environments. However, places like Meta are moving over to working on remote servers dedicated to each engineer. From the article  Inside Facebook‚Äôs Engineering culture : ‚ÄúMost developers work with a remote server, not locally. Starting from around 2019, all web and backend development is done remotely, with no code copied locally, and Nuclide facilitating this workflow. In the background, Nuclide was using virtual machines (VMs) at first, later moving to OnDemand instances ‚Äì similar to how GitHub Codespaces works today ‚Äì years before GitHub launched Codespaces.  ‚ÄúMobile development is still mostly done on local machines, as doing this in a remote setup as with web and backend has tooling challenges.‚Äù 2. Verify locally.  After writing the code, do a local test to make sure that it works as it should. 3. Consider edge cases and test for them.  Which non-obvious cases does your code change need to account for? What are use cases that exist in the real world that you might have not accounted for? Before finalizing work on the change, put together a list of these edge cases. Consider writing automated tests for these, if possible. At least do manual testing on them. Coming up with a list of edge cases is a scenario when QA engineers or testers can be very helpful in coming up with non-conventional edge cases, if you work with them. 4. Write automated tests to validate your changes.  After you manually verify your changes, exercise your changes with automated tests. If following a methodology like TDD, you might do this the other way around by writing automated tests first, then ensuring those tests are passed following your changes. 5. Get another pair of eyes to look at it: code review.  With all changes validated, get someone else with context to look at your code changes. Write a clear and concise description of your changes, make it clear which edge cases you‚Äôve tested and get a code review.  Read more about  how to do good code reviews and better code reviews . 6. All automated tests pass, minimizing the chances of regressions.  Before pushing the code, run all the existing tests for the codebase. This is typically done automatically, via the CI / CD system (continuous integration / continuous deployment). 7. Have monitoring in place for key product characteristics related to your change.  How will you know if your change breaks things that automated tests don‚Äôt check for? Unless you have ways to monitor health indicators on the system, you won‚Äôt. So make sure there are health indicators written for the change, or other ones you can use. For example at Uber, most code changes were rolled out as experiments with a defined set of metrics they were expected to either not impact, or to improve. One of the metrics that was expected to remain unchanged was the percentage of people successfully taking Uber trips. If this metric dropped with a code change, an alert was fired and the team making the code change needed to investigate if their change had done something to degrade the user experience. 8. Have oncall in place, with enough context to know what to do if things go wrong.  After the change is shipped to production, there‚Äôs a fair chance some defects will only become visible much later. That why‚Äôs it good to have an oncall rotation in place with engineers who can respond to either health alerts, or to inbounds from customers, or customer support. Make sure the oncall is organized in a way that those performing oncall duty have enough context on how to mitigate outages. In most cases, teams have runbooks with sufficient details for confirming outages and mitigating them. Many teams also have oncall training, and some do oncall situation simulations to prepare team members for their oncall. 9. Operate a culture of blameless incident handling, where the team learns and improves following incidents.  I cover this topic in-depth in the article  Incident review and postmortem best practices . 4. Additional verification layers and approaches What are layers, tools and approaches that some companies use as additional ways to deliver reliable code to production? It‚Äôs common for teams to use some of the approaches below, but rarely all of them at once. Some approaches cancel each other out; for example, there‚Äôs little reason to have multiple testing environments if you have multi-tenancy in place and are already testing in production. Here are 9 approaches that provide additional safety nets: 1. Separate deployment environments.  Setting up separate environments to test code changes is a common way to add an additional safety net to the release process. Before code hits production, it‚Äôs deployed to one of these environments. These environments might be called testing, UAT (user acceptance testing), staging, pre-prod (pre-production) and others. For companies with QA teams, QA often exercises a change in this environment, and looks for regressions. Some environments might be built for executing automated tests, such as end-to-end tests, smoke tests or load tests. While these environments look good on paper, they come with heavy maintenance costs. This is both in resources, as machines need to be operated so this environment is available, and even more so in keeping the data up-to-date. These environments need to be seeded with data that is either generated, or brought over from production. Read more about deployment and staging environments in the article  Building and releasing to deployment environments , published by the Harness team. 2. Dynamically spin up testing / deployment environments.  Maintaining deployment environments tends to create a lot of overhead. This is especially true when, for example,  doing data migrations  means data needs to be updated in all the test environments. For a better development experience, invest in automation to spin up test environments, including the seeding of the data they contain. Once this is in place, it opens up opportunities to do more efficient automated testing, for people to validate their changes more easily, and to create automation that better fits your use cases. 3. A dedicated QA team.  An investment many companies make which want to reduce defects, is hiring a QA team. This QA team is usually responsible for manual and exploratory testing of the product. My view is if you have a QA team that does only manual testing, then there is value in this. However, if the team executes manual tests on things that could be automated, the time overhead of manual testing will slow the team down instead of speeding them up. In productive teams, I‚Äôve observed QA transition into domain experts and help engineers anticipate edge cases. They also do exploratory testing and find more edge cases and unexpected behaviors. However in these productive teams, QA also become QA engineers, not manual testers. They start to get involved in the automating of tests, and have a say in shaping the automation strategy so it speeds up the process of code changes making it into production. 4. Exploratory testing.  Most engineers are good at testing the changes they make, verifying they work as expected, and at considering edge cases. But what about testing in a way which relates to how retail users of the system utilize the product? This is where exploratory testing comes in. Exploratory testing is trying to simulate how customers might use the product, in order to come across the edge cases they may stumble upon. Good exploratory testing requires empathy with users, an understanding of the product, and tooling with which to simulate various use cases. At companies with dedicated QA teams, these QA teams usually do exploratory testing. At places without dedicated QA teams, it‚Äôs either down to engineers to perform this testing, or companies will sometimes contract vendors specializing in exploratory testing. 5. Canarying.  Canarying comes from the phrase ‚Äúcanary in the coal mine.‚Äù In the early 20th century, miners took a caged canary bird with them down a mine. This bird has a lower tolerance for toxic gasses than humans, so if the bird stopped chirping or fainted, it was a warning sign to the miners that gas was present and they evacuated. Today, canary testing means rolling out code changes to a smaller percentage of the user base, then monitoring the health signals of this deployment for signs that something‚Äôs not right. A common way to implement canarying is to either route traffic to the new version of the code using a load balancer, or to deploy a new version of the code to a single node. Read more about canarying  in this article  by the LaunchDarkly team. 6. Feature flags and experimentation.  Another way to control the rollout of a change is to hide it behind a feature flag in the code. This feature flag can then be enabled for a subset of users, and those users execute the new version of the code. Feature flags are easy enough to implement in the code, and might look something like this flag for an imaginary feature called ‚ÄòZeno‚Äô: if( featureFlags.isEnabled(‚ÄúZeno_Feature_Flag‚Äù)) {  ¬† // New code to execute  } else {  ¬†// Old code to execute } Feature flags are a common way to allow running experiments. An experiment means bucketing users in two groups: a treatment group (the experiment) and the control group (those not getting the experiment). These two groups get two different experiences, and the engineering and data science team evaluate and compare results. 7. Staged rollout.  Staged rollouts mean shipping changes step by step, evaluating the results at each stage, and then proceeding further. Staged rollouts typically define either the percentage of the user base to get the changed functionality, or the region where this functionality should roll out, or a mix of both. A staged rollout plan may look like this: Phase 1: 10% rollout in New Zealand (a small market to validate changes) Phase 2: 50% rollout in New Zealand Phase 3: 100% rollout in New Zealand Phase 4: 10% rollout, globally Phase 5: 25% rollout, globally Phase 6: 50% rollout, globally Phase 7: 100% rollout, globally Between each rollout stage, a criteria is set for when the rollout can continue. This is typically defined as there being no unexpected regressions and the expected changes (or absence thereof) to business metrics being observed. 8. Multi-tenancies.  An approach that is growing in popularity is using production as the one and only environment to deploy code to, including testing in production. While testing in production sounds reckless, it‚Äôs not if done with a multi-tenant approach. Uber describes its journey from a  staging environment, through a test sandbox with shadow traffic, all the way to tenancy-based routing . The idea behind tenancies is the tenancy context is propagated with requests. Services getting a request can tell if this request is for a production request, for a test tenancy, for a beta tenancy, and so on. Services have logic built in to support tenancies, and might process or route requests differently. For example, a payments system getting a request with a test tenancy would likely mock the payment, instead of making an actual payment request. For more details on this approach, read  how Uber implemented a multi-tenancy approach , and also  how Doordash did . 9. Automated rollbacks.  A powerful way to increase reliability is to make rollbacks automatic for any code changes that are suspected of breaking something. This is an approach that Booking.com uses, among others. Any experiment that‚Äôs found to be degrading key metrics is shut down and the change rolled back: Not sure if still the case but I presume so.  https://t.co/56LJBw2sJU 's experiment tool has a killswitch that will immediately kill an experiment in production if any of the health metrics (i.e. errors) spikes up right after an experiment is started. ‚Äî Stefano Baccianella (@mangiucugna)  May 23, 2022   GitHub Distinguished Engineer Jaana Dogan makes a similar case for automatic rollbacks coupled with staged rollouts: One more detail is what type of investment that goes into auto rollbacks at some companies vs others. When you have solid multi staged auto rollouts and auto rollbacks in place, you rarely fear breaking production.  https://t.co/Ef4Xz6TjiQ ‚Äî Jaana Dogan „É§„Éä „Éâ„Ç¨„É≥ (@rakyll)  May 19, 2022   10. Automated rollouts and rollbacks across several test environments.  Taking automated rollbacks a step further, and combining them with staged rollouts and multiple testing environments, is an approach that Facebook has uniquely implemented for their core product. 5. Taking pragmatic risks to move faster There are occasions when you want to move faster than normal, and are comfortable taking a bit more risk to do so. What are pragmatic practices for this? Decide which process or tool it is  not okay  to ever bypass.  Is force-landing without running any tests ever an option? Can you make a change to the codebase without anyone else looking at it? Can a production database be changed without testing? It‚Äôs down to every team ‚Äì or company ‚Äì to decide which processes cannot be bypassed. For all the above examples, if this question comes up at a mature company with a large number of users who depend on their products, I‚Äôd think carefully before breaking rules, as this could cause more harm than good. If you do decide to bypass rules in order to move faster, then I recommend getting support from other people on your team before embarking upon this course of action. Give a heads up to relevant stakeholders when shipping ‚Äúrisky‚Äù changes.  Every now and then you‚Äôll ship a change that is more risky and less tested than you‚Äôd ideally want. It‚Äôs good practice to give a heads up to the people who might be able to alert you if they see something strange unfolding. Stakeholders worth notifying in these cases can include: Members of your team. Oncalls for teams that depend on your team, and ones which you depend on. Customer-facing stakeholders whom users contact. Customer support. Business stakeholders who have access to business metrics and can notify you if they see something trending in the wrong direction. Have a rollback plan that is easy to execute.  How can you revert a change which causes an issue? Even if you‚Äôre moving fast, make sure you have a plan that‚Äôs easy enough to execute. This is especially important for data changes and configuration changes. Revert plans used to be commonly added to diffs in the early days of Facebook. From  Inside Facebook‚Äôs Engineering Culture : ‚ÄúEarly engineers shared how people used to also add a revert plan to their diff to instruct how to undo the change, in the frequent case this needed to be done. This approach has improved over the years with better test tooling.‚Äù Tap into customer feedback after shipping risky changes.  Get access to customer feedback channels like forums, customer reviews, and customer support after you ship a risky change. Proactively look through these channels to see if any customers have issues stemming from the change you rolled out. Keep track of incidents, and measure their impact.  Do you know how many outages your product had during the past month? The past three months? What did customers experience? What was the business impact? If the answer to these questions is that you don‚Äôt know, then you‚Äôre flying blind and don‚Äôt know how reliable your systems are. Consider changing your approach to track and measure outages, and accumulate their impacts. You need this data to know when to tweak your release processes for more reliable releases. You‚Äôll also need it if you are to use error budgets. Use error budgets to decide if you can do ‚Äúrisky‚Äù deployments.  Start measuring the availability of your system with measurements like SLIs (Service Level Indicators) and SLOs (Service Level Objectives,) or by measuring how long the system is degraded or is down. Next, define an  error budget , an amount of service degradation that you deem acceptable for users, temporarily. For as long as this error budget is not exceeded, more risky deployments ‚Äì those more likely to break the service ‚Äì might be fine to go ahead with. However, once you hit this quota, take no further shortcuts. 6. Deciding on the approach you take For this section, see  the full article for subscribers . 7. Other things to incorporate into the deployment process For this section, see  the full article for subscribers . Takeaways I suggest that one of the biggest takeaways is to not  only  focus on how you ship to production, but how you can revert mistakes when they happen. A few other closing thoughts: Shipping quickly vs doing it with high quality; you can have both!  One misconception some people have is thinking this is a zero-sum choice; either you ship quickly, or you have a thorough but slow process of high quality. On the contrary; many tools help you to ship quickly with high quality, enabling you to have both. Code reviews, CI / CD systems, linting, automatically updated testing environments or test tenancies can all help you to ship rapidly, with high quality. Know the tools at your disposal.  This article lists many different approaches you can use to ship faster, with more confidence. QA is your friend in helping build a faster release process.  While some engineers working with QA engineers and testers might feel that QA slows things down, I challenge this notion. The goal of QA is to release high-quality software. It is also their goal to not get in the way of shipping quickly. If you work with QAs, collaborate with them on how you can improve the release process to make it faster, without reducing quality. It‚Äôs harder to retrofit legacy codebases with tools that enable faster shipping.  If you are starting a product from scratch, it‚Äôs easier to set up practices that allow for rapid shipping, than it is to retrofit them to existing codebases. This is not to say you cannot retrofit these approaches, but doing so will be more expensive. Accept you will ship bugs.  Focus on how quickly you can fix them! Many teams obsess far too much on how to ship close to zero bugs to production, at the expense of thinking about how to quickly spot issues and resolve them promptly. On software quality: many teams obsess far too much on how to ship with close to no bugs to production: but not enough about how to quickly spot these, and resolve them rapidly - doing this either automatically, or with a simple step. Resilient products/platforms have both. ‚Äî Gergely Orosz (@GergelyOrosz)  May 23, 2022   Further reading Several companies have shared their approach to shipping code into production. Below are a few articles worth reading to learn more about different tactics: Monzo:  deploying to production over 100 times a day  (2022) Wayfair:  increasing deployment frequency 5x in 2 years  (2021) Funda:  release automation  (2021) Harness:  building & releasing to deployment environments  (2021) LinkedIn:  learnings on continuous deployment  (2019) Honeycomb CTO Charity Majors:  I test in production  (2019) Up Bank:  continuous delivery  (2018) Facebook:  rapid release at massive scale  (2017) Uber:  deploying to daily, with confidence  (2016) The Guardian:  adopting continuous delivery  (2015) If you‚Äôve enjoyed this article, subscribe to  The Pragmatic Engineer Newsletter  for weekly issues. In every issue, I cover challenges at big tech and high-growth startups through the lens of engineering managers and senior engineers. üëá Subscribe now   \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/rfcs-and-design-docs/", "title": "Companies Using RFCs or Design Docs and Examples of These", "content": "\n             RFCs - requests for comment - or Design Docs are a common tool that engineering teams use to build software faster, by clarifying assumptions and circulating plans earlier. There are some similarities between writing automated tests for your code, and writing RFCs before you start working on a non-trivial project: \n \n Software engineers who write tests for their code - and ask for code reviews on it - often ship more maintainable code. Software engineers who write design docs for their architecture - and ask for reviews on it - often ship more maintainable architecture. ‚Äî Gergely Orosz (@GergelyOrosz)  June 12, 2022   \n \n Most of these documents are internal to companies. It‚Äôs common for engineers moving from one company to the other to bring structures that worked at their previous company. This article collects some openly available RFC templates and examples, and a list of companies that use such a process.  I‚Äôd encourage to use these examples for inspiration. Take parts that resonate with you, experiment with them and modify them to your needs. For a more detailed article on successful planning approaches software engineering teams use, read my longer article:  Engineering Planning with RFCs, Design Document and ADRs . As a note, Product Requirement Documents (PRDs) are commonly run side by side with an engineering design document. This is because if product managers don‚Äôt specify what they‚Äôd like the team to build, it‚Äôs likely the company doesn‚Äôt have a writing culture. See a collection of PRD templates  collected by Lenny Rachitsky, the author of  Lenny‚Äôs Newsletter  - the most popular publication for product managers. Companies that use RFCs or Design Docs I collected companies where it's common enough to follow and RFC or Design Docs process. Here's a snapshot of some of these places. The article closes with a detailed list, pointing to details to how some of these companies use this approach. Companies using an RFC or Design Docs process Notably missing from this list is Facebook/Meta. While some teams in the company send around 1-pager documents, Facebook is known to have the least emphasis on documentation across all of Big Tech. As I write in the article  Inside Facebook's Engineering Culture, Part 2 : ‚ÄúFacebook has less documentation and testing in-place than most tech companies. This approach works for a few reasons: historic ones, engineers having long tenures, Facebook hires some of the best engineers, they built systems to counter the lack of documents and testing. I would not suggest deliberately following this approach, especially not in the age of asynchronous and remote work.‚Äù RFC Examples and Templates Google Design Docs overview . Typical document structure: Context and scope Goals and non-goals The actual design System-context diagram APIs Data storage Code and pseudo-code Degree of constraint Alternatives considered Cross-cutting concerns Uber RFC process overview  (used up to around 2019). Typical structure for services: List of approvers Abstract (what is the project about?) Architecture changes Service SLAs Service dependencies Load & performance testing Multi data-center concerns Security considerations Testing & rollout Metrics & monitoring Customer support considerations Typical structure for mobile: Abstract (what is the project about?) UI & UX Architecture changes Network interactions detailed Library dependencies Security concerns Testing & rollout Analytics Customer support considerations Accessibility Sourcegraph RFC process overview  and  list of all public RFCs . An example document:  Explicit Repository Permissions Model . Typical document structure: Summary Background Problem Proposal Definition of success HashiCorp   RFC process overview . An example document:  [RFC] Enable widgets in Product Typical document structure: Background Proposal Abandoned ideas (Custom sections, for example:) Implementation UX UI SoundCloud Details  on their RFC process . Typical structure: Header (authors, to be reviewed by, revisit date, state) Need Approach Benefits Completion or Alternatives RazorPay Template document  and a  collection of RFCs . As an example:  spatial system RFC . Typical structure: Summary Motivation Detailed design Drawbacks/constraints Alternatives Adoptions strategy Open questions How do we educate people? References Monzo Typical document structure : Why solve now as opposed to later  Goals and non-goals  Client API and how each platform interacts with it  New internal tooling  Legal and privacy  Risks (must have!)  Observability and graceful degradation  What we still do not know Dune Analytics An overview of why the company uses this approach: \n \n @DuneAnalytics  we do this. CC  @mewwts   pic.twitter.com/ejH0vHT7XC ‚Äî hagaetc.eth ü´°üö¢ (@hagaetc)  June 14, 2022   \n \n Couchbase RFC template  to propose adding to the API and  list of all RFC s. A good example is the  SDK for error handling . Typical structure: Summary Motivation General Design Errors Documentation Language Specifics Questions Changelog Signoff Incident.io RFC template . ‚ÄúWe use it for things like sales process changes as well, so not just technical. But we don‚Äôt mandate it, and early stage speed means that we don‚Äôt always write them‚Äù -  Stephen Whitworth  RiskLedger  RFC template . Typical structure: TL;DR Need Success Criteria Approach Awareness Techical Design Backend Frontend Milestones Out of Scope Stedi The below is a section from the article  Engineering Planning with RFCs, Design Document and ADRs : RFCs were introduced early at the company. They‚Äôre written as .MD files on GitHub, and comments are made also using GitHub. RFCs are typically used for broad, complex projects, company-wide technical mandates or API changes. The company has an RFC template people can use as a starting point and diverge from as needed. The template is this: Status Draft | Proposed | Published Type Experimental | Informational | Best Current Practice | Required Scope The scope of work affected by the RFC document. Notational conventions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in  BCP 14   RFC2119 ,  RFC8174  when, and only when, they appear in all capitals, as shown here, and without quotes. Context A description of the problem space and/or requirements that this RFC is set to address. Decision A description of the proposed solution, which sets out the specifications of the implementation of the RFC. Should include specific details on how the solution addresses the requirements as laid out in the Context section. Consequences Any consequences that are in play as a result of the decision being put into place. Decision Records are a more lightweight format that Stedi introduced, shortly after starting to use RFCs. These documents are usually written as Google Docs. The company uses this not just for technical decisions, but for a variety of tasks. For example, they wrote a Decision Record for the introduction of a training platform, and for moving their recruitment process from one vendor to another. Decision records are used for two key reasons: To codify a decision that's already been made. As a forcing function to get alignment on a decision that needs to be made Here is a template  of a decision record the company uses. From an internal memo at  Stedi  that explains why they place so much emphasis on thinking before coding, and therefore write before they code (emphasis mine): ‚ÄúWriting a doc is not a perfunctory gesture, and asking for a doc on something is not a punishment or a mechanism for control. Writing a doc is a way of i) surfacing requirements and assumptions, ii) driving clarity of reasoning stemming from those requirements and assumptions.  Without this step, our software has little hope of delivering the results we want over the long term.‚Äù As a final thought, not everyone has to write docs here. Some people just want to execute, and there is plenty of room for that, too ‚Äì but if you just want to execute, you‚Äôll be executing on the plan, architecture, or implementation described in someone else‚Äôs doc. Our domain is too complex and our ambitions too large to build software willy-nilly.\" CockroachDB.  The  main design document  summarizing the database itself. This is a great example of summarizing a complex system with a concise and well-written overview. This design document covers these sections: Overview Architecture Keys Versioned Values Lock-Free Distributed Transactions Logical Map Content Stores and Storage Self Repair Rebalancing Range Metadata Raft - Consistency of Range Replicas Range Leases Splitting / Merging Ranges Node Allocation (via Gossip) Node and Cluster Metrics Zones SQL Details on companies that use RFCs or Design Docs I asked for examples on what companies use RFCs. I expected some response, but the number of responses was surprising: \n \n Does your current/former company have a culture of writing eng design docs or RFCs? For non-trivial projects, writing down the proposal sending it around to gather feedback beforehand. If so, share the company name in this thread. Gathering examples of places that do this üëá ‚Äî Gergely Orosz (@GergelyOrosz)  June 14, 2022   \n \n From the thread, and from talking with engineers at companies, these some of the better-known companies all use RFCs or Design Docs within engineering: Airbnb. ‚ÄúWe write specs and design docs for both Product and Engineering.‚Äù -  Manish Maheshwari Affirm Algolia - ‚Äúwe‚Äôve found RFCs to be super valuable‚Äù -  Praagya Joshi Amazon. Engineering teams do design reviews on architecture with technical docs (e.g. API, components, etc). This is on top of the product specifications - called PR/FAQs/working backwards documents. More details in  Inside Amazon‚Äôs Engineering Culture . Some orgs follow this process  religiously . AutoScout24 Asana Atlassian Blue Apron. Also have a weekly architecture lab.  Details . Bitrise - also using it  for non-technical proposals Booking.com.  Details . Brex.  Details . BrowserStack - ‚Äúhelps work out all the things that are needed from costs/privacy/compliance as well as trying to figure the best way to implement.‚Äù Canonical Caroussel Catawiki - \"Not only these add great visibility and enable collaboration at scale but also they can link and help align design & development cycles very well\" -  √ñzgen G√ºng√∂r Cazoo Cisco - at least  some teams CockroachDB Coinbase Comcast Cable - using ADRs. Container Solutions Contentful Couchbase Criteo. They are  called kick-offs . Curve Daimler Delivery Hero Doctolib DoorDash Dune Analytics - with  an example eBay Ecosia (an environment-conscious search engine).  Details Elastic Expedia Faire Flexport Glovo. ‚ÄúRFCs for engineering design proposals. We also have ADRs in our code repositories for documenting architectural designs.‚Äù -  source Gojek. ‚ÄúWe should have done this much earlier‚Äù -  quote from  their former SVP Engineering Grab GitHub GitLab. Details  on their frontend RFC process . GoodNotes: ‚ÄúWe do Implementation Plans before starting any medium-large size project, sharing how engineers plan to tackle it.‚Äù -  Juanjo Ramos Google Grafana Labs GrubHub HashiCorp Hopin Hudl. ‚ÄúFor non-trivial projects and technical decisions impacting multiple teams.‚Äù -  Juanjo Ramos Indeed Intercom Kiwi.com Klarna. \"Recently started, specially for company-wide changes but it‚Äôs slowly migrating inside specific areas where we now work with Architectural Decision Records (ADR) for smaller things\" -  Lucas Santos LinkedIn. \"A strong culture of writing RFCs and doing RFC reviews.‚Äù MasterCard Mews (hospitality system).  Details MongoDB Monzo.  Details Mollie Miro N26.  Details Netlify.  Details . Nobl9 (SLO management) Notion Nubank Oscar Health. ‚ÄúThey‚Äôre a requirement for any large project‚Äù Octopus Deploy. ‚ÄúI find it‚Äôs net positive when I look across the different scenarios I‚Äôve looked up docs to better understand rather than booking a meeting.‚Äù -  Colin Bowern OLX Onfido Pave Peloton. ‚ÄúA design docs culture that has swung back and forth between centralized to decentralized over time.  We've taken up ADRs in the last year that focus on ‚Äòdecisions‚Äô with ‚Äòdesign docs‚Äô usually being longer form, often supplementing an ADR.‚Äù -  he Head of Core Engineering  at Peloton Picnic PlanGrid (acquired by Autodesk) Preply Razorpay Reddit.  Details Red Hat SAP. ‚ÄúHad a process for Architecture Concept and Design documents.‚Äù Salesforce Shopify Siemens.  Details . Spotify. ‚ÄúRFCs and ADRs are at this point pretty deeply embedded part of the culture. Also sometimes used for non-technical changes such as re-orgs.‚Äù -  Marcus Frodin Square Stripe.  Details  on their writing culture. Synopsys. ‚ÄúWhen I was VP of Engineering, we had requirements spec (CAE), project spec (R&D) and sometimes implementation spec (R&D).  All changes after code freeze went through an ECR process.  All had reviews by cross-functional teams ( Marketing, CAE, RnD).‚Äù -  Steve Meier Skyscanner SoundCloud. Details  on their RFC process . Sourcegraph (~200 engineers) Spotify Stedi (~80 engineers, Series B) Stream (chat API, ~60 engineers).  Details SumUp Thumbtack TomTom Trainline TrueBill Trustpilot Twitter Uber VanMoof (electric bicycles). ‚Äúteams choose based on their preference and use case between the RFC template (in Confluence) or the KDD template (in Git engineering handbook)‚Äù -  Alexander Papageorgiou Virta Health (Series E) VMWare Wayfair Wave (money management) Wise. Using more ADRs.  Details . WarnerMesia / HBO / Waner Bros Discovery Zalando.  Details Zapier. ‚ÄúHelps in outling scope and surfacing issues before you start working on it.‚Äù Zendesk Zillow Early-stage companies where I‚Äôm an  investor in : Incident.io  (incident management, ~10 engineers). Invact Metaversity  (education,  ~5 engineers. mobile.dev  (mobile tooling, ~8 engineers) A few other small enough and early-stage startups which use this approach: Ashby  (recruitment software) Infraspeak  (maintanence management platform) eesel  - a documents app SpotDraft  (contract automation) For more examples, see responses  in this Twitter thread . I hope these examples were useful. For a more detailed article on successful planning approaches software engineering teams use, read my longer article:  Engineering Planning with RFCs, Design Document and ADRs . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/what-is-data-engineering/", "title": "What is Data Engineering?", "content": "\n             üëã Hi, this is  Gergely  with a free issue of the Pragmatic Engineer Newsletter. Today we cover Part 1 of 'What is Data Engineering.' To get a similarly in-depth article every week,  subscribe to The Pragmatic Engineer Newsletter . Q: I‚Äôm hearing more about data engineering. As a software engineer, why is it important, what‚Äôs worth knowing about this field, and could it be worth transitioning into this area? This is an important question as data engineering is a field that is without doubt, on fire. In November of last year, I wrote about what seemed to be a Data Engineer shortage in the issue,  More follow-up on the tech hiring market : ‚ÄúData usage is exploding, and companies need to make more use of their large datasets than ever. Talking with hiring managers, the past 18 months has been a turning point for many organizations, where they are doubling down on their ability to extract real-time insights from their large data sets. (...) What makes hiring for data engineers challenging is the many languages, technologies and different types of data work different organizations have.‚Äù To answer this question, I pulled in  Benjamin Rogojan , who also goes by Seattle Data Guy, on his  popular data engineering blog  and  YouTube channel . Ben has been living and breathing data engineering for more than 7 years. He worked for 3 years at Facebook as a Data Engineer and has gone independent following his work there. He now works with both large and small companies to build out data warehousing, developing and implementing models, and takes on just about any data pipeline challenge. Ben also writes the  SeattleDataGuy newsletter on Substack  which is a publication to learn about end-to-end data flows, Data Engineering, MLOps, and Data Science.  Subscribe here . In this article, Ben covers: What do data engineers do? Data engineering terms. Why data engineering is becoming more important. In part 2 - coming next week and  already out for full subscribers  - we will additionally cover: Data engineering tools: an overview Where is data engineering headed? Getting into data engineering as a software engineer With that, over to Ben: For the past near decade I have worked in the data world. Like many, in 2012 I was exposed to HBR‚Äôs  Data Scientist: The Sexiest Job of the 21st Century . But also like many, I found data science wasn‚Äôt the exact field for me. Instead, after working with a few data scientists for a while I quickly realized I enjoyed building data infrastructure far more than creating Jupyter Notebooks. Initially, I didn‚Äôt really know what this role was that I had stumbled into. I called myself an automation engineer, a BI Engineer, and other titles I have long forgotten. Even when I was looking for jobs online I would just search for a mix of ‚ÄúSQL‚Äù, ‚ÄúAutomation‚Äù and ‚ÄúBig Data,‚Äù instead of a specific job title. Eventually, I found a role called ‚Äúdata engineer‚Äù and it stuck. Recently, the role itself has been gaining a little more traction, to the point where data engineering is growing more rapidly than data science roles. Also, companies like Airbnb have started initiatives to hire more data engineers to increase their data quality. But what is a data engineer and what do data engineers do for a company? In this article, we dive into data engineering, some of its key concepts and the role it plays within companies. Where do data engineers ‚Äúsit‚Äù? They‚Äôre typically working with software engineers and data scientists, but much less with product managers. In this article, we dive deeper into the data engineering field. 1. What do data engineers do? How do you define data engineering? Here‚Äôs how data engineer  Joe Reis  specifies this term in his recently released book,  Fundamentals of Data Engineering : \"Data engineering is the development, implementation, and maintenance of systems and processes that take in raw data and produce high-quality, consistent information that supports downstream use cases, such as analysis and machine learning. Data engineering is the intersection of security, data management, DataOps, data architecture, orchestration, and software engineering. A data engineer manages the data engineering lifecycle, beginning with getting data from source systems and ending with serving data for use cases, such as analysis or machine learning.\" In short, data engineers play an important role in creating core  data infrastructure  that allows for analysts and end-users to interact with data which is often locked up in operations systems. For example, at Facebook there is often either a data engineer or a data engineering team which supports a feature or business domain. Teams that support features and products are focused on helping define which information should be tracked, and then they translate that data into easy-to-understand core data sets. A  core data set  represents the most granular breakdown of the transactions and entities you are tracking from the application side. From there, some teams have different levels of denormalization they might want to implement. For example, they might want to denormalize if they remove any form of nested columns to avoid analysts having to do so. Also, many teams will set  standards on naming conventions  in order to allow anyone who views the data set to quickly understand what data type a field is. The basic example I always use is the ‚Äúis_‚Äù or ‚Äúhas_‚Äù prefix denoting a boolean. The purpose of these changes is to treat data as a product; one that data analysts and data scientists can then build their models and research from. Our team at Facebook produced several core data sets that represented recruiting and People data. These core data sets allowed analysts and data scientists to see the key entities, relationships and actions occurring inside those business domains. We followed a core set of principles which made it clear how data should be integrated, even though it was being pulled from multiple data sources, including internally developed products and Saas solutions. What are the goals of a core data set? Here are the three main ones. 1. Easy to work with . Datasets should be easy to work with for analysts, data scientists and product managers. This means creating data sets that can be easily approached without a high level of technical expertise to extract value from said data. In addition, these data sets standardize data so that users don‚Äôt have to constantly implement the same logic over and again. 2. Provide historical perspective . Many applications store data which represents the current state of entities. For example, they store where a customer lives or what title an employee has. Not all applications store these changes. In turn, data engineers must create data that represent this. The traditional way to track historical changes in data was to use what we call  Slowly Changing Dimensions (SCD) . There are several different types of SCD, but one of the simplest to implement is SCD type 2 which has a start and end date, as well as an ‚Äúis_current‚Äù flag. An example of an SCD is a customer changing their address when they move home. Instead of just updating the current row which stores the address for said customer or employee, you will: Insert a new row with the new information. Update the old row, so it is no longer marked current. Ensure the end date represents the last date when the information was accurate. This way, when someone asks, ‚Äúhow many customers did we have per region over the last 3 years,‚Äù you can answer accurately. 3. Integrated . Data in companies come from multiple sources. Often, in order to get value from said data, analysts and data scientists need to mesh all the data together, somehow. Data engineers help by adding IDs and methods for end-users to integrate data. At Facebook, most data had consistent IDs. This made it feel like we were being spoiled, as consistent IDs made it very easy to work with data across different sets. When data is easy to integrate across entities and source systems it allows analysts and data scientists the ability to easily ask questions across multiple domains, without having to create complex ‚Äì and likely difficult to maintain ‚Äì logic to match data sets. Maintaining custom and complex logic to match data sets is expensive in terms of time and its accuracy is often dubious. Rarely have I seen anyone create a clean match across data that‚Äôs poorly integrated. One great example I heard recently was from Chad Sanderson of Convoy. Chad explained how a data scientist had to create a system to mesh email and outcome data together and it was both costly and relied on fuzzy logic which probably wasn‚Äôt as accurate as possible. At Facebook, even systems like Salesforce, Workday and our custom internal tools, all shared these consistent IDs. Some used Salesforce as the main provider and others used internal reporting IDS. But it was always clear which ID was acting as the unique ID to integrate across tables. But how can data engineers create core data sets which are easy to use? Now we have discussed the goal, let‚Äôs outline some of the terms you‚Äôll hear data engineers use to make your data more approachable. 2. Data engineering terms Let‚Äôs explain some commonly used data engineering terms. Some of the more common data engineering terms ETL\\ELT\\Data Pipelines You will often hear data engineers describe most of their job as moving data from point A to point B. We do this using data pipelines. Data pipelines are generally structured as either an Extract, Transform, Load or an Extract, Load, Transform ( ETL  vs  ELT .) Of course, there are other design patterns we may take on, such as event pipelines, streaming and change data capture ( CDC .) This is why many of us often just generalize and use the term ‚Äòdata pipelines.‚Äô However, most pipelines are in the form of the steps below. E - Extract.  The extract step involves connecting to a data source such as an API, automated reporting system or file store, and pulling the data out of it. For example, one project I worked on required me to pull data from Asana. This meant I needed to create several components to interact with Asana‚Äôs multiple API endpoints, pull out the JSON and store it in a file service. I will say Asana‚Äôs API is not built for bulk data extracts. There were many cases where I would have to get all the new project IDs, as well as the current ones I had in my current table, in order to then set up a second set of calls to use the project ID to get all the tasks attached to said projects. This was plainly far more cumbersome than just saying, ‚Äúgive me all the tasks in this organization.‚Äù T - Transform.  The transform step (especially in an initial pipeline) will likely standardize the data (format dates, standardize booleans, etc.,) as well as sometimes starting to integrate data by adding in IDs which are also standardized, deduplicating data and adding in more human readable categories. Transforms can also be more complex, but the examples above are standard. One example of this was that with all the various core data sets our team was managing, we always defined which ID was the core ID for a particular data set. Whether the core ID was an internal Facebook ID or an external Saas ID, we would be clear which one we used as ‚Äúcore‚Äù. Because we were clear on the core ID, if we ended up having multiple IDs in a table, we would remove them to avoid further confusion, downstream. From my own philosophical perspective, creating data as a product means creating a product someone with limited knowledge of your team's data can approach and understand. By understanding, I mean they can quickly grasp what fields mean and how one table relates to another. Understanding the data set is an important step in a baseline transform. There are more complex transforms which can occur for analytical purposes. L - Load.  This step is meant to load data into a table in the data warehouse. There isn‚Äôt anything fancy here. At Facebook, we loaded into our team's ‚Äúdata warehouse,‚Äù but you could be loading into  Snowflake ,  Databricks ,  Redshift ,  Bigquery  or others. Data Modeling Software engineers who have built their own database will be familiar with some aspects of data modeling. Generally, for what is known as an  OLTP  (online transaction processing,) these systems are developed to be fast and robust for single transactions. However, these data models pose problems when the data is being used for analytics. The data in these models requires a lot of joins to get to an obscure field which a data analyst wants to know about. Also, the data model isn't usually developed to support billions of row aggregations and calculations with good performance. These models tend to be heavily normalized and in turn require heavy amounts of processing to answer even simple questions. In return for data sets being heavily normalized, data modeling for data engineers is a combination of adding missing abilities for these data sets. By missing abilities, I mean the ability to track historical data, improving performance of analytical queries and simplifying the data model into a much more straightforward set of tables. Common end-states will be referred to as snowflake, star, activity or OBT schemas. Data Integrity Checks Tracking every single table and all its columns isn‚Äôt feasible for a single data engineer. When I worked at Facebook, I had well over 300 tables for which I was listed as the owner. To make matters worse, bad data can enter a column and not fail because it‚Äôs the same data type. Especially in the case when you‚Äôre loading data via the order they come in, versus (vs) explicit name calls. A software engineer upstream could change a source, which in turn changes the order or removes the column altogether. This change could lead to data being loaded improperly but not failing, if the data is the same data type. Data integrity checks are a crucial first line of defense for detecting data issues like these I‚Äôve just described. There are several traditional types of data integrity checks. Null Checks  - These checks calculate what percentage of a column is null and can then be set to a threshold value to go off when a column has too many nulls. Anomaly Checks  - Anomaly checks can be used to both check specific column values as well as metadata about a table, such as how many rows were just inserted. These checks aim to detect drastic changes in either the fields or row counts. If, for example, a table suddenly has 10x the number of rows compared to yesterday, then perhaps there is a problem. Category Checks  - Many fields represent enumerators or categories which should have only specific results. One example I always use is when I worked at a company that had a ‚ÄúState_Code‚Äù field. You‚Äôd assume this field only provided valid states as it was most likely filled via a drop-down menu. However, we found there were errors from time to time which weren‚Äôt valid states. So, we needed a data check in place to catch these issues. Uniqueness Check  - Joining data across multiple granularities and data sets risks creating duplicate rows in your data warehouse; even if you removed some duplicates, earlier. They can be easily re-introduced with the wrong join, so creating a check in your final core data layer is key to ensuring you have the correct level of unique rows. Especially when a lot of modern data warehouses don‚Äôt provide the unique column constraint. Aggregate Checks  - As data gets processed through multiple layers of data transforms, there is a chance that removal or changing of data can occur. In turn, creating checks which calculate aggregates such as total sales, row counts or unique customer counts is important because they detect any major changes or removals of data that occur. Streaming Vs Batch Processing A common question data engineers need to answer is this: does a pipeline need to be streamed or batch processed? Batch processing  is when you have a data pipeline which runs at a normal cadence, usually every hour, or daily. At Facebook, most of our jobs would run at around midnight. We would use  Dataswarm  (which is similar to  Airflow ,) to set a scheduler using a  cron -like configuration for how often the job should run. An interesting point here is that some schedulers struggle with certain constraints, such as daylight savings. I‚Äôve worked on a few projects where twice a year there was a need to rerun pipelines to deal with issues caused by the pipeline running in an unexpected pattern. Streaming  involves ingesting and sometimes transforming data as soon as an event occurs. For example, on one project we set up a Kafka topic which streamed events directly to Snowflake through its Kafka connector. This allowed the raw tables to constantly be up to date. This was important to the client as their service was providing a real-time utility that was directly connected to people‚Äôs day-to-day interactions. Their users both needed to be able to use their product in real-time, as well as glean information and insights from all the actions and machine learning models occurring across the platform. It‚Äôs important to understand the use case before implementing a streaming data process. To fully process streamed data into a pipeline requires a lot more technical know-how, as well as contingencies if something goes wrong, and it can be far more difficult to recover. Whereas with batch data pipelines, if there is an error, it's pretty easy to rerun the data and the next time the pipeline will need to run is the following day. In order to know which of these two pipeline styles your team should use, you want to understand how your end-users plan to use the data, how much data is coming in, as well as the natural state of the system you're pulling the data from. I was on a call recently with a client where initially they stated they wanted the data to be updated in real-time, then it went to every fifteen minutes and when I asked how often their users would be looking at the data, they said once a week. Not a great fit for investing in real-time data and I‚Äôd say I have a lot of conversations like this. This isn‚Äôt to say real-time isn‚Äôt necessary and it has become far easier. Similar to the way processing large datasets has become far easier, thanks to a combination of the cloud and the popularization of solutions such as Hadoop. Big Data Processing Big Data. Some feel the phrase is more of a marketing term and others believe it is the solution to developing reliable machine learning models. At the end of the day, I often refer to it as a big problem, for which we have developed solutions. Big Data on its own was often expensive and difficult to manage, especially on-site. It required constant migrations to larger physical servers and would often limit how many queries could truly be run on a machine. In turn, many of the techniques centered around Big Data are meant to ease some of these problems. MPP (massively parallel processing)  - is a processing paradigm which as the name suggests, takes the idea of parallel processing to the extreme. It uses hundreds or thousands of processing nodes to work on parts of a computational task in parallel. These nodes each have their own I/O and OS and don‚Äôt share memory. They achieve a common computational task by communicating with each other over a high-speed internet connection. Map Reduce  - is another processing paradigm that can sometimes appear very similar to MPP. It also breaks down large amounts of data into smaller batches, and then processes them over multiple nodes. However, while Map Reduce and MPP appear similar, there are some distinct differences. In general, Map Reduce is done on commodity hardware, whereas MPP tends to be done on more expensive hardware. MPP also tends to refer to SQL-based query computations, while MapReduce is generally more of a design paradigm most famously implemented in Java. Data Warehouses The concept of  data warehouses  has been around for decades. The purpose of data warehouses is to provide analysts and end-users data which tracks historical information and is integrated with multiple data sources. A data warehouse is a central repository of information that can be analyzed to make more informed decisions. Data flows into a data warehouse from transactional systems, relational databases and other sources, typically on a regular cadence. Business analysts, data engineers, data scientists, and decision makers access the data through business intelligence (BI) tools, SQL clients, and other analytics applications. Data Lakes The term ‚Äòdata lake‚Äô  was coined around 2010 . Data lakes became popular because they offer a solution to the rapidly increasing size and complexity of data. As defined by  TechTarget : A data lake is a storage repository that holds a vast amount of raw data in its native format until it is needed for analytics applications. In addition, data lakes often provide a cheaper option in terms of data storage and computation, since they are often developed on cheaper hardware. In contrast, data warehouses are highly structured and often run on expensive hardware. Data lakes provide the ability to store data which can have nearly no structure whatsoever, relying on the end-user to provide the schema on-read. What data lakes look like has changed rapidly from the days of Hadoop, as solutions like Delta lake are providing a very different approach to data lakes. Data Lake Houses Data lake houses has been a popular term recently, spearheaded by Databricks. The purpose of this paradigm is to balance the benefits of a data warehouse and data lake into a single solution. For example, data lake houses should provide ACID (Atomicity, Consistency, Isolation, and Durability) transactions like a data warehouse while balancing the flexibility and scale of a data lake. 3. Why data engineering is becoming more important Data has grown in size, speed and complexity. Over the past decade, the complexity of data has vastly increased. In the past, most transaction systems mostly tracked baseline information. For example, they tracked information like what someone purchased at a store, or which website they visited. Nowadays, even basic applications can track additional information or provide even deeper functionality, which is then tracked. Tracking additional information leads to much more complex events and transactions being stored. Let‚Äôs add that users now interact with mobile and IoT devices most of the day, which increases the sheer volume and has led to what‚Äôs referred to as the ‚Äú5 Vs‚Äù of Big data, velocity, volume, value, variety and veracity. These increasing dimensions require better tooling and more specialized expertise in how to handle all this data. However, it‚Äôs not just the supply of data that‚Äôs increased. It‚Äôs also the demand. Everyone wants access to their data. With the increasing number of analysts and data scientists, as well as the proliferation of SQL-literate employees, the demand for data has grown. Add to this the fact that today pulling and managing data is not limited to large organizations which can afford all the administration staff. Now, a small company can pay for what it uses in terms of data warehousing, storage and computation. Tools like  Snowflake  and Bigquery make storing large amounts of data considerably easier and cheaper ‚Äì when set up correctly. Add in the fact that tools like Salesforce and Shopify make it easier for end-users to pull data out from them. All of this has led to companies of all sizes pushing to create data storage systems for analytics. Overall ‚Äì especially in the past decade with the mass adoption of the cloud ‚Äì data has just become that much easier to manage and analyze. This was it for part one. Subscribers can  already read the rest of the article . We'll wrap up with part two next week:  subscribe  to get it in your inbox, or bookmark this page and check back for it! \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/pollen/", "title": "Inside Pollen‚Äôs Collapse: ‚Äú$200M Raised‚Äù but Staff Unpaid - Exclusive", "content": "\n             Update: 10 months after publishing this article, the BBC made a documentary about Pollen called  Crashed: $800M Festival Fail . I worked with the BBC cast behind the scenes as they created the documentary, sharing details from my months-long investigation on what happened. The BBC documentary  published  that the $3.2M double charge we discuss below was, indeed, deliberately executed. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. If you‚Äôre not a full subscriber yet, you missed  The Scoop: A chilly market continuing to cool  and  a few other issues . To get this newsletter every week,  subscribe here . Pollen  was an events and festival tech startup. Founded in 2014, the company raised more than $200M in venture capital. It was headquartered in the UK, with a significant presence in the US and Poland. The company organized unique ‚Äúevent experiences‚Äù featuring superstars such as Justin Bieber. Pollen seemed to have pulled off the improbable feat of building a business in the notoriously low margin industry of events, surviving Covid-19, and building a solid software engineering organization. In April this year, the company announced it had raised another $150M in fresh funding. But just three weeks later, Pollen  laid off  about 200 people, a third of staff. Leadership assured employees all was well. However, from that point on, things got worse. Leadership later pulled the plug on Slack, employees were not paid wages, pension contributions went missing, and vendors were not paid. Some vendors took matters into their own hands; on 9 August 2022, JIRA was suspended when Atlassian tired of the company‚Äôs failure to pay. On 10 August 2022, Pollen went bankrupt, collapsing into administration. In this issue, we cover: First impressions .  Why were techies formerly working at the likes of Twitter, Deliveroo and Monzo attracted to Pollen? Early warning signs .  What were the red flags people ignored early on and now wish they‚Äôd heeded? Growing signs of trouble .  A detailed timeline of events from late 2021 to May 2022. Layoffs and more trouble brewing .  The events of May 2022. The $3.2M not-yet-due charging of customers .  21 - 22 May 2022 and the following weeks. Collapse . June - August 2022. Afterlife .  How is Pollen still operating, despite being bankrupt? L earnings .  What is there to learn from events at Pollen? How could employees exit ‚Äòthe next Pollen‚Äô in time, and what can founders learn from Pollen‚Äôs demise? Appendix :  Pollen‚Äôs history: a brief overview. A summary of the story of how Pollen, as a company, came about. This article walks through the collapse of Pollen, compiled after talking with 20 now-former employees.  The majority of people I talked with worked in technology.   This article tries to answer the question, could these tech workers have realized sooner they were on a sinking ship? As I‚Äôve dug into what happened, I uncovered increasingly unusual details: Decent European investors investing more than $200M into the company over six years, and delegating partners to join the company‚Äôs board of directors. Unknown to most employees, all external investors quietly resigning from their seats on the board of directors. A partner at Kindred Capital referring to themselves as a current board member at a company-wide town hall, when documents show that the previous day they resigned from their board seat. Collecting $3.2M in payment plan instalments from thousands of customers that were not yet due, but no postmortem published or reviewed internally. Shutting down Slack for the whole company after US employees took to the channel to complain about not being paid. Why do I cover this story in such detail?  I‚Äôm doing this because Pollen did something I know of no other company doing so in the past several years. After raising more than $200M in venture capital and hiring world-class tech talent - from people who previously worked at the likes of Twitter, Deliveroo, Monzo, Apple - they then failed to pay wages. While we‚Äôve seen other VC-funded companies go bankrupt before, the vast majority of those bankruptcies were ‚Äòclean‚Äô in the sense that employees were paid severance, vendors got paid, and any remaining money was returned to investors. This is how Fast shut down one year after raising $100M ‚Äì as covered in  Inside Fast‚Äôs rapid collapse  ‚Äì or how Airlift, once the largest startup in Pakistan, closed its doors, as covered in  The Scoop #18 . In the case of Airlift, the leadership team decided to shut down operations as soon as they would have risked payroll, if they keep operating,  according to an internal slide. I am showcasing the story of how Pollen ended up unable to pay wages, in hopes of sharing lessons for employees to avoid similar situations. 1. First impressions In the London and Warsaw tech scene, Pollen built up a reputation as a fast-moving tech company which placed lots of emphasis on diversity. Its engineering team was diverse ‚Äì not the least because Pollen partnered with agencies to hire a diverse workforce. I asked software engineers why they decided to join the company between 2018 and 2021. Here‚Äôs what they said. Remote work, flexible working hours, even pre-Covid-19.  Pollen set itself up to support remote work at a time when many companies didn‚Äôt. I talked with a software engineer who joined mainly for this reason, because their previous employer insisted upon working from the office. A career path.  When interviewing candidates in 2020-21, Pollen managers shared how career progress was possible and that promotions were pretty common. Again, this was a selling point for some software engineers I talked with. A ‚Äúhot‚Äù company, raising a new round every year.  The company raised fresh funding in 2016 (Seed,) 2017 (Series A,) 2018 (Series B,) and in 2020 (Series C); in ever-growing amounts and valuations. These new rounds always generated positive media coverage in publications covering the European tech market. Salary transparency, implemented.  Pollen paid everyone in the same role, exactly the same amount. Employees had access to a report on who made how much. Good compensation and unlimited vacation.  In the UK, software engineers were paid close to the top of market base salaries, plus a healthy amount of stock options. People received unlimited holiday ‚Äì with the guidance to use at least 25 days per year in the UK, in line with the statutory minimum requirements. Strong engineering talent.  The company hired software engineers and engineering managers (EM) from Monzo, Twitter, Deliveroo and other companies with a strong engineering culture. Long tenures in tech.  It wasn‚Äôt unusual for software engineers to stay for 4+ years. Some of the ‚Äúcore‚Äù team who built the early versions of the products were still around at the end. High Glassdoor rating.  For years, the company was rated at 4.8, with many positive comments. From the outside, Pollen looked like a fast-growing VC-funded startup with a healthy engineering culture. It should be of little surprise that the company attracted tech employees who previously worked at the likes of Apple, Twitter, Deliveroo or Monzo. When these tech employees joined, they were not disappointed. Engineering managers liked working at Pollen.  The engineering managers I talked with all shared that they felt part of a supportive engineering management community. As with any startup, there were times when people worked beyond their ‚Äúnormal‚Äù hours. However, managers tried their best to make sure this rarely, if ever, happened. Diverse hiring a strong focus within engineering.  The company had several leaders from underrepresented groups and at its peak, Pollen‚Äôs engineering team was 35% women. Pollen partnered with  Druthers Search , a specialist search firm which helped source more diverse candidates and introduced many of the leadership team across engineering, product and design. I talked with several engineering managers from diverse backgrounds who felt supported. After Pollen went bankrupt, several of them contacted Druthers to find alternative positions at inclusive companies. It should be applauded that Pollen cared enough to use a specialist agency to help build a diverse leadership team. However, at the time of publication, Pollen has not paid any of the invoices sent by Druthers (a boutique, women-owned business) since October 2021. Salary transparency.  The company was radically transparent about pay, sharing not only pay ranges, but also the ranges of shares. I reviewed the compensation ranges and my assessment is Pollen offered what I would classify as  Tier 2 compensation packages . ‚ÄúFreedom and ownership.‚Äù  This value was a core pillar of company culture and resonated especially well with engineers. It meant extreme flexibility about managing your own time and achieving outcomes in the way you wanted. As such, people were expected to take ownership of outcomes. Hours were flexible, and people could work from anywhere, anytime, and take breaks as they saw fit. While the company had a few offices, most people worked fully remote. As a former engineering manager shared: ‚ÄúIt felt like people were treated like adults, with plenty of trust and respect.‚Äù ‚ÄúMastery.‚Äù  Another value the company practiced was ‚Äúmastery.‚Äù This is the development of every employee via quarterly workshops with managers. In these workshops, staff explored what gave them energy, identified areas for development, and helped craft a development path. Pollen did not do performance reviews within the technology teams. Managers I talked with found this liberating, compared to previous roles. An engineering manager shared how they noticed that in this setup, underperformance went undetected for longer, and promotions were less consistent. Outside of the tech teams, Pollen conducted performance reviews during what was called ‚Äòmastery sessions.‚Äô The company allocated a personal mastery budget of ¬£750/year in the UK. People could use this budget for anything that helped them stay at ‚Äúpeak performance.‚Äù People most frequently used it for things like books and trainings. Some people expensed wellbeing activities like therapy, gym memberships or subscriptions to mental health apps. The main product was successful until late 2021.  Pollen grew massively throughout 2020-2021, during the pandemic. This was thanks to putting together unique events which were curated directly with performers. Events were memorable for attendees and Pollen had no problems selling out tickets ‚Äì except when it started to have trouble processing refunds around 2021 and ticket sales dropped as customers became more cautious. Most engineers and EMs really liked working at Pollen.  The people I talked with told me they found the workplace to be good. It was the events in the final months that soured everyone‚Äôs experience. 2. Early warning signs I asked people in engineering what signs they wish they would have taken action on, sooner. They shared a few things. ‚ÄúParty culture.‚Äù  Even when interviewing, it was clear to candidates the company was big on partying. At the same time, there was much less focus on things important to many people, like good health insurance and a solid pension setup.The company really did ‚Äúgo large‚Äù with company-wide events.  Here‚Äôs a video  of the 2018 company-wide party when they rented out Osea Island in England, and a summary below of a 2019 company-wide party in California: The 2019 company offsite and a summary of this event published in the company‚Äôs magazine. Faces and names blurred for privacy. Little data shared with employees about the financial position of the company . Employees I talked with told me they felt in the dark about the financial situation of the company. Even engineering managers had no idea how much money the company had left, what the burn rate was, and how much runway was left. The company did post booking numbers, revenue projections and performance indicators like fill rate on their public Slack channels, and had set up internally public Looker dashboards which everyone had access to. Employees could also query databases to find out additional information. The Pollen Press team responded in a comment, claiming that it is extremely unusual for growth stage companies to share their cash balance and cash flow forecasts. They added how the burn rate is complicated because of the seasonality of the business. In a transparency document shared once per month, the company told employees that they would not share their cash and balance sheet. The warning sign of not having information about financial data or how much runway the company has left was how Fast operated, which raised $100M but went bankrupt less than a year later. From the article  Inside the rapid collapse of Fast : ‚ÄúAsk if there is a clear set of key business metrics, and if engineers have access to these in close to real-time. Is it the number of users? Revenue? Signups? Percentage of returning daily users? If the answer is ‚Äúno‚Äù to either of the questions, treat it as a red flag. In the case of Fast, these metrics were likely not defined, and the data was not shared with all engineers.‚Äù Refunds not paid on time as a recurring topic.  Pollen employees were aware that customers regularly complained about unprocessed refunds. A disgruntled customer  started a petition  in February 2022 which gathered comments from hundreds of people. These people claimed they did not get refunds for canceled events within 90 days. In this petition, several customers claimed to have waited more than 5 months for their money to be returned. On 16th June 2022 the CEO would tell employees that the amount of refunds that could be processed is limited to a certain budget, due to investors capping how much can be spent on refunds. Some vendors not being paid.  During fall 2021,   engineering managers started to realize Pollen had stopped paying at least one vendor. Diversity and inclusion recruitment tech firm  Druthers Search  was not paid from October 2021. An engineering manager placed by this firm told me how they were concerned about the delay of these payments. The Pollen Press team responded to my comment asking them if it was true they stopped paying some vendors in the fall of 2021, claiming this statement is incorrect and they have not stopped paying vendors from the fall of 2021. However, I have verified with Druthers Search that the statement is, indeed correct, and that as a vendor, Pollen has not paid them from the fall of 2021, despite repeated follow-ups. From the spring of 2022, more vendors would not be paid. I talked with another vendor which had payment delays in the beginning of 2022 and none of their invoices would be paid from March 2022. An unusual Series C fundraising announcement in April 2022.  Pollen  announced  it had raised $150M in its Series C. Compared to most fundraising announcements, several things were unusual about this announcement: no lead investor was listed, and it was not clear what investors participated in the round. Comparing Pollen‚Äôs  Series C press release  to their  Series B one  shows the differences. For the Series B, they named the lead investor, the participating investors and specified which existing investors participated. In company documents released later in the year, it was revealed that only ¬£0.9M ($1M) in new equity was released in 2022 from investors. Five out of the six investors Pollen listed on their Series C announcement would leave the board of the company a month later, by 30 May. In a statement, the Pollen Press team claimed that there was nothing unusual about their press release: ‚ÄúThe first close of the funding round was in December, [2021] the second close was at the end of March 2022. The $150m included the conversion of two separate convertible notes raised throughout the previous 18 months to help fund the business through covid, the balance was venture debt.‚Äù In the  press release of the raise , nowhere was it noted that the $150M included convertible notes raised in the past 18 months. Despite the warning signs, there were plenty of signs showing that all was well.  Looking back, employees I talked with wished they would have started looking for a new job earlier. However, there were signs showing that it was business as usual: Hiring people up to the very last minute. At the very last Tech All Hands at the end of June, there were new starters, and a software engineer was to start a week later. Plans about the future. At the end of June, when the last few Town Halls and Tech All Hands were held, leadership sounded optimistic about the future, and made it seem that it‚Äôs business as usual. At the very last town hall on 28 June, the Chief Revenue Officer would close by sharing how the company is working on concepts with Kanye West that they think could really work well. 3. Growing signs of trouble We‚Äôll go through the timeline of events as experienced by employees, which is reconstructed from internal and external documents, and from my conversations with ex-employees. In some cases, I share events unknown to employees when they happened. The fall of 2021, a hiring spree . Pollen hired close to 50 people across tech, growing tech headcount by 50%. By the end of last year, Pollen‚Äôs tech org was around 150 people, up from about 100 in mid-2021. Of the tech people, about half were software engineers. Engineering leadership emphasized the importance of hiring during this time, asking engineering managers and directors to spend at least 50% of their time on recruitment. The hiring spree was extended to all tech staff, who were given training and expected to do at least one technical or cultural interview per week for a few months. It was expected that the hiring spree would continue into 2022. Dec 2021 ‚Äì raising the next funding round.  The CEO mentioned they were raising a new investment round. Feb 2022 ‚Äì Unknown to workers, Pollen stops paying UK pension contributions.  For the next several months, pension contributions deducted from employee paychecks were not deposited into employees‚Äô pension accounts. They discovered this en masse in May and complained loudly. After May, contributions up to March would be paid for all employees. Feb 2022 ‚Äì a hiring freeze.  A sudden change to hiring plans. Managers were told the majority of open roles were closed, effective immediately. Any new role needed approval by the CTO and the Chief of Staff. Backfilling also required justification. Some engineering managers raised concerns about the financial health of the company. The response from the leadership was that the company was preserving cash and being more cautious with growth. March 2022 ‚Äì business as usual.  Hiring was slow, but it was business as usual. Every now and then, the CEO posted a short update on his channel #UpdatesFromCallum on how he was putting together a new round of funding, which was going well. 21 April 2022 ‚Äì a $150M Series C.   Pollen  announced  a Series C investment of $150M. Leadership told employees the finance team had been slow with expense reimbursements because of closing the latest deal and that the delays would be resolved. Late Apr 2022 ‚Äì Q1 targets missed .  The CTO posted an update over email, informing employees that the company had missed Q1 targets. His message was clear: the new focus was revenue and teams were to review their OKRs and adjust with this in mind. 29 Apr ‚Äì contractors cut.  The CTO informed all EMs through VPEs and Directors that contracts needed to be terminated immediately. EMs were told to make immediate plans for offboarding and handovers. This was no small ask, as contractors comprised more than half of some tech teams. Unknown to employees, Pollen had not been paying some of its contracting partners by this point. Three months later, on 5 Aug 2022, the biggest contracting company, 101 Ways, would issue a petition to wind up Pollen because of debts it owed, as  reported by The Telegraph . 4. Layoffs and more trouble brewing 4 May ‚Äì unknown to employees, two investors resigned from the board of directors.  Northzone partners P√§r-J√∂rgen P√§rson and Molten Ventures partner Nicola Mcclafferty resigned from their external director positions. P√§r-J√∂rgen P√§rson was a non-executive director from October 2019, when Northzone led a ‚Ç¨69.5M investment round in Pollen. Nicola Mcclafferty had been around since August 2017, when Molten Ventures led the $18.5M Series A of Pollen. 10 May ‚Äì layoffs at Pollen.  About 200 people ‚Äì close to 30% of staff ‚Äì were laid off. The tech function was much less affected, with 5 people let go, 3 of them frontend engineers. 12 May ‚Äì 6 June . The CEO, CTO and most of the leadership team disappeared, according to employees, and weren‚Äôt seen in-person at any of the events, and responded via Slack and email only. On 12th May, the CTO posted a pre-recorded video about the layoffs and him being absent. According to one employee, the gist of this video was: ‚ÄúSorry that layoffs are happening and things are messy, but I had a holiday booked a long time ago and I need to go.‚Äù 13 May ‚Äì pensions discovered missing.  In May, several employees started to notice there were gaps in their UK pension contributions. Most people realized contributions hadn‚Äôt been paid since January 2022. Pollen, despite deducting 3% from salaries, did not deposit the employee portion into the pension contributions. Messages swamped the #askthefinanceteam channel. Over the next two months, the company paid the contributions for January, February and March for all staff, according to a statement from Pollen. However, contributions for April onwards went permanently missing for some employees, despite this money being taken from pay slips. Questions only stopped when Slack was shut off for all staff in July. The Pollen Press team, in responding to this claim, confirmed that the company was not able to make some of the pension payments from Q2 2022, claiming ‚Äúthere was a minority group of employees who didn‚Äôt get their pension contributions in Q2.‚Äù 17 May ‚Äì the first town hall following layoffs; almost all the leadership is absent.  The only leadership folks present were the President and the COO. The CEO, Chief Marketing Officer, Chief Revenue Officer, and Chief People officer were all absent. In a later town hall, the leadership team would share that they all attended the wedding of one of the cofounders, which event was planned well in advance. 18 May ‚Äì UK when salaries to be paid a few days later.  The Chief People Officer informed employees in the UK via email that their salary would be paid on the last working day of the month. Up to this change, UK salaries would be paid on the 27th of the month. 18 May ‚Äì the CFO fired.  The CEO posts on his Slack channel: ‚ÄúI‚Äôm writing to let you know that I have let Mark Kallick go. JJ and Jam will be co-managing finance in the interim and Richard (our new VP of accounting) will report to both of them. We also hired a satellite CFO team to support our internal finance team until we find a new CFO.‚Äù 18 May ‚Äì unknown to employees, two more investors resign from the board of directors.  Leila Rastegar Zegna ‚Äì a board member via the Kindred Capital investment ‚Äì and Remo Gerber both resign from their non-executive director roles. Employees were not told, just like they were not told when other directors resigned on 4 May. This left only two external investors on the board, partners from Backed VC and Sienna Capital. 19 May: former board member holds a Q&A for employees.  At a company-wide town hall, Leila Rastegar Zegna ‚Äì partner at Kindred Capital and one of the first investors at Pollen ‚Äì spent an hour answering questions. She talked about the business environment, praised the culture that Pollen built and went on to say she expected Pollen to be a company that could survive future system shocks. She described the challenge for Pollen as a ‚Äúsuch a phenomenal business (...) but the obvious challenge is operating in a backdrop of huge uncertainty and in the macroeconomic backdrop of funding and liquidity.‚Äù During the Q&A, she talked about the importance of the board, saying it represented accountability and mutual respect. She said the role of the board included holding up a mirror to company management on the accountability side, and that the board represented pushing for decisions in the interests of all stakeholders. At the beginning of the Q&A session, she was introduced someone involved with Pollen since 2016 \"as an investor and board member\". Later, she was asked: \"explain your other role, which is around as a board member.\"  She referred to herself as a board member and investor during the town hall. Unknown to employees, she had resigned as a board member the day before and was no longer a non-executive director. This information wasn‚Äôt shared with the audience. I reached out to Leila Rastegar Zegna and to Kindred Capital for comment, five days before publishing this article and received no response. I will update this article when I do. Update: one month after publishing, no response still. By 22 May: Kindred Capital removed Pollen from its home page.  One 19 May 2022, Leila Rastegar Zegna closed her Q&A by saying: ‚Äúan incredible bright light is in this company [Pollen]. And we [at Kindred Capital] all look forward to being a part of helping it shine.‚Äù 3 days later, the company would disappear from the landing page of ¬†her firm, Kindred Capital. This is the space where all the notable investments and their founders are displayed. The company was removed sometime between 19 April and 22 May, according to The Wayback Machine archives. Why did the company remove Pollen, if just a few days ago, their partner praised the company and its employees?  I reached out to Kindred Capital for comment, five days before publishing this article and received no response. I will update this article when I do. Update: one month after publishing, no response still. The  homepage of Kindred Capital  in February 2022. From 22 May 2022, the profile of Callum Negus-Fancey vanished. 19 May ‚Äì tech employees asked to express how they feel.  On the Tech All Hands with about 70 people attending, people are asked to share how they feel, using words. The result: On 19 May 2022, the response of technology employees to the question on ‚ÄúHow are you feeling?‚Äù 19 May ‚Äì The Pragmatic Engineer Article : In an exclusive report, I reported on how the layoffs were executed at Pollen in  The Scoop #11 . 5. The $3.2M not-yet-due charging of customers On Sunday, 22 May at 4:53am UK time, a Pollen employee working in finance alerted the engineering team about something very wrong. They wrote: ‚Äú$3.2m in charges have succeeded in Stripe for installments not yet due. 16k bookings are affected so far and has been continuous all day. Is anyone able to cut off payments or see if this is a manual trigger by someone in Stripe?‚Äù The CTO was the first to respond, four hours later. He confirmed that all charges were sent to Stripe from the platform ¬†that there‚Äôs nothing for engineering to do: ‚ÄúEither way nothing more for engineering to do right now as it‚Äôs happened - at this point it‚Äôs about damage control with comms and refunds.‚Äù What happened? Tens of thousands of Pollen customers have advance payment plans, for example, instead of paying $2,000 for a ticket in one go, Pollen would charge $200 for 10 months. On 21 May, Pollen placed advanced charges for 16,000 payments not due for a few more months, collecting a total of $3.2M earlier then when that money would have been due. Most customers were charged two additional monthly payments - ones for June and July - Pollen collecting payments for months not yet due. Customers signed up to a payment plan to have a certain amount taken out each month, now they were  charged three times the scheduled payments . Customers were pushed into overdraft and  complained  how they got no response from Pollen. Pollen not only charged people whose payments were due, but placed two additional charges for  at least one person  who had already paid off all of their tickets. Pollen had a standard incident response process which the engineering team strictly followed.  According to a former engineering manager at the company, this is how the process worked - most of which is in-line with  incident review and post mortem articles covered in an earlier article : An incident channel was created For high impact incidents, experienced members of the teams whose service was impacted would typically be notified and added to the channel, asked to investigate. An incident commander would usually be appointed. A postmortem would be started, typically in a few days. On an upcoming bi-weekly incident review, the postmortem would be presented, even if the incident was not fully mitigated yet. This engineering manager told me that the process was so strict that their team would do a postmortem even for something that looked like an incident but then it was deemed a minor issue. During their tenure this engineering manager had not heard any incident not going to the incident review for the reason of it not being mitigated. This was especially true for high impact outages, which would be brought to the next incident review, so people could learn from them. Asked about what was the longest delay between a high-impact incident, and that incident going to the incident review, another engineering manager shared that during their tenure, this was not more than one month. For incidents not yet mitigated, the postmortems would have an action list for things to do in order to fully mitigate the incident. The incident review was a place where those present could also add more suggestions. The not-yet-due charging incident was not discussed on any of the following biweekly incident reviews . While there was an incident commander and a postmortem was started, this postmortem was neither brought to the next biweekly incident review, nor to the following reviews. Speaking with the incident commander, this person shared that a postomortem investigation was underway and would have been brought to the biweekly incident review upon resolution and documentation completion. They said that the incident was not fully mitigated by 10 August, when the company went into administration - or about 10 weeks after the incident occurred. The person responded saying it would be a breach of their employment contract with Pollen to discuss specific details of any postmortem investigation. Responding to comment, Pollen‚Äôs Press team wrote that the post-mortem was delayed to allow for remaining refunds - like customers who opted for vouchers - to be handed over to support. They claimed that after this being handed over to support is when Tech could have extracted the maximum amount of learnings from the process. Pollen‚Äôs Press team said this decision was taken by the engineering leadership team, but without input from the CTO. Pollen told customers that Stripe was the one incorrectly processing not-yet-due charges.  The company decided on this message for customer support agents to use when informing customers of the incident: ‚ÄúWe‚Äôre aware that our payment provider incorrectly processed an early payment plan instalment that was due at a later time. We are sorry and offer our sincerest apologies for any convenience caused. A refund can be processed, to return the extra charges back into your bank account, which will take a maximum of 30 days. Alternatively, we can offer you $100 of credit which you can use to upgrade your experience.‚Äù Internally, the first assessment indicated that Pollen‚Äôs platform was initiating the charges. This was confirmed by the CTO himself on 22 May, in a Slack message on the #inc-2022-05-22-stripe-payments-have-been-taken-for-not-yet-due-installments channel, in his response to the incident being discovered by a finance employee. Upon learning about the 16,000 Stripe payments being processed, the CTO wrote: ‚ÄúLooking at RabbitMQ, the queue is empty, so I think any charges we‚Äôre seeing have already been sent (i.e. Stripe is churning through them). That means we won‚Äôt be sending more charges from the platform.‚Äù I reached out to Stripe to confirm whether the company was, indeed, at fault for incorrectly initiating the charges, as Pollen claimed they were. Stripe said that they don't share information about their users. On 6 June 2022, the CTO promised an investigation and the CEO said all customers were already refunded . At the tech All-Hands, the question was asked: What caused the payment collection issue the weekend of May 21-22, and what can tech to ensure this doesn‚Äôt happen again? The CTO replied saying that refunds have not all been done yet: ‚ÄúThe incident isn‚Äôt fully resolved yet. We did try to use a script over the weekend [4-5 June] to propagate the refunds and automate them, but there was some issue with it, so we‚Äôre not fully out of the weeds yet. When that script is run and the incident is resolved, we‚Äôll run a full incident review as per our normal process to make sure it‚Äôs documented. Unlike in a normal incident, Callum, The Chief Operating Officer and others have been in continuous communication. More to come directly from me once the incident review gets going.‚Äù The CEO jumped in, and said that all customers who have opted for the refund, have already been refunded, and those who requested the credit, have received the credit already. On 16th June 2022, the CEO confirmed again that all customers were refunded.  During the town hall, an employee asked: ‚ÄúThere are some concerns that we recently deliberately took early payments from thousands of customers, especially since the payment was taken manually. Can you explain, in detail, how this mistake occurred?‚Äù The CEO responded: ‚ÄúIn terms of explaining: it‚Äôs being investigated. We‚Äôve committed that once that investigation is done, it will be shared with the company so people understand what happened.‚Äù The CEO closed by saying they will come back with details on what happened. Details did not come later. Responding to comment, the Pollen Press team wrote that although the post-mortem was initially a big focus, given the environment around Pollen materially worsened, attention was put into more pressing matters. The $3.2M was about as much money as what was needed for the upcoming May payroll.  I revived Pollen's transparent salaries table, and calculated that monthly payroll expenses in July 2022 would have been around $3.0-3.6M/month. The next payroll date was coming up on 31 May in the UK and 1 June in the US. This number would be further confirmed by the administrator, as Pollen would end up not paying wages for June and a few days in August, owing employees a total of ¬£3.16M ($3.6M) in wages. May was the penultimate month that Pollen would pay salaries. Was it a coincidence that the company charged customers a similar amount as it would need for payroll, only a few days before payroll was due? Later, it turned out, that the code change was deliberate.  The  BBC documentary  revealed evidence that the code change to double charge was made on Friday, 20 May 2022, and it was tested to work correctly. The code was then executed by \"a senior employee\" on Saturday, 21 May 2022. The  BBC documentary  also reached out to all 18,000 double charged customers of this incident. Of the ~300 people who replied, only 4% had received a refund: the other 96% said they have not gotten it. These two details combined raise the question whether there should be a criminal probe by authorities: as if this was truly a mistake, then refunds should have been done immediately and the postmortem completed. So why were they not? 6. Collapse 30 May: unknown to employees, the penultimate investor resigned from the board of directors.  Andre De Haes, partner at Backed resigned, leaving only one investor, Sienna Capital, on the board in Denis Blank, alongside co-founders Callum and Liam Negus-Fancey, and President, James Ellis. 1 June ‚Äì Sifted Article : Sifted broke news on how Pollen owes thousands of its customers  in this article . 6 June ‚Äì The CEO shares plans to break even by 2023.  The CEO attended a Tech All Hands and took questions. Answering the question on what is Pollen‚Äôs burn rate and how long the company is safe, the CEO said: ‚ÄúThe idea is to take the business towards profitability as a result of the funding we just took in. With this business, when you think about burn, it‚Äôs more complicated than other businesses. There‚Äôs obviously a seasonality and revenue can be lumpy. From a net cash perspective, we would expect our cash to rise over time through the end of the year.‚Äù He then said how the probability of shocks in the current environment is higher, and how he thinks that Pollen has a strong track record of navigating through those shocks. He also shared how he expects the company to break even by 2023 on an EBIDTA basis. Originally, this date was 2025, before they made changes to the plan. He projected a net cash burn of around $20M for the next 12 months, on an annualized basis. Unknown to employees - 15th June: some US employees‚Äô health insurance was terminated.  In a letter some employees received months later, US payroll processor TriNet confirmed that they terminated them as clients on June 15, thanks to non-payment from Pollen. Up to that point, Pollen was buying insurance through TriNet from an insurance company. ¬†Pollen would deposit money with TriNet, and TriNet would pay for payroll and insurance. 16 June: the CEO shares that it is harder to agree on a plan with investors.  At a town hall with most of the leadership team present, the CEO apologized for not being visible recently and that he‚Äôs not addressed the company until now. He shared that spend is being signed off by investors, saying: ‚ÄúI am really fighting with our shareholders, our board and investor base, negotiating fluidly week to week about the plan, what we should spend on, and what we shouldn‚Äôt spend on.‚Äù The CEO also makes this statement about investors: ‚ÄúPollen is big enough for a lot of our investors that the people that led these deals, and put money into Pollen. If this deal doesn't make them the return that they're expecting, they'll lose their job. And that obviously influences their thinking and it influences the way that they behave.‚Äù He says that while when the markets were doing well, conversations with investors were easy. However, now it‚Äôs harder to agree on a plan about how quickly customers are refunded, and things the company should invest in. In the meeting, the CEO said that they agreed to a weekly and monthly budget for refunds with investors. Pollen‚Äôs Press team said this budget was a daily one by this time. Taking a question about missing pension contributions, the Chief People Officer admitted that there was a mistake made: they collected contributions correctly, but did notice for a while that they did not go through correctly. When this mistake was noticed, it was not prioritized correctly. She points to people in the finance function leaving, and then being under pressure to deal with other things. She closed off this topic by saying that have dealt with all the paperwork and ‚Äúit‚Äôs been sorted.‚Äù 17 June: CTO reassured EMs about company finances, shared plans for all-tech offsite.  The CTO met with EMs and reassured them the company‚Äôs financial position was safe and the company had the money to operate. The CTO shared that they planned an ‚Äúall tech offsite‚Äù for three days in October. Pollen‚Äôs Press team confirmed that a contract down-payment for the offsite had already occurred by this point, and was signed by the legal team. 23 June: A tech all hands where things are presented as ‚Äòbusiness as usual‚Äô.  The CTO hosts a tech all hands where he acknowledges that the past few months have been turbulent, but says that he expects things to stabilize. He says ‚Äú[Things] will be different to a year ago, but they will be more stable.‚Äù He shares that the technology organization will do a reorg to adjust focus and gives an overview of the ‚ÄòSprint Zero‚Äô process that will serve as the basis of this reorg. At the meeting, he announces that while two people left the organization, two more people have started, and a new starter software engineer joins on 27 June. I talked with the software engineer who did, indeed join on 27 June. That person did not know at the time: but they would not be paid throughout their tenure at Pollen, before the company would crash into administration on 10 August. This tech all hands would be the last one that the tech team would have. 28 June: the last town hall.  In what would be the last town hall at the company, Pollen‚Äôs cofounder and Chief Revenue Officer Liam Negus-Fancey did a short, 25-minute town hall, which was him answering questions from employees, most questions which were about the new strategy of the company. The closing question was about what the CRO is most excited about for the next 12-18 months. His answer? ‚ÄúFor me it‚Äôs exciting when we‚Äôre doing big deals with massive talent. We‚Äôve got promising conversations with people like Nicki Minaj. We‚Äôve been working on something with Snoop Dogg for a long time that feels really exciting. We‚Äôre working on concepts like Kanye West that we think could really work well.‚Äù On the meeting, the Chief People Officer said that the next town hall will be held the coming Thursday, on 7 July. That town hall would not happen - and neither would any further ones. 30 June: salaries not paid on time, the CEO assuring employees it would never happen again.  On the day salaries were supposed to arrive, the Chief People Officer sent a message on Slack to all staff, saying that shareholders are only just releasing the next funding instalment which means payroll is delayed by one day. The same day, the CEO shared a message on the #UpdatesFromCallum Slack channel: ‚ÄúI will share a lot more towards the end of the next week about who are new partner is going to be. (...) I am now at the point that everything is agreed with [the Pollen shareholders] and our new partner and so the shareholders are now happy to fund. (...) I assure you this [pay being late] will never happen again‚Äù Employees would not find out any details about this new partner the following week, or after. 30 June: unknown to employees, the last investor - Sienna Capital resigned from the board of directors.  On the message sent on 30 June to all staff, Pollen‚Äôs Chief People Officer wrote: ‚ÄúWe are now at the cusp of closing that deal that will replace Sienna [Capital] as our main investor and shareholder.‚Äù However, this very same day, Denis Blank, Chief Investment Officer at Sienna Capital, resigned from the board of directors, leaving the board with no external investors. The only directors left were co-founders Callum and Liam Negus-Fancey, and president James Ellis. Responding to a comment, the Pollen Press team noted that Denis Blank changed firms at this time, and Sienna Capital was in the process of selecting a replacement for him on the board. Sienna Capital ¬†did not name a new board member and according  to The Telegraph , the investment firm would write down their $93m (¬£79m) stake in Pollen to zero five weeks later. 1 ‚Äì 4 Jul: June salaries of Europe-based staff paid.  Most people got their June salary on 1st July at midnight. For some people, the money arrived the following week. The Chief People Officer claimed that delays were caused by manual errors. Unknown to employees on 1 Jul, Pollen stopped paying health insurance in the US.  Employees discovered this fact in late July. Cue outrage. 7 July: the company Slack shut down after US employees complained about non-payment of salaries.  US payroll was on a different schedule from Europe; employees in the US were paid bi-weekly, while those in Europe were paid monthly. On 7th July, paychecks due to US employees didn‚Äôt arrive. Employees complained on Slack, requesting updates. Pollen shut down all of Slack without notice. The Chief People Officer sent an email, saying: ‚ÄúPollen has always had an open and transparent culture, which means we share information with all of you that most companies don‚Äôt share with their employees. As you‚Äôre aware we are at the final stages of negotiating a transaction with a partner which we have been talking to you about. Sadly, a few employees have been sharing sensitive information with journalists which impacts these negotiations. Therefore we are turning off slack for the next couple of days while we investigate this and find an appropriate solution.‚Äù Slack was not turned back on for most of the company, except the technology teams, who got access about 10 days later. Chaos ensued, as a result, as Pollen was a remote-first company and Slack was how employees communicated with each other and in groups. At 4pm UK time, the CTO held a 15-minute meeting with engineering managers. According to individuals with knowledge of it, the CTO said about the Slack situation as, ‚Äúnot ideal, but we can just use WhatsApp or Google Chat for the time being.‚Äù 7 July: Pollen confirms they will be able to pay staff in August.  Sifted reached out to the company asking if they can pay staff, or at risk of insolvency. The company‚Äôs response,  as per Sifted : ‚ÄúSifted asked Pollen if it will be able to pay staff next month. ‚ÄòYes, absolutely we can,‚Äô the company replied in a statement, calling last week‚Äôs payroll ‚Äòmis-timing‚Äô and ‚Äòan isolated, one-off event‚Äô. The company also denied it was at risk of insolvency. ‚ÄòThe company has a supportive and well funded shareholder base,‚Äô Pollen said.‚Äù 10 July: Laid-off employees blocked from emailing the company.  From this day, the personal emails of numerous former Pollen employees were blacklisted and they couldn‚Äôt send emails to any @polle.co email, except when emailing the People team. Responding to comment, Pollen‚Äôs Press team confirmed that some accounts that were identified as spam were restricted in their ability to email addresses outside the Chief People Officer and the People team. 11‚Äì16 July: Engineering team told to carry on like everything was fine.  Over the course of June, the EM team was preparing to do a reorg; moving teams around to respond to the personnel changes of the May layoffs. The original plan was to spend the week of 11-16 June on ‚ÄòSprint Zero.‚Äô This was to be a series of workshops to re-establish team missions, ways of working, creating roadmaps, and so on. The Pollen tech team‚Äôs ‚ÄòSprint Zero‚Äô plan, as presented on 23 June. The event went ahead as planned before, despite Slack being turned off across the company and US employees not being paid. The EMs advised the CTO to cancel ‚ÄòSprint Zero,‚Äô given the chaos and how Slack was turned off. But the CTO was adamant ‚ÄòSprint Zero‚Äô should go ahead as if all was fine. Grudgingly, the EMs went along. At the start of the week, the CTO joined a call about the kickoff of ‚ÄòSprint Zero‚Äô for 10 minutes, then disappeared for the rest of the week, busy with the negotiations which would determine the fate of the company. The week was stressful for everyone; doing workshops about how teams would operate in future, while employees were worried if they would see payroll at the end of the month. 10‚Äì21 July: updates from the CEO with no real information, except that the deal was ‚Äò in the final stages .‚Äô  Below are excerpts of what the CEO, Callum Negus-Fancey, sent to all Pollen staff. All emails were sent as ‚Äúbcc,‚Äù possibly so nobody could hit ‚Äúreply all‚Äù to the whole group. 10 July: ‚ÄúI would love to share more with you but given these conversations but given these conversations are sensitive in nature and information is being shared outside the company in a way that wasn‚Äôt expected and could be damaging to the negotiations and to Pollen, I am limited in how much I can share now. (...) I hope to be able to share more on Wednesday [13 July], at the very least will give you another update then.‚Äù 13 July: ‚ÄúI‚Äôm excited to share that in the last few hours we‚Äôve reached the final stages of negotiation with one of the largest entertainment companies in the world. I can‚Äôt share who yet till the deal is signed. Please do not share any information with anyone outside of the company as doing this slowed down the negotiations last week. (...) I will send another update before the end of tomorrow [14 July].‚Äù 15 July: ‚ÄúAs an update - negotiations are moving along very positively and I hope to complete them over the weekend and be able to tell you who our new partner is towards the end of next week. They will bring a huge amount of Pollen and so I am very excited about their involvement and all the strategic value they bring. I look forward to updating you more on Monday [17 July]‚Äù No update came on Monday, 17th July, despite the promise. 21 July ‚ÄúApologies for the delay in sending an update - we have been busy! There is great momentum and we are still in final stage negotiations but everything is going in the right direction. I hope to be able to announce our new partner at the end of this week or early next week!‚Äù Throughout July: company town halls canceled at the last minute.  With Slack closed down, town halls would be the only place for employees to learn what was happening with the supposed deal. So instead, they turned to the media for information, having no other source to get details from. 18 July: Pollen submitted its 2021 annual report.  This was the first time employees got a glimpse of Pollen‚Äôs true financial position. At least,  those who looked up the filing  could, but leadership didn‚Äôt advertise its publication. All external investors had resigned before this report was compiled. It revealed that although the company had announced a $150M Series C funding in April, only about a ¬£0.9M ($1M) in equity has been received up to July. As per the filing: ‚ÄúIn the period since 31 December 2021, the company has completed its Series C funding round, raising an additional ¬£0.9m, received in cash from new and existing shareholders.‚Äù The report showed that in 2021 Pollen made a loss of ¬£51M on revenues of ¬£49M; basically, it cost ¬£2 for the company to generate ¬£1 in revenue. As of 31 December 2021, the company had ¬£13M cash in hand. It was clear the company desperately needed either another large investment, or a very long line of credit to be able to operate throughout 2022. 19 July: Slack turned back on, but only for tech teams.  Slack was reinstated, but only for technology teams. The rest of the business would not have access to Slack, not even later. 21 July: CTO confirms July payroll is not at risk.  At the first meeting between EMs and the CTO since the delayed June payroll, the CTO said that the July payroll wasn‚Äôt at risk, so everyone should stay work focused. He explained that money for payroll came from existing investors, so this money wouldn‚Äôt be released until the deal was signed. Unknown to employees at this point, no investors sat on the board of directors by then, the last having resigned 21 days earlier. Responding to comment, Pollen‚Äôs Press team wrote that the CTO‚Äôs comments were based on the information available at the time. 21 July: The Pragmatic Engineer  reports  that Pollen is on the verge of bankruptcy.  In The Scoop #19, I shared my opinions that the most likely outcome for the company is that investors stall and the company goes bankrupt. 21‚Äì28 July: no meaningful updates from the C-level.  Updates from the CEO contained no information, beyond assurances that a deal was close to being signed. The CTO remained invisible to engineering, save for his one-on-one communication with the VPs and Directors. 28 July: the CTO messaged managers that there was no money for July‚Äôs payroll.  Managers were upset. From the Slack conversation: CTO: ‚ÄúUpdate on the deal etc. - my current best guess is that we will NOT make payroll as planned tomorrow. This is an assumption I‚Äôm making given that we‚Äôre still talking with the partner. I‚Äôm telling you this as it may be prudent to let your teams know privately so they can plan accordingly if they need to. There‚Äôll be another update later tonight once we have more detail. (...)‚Äù 29 July: CEO told staff they won‚Äôt be paid . From the email: ‚ÄúYou have been incredibly patient and supportive with us over the last months so it pains me to say there will be a delay in payroll until next week to allow the transaction [with the partner] to conclude. (...) I will share a further update on Sunday [31 July]‚Äù That promised update did not come. 1 Aug: most tech employees stopped working.  With no salaries paid and with no specific information coming from Pollen, most people started to search for new jobs. There were still people who wanted to stay, who believed in the CTO and CEO and hoped the company would close this mysterious deal. Also on this day, there were no updates from the CEO. 4 Aug: CTO invited tech employees to join him, unpaid, on a ‚Äòspecial operation.‚Äô  The CTO organized a 15-minute all-hands, and shares: ‚ÄúI remain engaged, I still believe in Pollen. It‚Äôs ok if you don‚Äôt want to work but those who want to be helpful and contribute to the future, join me on Monday [8 August] for a special operation. We‚Äôll ideate features, form teams and work on those. More details will follow.‚Äù 9 Aug: Sky News  reported  that Pollen was on the brink of collapse.  Early afternoon, the outlet ran the story: ‚ÄúSky News has learnt that Pollen, which has been scrambling to find a rescue deal for weeks, could crash into administration as soon as Wednesday [10 August]. City sources said that hopes of finding a buyer had faded in recent days. Pollen, which is backed by the government's Future Fund, has failed to pay staff as it lurched towards disaster. Kroll, the restructuring firm, has been lined up to oversee the prospective insolvency.‚Äù 9 Aug: CEO said media reports were incorrect.  He sent a one-line email to all staff, on the bcc: ‚ÄúWhat you‚Äôre reading in the press is full of speculation and inaccuracies. We will be ready to announce what‚Äôs happening later today and I will be sharing all the information with you.‚Äù Later in the evening, The Telegraph  broke the news  that Pollen was to enter administration. 10 Aug: bankruptcy confirmed by the CEO.  The CEO sent a long email confirming media reports that the company was entering administration, and apologizing that the media reported on the company shutting down. It was in this email that employees would learn, for the first time, that investors dropped out from the Series C or reduced commitments. The CEO wrote: ‚ÄúWe raised less money than we planned in our Series C given investors changed the size of their commitments or unexpectedly chose not to invest.‚Äù A few minutes after the CEO‚Äôs email, the CTO emailed the engineering team, offering support to help people find a new job, and closed by saying: ‚ÄúI‚Äôm sorry things ended this way. I‚Äôve been building Pollen for 6 years and this was not even remotely the ending I dreamt of, let alone the way which it was ended - especially that the Telegraph article was how some of you learned this information [about entering administration]‚Äù. 12 Aug: employees terminated.  Most employees receive an email from Chief People Officer, informing them their role was no longer required, with no mention of paying owed wages or severance. Later, follow-up emails would be sent to explain how the administration would work, what it meant for them and support available based on their location. 7. Afterlife Following the company‚Äôs collapse, how is it possible that Pollen keeps operating at time of publication? After administration on 10 August 2022, the restructuring and insolvency firm Kroll was appointed to oversee the process. Here‚Äôs the situation for Pollen‚Äôs employees and vendors, as of publication: Most employees are still owed more than a month‚Äôs worth of wages. Employees in the US were left medically uninsured from 1 July, without knowing about this fact at the time. Some employees have not been insured since 15 June. Months‚Äô worth of UK employee pension contributions went missing for employees. Money was deducted from paychecks but never transferred to the pension provider. Employees laid off in May were not paid their June salary as part of their notice period, nor the severance they were legally owed. The remaining employees laid off in August were not promised or paid any severance by Pollen. Vendors of the company are owed large sums: two vendors I contacted confirmed that they are owed more than ¬£100,000 in unpaid invoices each. Some employees were, in fact, paid their full salaries.  Employees outside the US, UK or Poland were employed though global payroll solution  Deel  - which is a company several startups utilize to hire people around the globe.  Even though the last payment Pollen made to Deel was in May 2022, the employees got their paychecks for June, July and August, thanks to the platform paying them. Those employed by other intermediary companies also got paid after Pollen stopped paying employees in the US, UK and Poland. Pollen continues to partially operate, despite having gone into administration.  This has to do with how it was ‚Äì is ‚Äì a web of companies, and only one of these entities ‚Äì named StreetTeam Software Limited ‚Äì actually went into administration. In the appendix, I share a brief history of Pollen, which outlines how several companies came and went, and the several rebrands from The Physical Network, through StreetTeam, then Verve, to what became Pollen.  I‚Äôve visualized the corporate history and structure of the UK companies connected to the cofounders of Pollen. Note that the below structure does not include US entities. The corporate evolution of Pollen. Source of data: Companies House & press statements Pollen was ¬†structured in a way so StreetTeam Software only owned the platform, it did not own the collecting of money from experiences sold. All the revenue from events and experiences went to Justexperiences Limited (also referred to Trippr UK), which operates independently of Pollen (aka StreetTeam Software.) Justexperiences Limited is 75% owned by StreetTeam Software, but the US-based Justtours Inc, is also a minority shareholder. Thanks to its corporate structure, Pollen is still making some money.  Customers are still booking experiences ‚Äì which may never happen ‚Äì still using the infrastructure of StreetTeam, and the money lands in Justexperiences‚Äô bank account. This raised some questions with former Pollen employees. During a call with the administrator on 19 August 2022, this exchange took place between a former Pollen (StreetTeam) employee and a representative of the administrator, Knoll: Pollen employee: ‚ÄúIs it legal that Company A [StreetTeam] employs all the people and pays for all the costs, while all revenue from the services of Company A goes into Company B [Justexperiences]. Company A racks up debts and goes into administration, and Company B walks away with all the profit. That‚Äôs possible, right?‚Äù Administrator from Knoll: ‚ÄúYes. (...) As part of the administrator‚Äôs duty is to also look at the director‚Äôs conduct. So we do look at all that and all the other entities that they are running as well. We can submit a report to the insolvency service as well.‚Äù On the same call, the administrator shared that they normally ask for one year‚Äôs worth of bank statements, but in the case of Pollen, they asked for three years. They are also sending out questionnaires to all directors and all members of the executive team who served during the past three years. The administrator confirmed that it has not been appointed to any US-based companies, and US entities are not part of any insolvent process to its knowledge. So, what happens next?  The administration process will run its course, with Kroll fulfilling its duty of trying to secure as many assets from StreetTeam Software as possible, to redistribute to creditors. The Pollen Press team confirmed that while Justexpereinces keeps operating, the business is being restructured and the subsidiary businesses are being sold. The Pollen Press team said that it‚Äôs important and appropriate for businesses like Justexperiences to remain in operation to retain the most value in teh trade sales. Several employees reported StreetTeam Software to the UK pensions regulator in May, when they had missed out on pension contributions for more than three months, and more employees are following suit. They hope to reclaim pension contributions deducted from their paychecks. Regulators and potentially law enforcement will hold Pollen‚Äôs leadership team accountable for their roles in a devastating outcome.  Employees I talked to feel they were misled to about the financial situation of the company. Employees who didn‚Äôt start searching for new jobs until the very end had one thing in common; they trusted the CEO when he said the company raised $150M funding in April, they trusted the CEO when he assured employees on 30 June that salaries being late would never happen again, and they trusted other messages from leadership. So, should leadership be allowed to operate a company which company does not have money to pay employees or vendors?  According to the UK regulator , the answer is ‚Äúno.‚Äù Any director who does so can be disqualified as a company director: ‚ÄúYou can be banned (‚Äòdisqualified‚Äô) from being a company director if you don‚Äôt meet your legal responsibilities. Anyone can report a company director‚Äôs conduct as being ‚Äòunfit‚Äô. ‚ÄòUnfit conduct‚Äô includes allowing a company to continue trading when it can‚Äôt pay its debts.‚Äù The company stopped paying several vendors from March - at least one as early as October 2021 -, was unable to transfer pension contributions for some staff from April, all but one investors departed the board by 30 May, and the last investor - Sienna Capital - departed the board on 30 June. Employees were not paid salaries from July. Now, it will be down to the UK regulator to make a determination if it was reasonable for directors to think that the company will be able to pay its debts. Pollen confounder and CEO Callum Negus-Fancey has since started a new company.  The company  was incorporated  on 15 September 2022. The name of this new limited company? Context is Everything. If you enjoyed this article,  sign up to The Pragmatic Engineer Newsletter  to get similar ones in your inbox. It's the #1 technology newsletter  on Substack . I reached out for comment to Pollen before publishing the article, and have included responses where appropriate. Additionally, the Pollen Press team shared how, after a strong 2020 and 2021, the company experienced a steep decline in sales in 2022. They wrote that a combination of three things hit the company at the same time: 1. Being able to raise less investment, 2. Omicron negatively impacted sales in Q1 3. Sales fell in Q2 which the company attributed to increased demand, but customers wanting to book closer to the events. They concluded ‚ÄòThere were things we could have done better and learnings to be had. However, these failures would not have been existential if it wasn‚Äôt for the conditions.‚Äô Full subscribers have access to two additional parts of  in the full article: Learnings .  What is there to learn from the collapse of Pollen? Learnings and advice for employees, and for founders. Pollen‚Äôs history:  a brief overview. A summary of the story of how Pollen, as a company, came about. Read the full article here . In a future article for full subscribers, I‚Äôll also share details from how Pollen structured compensation, and the pay ranges that made it competitive on the London, Warsaw and US markets.  Subscribe here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/what-is-data-engineering-2/", "title": "What is Data Engineering: Part 2", "content": "\n             üëã Hi, this is  Gergely  with a free issue of the Pragmatic Engineer Newsletter. If you‚Äôre not a full subscriber yet, you missed today‚Äôs subscriber-only issue on  Consolidating technologies  and  a few other issues . To get a similarly in-depth article every week,  subscribe to The Pragmatic Engineer Newsletter . Q: I‚Äôm hearing more about data engineering. As a software engineer, why is it important, what‚Äôs worth knowing about this field, and could it be worth transitioning into this area? To answer this question, I pulled in  Benjamin Rogojan , who also goes by Seattle Data Guy, on his  popular data engineering blog  and  YouTube channel . In  Part 1 of the series , Ben covered: What do data engineers do? Data engineering terms. Why data engineering is becoming more important. In the second and final part of the series, we cover: Data engineering tools: an overview Where is data engineering headed? Getting into data engineering as a software engineer With this, over to  Ben : 1. Data engineering tools: an overview When it comes to data engineering, there is no shortage of tools. It goes without saying tools like GitHub, databases, baseline cloud services and also coding, are all needed for data engineers. This being said, there are some specific tools you will need to learn if you start looking into data engineering. A few of the common data engineering tools Data Storage Snowflake  was the first widely adopted cloud data platform which separated storage and computation. This gave users the ability to quickly switch between small, medium, and large data warehouses. It also provided a very familiar standard data warehouse ‚Äúfeel.‚Äù The ability to separate computation and storage allows database software to increase: Availability. Scalability for compute and storage. Reduces Costs. You don‚Äôt need to scale up or scale down data warehouses and your team can easily pick how much computing is required. This change, coupled with the fact that Snowflake felt more like a traditional data warehouse, made it very popular. Currently, depending on who you ask, Snowflake has 15% to 18% of the market. Learn more about Snowflake in this video I made:  Why everyone cares about Snowflake . Databricks (Delta Lake)  Databricks itself is very tightly coupled with Spark, which we cover in more depth later. That's because it was developed by the same people. The company itself was started back in 2013 by the original founders of Spark, the UC Berkeley professors Ali Ghodsi, Ion Stoica, and Matei Zaharia. Databricks provides a data platform that combines several managed services, including Spark, Delta Lake, and MLflow. Delta Lake acts as the storage component for Databricks. It is an open-source storage framework that provides support for ACID transactions, schema enforcement, time travel(meaning rollbacks and historical audit trails), and several other ever-expanding features.  The truth is tools like Snowflake and Databricks are both far more than storage. But they also tend to be the location we store data. Apache Iceberg . I have to include  Apache Iceberg  as solutions such as this are 100% pure storage. Unlike Databricks and Snowflake which manage both computing and storage, there are newer solutions such as Apache Iceberg which are only storage. Iceberg is a high-performance format for huge analytic tables. It brings the reliability and simplicity of SQL tables to big data, while making it possible for engines like  Spark ,  Trino , Flink, Presto, Hive and Impala, to safely work with the same tables, simultaneously. Data Processing Engines Presto/Trino .  Presto  was developed at Facebook as an open-source distributed query engine which supports much of the SQL analytics workload at Facebook. Presto‚Äôs Connector API allows plugins to provide a high performance I/O interface to dozens of data sources, including Hadoop data warehouses, RDBMSs, NoSQL systems, and stream processing systems. What is interesting to know about Presto is that, due to some legal complications, its original founders were forced to branch off of Presto‚Äôs initial open-source project and develop what is now called Trino. The founders reveal more about this split in the recently published article,  Why leaving Facebook/Meta was the best thing we could do for the Trino Community . Spark . Apache Spark started in 2009 as a research project at UC Berkeley's AMPLab. You can read more about it in the paper, \"Spark: Cluster Computing with Working Sets.‚Äù Sparks' goal was to balance the fault tolerance and scalability of Hadoop Map Reduce, while providing the ability to reuse a working set of data across multiple parallel operations. What I personally enjoy about Spark is it is extendable to so many different languages. SparkSQL, Python, Scala, Java and R are all capable of being used to process data. Orchestration Airflow  is currently one of the more popular available orchestrators. It was developed by  Maxime Beauchemin at Airbnb as a solution for the problem  of always being one generation behind the needs of users with workflow orchestration tools. Airflow was written to be ‚Äúconfiguration as code,‚Äù using Python as its language of choice. Thanks to what I consider a relatively straightforward approach to defining DAGs (directed acyclic graphs) and the tasks within them, as well as the fact that Airflow is open source, Airflow was quickly adopted. Prefect  is also a Python-based orchestration tool. Unlike Airflow which involves a little more of a learning curve in terms of understanding how DAGs are created, Prefect is much more Pythonic. Meaning it is written as if you were writing Python code. It also has built-in workflow version control and is far easier to test compared to Airflow. It‚Äôs often hard to discuss Prefect without referring to Airflow, as part of the reason it was developed was to improve on some of Airflow‚Äôs limitations. Dagster  was developed by Nick Schrock, who co-created GraphQL. Dagster takes what they call a declarative approach to data management. They view this declarative data management approach starting with code to define the data assets you want to exist. These asset definitions, version-controlled through git and inspectable via tooling, allow anyone in your organization to understand your canonical set of data assets, allow you to reproduce them at any time, and offer a foundation for asset-based orchestration. Similar to both Airflow and Prefect, Dagster is Python-based. Other tools The above list barely even scratches the surface in terms of tools and tool categories. There are streaming solutions like Kafka and Debezium (for streaming changes,) there are tools like  dbt  which have also grown in popularity and have arguably created their own new roles, as well as now have a fair share of competing products such as  Coalesce . In the end, there are just far too many tools to truly keep track of. 2. Where is Data Engineering headed? Data engineering has changed a lot during the past few decades. Prior to 2010, you probably would not have come across the term. Perhaps you heard of DBA or ETL developers, but somewhere around the turn of the millennium data scientist was popularized and so was data engineering. Specialization of Analytics Engineering  - Even in the past decade a lot has changed. The title of analytics engineer was developed and popularized as a role which can help offload a lot of the work data engineers did on the analytics side of work. Real-Time Is Becoming Easier  - Besides the increasing specialization of data engineering and analytics engineering, we are also seeing the ability to approach problems such as streaming with much more robust and easier to manage tools. So, the potential of real-time data analytics is becoming more feasible for a broader range of companies. This could have an impact on some other layers of data engineering work such as reducing the amount of batch processing required. It also would require a lot of buy-in from those who understand the batch processing paradigm, which will likely be a much larger hurdle. Treating data as a product vs as a pure IT function  - Another trend is treating data more like a product. This aligns with the  data mesh  paradigm which has been gaining traction in the past 2-3 years. With this mentality, rather than having a strong centralized data team, data teams often work on specific nodes which are generally attached to a domain. Essentially, these are ‚Äúmicroservices‚Äù for data. With this approach, the goal is to take data from merely being an operational byproduct, to a purposely developed feature which can be used to build further applications and values. Renaissance of Best Practices  - Another trend being rekindled is that of best practices. For example, the head of data at Convoy, Chad Sanderson, has  written several posts regarding the importance of data modeling  and how much it has been neglected in the past 3-5 years. He, along with several other data experts, are leading the charge to once again make data modeling important. In the end, data engineering is going through a lot of changes, many of which have been driven by increasing demands for data, but also changing application design paradigms. 3. Getting into Data Engineering as a Software Engineer It‚Äôs not uncommon for me to be asked by software engineers or IT specialists, ‚ÄúHow do I break into data engineering?‚Äù Software engineers often have a solid foundation to transition into data engineering. If you‚Äôve been programming and developing software for the past few years, you should already be familiar with languages such as Python and have a baseline in SQL. There are a few key areas I have noticed software engineers usually either need to learn about, or polish up on. In particular, to do with the fact that you‚Äôre now dealing with billions of rows, not a single transaction-worth of data. It‚Äôs the OLTP vs OLAP paradigm switch. In turn, most software engineers need to improve or dig into: Data warehouses / data lakes / data modeling. Advanced SQL - Beyond just CRUD. Specialized frameworks such as Spark and Flink. Understanding data pipelines and all the steps from source to target. I‚Äôd also like to add that some software engineers move into data engineering roles assuming they will be working on distributed systems or developing infrastructure for data teams. This isn‚Äôt always the case. These roles are generally denoted as ‚Äúsoftware engineering, data or data infra,‚Äù at many Big Tech companies. That being said, there are plenty of large tech companies whose data engineer role is more like a software role. It‚Äôs just not always apparent from the job description. Conclusion Data engineers play an important role creating data models and assets which can be utilized by analysts and product managers, easily. But where is all this headed? Data engineering has, for a long time, struggled with a case of ‚Äúmiddle child syndrome.‚Äù Even in data driven companies, data engineering has often felt like a blocker to software engineers, analysts and data scientists who want to get their work out quickly. Software engineers actually produce the application that‚Äôs used by end-users and data scientists and analysts provide valuable insights and models which can increase revenues and decrease costs. Tying the work of data engineers to the company‚Äôs bottom line is far from trivial. This tying of work to the bottom line is far easier for data scientists and software engineers than for data engineers. Data engineering still tends to be often viewed as legacy IT  and as a  cost center . However, I do believe this view is slowly changing. Airbnb  wrote about  how they placed a massive bet on data quality. In this article, they share how they ran into the problem of not having a strong enough data engineering team to manage the initiative in pursuit of data quality. They realized data quality and ownership were key to  improving their data strategy , which led them to the conclusion that they needed an expanded data engineering team. Hopefully, this came with a realization of the value of data engineering and how hard it really is to replace this function. Data engineering becoming more valued is supported by further specialization  taking place in the field. Specialized roles such as analytics engineers, are now more common in the industry. Splitting the heavily technical work from more business-focused logic implementation and delivery layers, is proving a necessity in a world which wants to operationalize data and possibly turn it into a new core for data applications ‚Äì at least that's what  Snowflake and Databricks  are betting on. But this North Star is far away from where we currently are. However, at companies which value data and essentially rely on it to stand out, the ability to hire, train and manage strong teams of data engineers will be a differentiator. Data engineering faces a lot of challenges driven by the increasing size, complexity and speed of data. However, one of the most important upcoming challenges I foresee is actually quite an old one. Translating business data into approachable data sets for analysts and data scientists, is still a major challenge.  All the business applications and internal systems are messy and hard to truly approach. There isn‚Äôt anything unknown about what‚Äôs required in terms of data modeling; it all comes down to execution and experience. There have been a lot of changes in the data engineering world, even in the last few years, so I will avoid any bombastic predictions. But I do feel there is currently a return to the mean, as we figure out how to let all the new tools developed in the last decade, as well as many of the best practices that have existed for well over 3-4 decades, find their places. This is Gergely again. Thanks very much to Ben for this comprehensive and broad overview of data engineering. I personally find it refreshing to have a system for thinking about data engineering terms and the tools which we hear lots about, just from being in the tech industry ‚Äì such as about Snowflake or Databricks. Several software engineer friends of mine have made the leap to transition into data engineering in the past few years, and most whom I‚Äôve talked with have been happy with their decision. Some mentioned the same downsides which Ben summed up: data engineering is a new field, businesses often don‚Äôt fully understand it, and career paths can feel limited in some ways. What is certain is that every business has more data and they want to put that data to good use. As a well-rounded software engineer, understanding how to work with these large data sets is the least we should do. And, given the opportunity, it could be a great challenge to get your hands dirty by building data engineering solutions. If you‚Äôd like to learn more about the data engineering field, please get in touch with Ben, the Seattle Data Guy: Subscribe to the  Seattle Data Guy Newsletter Subscribe to the  Seattle Data Guy YouTube  channel Browse the  Seattle Data Guy blog I hope you found this detailed overview just as useful as I did! \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/resiliency-in-distributed-systems/", "title": "Resiliency in Distributed Systems", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the  Pragmatic Engineer Newsletter . To get similarly in-depth articles every week,  subscribe here . Understanding the ins and outs of distributed systems is important for both backend engineers and for anyone working with large-scale systems. Large-scale systems can mean systems with high load and high queries per second (QPS), storing a large amount of data, or ones built with low latency and high reliability. These systems are pretty common across both Big Tech and high-growth startups. One of the most interesting books I‚Äôve found on this topic is  Understanding Distributed Systems . The book was written by Roberto Vitillo, who was a Senior Staff engineer at Mozilla, then a Principal Engineer at Microsoft. The second edition of this book was released in February of this year. The book is structured with these sections: Communication . Reliable links, secure links, discovery, APIs. Coordination . System models, failure detection, time, leader election, replication, coordination avoidance, transactions. Scalability . HTTP caching, content delivery networks, partitioning, file storage, data storage, caching, microservices, control panes and data panes, messaging. Resiliency . Common failure causes, redundancy, fault isolation, downstream resiliency, upstream resiliency. Maintainability . Testing, continuous delivery and deployment, monitoring, observability, and manageability. I like how the book works its way from the theory needed to understand distributed systems - communication and coordination - to practical topics like scalability and resiliency. The book closes with topics on maintainability, which is an area I found surprisingly little focus with most books. I reached out to Roberto asking if he‚Äôd be open to sharing a few chapters of the book with newsletter readers, and Roberto agreed to do so. I chose two chapters on resiliency, from section #4. If you‚Äôd like to dive deeper into other topics, you can buy the  e-book on Roberto‚Äôs website , or the  print book off Amazon. In this excerpt, we cover: 1. Downstream resiliency Timeout Retry: exponential backoff, retry amplification Circuit breaker 2. Upstream resiliency Load shedding Load leveling Rate limiting: single process and distributed implementations Constant work Note that - as always - no links in this newsletter are affiliates and I have not been paid to endorse or recommend this book. More in  my ethics statement . 1. Downstream resiliency (Chapter 27) Now that we have discussed how to reduce the impact of faults at the architectural level with redundancy and partitioning, we will dive into tactical resiliency patterns that stop faults from propagating from one component or service to another. In this chapter, we will discuss patterns that protect a service from failures of downstream dependencies. Timeout When a network call is made, it‚Äôs best practice to configure a timeout to fail the call if no response is received within a certain amount of time. If the call is made without a timeout, there is a chance it will never return, and as mentioned in chapter 24, network calls that don‚Äôt return lead to resource leaks. Thus, the role of timeouts is to detect connectivity faults and stop them from cascading from one component to another. In general, timeouts are a must-have for operations that can potentially never return, like acquiring a mutex. Unfortunately, some network APIs don‚Äôt have a way to set a timeout in the first place, while others have no timeout configured by default. For example, JavaScript‚Äôs XMLHttpRequest is the web API to retrieve data from a server asynchronously, and its default timeout is zero, which means there is no timeout: The fetch web API is a modern replacement for XMLHttpRequest that uses Promises. When the fetch API was initially introduced, there was no way to set a timeout at all. Browsers have only later added support for timeouts through the Abort API. Things aren‚Äôt much rosier for Python; the popular requests library uses a default timeout of infinity. And Go‚Äôs HTTP package doesn‚Äôt use timeouts by default. Modern HTTP clients for Java and .NET do a better job and usually, come with default timeouts. For example, .NET Core HttpClient has a default timeout of 100 seconds. It‚Äôs lax but arguably better than not having a timeout at all. As a rule of thumb, always set timeouts when making network calls, and be wary of third-party libraries that make network calls but don‚Äôt expose settings for timeouts. But how do we determine a good timeout duration? One way is to base it on the desired false timeout rate. For example, suppose we have a service calling another, and we are willing to accept that 0.1% of downstream requests that would have eventually returned a response time out (i.e., 0.1% false timeout rate). To accomplish that, we can configure the timeout based on the 99.9th percentile of the downstream service‚Äôs response time. We also want to have good monitoring in place to measure the entire lifecycle of a network call, like the duration of the call, the status code received, and whether a timeout was triggered. We will talk more about monitoring later in the book, but the point I want to make here is that we have to measure what happens at the integration points of our systems, or we are going to have a hard time debugging production issues. Ideally, a network call should be wrapped within a library function that sets a timeout and monitors the request so that we don‚Äôt have to remember to do this for each call. Alternatively, we can also use a reverse proxy co-located on the same machine, which intercepts remote calls made by our process. The proxy can enforce timeouts and monitor calls, relieving our process of this responsibility. We talked about this in section 18.3 when discussing the sidecar pattern and the service mesh. Retry We know by now that a client should configure a timeout when making a network request. But what should it do when the request fails or times out? The client has two options at that point: it can either fail fast or retry the request. If a short-lived connectivity issue caused the failure or timeout, then retrying after some backoff time has a high probability of succeeding. However, if the downstream service is overwhelmed, retrying immediately after will only worsen matters. This is why retrying needs to be slowed down with increasingly longer delays between the individual retries until either a maximum number of retries is reached or enough time has passed since the initial request. Exponential backoff To set the delay between retries, we can use a capped exponential function, where the delay is derived by multiplying the initial backoff duration by a constant that increases exponentially after each attempt, up to some maximum value (the cap): For example, if the cap is set to 8 seconds, and the initial backoff duration is 2 seconds, then the first retry delay is 2 seconds, the second is 4 seconds, the third is 8 seconds, and any further delay will be capped to 8 seconds. Although exponential backoff does reduce the pressure on the downstream dependency, it still has a problem. When the downstream service is temporarily degraded, multiple clients will likely see their requests failing around the same time. This will cause clients to retry simultaneously, hitting the downstream service with load spikes that further degrade it, as shown in Figure 27.1. Figure 27.1: Retry storm To avoid this herding behavior, we can introduce random jitter into the delay calculation. This spreads retries out over time, smoothing out the load to the downstream service: Actively waiting and retrying failed network requests isn‚Äôt the only way to implement retries. In batch applications that don‚Äôt have strict real-time requirements, a process can park a failed request into a retry queue. The same process, or possibly another, can read from the same queue later and retry the failed requests. Just because a network call can be retried doesn‚Äôt mean it should be. If the error is not short-lived, for example, because the process is not authorized to access the remote endpoint, it makes no sense to retry the request since it will fail again. In this case, the process should fail fast and cancel the call right away. And as discussed in chapter 5.7, we should also understand the consequences of retrying a network call that isn‚Äôt idempotent and whose side effects can affect the application‚Äôs correctness. Retry amplification Suppose that handling a user request requires going through a chain of three services. The user‚Äôs client calls service A, which calls service B, which in turn calls service C. If the intermediate request from service B to service C fails, should B retry the request or not? Well, if B does retry it, A will perceive a longer execution time for its request, making it more likely to hit A‚Äôs timeout. If that happens, A retries the request, making it more likely for the client to hit its timeout and retry. Having retries at multiple levels of the dependency chain can amplify the total number of retries ‚Äî the deeper a service is in the chain, the higher the load it will be exposed to due to retry amplification (see Figure 27.2). Figure 27.2: Retry amplification in action And if the pressure gets bad enough, this behavior can easily overload downstream services. That‚Äôs why, when we have long dependency chains, we should consider retrying at a single level of the chain and failing fast in all the others. Circuit breaker Suppose a service uses timeouts to detect whether a downstream dependency is unavailable and retries to mitigate transient failures. If the failures aren‚Äôt transient and the downstream dependency remains unresponsive, what should it do then? If the service keeps retrying failed requests, it will necessarily become slower for its clients. In turn, this slowness can spread to the rest of the system. To deal with non-transient failures, we need a mechanism that detects long-term degradations of downstream dependencies and stops new requests from being sent downstream in the first place. After all, the fastest network call is the one we don‚Äôt have to make. The mechanism in question is the circuit breaker, inspired by the same functionality implemented in electrical circuits. The goal of the circuit breaker is to allow a sub-system to fail without slowing down the caller. To protect the system, calls to the failing sub-system are temporarily blocked. Later, when the sub-system recovers and failures stop, the circuit breaker allows calls to go through again. Unlike retries, circuit breakers prevent network calls entirely, making the pattern particularly useful for non-transient faults. In other words, retries are helpful when the expectation is that the next call will succeed, while circuit breakers are helpful when the expectation is that the next call will fail. A circuit breaker can be implemented as a state machine with three states: open, closed, and half-open (see Figure 27.3). Figure 27.3: Circuit breaker state machine In the closed state, the circuit breaker merely acts as a pass-through for network calls. In this state, the circuit breaker tracks the number of failures, like errors and timeouts. If the number goes over a certain threshold within a predefined time interval, the circuit breaker trips and opens the circuit. When the circuit is open, network calls aren‚Äôt attempted and fail immediately. As an open circuit breaker can have business implications, we need to consider what should happen when a downstream dependency is down. If the dependency is non-critical, we want our service to degrade gracefully rather than to stop entirely. Think of an airplane that loses one of its non-critical sub-systems in flight; it shouldn‚Äôt crash but rather gracefully degrade to a state where the plane can still fly and land. Another example is Amazon‚Äôs front page; if the recommendation service is unavailable, the page renders without recommendations. It‚Äôs a better outcome than failing to render the whole page entirely. After some time has passed, the circuit breaker gives the downstream dependency another chance and transitions to the half-open state. In the half-open state, the next call is allowed to pass through to the downstream service. If the call succeeds, the circuit breaker transitions to the closed state; if the call fails instead, it transitions back to the open state. You might think that‚Äôs all there is to understand how a circuit breaker works, but the devil is in the details. For example, how many failures are ‚Äúenough to consider a downstream dependency down? How long should the circuit breaker wait to transition from the open to the half-open state? It really depends on the specific context; only by using data about past failures can we make an informed decision. Upstream resiliency (Chapter 28) The previous chapter discussed patterns that protect services against downstream failures, like failures to reach an external dependency. In this chapter, we will shift gears and discuss mechanisms to protect against upstream pressure. Load shedding A server has very little control over how many requests it receives at any given time. The operating system has a connection queue per port with a limited capacity that, when reached, causes new connection attempts to be rejected immediately. But typically, under extreme load, the server crawls to a halt before that limit is reached as it runs out of resources like memory, threads, sockets, or files. This causes the response time to increase until eventually, the server becomes unavailable to the outside world. When a server operates at capacity, it should reject excess requests so that it can dedicate its resources to the requests it‚Äôs already processing. For example, the server could use a counter to measure the number of concurrent requests being processed that is incremented when a new request comes in and decreased when a response is sent. The server can then infer whether it‚Äôs overloaded by comparing the counter with a threshold that approximates the server‚Äôs capacity. When the server detects that it‚Äôs overloaded, it can reject incoming requests by failing fast and returning a response with status code 503 (Service Unavailable). This technique is also referred to as load shedding. The server doesn‚Äôt necessarily have to reject arbitrary requests; for example, if different requests have different priorities, the server could reject only low-priority ones. Alternatively, the server could reject the oldest requests first since those will be the first ones to time out and be retried, so handling them might be a waste of time. Unfortunately, rejecting a request doesn‚Äôt completely shield the server from the cost of handling it. Depending on how the rejection is implemented, the server might still have to pay the price of opening a TLS connection and reading the request just to reject it. Hence, load shedding can only help so much, and if load keeps increasing, the cost of rejecting requests will eventually take over and degrade the server. Load leveling There is an alternative to load shedding, which can be exploited when clients don‚Äôt expect a prompt response. The idea is to introduce a messaging channel between the clients and the service. The channel decouples the load directed to the service from its capacity, allowing it to process requests at its own pace. This pattern is referred to as load leveling and it‚Äôs well suited to fending off short-lived spikes, which the channel smooths out (see Figure 28.1). But if the service doesn‚Äôt catch up eventually, a large backlog will build up, which comes with its own problems, as discussed in chapter 23. Figure 28.1: The channel smooths out the load for the consuming service. Load-shedding and load leveling don‚Äôt address an increase in load directly but rather protect a service from getting overloaded. To handle more load, the service needs to be scaled out. This is why these protection mechanisms are typically combined with auto-scaling, which detects that the service is running hot and automatically increases its scale to handle the additional load. Rate-limiting Rate-limiting, or throttling, is a mechanism that rejects a request when a specific quota is exceeded. A service can have multiple quotas, e.g., for the number of requests or bytes received within a time interval. Quotas are typically applied to specific users, API keys, or IP addresses. For example, if a service with a quota of 10 requests per second per API key receives on average 12 requests per second from a specific API key, it will, on average, reject 2 requests per second from that API key. When a service rate-limits a request, it needs to return a response with a particular error code so that the sender knows that it failed because a quota has been exhausted. For services with HTTP APIs, the most common way to do that is by returning a response with status code 429 (Too Many Requests). The response should include additional details about which quota has been exhausted and by how much; it can also include a Retry-After header indicating how long to wait before making a new request: If the client application plays by the rules, it will stop hammering the service for some time, shielding the service from non-malicious users monopolizing it by mistake. In addition, this protects against bugs in the clients that cause a client to hit a downstream service for one reason or another repeatedly. Rate-limiting is also used to enforce pricing tiers; if users want to use more resources, they should also be willing to pay more. This is how you can offload your service‚Äôs cost to your users: have them pay proportionally to their usage and enforce pricing tiers with quotas. You would think that rate-limiting also offers strong protection against a DDoS attack, but it only partially protects a service from it. Nothing forbids throttled clients from continuing to hammer a service after getting 429s. Rate-limited requests aren‚Äôt free either ‚Äî for example, to rate-limit a request by API key, the service has to pay the price of opening a TLS connection, and at the very least, download part of the request to read the key. Although rate limiting doesn‚Äôt fully protect against DDoS attacks, it does help reduce their impact. Economies of scale are the only true protection against DDoS attacks. If you run multiple services behind one large gateway service, no matter which of the services behind it are attacked, the gateway service will be able to withstand the attack by rejecting the traffic upstream. The beauty of this approach is that the cost of running the gateway is amortized across all the services that are using it. Although rate-limiting has some similarities with load shedding, they are different concepts. Load shedding rejects traffic based on the local state of a process, like the number of requests concurrently processed by it; rate-limiting instead sheds traffic based on the global state of the system, like the total number of requests concurrently processed for a specific API key across all service instances. And because there is a global state involved, some form of coordination is required. Single-process rate limiting implementation The distributed implementation of rate-limiting is interesting in its own right, and it‚Äôs well worth spending some time discussing it. We will start with a single-process implementation first and then extend it to a distributed one. Suppose we want to enforce a quota of 2 requests per minute, per API key. A naive approach would be to use a doubly-linked list per API key, where each list stores the timestamps of the last N requests received. Whenever a new request comes in, an entry is appended to the list with its corresponding timestamp. Then, periodically, entries older than a minute are purged from the list. By keeping track of the list‚Äôs length, the process can rate-limit incoming requests by comparing it with the quota. The problem with this approach is that it requires a list per API key, which quickly becomes expensive in terms of memory as it grows with the number of requests received. To reduce memory consumption, we need to come up with a way to reduce the storage requirements. One way to do this is by dividing time into buckets of fixed duration, for example of 1 minute, and keeping track of how many requests have been seen within each bucket (see Figure 28.2). Figure 28.2: Buckets divide time into 1-minute intervals, which keep track of the number of requests seen. A bucket contains a numerical counter. When a new request comes in, its timestamp is used to determine the bucket it belongs to. For example, if a request arrives at 12.00.18, the counter of the bucket for minute ‚Äú12.00‚Äù is incremented by 1 (see Figure 28.3). Figure 28.3: When a new request comes in, its timestamp is used to determine the bucket it belongs to. With bucketing, we can compress the information about the number of requests seen in a way that doesn‚Äôt grow with the number of requests. Now that we have a memory-friendly representation, how can we use it to implement rate-limiting? The idea is to use a sliding window that moves across the buckets in real time, keeping track of the number of requests within it. The sliding window represents the interval of time used to decide whether to rate-limit or not. The window‚Äôs length depends on the time unit used to define the quota, which in our case is 1 minute. But there is a caveat: a sliding window can overlap with multiple buckets. To derive the number of requests under the sliding window, we have to compute a weighted sum of the bucket‚Äôs counters, where each bucket‚Äôs weight is proportional to its overlap with the sliding window (see Figure 28.4). Figure 28.4: A bucket‚Äôs weight is proportional to its overlap with the sliding window. Although this is an approximation, it‚Äôs a reasonably good one for our purposes. And it can be made more accurate by increasing the granularity of the buckets. So, for example, we can reduce the approximation error using 30-second buckets rather than 1-minute ones. We only have to store as many buckets as the sliding window can overlap with at any given time. For example, with a 1-minute window and a 1-minute bucket length, the sliding window can overlap with at most 2 buckets. Thus, there is no point in storing the third oldest bucket, the fourth oldest one, etc. To summarize, this approach requires two counters per API key, which is much more efficient in terms of memory than the naive implementation storing a list of requests per API key. Distributed rate limiting implementation When more than one process accepts requests, the local state is no longer good enough, as the quota needs to be enforced on the total number of requests per API key across all service instances. This requires a shared data store to keep track of the number of requests seen. As discussed earlier, we need to store two integers per API key, one for each bucket. When a new request comes in, the process receiving it could fetch the current bucket, update it and write it back to the data store. But that wouldn‚Äôt work because two processes could update the same bucket concurrently, which would result in a lost update. The fetch, update, and write operations need to be packaged into a single transaction to avoid any race conditions. Although this approach is functionally correct, it‚Äôs costly. There are two issues here: transactions are slow, and executing one per request would be very expensive as the data store would have to scale linearly with the number of requests. Also, because the data store is a hard dependency, the service will become unavailable if it can‚Äôt reach it. Let‚Äôs address these issues. Rather than using transactions, we can use a single atomic get-and-increment operation that most data stores provide. Alternatively, the same can be emulated with a compare-and-swap. These atomic operations have much better performance than transactions. Now, rather than updating the data store on each request, the process can batch bucket updates in memory for some time and flush them asynchronously to the data store at the end of it (see Figure 28.5). This reduces the shared state‚Äôs accuracy, but it‚Äôs a good trade-off as it reduces the load on the data store and the number of requests sent to it. Figure 28.5: Servers batch bucket updates in memory for some time, and flush them asynchronously to the data store at the end of it. What happens if the data store is down? Remember the CAP theorem‚Äôs essence: when there is a network fault, we can either sacrifice consistency and keep our system up or maintain consistency and stop serving requests. In our case, temporarily rejecting requests just because the data store used for rate-limiting is not reachable could damage the business. Instead, it‚Äôs safer to keep serving requests based on the last state read from the store. Constant work When overload, configuration changes, or faults force an application to behave differently from usual, we say the application has a multi-modal behavior. Some of these modes might trigger rare bugs, conflict with mechanisms that assume the happy path, and more generally make life harder for operators, since their mental model of how the application behaves is no longer valid. Thus, as a general rule of thumb, we should strive to minimize the number of modes. For example, simple key-value stores are favored over relational databases in data planes because they tend to have predictable performance. A relational database has many operational modes due to hidden optimizations, which can change how specific queries perform from one execution to another. Instead, dumb key-value stores behave predictably for a given query, which guarantees that there won‚Äôt be any surprises. A common reason for a system to change behavior is overload, which can cause the system to become slower and degrade at the worst possible time. Ideally, the worst- and average-case behavior shouldn‚Äôt differ. One way to achieve that is by exploiting the constant work pattern, which keeps the work per unit time constant. The idea is to have the system perform the same amount of work under high load as under average load. And, if there is any variation under stress, it should be because the system is performing better, not worse. Such a system is also said to be antifragile. This is a different property from resiliency; a resilient system keeps operating under extreme load, while an antifragile one performs better. We have already seen one application of the constant work pattern when discussing the propagation of configuration changes from the control plane to the data plane in chapter 22. For example, suppose we have a configuration store (control plane) that stores a bag of settings for each user, like the quotas used by the API gateway (data plane) to rate-limit requests. When a setting changes for a specific user, the control plane needs to broadcast it to the data plane. However, as each change is a separate independent unit of work, the data plane needs to perform work proportional to the number of changes. If you don‚Äôt see how this could be a problem, imagine that a large number of settings are updated for the majority of users at the same time (e.g., quotas changed due to a business decision). This could cause an unexpectedly large number of individual update messages to be sent to every data plane instance, which could struggle to handle them. The workaround to this problem is simple but powerful. The control plane can periodically dump the settings of all users to a file in a scalable and highly available file store like Azure Storage or AWS S3. The dump includes the configuration settings of all users, even the ones for which there were no changes. Data plane instances can then periodically read the dump in bulk and refresh their local view of the system‚Äôs configuration. Thus, no matter how many settings change, the control plane periodically writes a file to the data store, and the data plane periodically reads it. We can take this pattern to the extreme and pre-allocate empty configuration slots for the maximum number of supported users. This guarantees that as the number of users grows, the work required to propagate changes remains stable. Additionally, doing so allows to stress-test the system and understand its behavior, knowing that it will behave the same under all circumstances. Although this limits the number of users, a limit exists regardless of whether the constant work pattern is used or not. This approach is typically used in cellular architectures (see 26.2), where a single cell has a well-defined maximum size and the system is scaled out by creating new cells. The beauty of using the constant work pattern is that the data plane periodically performs the same amount of work in bulk, no matter how many configuration settings have changed. This makes updating settings reliable and predictable. Also, periodically writing and reading a large file is much simpler to implement correctly than a complex mechanism that only sends what changed. Another advantage of this approach is that it‚Äôs robust against a whole variety of faults thanks to its self-healing properties. If the configuration dump gets corrupted for whatever reason, no harm is done since the next update will fix it. And if a faulty update was pushed to all users by mistake, reverting it is as simple as creating a new dump and waiting it out. In contrast, the solution that sends individual updates is much harder to implement correctly, as the data plane needs complex logic to handle and heal from corrupted updates. To sum up, performing constant work is more expensive than doing just the necessary work. Still, it‚Äôs often worth considering it, given the increase in reliability and reduction in complexity it enables. These were chapters 27 and 28 from the book Understanding Distributed Systems by Roberto Vitillo. To dive deeper, get the  e-book from the Understanding Distributed Systems website , or the  print book off Amazon.  You can also follow Roberto on Twitter and connect with him  on LinkedIn . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-scoop-meta/", "title": "Meta‚Äôs historic growth challenge", "content": "\n             üëã  Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover two out of eight topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe . In this issue, we cover: Developers on the Rotational Engineering program are not receiving full time offers.  Meta has a Rotational Engineering program where, after a year of rotating between teams, engineers become E4 software engineers and graduate to join a team. Now, these engineers are not given the opportunity to join any teams and must leave the company after completing their 12-month contracts.  Exclusive . Meta‚Äôs historic growth challenge.  The company‚Äôs growth is under more pressure than it has ever been, and in a worse strategic position than Apple, Google, Amazon or Microsoft. Why is this and what can the company do to get out of this situation?  Analysis . 1. Developers on the Rotational Engineering program are not receiving full time offers Rotational Engineering is a neat program at Meta. The company hires less experienced software engineers to this program, on a fixed one-year program. The hires are often new grads, and may be from more diverse backgrounds. Meta puts them through a month of bootcamp and two 5 month-long rotations on two different teams. Engineers must graduate from the program to become full-time Meta employees. In the past, they could graduate as soon as they could demonstrate performance at the E4+ level. This is a ‚ÄúSoftware Engineer 2‚Äù level: one above the entry-level E3 position, and one below the Senior Software Engineer level at E5.  Read more about levels at Facebook in the issue,  Inside Facebook‚Äôs engineering culture . In practice, most rotational engineers would graduate out of the program after the second rotation ‚Äì month 11 of the program ‚Äì and become full-time employees. It's to be said that Meta never promised anyone that those on the program would get to graduate, and reserved graduation to be based on individual performance and business needs. In practice, up to 2022, a good chunk of these Rotational Engineers ended up getting full-time, E4 offers. But now, Rotational Engineering graduations are frozen, meaning these developers will not get permanent offers.  Along with the hiring freeze, graduations have stopped. This means these engineers must leave the company when they fill out their 12-month contracts. I talked with both current and former rotational engineers and they‚Äôre all disappointed. One rotational engineer who still has months left until the ‚Äúusual‚Äù graduation period, is already interviewing for external opportunities. And a former rotational engineer expressed sadness that graduations are on hold, given this was their own path into becoming a fulltime engineer. There have been fewer Rotational Engineers onboarded to the program, recently.  Not extending fulltime offers to Rotational Engineers is not so surprising, according to an engineer who graduated from it, years back. They said that in 2022, a fraction of engineers were hired onto this program, compared to previous years. For example, in Menlo Park it was typical for a Rotational Engineer class to start with 10 engineers. Recently, this was down to 1 or 2 people. Update: Meta responded on the day of publication, 6 Oct 2022, claiming the story is not accurate, to which I followed by asking which parts are not accurate. On 10 Oct 2022, I received more background information and updated the story. The story previously stated that 'Developers on the Rotational Engineering program are being transitioned out' which I changed, as the background information I received from Meta indicated that no one in the program is being forced to leave until filling out their contract. 2. Meta‚Äôs historic growth challenge Something strange is happening to Meta‚Äôs market cap: it‚Äôs shrinking much faster than other Big Tech companies. As of publication, Meta is valued at $373B, making the tech giant the 12th most valuable publicly traded company in the world. Amazon and Google are valued at almost four times as much, Microsoft five times, and Apple six times. Even more interesting is how the value of the stock ‚Äì and therefore the company ‚Äì has changed in the past twelve months: Market cap changes of Meta, Apple, Amazon, Google and Microsoft over the past twelve months. Meta lost more than twice as much value as other companies. Meta‚Äôs value has decreased by 58% during this time; significantly more than Amazon (25%), Google (25%), Microsoft (14%) or Apple (an increase of 3%). So, what happened at Meta that‚Äôs not happening at other Big Tech firms? Meta has a growth problem that other Big Tech companies don‚Äôt seem to have in such a pressing way. Until the end of 2021, Meta had a fantastic run of growth. Here‚Äôs the mapping out of the company‚Äôs revenue and profit numbers from when it IPO‚Äôd in 2012, until today: Meta‚Äôs revenue and profits the past 10 years. Note that the 2022 values are marked as the trailing 12 months‚Äô revenues. Let‚Äôs take a look at what these numbers looked like, in terms of growth rates versus the previous year: Revenue and profit changes at Facebook / Meta versus the previous year, 2014-2022. Meta is on course for revenue growth to flatline.  Based on estimates, it‚Äôs expected Meta will record a year-on-year growth which drops from the previous 25-40%, to perhaps a few percent ‚Äì if even that. This kind of revenue drop is unprecedented for the company. Naturally, it will hit profits. Decline in net profits ‚Äì also referred to as net income or net revenue ‚Äì has happened before, in 2019. However, back then, revenue kept growing, so it was less of a concern. The challenge Meta has today is how to get revenue back to a healthy rate of growth. ‚Äú Healthy‚Äù would be around the 20% mark. The question is: can the company even do this? Meta is facing challenges in multiple areas to increasing revenue: The TikTok threat.  TikTok is the most popular social media app. While it might seem like Meta has made little public response so far, the company is, in fact, doubling down on AI to mitigate this threat and get back to dominating this sector. I cover more about this in  The Scoop #22 , where I write about  Meta preparing for AI/ML ‚Äúwar time‚Äù . Apple‚Äôs App Tracking Transparency in iOS 14 . When Apple introduced App Tacking Transparency in 2021, the majority of users opted out of sharing activity with third parties. This change had a ripple effect across the advertising sector, as ad targeting worked less efficiently from then on. The change makes adverts more expensive and less efficient for customers, and contributes to reduced willingness to spend on ads which cannot be run profitably. Fewer growth areas . Facebook, Instagram, Messenger and Whatsapp reach close to 3 billion people, every month. This means that almost every second person in the world already uses one of Meta‚Äôs services. While there is room for some more growth, it‚Äôs clear Meta is running out of new people to onboard. No wonder the company previously invested in  Internet.org , to deliver internet services to less developed countries and bring more people online, and to Meta. Note that Internet.org now redirects to  Meta Connectivity , which is an initiative to ‚Äúaccelerate the evolution of connectivity to help bring the metaverse to life.‚Äù A looming recession.  There are growing signs we could see a global recession. In a recession, customers spend less, merchants sell less and have less money to spend on advertising and marketing. Meta has never faced a growth challenge like now.  Facebook always had a growth plan, and this plan was to onboard and retain more people to its services, on the solid assumption that advertisers would follow. However, this plan doesn‚Äôt look like it will work for much longer. There are fewer people to onboard, and advertising money is less readily available than before. And while other Big Tech companies have plenty of other levers to pull for growth, thanks to their businesses being more diversified, Meta has always gone all-in on social media and advertising revenue. Meta made a major bet on the Metaverse and on owning the full experience, starting with manufacturing the hardware, Oculus. However, there is no sign the Metaverse will gain mainstream adoption. So, what next? This is the question Meta employees  are currently asking , and I‚Äôd suspect it‚Äôs what keeps Mark Zuckerberg up at night. These were two out of the eight topics covered in this week‚Äôs  The Scoop . A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. I‚Äôm adding an ‚ÄòExclusive‚Äô label to news which features original reporting direct from my sources, as distinct from analysis, opinion and reaction to events. Of course, I also analyze what‚Äôs happening in the tech industry, citing other media sources for information and quoting them as I dive into trends I observe. These sections will not carry the ‚ÄòExclusive‚Äô mark. The  full The Scoop  additionally covers: Meta rescinds intern offers for 2023 .  In a first for the company, Meta has rescinded offers for what seems like a large group of interns. These interns had been due to start in January 2023 at the London office. What could be behind the rescinding of these offers?   Exclusive . Will FTE offers be rescinded by the company?   Rescinding intern offers were worrying enough that a software engineer with an outstanding offer got on the phone with a recruiter at Meta to find out if their full-time position is safe, or it could also be rescinded. The recruiter shared the official stance of the company with this person.  Exclusive . Worries about ‚Äòquiet layoffs.‚Äô  A few days ago, Business Insider reported that Meta is doing ‚Äúquiet layoffs,‚Äù which could mean as much as 15% of employees being let go. I talked with engineering managers at Meta to find out how much truth they see in this claim. They told me the numbers are incorrect, and shared more details.  Exclusive. The mood inside Meta.  I talked with half a dozen software engineers and managers to get a sense of how employees feel.  Exclusive. Meta closing an office building in New York City.  The company is closing its 225 Park Ave office. Is this a bad sign for the company? I talked with a software engineer based in NYC, and found out it‚Äôs not.   Exclusive. Will Meta do layoffs?  This is the question on everyone‚Äôs mind who I talked with at Meta. I outline possible options and give my opinion on the likelihood of layoffs in the coming months.  Analysis . Read  the full The Scoop . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/meta-layoffs/", "title": "Will Facebook / Meta do engineering layoffs?", "content": "\n             Part of this article was originally published in  The Scoop #27 , for subscribers of  The Pragmatic Engineer Newsletter  last week. I decided to publish this section for everyone to read after the Business Insider article  claiming  that 15% of Facebook employees - 12,000 people - may lose their jobs started to spread within the media. The Business Insider article was not specific to software engineers but still spread heavily within tech circles. Before un-paywalling this section, there has not been anything publicly accessible that delivers information about the software engineering side of things. I rarely un-paywall analysis pieces, but seeing how much fear one article can cause - even for software engineers at Meta - which article fails to mention more nuanced dynamics and does no analysis of the situation, I made an exception to making relevant parts public. This article covers: Worries about ‚Äòquiet layoffs.‚Äô  A few days ago, Business Insider  reported  that Meta is doing ‚Äúquiet layoffs,‚Äù which could mean as much as 15% of employees being let go. I talked with engineering managers at Meta to find out how much truth they see in this claim. They told me the numbers are incorrect, and shared more details.  Exclusive. Will Meta do layoffs?  This is the question on everyone‚Äôs mind who I talked with at Meta. I outline possible options and give my opinion on the likelihood of layoffs in the coming months.  Analysis . 1. Worries about ‚Äòquiet layoffs.‚Äô On Tuesday 4 October, in the article, ‚ÄúFacebook is conducting ‚Äòquiet layoffs‚Äô‚Äù, reporter Kali Hays  wrote  in Business Insider: ‚ÄúMeta (...) is undergoing ‚Äòquiet layoffs‚Äô through shifting performance expectations that could affect as much as 15% of the company's workforce, several employees told Insider. Executives told directors across the company that they should select at least 15% of their teams to be labeled as \"needs support\" in an internal review process, one of the people who spoke with Insider said.‚Äù The reference to 15% of staff being labeled as ‚Äúneeds support,‚Äù was  repeated  on the anonymous social network Blind. It got my attention because it would be unusual for the company to do this so abruptly ‚Äì at least within engineering. So, I followed up with current engineering managers-and-above personnel within the company. The 15% ‚Äúneeds support‚Äù claim is not accurate for several engineering organizations.  Here is what I have confirmed, though: 1. There  is  a new performance review process happening.  From this year, Meta is moving to a 1-year performance process, as I detail in  Inside Facebook‚Äôs engineering culture : ‚ÄúPerformance reviews are referred to as PSC (performance summary cycle.) Starting from 2022, they run once a year. Up until 2021, performance reviews ran every 6 months. A more lightweight performance review cycle runs every 3 months. This used to be called the midpoint-check-in. This is now called quarterly check-in or ‚Äútouchpoint‚Äù. The goal of this check-in is to prevent surprises during the performance review.‚Äù In 2022, the first such quarterly review or touchpoint was April. There is a touch point happening right now at the beginning of October. So yes, the performance review process is new for 2022, but it‚Äôs only new because it‚Äôs different from the previous one, which was biannual (every 6 months.) 2. The ‚Äútouch point‚Äù system is being ironed out.  A manager I talked with confirmed the ‚Äútouch point‚Äù system is being worked out on the hoof. This also explains why some engineers were surprised to learn a new ‚Äútouch point‚Äù was due in a few weeks from today. It‚Äôs normal with a new performance system for it to take some time for everyone to get all the details. I know this all too well; at Uber, changes in performance review and promotion systems were frequent. Every change led to some confusion and miscommunication between HR, managers and employees. 3. There has always been a ‚Äúneeds review‚Äù target for engineering organizations and this hasn‚Äôt changed.  Talking with a tenured senior manager, they shared there has always been an organization-wide target for ‚Äúneeds review,‚Äù of around 10%. They said the target has not been moved. In their words, ‚Äúperformance review is business as usual.‚Äù Other engineering managers also shared that the 10% target has not changed. Note, I have only talked within engineering. It could well be that some organizations have been set a higher target, as Business Insider reported that higher figure. Increasing or decreasing the target for the ‚Äúbottom bucket‚Äù during calibrations is one of the most common tactics for controlling attrition. As an engineering manager, I‚Äôve observed this tool being used both to reduce attrition in a market where holding on to employees is key, and to increase it when the business wants to encourage attrition. An example of playing with this target comes from Amazon. In 2015, the New York Times published an  in-depth report  on the internal dynamics within Amazon, detailing the often cruel processes of firing people, writing: ‚ÄúLosers leave or are fired in annual cullings of the staff ‚Äî ‚Äúpurposeful Darwinism,‚Äù one former Amazon human resources director said.‚Äù The article resulted in negative press coverage for Amazon. I was told by former employees that the company reduced its annual ‚Äúunregretted attrition‚Äù target (URA) from 6% to zero, that year. The next year, however, to the surprise of managers and directors, the new target was set at 12%, to make up for the previous year.  Read more about Amazon‚Äôs performance improvement plan culture (PIP) and URAs in  Inside Amazon‚Äôs engineering culture . 2. Will Meta do engineering layoffs? The elephant in the room, when I talk with current Meta employees, is layoffs. More specifically, will there be layoffs in engineering? During my conversations, few bring this up early, but when we get to it, the speculation starts. And it always ends in the same conclusion: It‚Äôs all down to what Zuck decides. Managers tell me it‚Äôs clear the strategic decision ‚Äì and whether layoffs happen ‚Äì will be made by Zuck. And the engineers I talked with came to the same conclusion. So, let me attempt to put myself in the shoes of C-level personnel at Meta, and those of Zuck himself, and answer the question of whether the company  needs  to do layoffs. To do so, let‚Äôs go back to our financial data about Facebook‚Äôs revenue and profit, and add in one more dimension: the cost of the engineering organization. In public reports, there is no line item for ‚Äúengineering organization spend.‚Äù However, most of software engineering is considered as research and development (R&D) spend, as opposed to selling and general admin expenses. So, we can use R&D spend as an indicator of engineering spend. Let‚Äôs review how this spend has changed over the past 10 years: Meta‚Äôs revenue, profits and R&D spend the past 10 years. Note that the 2022 values are marked as the trailing 12 months‚Äô revenues. Let‚Äôs take a look at what these numbers looked like, in terms of growth rates versus the previous year: Changes in Meta‚Äôs revenue, profits and R&D spend the past 5 years. It‚Äôs clear the issue is that revenue is not growing in 2022, but R&D expenses went up by 20%, which decreases profits. Those R&D expenses increases comprised the hiring sprees of late 2021 and early 2022 at Meta, preparing to invest into the Metaverse. Now, let‚Äôs go back to our graph of profits. The obvious goal Meta leadership will have is to increase profits. So let‚Äôs draw this out: The goal Meta should have: increase profits (net income) in 2023 following a certain 2022 decline. So, how will they reach this goal? Well, option one could be to hope for revenue to miraculously increase, and to keep hiring as before. This, of course, would be a foolish strategy. But can we increase profits, even if revenue grows only slightly? Turns out we can: by either keeping R&D costs at bay, or slightly decreasing it: How to increase profits even if revenue won't grow much? Make sure R&D doesn't grow: and that it slightly decreases. The sensible strategy is for Meta to not hire more people and let profits catch up to where they were before. And, to be fair, this was exactly what Zuck said during the Q&A on 30 September; that he thinks it‚Äôs likely Meta will likely be smaller in 2023 than it was in 2022. Meta likely doesn‚Äôt need to do layoffs, because attrition will take care of itself.  We previously covered  what is good, average and bad attrition at tech companies . At publicly traded companies, 10-15% annual attrition is average, and it‚Äôs safe to assume that without doing anything, Meta would see 5-10% of people leave over a year.  Read more about attrition in the deeepdive  Good Attrition, Bad Attrition for Software Engineers . So far, all we‚Äôve seen is the company freezing hiring - including rescinding internships - but nothing beyond this. There is speculation on whether the end-of-year performance process will be used for ‚Äòquiet layoffs‚Äô, but I have my doubts about this, as Meta invests heavily in managers and I can‚Äôt foresee anything but a backlash, if the company were to force an unreasonable quota on managers. I expect headcount reallocation and no backfills to be common in the upcoming period.  The challenge that Meta faces with stalling growth reminds me of how Microsoft struggled with slowing growth around 2013, when Satya Nadella took over as CEO. Back then, the company managed to do a turnaround without major layoffs, using headcount reallocation as a tool. Engineers within Meta are used to moving teams, so allocating people to new teams should be easy enough. Heck, the company has already started doing it, for example by shutting down its newsletter product, Bulletin, and redirecting the team to work on its discovery algorithm instead, according  to TechCrunch . CEO Mark Zuckerberg has been remarkably consistent in that the approach is about reducing headcount growth. In July 2022, on the Q3 earnings call, he  said : ‚ÄúGiven the continued trends, this is even more of a focus now than it was last quarter. Our plan is to steadily reduce headcount growth over the next year. Many teams are going to shrink so we can shift energy to other areas, and I wanted to give our leaders the ability to decide within their teams where to double down, where to backfill attrition, and where to restructure teams while minimizing thrash to the long term initiatives.‚Äù Just because Meta doesn‚Äôt need to do layoffs, doesn‚Äôt mean it won‚Äôt.  As much as I‚Äôd like to be able to predict what may or may not happen at the company, there‚Äôs plenty of information I don‚Äôt have which could influence this decision. I would repeat that the first round of layoffs at any company has a  devastating impact  on the culture. So far, everything I see seems to suggest Meta‚Äôs leadership wants to avoid layoffs at all costs. Meta was the first company to  partially freeze hiring in March of this year,  and the moves of  not extending return offers to interns in July  and rescinding intern offers in October all seem to serve the goal of protecting  current  employees.  Read more about executing layoffs humanely if there's no other choice in the article  Preparing for layoffs in tech . If you enjoyed this article,  subscribe to The Pragmatic Engineer Newsletter  to get issues like this in your inbox. These were two out of the eight topics covered in last week‚Äôs  The Scoop . A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  additionally covers: Meta rescinds intern offers for 2023 in London . In a first for the company, Meta has rescinded offers for what seems like a large group of interns. These interns had been due to start in January 2023 at the London office. What could be behind the rescinding of these offers?  Exclusive . Will FTE offers be rescinded by the company?  Rescinding intern offers were worrying enough that a software engineer with an outstanding offer got on the phone with a recruiter at Meta to find out if their full-time position is safe, or it could also be rescinded. The recruiter shared the official stance of the company with this person.  Exclusive . Developers on the Rotational Engineering program are being transitioned out.  Meta has a Rotational Engineering program where, after a year of rotating between teams, engineers become E4 software engineers and graduate to join a team. Now, these engineers cannot join any teams and must leave the company.  Exclusive . The mood inside Meta.  I talked with half a dozen software engineers and managers to get a sense of how employees feel.   Exclusive. Meta closing an office building in New York City.  The company is closing its 225 Park Ave office. Is this a bad sign for the team? I talked with a software engineer based in NYC, and found out it‚Äôs not.  Exclusive. Meta‚Äôs historic growth challenge.  The company‚Äôs growth is under more pressure than it has ever been, and in a worse strategic position than Apple, Google, Amazon or Microsoft. Why is this and what can the company do to get out of this situation?  Analysis . Read the  full The Scoop here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/strategy-of-joining-late-stage-startups/", "title": "Is the strategy of joining late-stage startups for the financial upside, a dead end?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of six topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe . Between 2010 to 2021, one of the best strategies for maximizing your total compensation as a software engineer was to follow this recipe: Identify late-stage, fast-growing, private companies which seemed close to going public. Join the company, negotiating a large equity package on top of a competitive salary. Stay around until the company goes public. Cash in on the rising stock price. While this strategy didn‚Äôt work every time, it did for a remarkable number of tech employees. It was a strategy I mentioned in the article  Finding the next company to work at  as well. Although anecdotal, I know a few software engineers ‚Äì mostly based in the US ‚Äì who became millionaires thanks to this strategy. Once they had an exit, some went on to try and repeat the formula at other companies. In Europe, I also know of several people who, although they didn‚Äôt become millionaires, did make enough money to pay off most of their mortgage with a similar strategy. In the New York Magazine article  Confessions of an overnight millionaire , an employee at a newly IPO‚Äôd company shared how they felt about getting rich overnight: ‚ÄúAfter I joined, people would say things like, ‚ÄúI think I‚Äôll retire off this money.‚Äù I thought they were delusional. Then, last year, a friend called and said, ‚ÄúAre you ready to be a millionaire? Check the news.‚Äù That‚Äôs how I learned my company was IPO-ing. I had no idea. I would be making north of $6‚ÄØmillion. (...) The money is and isn‚Äôt life-changing. At this point in my life, nothing is going to change. What would I do differently? I‚Äôm only having as much fun as my peers are.‚Äù I found relatively little data on just how many millionaires were minted by IPOs, but here are some telling numbers: 600 Facebook employees  ‚Äì about 20% of staff ‚Äì could have become millionaires during the 2012 IPO of the company,  according to  a Quora answer. Business Insider  estimated  this number to be more than 1,000 at the time. 140 Expensify‚Äôs employees  ‚Äì 40% of staff ‚Äì likely become millionaires during the company‚Äôs 2021 IPO according  to Insider . 350 Paytm employees  likely became millionaires during the 2021 IPO of the company, Outlook India  wrote . The strategy is not without risk. Some companies did not go public and employees couldn‚Äôt realize these gains. Even when they did go public, the stock might have traded lower than employees had hoped when the 6-month lockup period ended. Stock dropping steeply is what happened at Uber, where I was working when it IPO‚Äôd. Employees joining after 2016 were awarded double-trigger RSUs priced at $48 a piece, and the company IPO‚Äôd at a $45 share price. However, six months later when employees could sell shares, Uber stock was trading at $26 a piece. Still, the strategy of joining late-stage start-ups was pretty sound, thanks to a several things: Stock markets going up.  The public stock markets were rallying. This meant the total compensation packages of those working at publicly traded Big Tech kept going up. Competing with Big Tech.  Private, late-stage companies offered similar compensation packages to Big Tech ‚Äì and then some. If a software engineer was already working at a publicly traded Big Tech, it would have made no sense for them to leave for the same total compensation package elsewhere, as their equity would have now not been liquid. So, late-stage private companies often were forced to offer  more  equity to late hires, who could often get more equity than earlier employees held, as a result. IPOs were common.  Up until 2021, there was a steady stream of IPOs. Late-stage companies frequently exited through public offerings. In 2022, there has not been a single major IPO, and the valuation of private companies has dropped steeply.  People who joined late-stage companies in 2020-21 expecting to make big money on an IPO, are without doubt mostly disappointed. Not only is there no IPO in sight for most companies, but the valuation of these companies ‚Äì and the value of any future IPO ‚Äì has greatly reduced. Suddenly, the move that seemed smart not long ago ‚Äì of leaving a publicly traded Big Tech company for a pre-IPO one and waiting for it to IPO ‚Äì looks like a move that might not pay off. Late-stage, overvalued companies will be facing significant attrition.  Experienced software engineers who realize their equity package is worth little, have no real financial reason to stick around any longer. As engineers whose skills are still in-demand, they have a few options which could make more financial sense: a) Join a publicly traded Big Tech company, and increase their total, liquid compensation. But this strategy is becoming more tricky, as Big Tech is slowing hiring. b) Join an early-stage startup, negotiating a similar base salary to what they currently make, and equity with far more upside than their current package. c) Negotiate a salary raise and equity bump, to make up for the drop in valuation of the company. In my experience, this last one is the hardest to do, especially when working at a struggling company. The dropping market is making the risks of pre-IPO companies much clearer.  I used to detect an almost irrational expectation among some software engineers, who assumed scaleups which raised a lot of money would keep increasing their valuation and go public, then the engineers expected to cash out and get rich. In reality, every company is risky. With public companies, this risk is equally present, but at least the financials are out in the open in the form of quarterly financial results. For private companies, there‚Äôs no requirement to share details which reveal financial health. To be clear, I see a lot of upside in joining fast-growing startups which are not yet public. You get to move fast, often have lots of autonomy, and often get to grow faster, professionally. None of these upsides have changed. What has changed, possibly for good, is that joining late-stage companies is no longer an  almost  guaranteed way to make big money. It most certainly was, for the past decade: but this window of opportunity seems to have closed for the majority of such companies. This was one out of the six topics covered in this week‚Äôs  The Scoop . A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before, and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Klarna‚Äôs headcount changes over time.  How has headcount changed at the company during the past twelve months? I got my hands on some internal data which tells an interesting story.   Exclusive . How many people did Klarna  actually  let go in September?  Klarna executed another round of layoffs at the end of September. Although the company communicated that less than 100 people were impacted, Klarna staff whom I talked with, all said they thought the number was at least 300. Turns out, the people suggesting the cuts hit more people than claimed were right, as I found out after looking at some internal data reports .  Exclusive . Hiring freeze at Lyft.  The #2 ridesharing company in the US has fully paused hiring. How does Lyft‚Äôs situation compare to Uber‚Äôs, and can we read anything else into this move?   Analysis . Is Klarna offering a separation package for some people to leave the company?  The troubled buy-now-pay-later provider is upping expectations for some people and teams, and is offering a package for people who choose to leave. What is the mood inside the company? I talked with employees to get the scoop.   Exclusive. Meta bracing for a reorg?  The company paused bootcamp graduations and people cannot move teams. Is doing so normal, or should employees be bracing for something unusual?   Exclusive. In this issue, we also cover numbers on Klarna‚Äôs explosive headcount growth - and its recent shrinking: Klarna‚Äôs headcount growth 2021-2022. More details  here . Read the full The Scoop . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-scoop-pollen/", "title": "Pollen‚Äôs enormous debt left behind: exclusive details", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe . Pollen, the events festival tech startup, went bankrupt in August after raising more than $200M in venture funding. In  an exclusive investigative article , I covered the events and details leading up this bankruptcy. On 16 August 2022, the administrator, Kroll, took over the company with the goal of returning as much capital to creditors as possible. On 10 October 2022, the administrator sent its first report to Pollen‚Äôs registered creditors, and I got my hands on a copy. Pollen had a complex corporate structure consisting of 8 companies . The administrator mapped out the corporate setup of Pollen, which was the entity called StreetTeam Software Limited, incorporated in the UK. The corporate structure of Pollen. Source of some of the graphics: Statement of Proposals document by Kroll Pollen‚Äôs assets were offered for purchase at $2.5M before it shut down.  According to the administrator‚Äôs report, Pollen received an offer on 9 August ‚Äì one day before entering administration ‚Äì to be sold for $2.5M. The directors, after discussions with secured creditor, Global Growth Capital, decided to not take this offer and to market the sale of the company more widely, hoping for higher bids. The company therefore entered into administration on 10 August, and was marketed to other potential buyers. Kroll sent out a teaser document to 154 potential buyers, 14 of whom indicated interest, signed an NDA and met with management. Not one of them went on to make an offer. On 14 September, the company which had previously offered $2.5M lowered its offer to $500K and asked for Just Experiences Limited to be included, which it wasn‚Äôt before. On 28 September, the same potential buyer lowered its bid to $250K. The Pollen assets being sold are limited to its technology stack, the Pollen brand and shares in Abode Records Limited. The administrator notes that the fixtures, fittings and equipment are unlikely to have any value realization due to their age and condition. The company had ¬£280K ($313K) in its bank account upon entering administration.  These funds have been frozen by the administrator. However, this amount is subject to an R&D claim from the UK tax office, the HMRC, and so might not be available to creditors. Pollen kept operating for the past two months in the hope of a sale.   The administrator is using existing funds the company had in various bank accounts to maintain operations. Additionally, Global Growth Capital ‚Äì the investor first in line to receive any proceeds from the bankruptcy ‚Äì has provided funding for consultants to maintain the technology and software to facilitate its sale. Given how little value the company seemingly has, and no interest except from one party, a sale is likely to happen soon, unless this potential buyer drops out. Pollen owes ¬£75M ($83M) to creditors, meaning employees are unlikely to see a dime of their owed wages.  Here‚Äôs how the stack of claims line up, in order of priority: 1. Secured creditors: ¬£18.6M This claim is for Global Growth Capital S.A.R.L which issued credit to Pollen, back in February 2020. The administrator forecasts there will be insufficient funds to enable a distribution to be made to the Secured Creditor, or other creditors lower down the list. 2. Preferential creditors: ¬£607K. This amount is for employees‚Äô claims of pay in arrears, holiday pay and pension arrears. 3. Unsecured creditors: ¬£59.4M. This consists of: General unsercured creditors: ¬£24.3M. Includes vendors and funds who lent money to the company. Employees: ¬£3.1M Pensions: ¬£110K HSBC overdraft: ¬£64K HSBC bank loan: ¬£50K Shareholders with claims: ¬£2.2M Convertible loans: ¬£29.1M AMEX: ¬£91K Employee expenses: ¬£93K Pollen owes money to a lot of software vendors.  Here‚Äôs a list of a few better-known SaaS providers. These claims also help map out the vendor choices of the company: List of SaaS companies Pollen owes money to Recruitment partners Pollen used, but didn‚Äôt pay: Recruitment partners Pollen used, but failed to pay A few other vendors whom the company did not pay: Other vendors whom Pollen did not pay The number of vendors Pollen used should be unsurprising for engineering leaders, but it may still raise some eyebrows.  The list I share is only a subset of all the vendors used; it only includes those that registered their claims in the hope of seeing some of it paid. Pollen used many vendors not on this list, but those vendors likely did not think it worth the effort to claim money they will not get. An example is Atlassian, which terminated Pollen‚Äôs JIRA and other products, after months of non-payment. To me, the charges from Monday.com are surprising, both in how much higher they are than any other SaaS vendor, and how Monday.com seemingly allowed such a huge bill to accumulate. The SaaS debts also reveal interesting details about Pollen‚Äôs tech stack. For example, how it used both AWS and  Vercel , adopted the pragmatic approach of paying for a specialized virtual queuing solution by  Queue-it  over building its own, and how Pool was a  Retool ,  Airtable  and  Grammarly  customer. Read more on what happened at Pollen in the deep-dive  Inside Pollen‚Äôs collapse: ‚Äú$200M raised‚Äù but staff unpaid . This was one out of the five topics covered in this week‚Äôs  The Scoop . A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before, and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Struggles at Sketch.  Just weeks after Figma was sold for $20B to Adobe, the design platform Sketch laid off 30% of its staff. I talked with Sketch employees to find out what happened to the company which enjoyed a meteoric rise in popularity in around 2015. Why did Sketch change its approach from sustainable growth to hyper-growth?  Exclusive . Rescinding offers before a mass layoff: yay or nay?  At least two Sketch new employees started on Monday, only to be let go on Tuesday. Should the company have rescinded those offers in advance, paying severance and saving everyone time? I talked with founders with experience of similar situations, and it‚Äôs a nuanced question.  Analysis . Compensation philosophy revamp at Netflix.  The company is set to deliver details on compensation changes to all staff starting 24 October. But leadership prepared staff to  not  expect an increase. Why is this, and is Netflix making a mistake by not raising most salaries?  Exclusive. Tech layoffs ongoing.  In what is sadly unsurprising, VC-funded companies keep laying off staff. Details on Brex, AtoB and Felyx. But could the pace of layoffs be slowing? I think so.  Analysis . Read the full The Scoop . Update: on 26 Oct 2022 - clarified that funding for Pollen's current operations partially comes from existing funds in their bank accounts. ¬† \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/big-tech-hiring-slowdown/", "title": "The Big Tech Hiring Slowdown Is Here and it will Hurt", "content": "\n             This issue was written in Oct 2022, sent out to all subscribers of  The Pragmatic Engineer Newsletter  in October 2022. The observations on how Big Tech hiring will slow down have since been validated, with Meta not only  laying off  in November, but also  rescinding  offers in January 2023, and Amazon  doing the same . If you want to get the pulse of the industry in your inbox,  subscribe . In  the latest issue , I deliberately did not go deep into recent layoffs, even though there have been some. Just to touch on them: Snyk  ‚Äì a cybersecurity startup valued at $8.5B let go  198  employees (14% of the company.) I  broke  this news about many engineering leaders and software engineers being affected. Mindbody  ‚Äì a subscription-based fitness marketplace, which bought ClassPass, laid off  400  employees on Wednesday 26 October. I also  broke  this news and my sources report those let go include product managers, leadership and a few software engineers Zillow  ‚Äì a real estate tech company, let go  300  employees as  per TechCrunch . These are not small numbers, even if we know the majority of redundancies are usually not software engineers. In fact, they tend to be the minority. I collated the total number of reported layoffs across tech companies through 2022 to date, using the layoffs tracker site,  Layoffs.fyi . In total, 92,558 layoffs have been reported in this database for this year, at the time when this article published. Again, the vast majority of layoffs were not tech roles, nor software engineers. Some of the biggest reported numbers, like Getir laying off ~4,000 couriers, or Booking.com laying off ~2,700 customer services representatives, did not impact tech workers. My estimate is that 10% of the total number were likely tech jobs, so about 10,000 positions made redundant. The Big Tech Hiring slowdown will be felt far more next year, than the layoffs were in 2022.  We know more than 90,000 people could have been laid off in total, based on Layoffs.fyi data. How does this compare to the number of hires Microsoft, Google and Meta made during the past 12 months? I crunched the figures, and here are the results: Headcount changes at Microsoft, Google, and Meta over the past 12 months. The three Big Tech giants have hired over 90,000 new employees during this time. These three Big Tech giants alone hired more people ‚Äì 92,000 ‚Äì over the past twelve months, than were laid off, as per reports. However, there‚Äôs an important difference: Big Tech hires a much higher percentage of tech roles. It‚Äôs safe to assume that from these 92,000 hires, about a third to half could be in tech, and around 20% related to software engineering. So, about 18,000 software engineering positions could have been hired by these three Big Tech companies the past year - well outpacing the 10,000 - possibly even less - positions laid off as per the Layoffs.fyi stats. We can expect all three companies to pull back significantly on hiring. Meta will almost fully stop, Microsoft is holding back until at least the end of the year, and Google is proceeding more cautiously. In their own words: Microsoft: ‚ÄúOur sequential headcount growth from Q1 to Q2 will be minimal.‚Äù Google: ‚ÄúOur Q4 headcount additions will be significantly lower than Q3 (10K people hired in Q3.)‚Äù Meta: ‚ÄúWe expect hiring to slow dramatically and to hold headcount roughly flat next year relative to current levels.‚Äù I can‚Äôt help but reflect on the article  Layoffs don‚Äôt tell the whole story  by Lightspeed Ventures partner  Nnamdi Iregbulem , in which he made the point that hiring freezes have a wider knock-on effect on the industry, than layoffs do. In September, I  wrote : ‚ÄúWhat I find more worrying is when Big Tech hits the brakes, and puts hiring freezes in place.‚Äù Well, Big Tech has hit the brakes: hiring freezes are in place and I am, indeed, worried. Just three Big Tech companies slowing down hiring will have a larger impact on the industry than the 2022 layoffs do. We‚Äôve not even mentioned other large companies like Amazon, which has already frozen hiring, Snap, Netflix, and others which could follow. What will this Big Tech slowdown mean for the rest of the tech industry?  I expect to see a ripple effect throughout the coming year, even if Big Tech reverts to previous hiring patterns later in 2023. Here are a few observations: AI and ML seems to be the one ‚Äòsafe place‚Äô to get hired across Big Tech.  The only area that Microsoft, Google and Meta all made clear that they are investing in ‚Äì meaning, hiring specialists ‚Äì is AI. This means that AI engineers, ML engineers and data researchers, as well as related positions in AI, will be the best routes into these companies. So, would it be a strategy to try and specialize in AI, starting now? It‚Äôs hard to tell. We are, after all, talking about Big Tech which tends to hire PhD or Masters-level people to new and specialist fields as new grads, and are more likely to hire experienced AI professionals, assuming they can find them. AI is a new field, so I expect all of Big Tech to approach academics and seek to attract people with years of experience in this field to join them. For software engineers, Google and Microsoft are the most likely places to get hired.  Meta seems like the place which will recruit the fewest software engineers. This is because the company has enough and it‚Äôs likely to move them around to work on projects such as Reels or Reality Labs, when it needs more. Also, Meta is expecting to be hiring fewer people in total in 2023. The hiring situation at Amazon, Google, Meta, Microsoft. Google is seemingly still hiring the most, while Meta is hiring the least in this group. Getting a Big Tech position will become more competitive than in the previous years.  An unspoken benefit of working at a well-known company is the pedigree and cache it carries, and how it can make getting future jobs easier. A hiring manager tends to perk up when they see a software engineer with experience at a well-known company like Google or Meta, versus when they worked somewhere less high-profile. Of course, this is a generalization, but it stands that Big Tech experience is valuable not only when looking for the next job, but also if you decide to consult; it can be easier to attract clients and also investors ‚Äì if you turn into a founder. Over the past 12 months, Big Tech has likely hired more people than during any previous 12-month period. However, we‚Äôll now see a sharp reduction in hiring. So, what will be the impact? Well, Big Tech will see just as much and possibly even more applications for fewer positions. This means more competition for each position, and will likely create an even higher hiring bar for these sought-after roles. New grads and less experienced software engineers will be hit hardest.  With Big Tech slowing hiring, there will be a buildup of people who want to get into Big Tech, but will find no openings. The build up of these people is not just less experienced engineers, but also experienced developers. Experienced software engineers who want to move companies will likely choose the next best opportunity, for example at scaleups still recruiting, or more traditional companies which want to become more tech-first. However, with more experienced engineers going to companies they would not have previously considered, this would start a process in which all companies can hire more senior people than they could when there were no hiring freezes in Big Tech. Where does it all end? It becomes much harder for new grads to get their first position. After all, why would any company settle for a new grad when they have the budget to hire someone more experienced, and can do so? The only places left hiring new grads will likely be companies which pay at the bottom of the market ‚Äì which cannot afford more experienced people ‚Äì and those which prioritize hiring new grads, even though they have the budget to recruit more experienced people. Big Tech is in the latter group and will keep running internships and new grad programs, which will most likely be a lot harder to get into. Despite the market cooling, hiring will feel challenging for most hiring managers.  Big Tech won‚Äôt be hiring much and compensation packages will stop increasing. This will mean it will be much easier for companies with headcount to fill, to hire, right? Wrong. This cooldown is happening in what feels like recessionary conditions. In such uncertain times, more people will stay put where they are, even if it means making a bit less money. Changing jobs is more risky; if the new company does layoffs, new joiners are most likely to be first out. So, despite the cooling hiring market, it still won‚Äôt feel easier to hire.  As a side note, a place where you might find it easier to hire software engineers and engineering managers is ¬† The Pragmatic Engineer Talent Collective  - assuming you have a strong engineering culture in place.  Read testimonials  of startups successfully hiring and  apply here . This was a bit more than halfway in one out of the five topics covered in this week‚Äôs The Scoop.  Read the full issue  for more of my predictions on what the Big Tech hiring slowdown will mean for career progression, for experienced software engineers, for those working in Big Tech and for hiring managers. The full issue also covers: Amazon: a sudden hiring freeze.  Starting this week, several units within Amazon have put a temporary hiring freeze in place, expected to last until January 2023, at least. However, some parts of the business are unaffected. I talked with people inside Amazon for a clearer picture on where hiring has been frozen and where not ‚Äì at least not yet.   Exclusive . Meta: expect the hiring freeze to stay through 2023.  Revenue is down at the social media giant, while the number of employees has risen sharply to 87,314. So, expect very little hiring until the end of next year. Could layoffs be on the table as a way of cutting costs? I share my view.  Analysis . Google: slowing hiring for the remainder of 2022.  The search giant published somewhat disappointing earnings results and confirmed hiring will slow, in general. Still, the company plans to grow certain teams. Which areas are most likely to be hiring?  Analysis. Microsoft: not hiring because business is good ‚Äì but not great.  Microsoft posted standout results, and is the only Big Tech company which seems to be unaffected by the prospect of recession. So why is the company hitting the brakes on hiring, and which organizations might be exempted?  Analysis. Read the full The Scoop. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/turmoil-at-twitter/", "title": "The Scoop: Turmoil at Twitter", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of six topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe here . On Wednesday, 26 October, Elon Musk entered Twitter‚Äôs headquarters in San Francisco with a sink, marking his arrival at the company he‚Äôd just bought. Obviously ‚Äì given Musk is a heavy user of Twitter ‚Äì the sink was an unsubtle reference to a popular Twitter meme, ‚Äúlet that sink in.‚Äù On Thursday, 27 October, an all-hands meeting was announced for all staff, but then canceled a few hours later, Platformer  reported . This was likely because Musk was in the process of firing CEO Parag Agrawal, CFO Ned Segal, and Vijaya Gadde, the company's head of legal policy. That evening, Musk  tweeted  ‚Äúthe bird is freed.‚Äù From that moment on, things sped up for many software engineers at Twitter. On Friday, they were told to print out their code for Musk and Tesla engineers to review it.  Tech journalist  Casey Newton  ‚Äì who is also a fellow Substack writer ‚Äì  reported  how events panned out, in Platformer: ‚ÄúOn Friday, though, some engineers began to receive requests from Musk‚Äôs intermediaries. He would like to see the most recent software code that they had written, the engineers were told. And he would like them to print the code out and show it to him. According to four current employees, engineers spent Friday afternoon at Twitter dutifully printing out their code in anticipation of meetings with Musk and some of his senior engineers from Tesla. Other engineers were told to prepare for ‚Äúcode pairing‚Äù with Musk, in which they would sit with him and review code together.‚Äù Employees dutifully ‚Äì and no doubt incredulously ‚Äì printed out reams of code. Any software engineer knows printing code makes no sense at all. Reviewing code is done on the computer because it‚Äôs more efficient, because you can jump between revisions, see who made which change, and so on. Printing it loses all this metadata. Anyway, here‚Äôs a Twitter employee with a printed selection of her code written over the preceding 30 days: Happy Friday all.  pic.twitter.com/Rk9m1v1hmu ‚Äî Leah Culver (@leahculver)  October 28, 2022   Then, a few hours later, new instructions came from the top: stop printing and shred all documents with the code! I have since talked with several software engineers. Not one of them had their printed out code reviewed, not by Musk himself nor anyone else. On 29 Oct, Saturday morning, a new project kicked off, with the first demo due on Monday morning.  Engineers tell me they woke up on Saturday to find a new, company-wide initiative of the highest priority: shipping a feature for anyone to be able to pay for verification ‚Äì the high-status ‚Äòblue tick.‚Äô The launch date was set for Monday, 7 November, with more granular demos and milestones slated in. The first demo was scheduled for Monday, 31 October, in the morning: only two days later. The deadline of Monday for the demo clearly implied people had to work the whole weekend to make it happen. Although engineers report nobody was told that this overtime was required, the feeling was that failing to work all weekend carried the high risk of getting fired, in the context of employees already fearing large layoffs lay ahead. I talked with several software engineers who all volunteered immediately to help and cleared their whole weekend diary in order to have any hope of making the Monday demo. Building the verification functionality requires work on the backend, web, iOS and Android apps. While Twitter currently supports full-remote work, it was clear the only way to get a demo shipped by Monday was to collaborate faster ‚Äì which meant doing so in the office. While most engineers showed up in the San Francisco headquarters, colleagues in other regions also joined in remotely, including from London. Several engineers slept in the office Saturday night in order to work more and hit the deadline.  There was so much to do that several slept on couches and at least one engineer used a sleeping bag they‚Äôd had the foresight to bring along. Over the weekend, very good progress was made. I‚Äôm told all streams closed dozens of tickets, and the pace of work was fast. Some of the changes have already been shipped to the App Store, sitting behind a feature flag. Software engineer Jane Manchun Wong has  uncovered  some of these feature flags, including how the Verified tab will likely be introduced on Twitter. A week after Musk‚Äôs acquisition, employees have still not heard anything official from leadership.  There has been no email, no town hall and no official communication on what is next for the social media giant. What are Musk‚Äôs plans; will there be layoffs, will stock vesting or compensation change in some way? I talked with several software engineers at Twitter who all told me the same thing: people are following the news for leaks. Software engineers are expecting large layoffs to happen, very soon.  Although people have received no official news, Elon Musk has previously  told employees  that he plans to cut 75% of Twitter‚Äôs workforce - then  denied  it. On Monday, 31 October, The Washington post  reported  layoffs are expected to be at 25%. Within internal employee groups, speculation is rampant about the size of these layoffs. Here‚Äôs what some current software engineers say are popular speculations. All are unconfirmed, but I want to share them to give a sense of the uncertainty for people inside the company: There‚Äôs a screenshot circulating of a layoff list with 3,738 names on it, from circa 7,500 employees. It‚Äôs being treated as fact by employees that the Goldbird organization, which includes lots of software engineers and also builds ads products, will be cut from ~700 people to about 150. There‚Äôs a rumor the Goldbird org could be cut down to as few as 10 people, when negotiations started. Many engineers in the US were expecting layoffs to begin early this week, which didn‚Äôt happen. Now, engineers fear the layoffs might start on Friday, or early next week. It‚Äôs rumored Twitter is targeting not just a 50% headcount cut, but a 50% operational expenditure (OPEX) cut as well.  Several engineers are tasked with investigating which systems can be scaled back or turned off completely, to reduce cloud operations costs. I‚Äôm told Twitter is spending more on Google Cloud than it has previously committed, and the goal is to get this spend down to the very fewest commitments, and then some. All vendors with whom the company is spending a lot, are expected to be reviewed. I reveal later in this issue that this is happening at LinkedIn, too. It should be a warning sign for software-as-a-service (SaaS) companies. Several software engineers have been fired on the spot in the US, including those who worked all last weekend.  Senior Director of Engineering, Taylor Leese, was summarily let go on Sunday. Likewise software engineer Manu Cornet ‚Äì described as ‚Äòthe most productive web engineer at Twitter‚Äô by someone I talked with. Both announced this fact on Twitter. To give a sense of how these layoffs went, Manu  shared  his side of the story. Without prior warning, he received an email from HR stating ‚Äúyour recent behavior has violated multiple policies.‚Äù The policies were not shared, and he was cut off from all systems, and terminated. The termination email: The termination email software engineer Manu Cornet received from Twitter. Source: Manu Cornet‚Äôs  blog . The mood inside Twitter went from generally hopeful to generally bad, in just a few days.  I talked with several software engineers before Musk took over. I got the sense people felt that Twitter was missing leadership and direction, and many hoped that Musk would bring them both. However, no one expected the immediate, forced crunch Musk imposed on parts of the company. Still, with the heat on ‚Äì and the immediate threat of layoffs ‚Äì plenty of people rose to the challenge; hoping to prove they‚Äôre valuable enough to keep on, and embracing the new urgent pace which was previously absent. The presence of Tesla engineers is unnerving for some. I‚Äôm told Musk brought more than 60 with him to Twitter, most from Tesla. These engineers are actively involved in building the verification feature. Some engineers told me they fear it will be the feedback of the Tesla engineers which decides who is let go and who gets to stay. Several very senior-and-above engineers I talked with, have decided to quit; the question is timing. These people have decided the culture has changed irreversibly. They don‚Äôt want to be part of a Twitter with a similar engineering culture to Tesla. Why is Musk doing so many things considered to be toxic, in a working environment?  Let‚Äôs take a step back and consider what‚Äôs happened so far: Elon Musk bought the company on Thursday. He immediately fired the CEO and CFO. He did not communicate via official channels with employees; no email, no town hall. He is publicly mocking Twitter‚Äôs existing processes, including the new manager training. He‚Äôs brought in external advisors and external software engineers, whom current Twitter employees feel are calling the shorts. He said he‚Äôd fire 75% of staff, then walked back on this. He put artificial, very aggressive, deadlines in place. He indirectly mandated working over the weekend by setting a Monday morning demo deadline, on a Saturday. Elon Musk is the world‚Äôs richest person based on his wealth accumulated in businesses like Tesla, SpaceX and The Boring Company. Therefore, we can assume he is purposeful and deliberate in doing business. On this basis, the hostility towards employees is surely intentional as well. My view is that he‚Äôs doing it for a few reasons: To transform Twitter‚Äôs culture to be like that of his other companies.  A software engineer who formerly worked at Tesla summarized the culture at Tesla, as: ‚ÄúWhen Elon says ‚Äòjump‚Äô, you say ‚Äòhow high?‚Äô You don‚Äôt ask if you should jump at all. This is the culture.‚Äù He‚Äôs already decided to lay off a large part of the workforce.  Twitter is losing money and Musk has previously publicly stated he feels the company is bloated. On Twitter, he  wrote  on Sunday: ‚ÄúThere seem to be 10 people ‚Äúmanaging‚Äù for every one person coding‚Äù He can kill several birds with one stone, this way.  By setting a seemingly impossible deadline to build a complex feature ‚Äì verification for anyone who pays ‚Äì Musk gets several things done, at the same time. First, he‚Äôll score a publicity win by shipping faster than Twitter has shipped before. On the way, he gets to identify the hardest working and most dedicated employees who don‚Äôt complain. Several people will quit. He has some criteria to base the layoffs on. And he‚Äôs now permanently changed the culture, so that going forward, sudden ‚Äúimpossible‚Äù projects can be expected, as will working weekends to fulfill them. Because this is how his other companies work.  Working weekends and sleeping in the office might be strange to hear for us in tech: but this is how Musk‚Äôs companies commonly operate. Musk has led by example in working very long hours and expecting others to follow. The only difference is that thanks to Twitter employees being more public about what is happening, we‚Äôre getting more details about this working style. The working culture Musk is putting in place is more toxic than at any other well-known tech company.  My view is that what Musk‚Äôs doing is unnecessarily harsh. He could get similar results with a more considerate, less aggressive, approach. Twitter is not some startup fighting for its life while running out of money. It‚Äôs an established company that has operated in a stable way, making modest losses. Toxic workplaces are things I happen to have some experience with, as I joined Uber in a comparable situation in 2016. The CEO Travis Kalanick set an arbitrary deadline to rewrite the full Uber app, which gave most engineering teams about 3 months to do this epic undertaking. I wrote about this story in-depth in  Uber's Crazy YOLO App Rewrite, From the Front Seat . However, there were important differences. While several of us also worked weekends, we never feared being fired if we did not. Also, Travis told the company at the end of 2015 that he expected to see a new app by the end of 2016; so the news was no surprise. Finally, our deadline was not a week or two away; we had a months‚Äô long runway for this challenging project. In the end, the project burnt out so many people ‚Äì there were mass resignations at the end ‚Äì that the next rewrite of the Driver app saw a much more considerate approach. At Twitter, Musk clearly wants to make the company profitable in record time, and doesn‚Äôt care about employee wellbeing, or how supportive the culture is. And should we be surprised by this? This is the same Elon Musk whose other company, Tesla, conducted mass layoffs in secret, offering one week of severance to people laid off on the spot, as I cover  in The Scoop #15 . Musk might be the richest person in the world currently, but he‚Äôs certainly not the ideal boss for people who value weekends for themselves and their families. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Meta delays the starting dates of new hires to February 2023.  All new software engineering hires in Europe who were meant to start before February 2023, have had their starting dates pushed back until 14 February, next year. Why has the company made this unexpected move, and what about those who may miss out on up to three months of salary, as a result?   Exclusive Hiring freeze and expenses to be cut at LinkedIn.  LinkedIn‚Äôs leadership announced a hiring freeze, no backfills, and will cut down on expenses. I talked with insiders about why this is happening. Unexpected bad news from inside one of the fastest-growing organizations at Microsoft.   Exclusive . The Big Tech hiring slowdown keeps spreading.  Apple was the last major tech company which kept hiring. Well, it now expects this will change.  Analysis . A large spike in layoffs.  Stripe, Lyft, Chime, MessageBird, Onfido, Opendoor are just some companies that laid off this week. What is happening?  Analysis . The Good Scoop.  Positive news stories from across the tech industry.  A new experiment. Read it here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/cruel-changes-at-twitter/", "title": "Cruel Changes at Twitter", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe here . Last Thursday, I covered  the turmoil at Twitter , of how people worked long hours through the weekend and how most expected layoffs of about 50%. On Friday, 4 November, Twitter started to let go of about half of its staff, around 3,700 people. It‚Äôs extremely rare to see layoffs of this size; some of the largest layoffs I‚Äôve covered this year were no larger than about 30%. It‚Äôs even rarer for such deep cuts to be executed so quickly. Well-executed layoffs usually take weeks to plan, and I‚Äôve yet to see such deep cuts put together in such a short timeframe. Tech journalists Casey Newton and Zo√´ Schiffer wrote the article,  Twitter, cut in half , on how the layoffs happened. I recommend  reading the full piece . At 8pm PST on Friday, employees were told by email that they‚Äôd be notified by 9am on Saturday as to whether they were laid off or still in a job. Elon Musk did not communicate with employees during this time, and would also not sign the final email letting people go. As Platformer  wrote : ‚ÄúAfter the layoffs, we asked some of the employees who had been cut what they made of the process. They told us that they had been struck by the cruelty: of ordering people to work around the clock for a week, never speaking to them, then firing them in the middle of the night, no matter what it might mean for an employee‚Äôs pregnancy or work visa or basic emotional state. More than anything they were struck by the fact that the world‚Äôs richest man, who seems to revel in attention on the platform they had made for him, had not once deigned to speak to them.‚Äù Who got laid off seemed to make little sense. Some software engineers who worked over the weekend to ship the Verified functionality on a tight deadline were let go. Another software engineer refused to do any work during the weekend and was expected to be fired, but they were not. Seniority seemed to have played a role in who stayed. According to my sources, in Europe, only senior-and- above engineers were spared. In the US, most staff-and-above engineers were also not let go, as per my sources. It took only one day for Twitter to start calling back some people who were laid off, but whose expertise was still needed.  Tech reporter Casey Newton  broke the news  that Twitter started calling back people on Sunday, 6 November, barely 24 hours after dismissing them. As per his reporting, managers were told to nominate people who could help if they returned. iOS and Android engineers were high on the list. On Monday, 7 November I talked with a software engineer who received such a call back that same day. They said they got a call from an unrecognized number Monday morning, inviting them back with a deadline of less than 10 minutes to decide. This person declined the offer. Talking with more employees, I was told the calls became more frequent, and that most software engineers and engineering managers were saying ‚Äúno‚Äù to this offer with a deadline attached. Employees warned each other to not answer calls from unknown numbers. People also looked into whether Twitter could force them back to work as it just fired them and they were technically serving their notice. Employees came to the conclusion that even if they accepted, they would be entitled to the severance the company had already communicated that it would pay. I find it staggering these layoffs were so badly organized that almost immediately some of the people affected had to be called back. This suggests those who put the lists together of who to fire, failed to consult those on the ground who keep Twitter‚Äôs services running. The first few days after layoffs were predictably quite messy.  The day after the layoffs, engineering managers still did not know who on their teams was staying or going. Some people turned to query LDAP to see if the SSH keys for those usernames were still active. If not, that person was gone. If yes, they were still around. I talked with a software engineer who was assigned to be oncall for systems they did not know about. When they tried to get more information, they found the team which built the service had been let go. I talked with another software engineer based in Europe whose manager was let go. Their new manager, now based in San Francisco, organized a group meet and greet meeting for 1am in Europe, with more than half of their new group based in this region. Barely anyone from Europe showed up. Predictably, resignations kept following all week.  After any layoff, it‚Äôs to be expected that more people leave. In my experience, a rule of thumb is to expect about half of the amount of people let go to leave voluntarily in the months after a layoff. For example, when laying off 10%, it‚Äôs sensible to expect another 5% leave afterwards. When letting go of 50% of staff, it‚Äôs not unreasonable to expect another 25% to leave. So, the resignations kept flowing in. A good portion of principal engineers either handed in their notice or are in the process of doing so. Many of these people had been with Twitter for 5+ years. Some built the first versions of the systems Twitter runs on. I am told that managers grew increasingly worried about the stream of resignations and how few people accepted offers to come back to the company. On the night of Wednesday, 9 November, the Chief Information and Security Officer, Chief Privacy Officer and Chief Compliance Officer all resigned. Experienced software engineers leaving should be worrying because of the complexity of Twitter.  Talking with long-time Twitter engineers, they told me the site has a complex architecture for a very good reason. It was built to allow for safe and fast tweaking of any part of Twitter, making it easy for developers to iterate. However, Twitter was not built to make architectural changes easy, and structural changes are admittedly difficult and so need to be done with caution. Twitter has on-premise data centers and I‚Äôm told that deploying Kubernetes on top of this was already a massive undertaking thanks to all the custom infrastructure. Twitter is unique in how configurable the infra team has made infra-level tweaks. There are multi-level feature flags used at the infra layer, which is highly unusual as feature flags usually live within the application layer. Elon Musk announced the launch of features already built, for which the whole team was fired.  On Twitter, Elon Musk went on an announcement spree, sharing how Twitter will launch longform messages and better search. I‚Äôm told this came after he saw internal demos of these features, which were almost ready to launch. The longform messages feature is called Notes, internally, and has been in the user testing phase. On Monday, 7 November, a director asked about how feasible it would be to ship this feature to all users. The engineer who replied said that it‚Äôs hard to tell, given the team that built all of it ‚Äì the backend engineer, iOS and Android engineers and engineering manager ‚Äì have either been fired or quit. Again, to me it shows just how chaotically the layoffs were orchestrated. Most remaining engineering teams outside of the San Francisco headquarters have one thing on their roadmap for the next year: cost cutting.   Out of the three data centers operating, the engineering team is investigating shutting down one, to leave the company with two DCs. There‚Äôs also a push to significantly reduce their spend on Google Cloud. Going forward, managers are expected to have 20+ person teams and spend at least 20% of their time coding.  One of the very surprising changes for managers and engineers is how the management structure is changing. Most L6 engineering managers who were not let go, and were line managers, were instructed that they are to be individual contributors. Managers now have at least 20 reports, and are also expected to code 20% of the time. The above changes are like nothing I‚Äôve seen at any tech company. Most don‚Äôt have managers take on more than 12 reports because it‚Äôs hard enough to give all of them the attention required. When I was an engineering manager at Uber, I purposefully did not code and I felt close to burning out when I was managing 14-16 people directly. I expect most managers to do a poor job of managing people, do some alibi coding on unimportant tasks to make Elon happy, and burn out during the process. And better managers know this, already. One new engineering manager was honest with their direct reports about this change. They told reports that going forward, they cannot manage their career, they cannot take care of feelings, and they‚Äôll have very little time for them, as they now need to be coding. Twitter is getting rid of remote work, instructing employees to immediately return to the office.  Elon Musk sent out his first email to all staff at Twitter just before midnight PST, on Wednesday. The email has the subject ‚ÄúDifficult times ahead‚Äù, painted a dire picture of Twitter‚Äôs economic prospects and said that Twitter will not survive the upcoming economic downturn without subscription revenue becoming roughly half the company‚Äôs revenue. The email closed by saying that starting on Thursday 10 November, everyone would be required to be in the office for 40 hours per week. The only exceptions are people who are physically unable to travel to an office, and exceptions that Musk personally approves. This message caused immediate uproar among employees. This is because not only did the company announce permanent Work from Home in 2020, but hired a large number of employees as full-remote employees as per their employment contract. I am told the HR team has been caught off guard by Musk‚Äôs email and are scrambling to put a formal policy and communications in place for this change, as there is currently none. Internally, on Slack, a current legal employee wrote that their personal view is that Twitter employees do not have an obligation to return to the office, especially with no notice given. This employee also reminded peers that Twitter‚Äôs ex-security lead, ‚ÄòMudge‚Äô became a whistleblower by reaching out to  Whistle Blower Aid . In the middle of the chaos, the sweeping changes are creating opportunities for people who are ready and willing to step up.   While many are leaving and just as many are looking for jobs, there are some who, amid this chaos, are leaning in. A Director of Product  shared  a picture of herself sleeping in the office and has since become a key figure in coordinating with Elon about new features, and  making  product announcements. A staff engineer has also been promoted to manage a large group, without having been a manager before - likely a testament on how much Elon values software engineering experience over management experience. What is happening at Twitter?  My head is spinning from hearing all of the rapid, cruel, and likely regulation-breaking changes at the company. What is happening? I think back to Musk saying that he wants to reduce headcount by 75%, something he later  walked back on . But it sure seems he is hell-bent on getting the workforce reduced by this amount. After letting go half of the staff, he‚Äôs putting in place changes that are designed to create voluntary attrition. My view is Musk is playing with fire by cutting down on headcount so quickly, then encouraging more people to leave. We could see Twitter experience larger outages in the coming weeks and months, stemming from software engineers making changes to systems they don‚Äôt understand and not having colleagues with expertise to turn to, as they have left. Also, while he is reducing headcount, he is putting the same culture in place as at his other companies, like Tesla or SpaceX. At these places, managers have 20+ directs, managers are expected to be hands-on, and working from the office is mandatory. While Musk has all the right to implement processes and management structure as he sees fit, I find no excuse on  how  he is doing all of this. He offers no compassion or respect for employees who helped build Twitter, and employees feel that he is outright hostile towards them. Just the fact that in two weeks, he managed to send a single email to employees - and that email was an ultimatum on returning to the office effective immediately - summarizes his attitude towards employees of the company he bought. Elon has broken all unwritten - and may written - rules of how tech companies operate. Tesla and SpaceX are both companies where hardware is arguably just as important - if not more important - part of their success than software. Elon Musk turned both companies into roaring successes with a similar management style which he‚Äôs bringing to Twitter. It will be educational to see how this same management style will work at Twitter, which is a pure software company, which does not have an inspiring mission or challenging problem space that could compare with Tesla or SpaceX. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: A change to The Scoop . A bid to bring you more positivity and interesting news, to counterbalance bad news about layoffs. A Staff+ peer group success story at MongoDB.  A staff engineer noticed they rarely worked with similarly experienced colleagues. So they started a peer group and have shared how it‚Äôs going. Plain: behind the scenes of an API-first customer support platform.  The two-years-old startup just raised $6M and I talked with their CEO and engineering team to get some more insider details. What tech stack do they use? How easy or challenging was the fundraising?  Exclusive. Success stories.  A senior software engineer bouncing back from burnout, a healthcare medical assistant turned software developer, and an eye-catching parental leave policy. Read the full issue here. Update on 12 Nov: the article previously stated that no staff and above engineers were let go. Updated to ‚Äòmost staff and above engineers were not let go‚Äô after getting confirmation of one such layoff. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/layoffs-2022/", "title": "The Scoop: Tech Layoffs in 2022", "content": "\n             I get  a lot of scoop  sent by readers (thank you!). Sadly, in 2022, a good part of the scoop is about companies laying off people. Some of this scoop has not been reported before. I don't want to broadcast layoffs on Twitter or LinkedIn continuously, but also don't want this information to be lost. This page collects scoops I receive, some of which might not have been reported elsewhere. For a  far  more complete overview of layoffs, please see  Layoffs.fyi . November 2022 16 November Hopin . The 3rd layoffs in 2022, combined with the  transformation of the company . Hopin said 17% of staff was let go. The VP of Product, Directors, Head of Data Science all let go.  Verified.  Source . 15 November Typeform  (SaaS for building+analyzing surveys): expected to impact ~30% of the ~470 employees. \"We did not meet our anticipated growth of 45% and fells hort of our goals\". ARR of the company is $79M in Q3, and is anticipated to be at $82M at end of year, vs the $105M forecasted.  Verified . Babylon Health  (healthcare tech: schedule doctors from your device): let go of ~100 people from a staff of around 1,500.  Verified . Productboard  (SaaS for creating product roadmaps): 20% of people let go, about 100 people.  Verified .  Source . 14 November Pipedrive  (a sales customer relationship manager platform): 143 employees let go (~15%). Most of this is from R&D, a big part of it engineers. Reason: less growth than expected - the company's focus is SME. Some key engineers let go, some newer teams also let go. \"Definitely some good talent to pick up from the alumni.\"  Verified .  Source . 10 November Wistia  (video marketing SaaS) let go 20% of staff, about 40 people.  Verified . 8 November Beat : full shutdown.  Beat  was a ride-sharing company operating in Greece and Latin America, with a large tech hub in Amsterdam. In Daimler acquired the company for $43M and kept operating it. On 8 November, Daimler decided to shut down Beat, including letting go ~600 people, ~170 of whom were software engineers. A skeleton crew will operate the service until the end of 2022. Daimler has decided to focus on their other ride-sharing service, FREE NOW, which is also a competitor to Uber in Europe. In Mexico, the company had a large initiative with private drivers and a fleet of Tesla cars. That operation is in talks of selling to other investors. Meta  - 13% layoffs. Widely-reported, e.g.  here .  7 November Domino Data Lab  (data workflow platform, Series E). 25% of their workforce laid off. Engineering and design are impacted.  Verified. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/who-is-hiring-2022/", "title": "Who is Still Hiring Software Engineers and EMs?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe here . This article was updated in December 2022. In the midst of gloomy news about hiring freezes and layoffs, let's highlight companies which are growing ¬†and hiring. I asked people to share companies which are hiring software engineers and engineering managers, and to provide the following details: What  does the company do, in one sentence? Roles  being hired for. Locations . One good thing about the place , as shared by the person submitting it. Link  to more information, or to apply. I was hoping for 100-200 companies hiring, but the final list contains well over 1,300: Companies hiring software engineers and engineering managers.  View the full list here . View the whole spreadsheet here.  What I especially like about this set is that people have said what they like about places, and frequently added even more context in additional comments. I feel this list is a nice counterbalance to the grim news about widespread headcount reductions. There‚Äôs a lot of places which are growing and looking for new colleagues to join! This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Meta‚Äôs historic layoffs.  I have long maintained my opinion that Meta was unlikely to do layoffs, and terminating employees should be avoidable. Yet, Meta let 13% of staff go a week ago. Why did the company do this, and where did I go wrong with my prediction?  Analysis . Twitter 2.0: full reset.  Only three weeks after taking over the company, Elon Musk seems to be pushing for a full culture ‚Äì and personnel ‚Äì reset at the social media company.   Exclusive details . GitPod‚Äôs product roadmap.  The cloud deployment environment scaleup has raised $25M in funding. I talked with the co-founder and CEO about their plans, and how GitPod is different from GitHub Codespaces.  Exclusive . Adyen: investing while others are laying off.  Adyen is a competitor to Stripe, processing a similar number of bookings, aka gross merchandise value (GMV). Their CEO issued a note to explain why they will not reduce headcount.  Analysis . Read the full issue here  \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/twitter-cruel-treatment-of-software-engineers/", "title": "Twitter‚Äôs ongoing cruel treatment of software engineers", "content": "\n             Originally published on 24 November 2022. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe here . I was really hoping to not report anything more about Twitter, and that software engineers at the company would get space to heal after the traumatic events, and to focus on building the product. As a reminder, in three short weeks Twitter‚Äôs software engineers have gone through all this: Week 1 : After working through the weekend, ~50% of staff were let go. More in the article  Turmoil at Twitter . Week 2 : Some of those fired were called back within a day, when management realized they were key people. Most software engineers declined the offer. Remote work was canceled overnight, and managers were told they now have to code for at least 20% of their time, while managing 20+ reports. More in the article  Cruel changes at Twitter . Week 3 : Those criticizing the company leadership were terminated without warning. Elon Musk issued a two-day ultimatum for remaining employees who had to confirm they want to be part of ‚ÄúTwitter 2.0‚Äù, signing up for ‚Äúextremely hardcore‚Äù long hours at high intensity. Those who did not agree got 3 months of severance. The deadline for opting in to ‚ÄúTwitter 2.0‚Äù was last Thursday, 17 November. As the deadline came and went, it emerged that many fewer than expected software engineers had opted into this new ‚ÄúTwitter 2.0‚Äù with worse working conditions,  I reported . Elon Musk sent out an email which relaxed the draconian new remote work ban, and set up meetings with key engineers in an attempt to persuade them to stay. Some employees were offered up to $100,000 in raises to stay, Platformer  reported . Still, more than 1,000 employees quit that day, taking voluntary severance. Most of the software engineers I was talking with at the time, who still worked at Twitter, took the severance to end what was weeks of torture. Twitter immediately announced it was closing its offices that day. As of the time of publishing, Twitter‚Äôs total employee count based on active LDAP accounts is down to 2,675 from about 7,500 just a month ago. The following day, with offices closed, something strange happened. As  per Platformer : ‚ÄúOn Friday morning, things got even stranger. At around 9AM PT, Twitter engineers received another missive from Musk: ‚Äúanyone who actually writes software, please report to the 10th floor at 2pm today,‚Äù he said. He asked remote employees to fly to San Francisco to present. ‚ÄúThese will be short, technical interviews that allow me to better understand the Twitter tech stack.‚Äù  Employees were dumbfounded. Hadn‚Äôt Twitter just closed the offices? Nevertheless, roughly 250 people signed up to meet with Elon Musk and show him how Twitter‚Äôs technology works.‚Äù For software engineers in Europe, things got weirder as Twitter started accepting resignations which were never tendered.  Those who did not click ‚Äúyes‚Äù on Musk‚Äôs ultimatum that they commit to ‚Äúextremely hardcore‚Äù working hours ‚Äì which made no sense in Europe, given how contracts operate ‚Äì were sent emails from Twitter‚Äôs HR department informing them that their voluntary resignation had been accepted. Except none of these people resigned voluntarily. Software engineers were locked out of systems in the UK and several countries in Europe, and found themselves at the start of strange personal battles. They are still employed, but unable to access Twitter‚Äôs systems, and are exchanging emails with the company‚Äôs US HR team, asking for their work access to be restored so they can continue to perform the duties in their contracts. Twitter‚Äôs US HR department seems to have a hard time understanding that the USA is not the world, and that in several countries, people cannot be fired over email, nor can local employment regulations be ignored. After three weeks of cruel treatment, the remaining tech employees were hopeful that things would finally quiet down.  And at the start of this week, it looked possible. On Monday, 21 November, Elon Musk told employees that the company was done with layoffs. Remaining employees whom I talked with breathed a sigh of relief at this. Musk also said the company is now hiring for software engineers, and encouraged people to make referrals, Alex Heath at The Verge  reported . The next day, software engineers were told they have to send a weekly summary of their work. The instructions read: ‚ÄúMoving forward, every Friday (this week, on Wednesday), please email the following weekly update to (redacted)@twitter.com with the following format: - Subject line: ‚ÄúWeekly update, name, dept, and date (eg ‚ÄúWeekly Update, John Smith, SWE, 11/20) - Email body:  ¬†- What project you are working on (eg Blue Verified)  ¬†- What you are trying to accomplish (eg reliably collect the $8 payment)  ¬†- Code samples / Phabricator links of code written that week‚Äù Then, right before Thanksgiving, more software engineers were fired without warning and dozens were put on performance warnings.  On the night of Wednesday, 23 November, several software engineers were notified over email that their employment was terminated, claiming that their code was ‚Äúnot satisfactory‚Äù. No more details were provided. They received this email after submitting the weekly update, as requested the previous day. This is the email one person received: ‚ÄúHi, As a result of the recent code review exercise, it has been determined that your code is not satisfactory, and we regret to inform you that your employment with Twitter will be terminated effective immediately.‚Äù People terminated were offered 4 weeks‚Äô severance if they signed a separation agreement. This severance feels insulting, given that people who did not opt into being part of ‚ÄúTwitter 2.0‚Äù just one week ago received three months' severance. It feels like Twitter‚Äôs leadership enjoys punishing employees who stuck it out with the company and did not choose the easy way out. Tech reporter Zoe Schiffer  estimated  that about 50 software engineers were let go this way. Several people let go are on visas, and they were fired at the worst possible moment in the year. Those on H1B visas in the US have 60 days to find new employment, else they need to leave the country. By terminating them at Thanksgiving, these people enter the job market at the quietest time of the year in the US. Between Thanksgiving now, and the holidays in December, most companies slow hiring, and will only pick up in January. Software engineer  Yiwei Zhuang  was one of such visa holders let go. He worked at Twitter for nearly 4 years, and now has 60 days to start a new job. He  wrote  that he was terminated with no reason, and said people on parental leave were also fired. For dozens of software engineers who received a performance warning, it means they may well soon be let go. Talking with several of them, they estimated that 30-40% of remaining software engineers at Twitter received a warning email. This email explained it was being sent to ‚Äúbring to your attention our concerns regarding the quality of your coding ability,‚Äù and that ‚Äúfollowing the completion of your code review exercise, it has been determined that you are not meeting the expectations of an Engineer at Twitter.‚Äù People were told that in the coming days, their manager will reach out to discuss the next steps and how ‚Äúnot meeting expectations could result in termination of employment.‚Äù The message closed with: ‚ÄúPlease use this opportunity to restore our confidence and demonstrate your contributions to the team and company.‚Äù I talked with a current line manager at Twitter, who was unaware of these performance warnings until their direct reports received them. Remaining software engineers I talked with told me they are afraid that they could be fired any time, just like their peers who were let go with no explanation. One speculated that what is happening is a politically motivated cleansing, with managers choosing to fire developers they personally don‚Äôt rate, using ‚Äúunsatisfactory code‚Äù as an excuse, which may be deployed against anyone at any time, going forward. We have to ask the question: why is Elon Musk creating what seems to be the most toxic working environment among major tech companies in 2022?  For the fourth week in the row, Musk keeps turning up the heat and finding new, cruel ways to make it clear to current software engineers that their jobs are not secure. First, there were ~50% layoffs, where external engineers from Tesla and SpaceX had the final say on who stayed or went. Next, it was firing people who criticized the leadership, even if it was done internally on Twitter‚Äôs Slack. Then, it was making the remaining employees pledge to work long hours. And now, it‚Äôs firing based on arbitrary coding reviews without any feedback. Why put people through multiple rounds of firings? Why keep laying people off three days after Musk said layoffs were completed? I don‚Äôt have the answers, but what Musk is doing is managing through fear. Software engineers now know that the only way they can be safe is to submit code that counts as ‚Äúhardcore,‚Äù every single week. What is satisfactory code in Musk‚Äôs opinion? No one can tell. In what is hard to comprehend, Twitter is actively trying to recruit back experienced engineers who resigned last week.  I talked with current software engineers at the company whose managers asked them for recommendations on who to ‚Äúbring back‚Äù from those who resigned last week. Managers are hoping to get former, experienced engineers back because many teams are deprived of institutional knowledge and manpower. I have a hard time working out who would want to return, given the cruelty and senselessness of how Twitter fires people for opaque reasons based on a code review, without warning. I also don‚Äôt know who will opt to join Twitter, knowing this is how the company operates and that they will have less job security than in any other job. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Amazon‚Äôs rolling layoffs and Google doing performance check-ins.  Both Amazon and Google have avoided layoffs, but for how much longer?  Analysis. Will Google start to pay less, over time?  An investor owing $6B of Google stocks thinks the tech giant‚Äôs pay is overly generous, and that it should reduce packages. Could Google do this?  Analysis. The Ukraine tech job market in wartime.  Demand for senior software engineers is increasing, but less experienced professionals are struggling. Could this be indicative of global trends?  Analysis. Monta: an EV charging software management startup.  The Danish, electric vehicle charging management software startup put open salaries in place and has shared details on how this experiment went, as well as some details about its tech stack and the company.  Exclusive. Read it here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-scoop-rto/", "title": "A Return to the Office (RTO) Wave?", "content": "\n             Originally published on 8 December 2022. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe here . On Thursday, 29 November, Snap CEO Evan Spiegel, sent an email announcing Snap will mandate 4 days/week in the office, starting from January. He wrote: ‚ÄúI‚Äôll never forget the day in 2020 when we closed our offices and began to ‚ÄúWin from Home‚Äù (...) We‚Äôre a global company, with more than 30 offices, and our team will always be distributed - but today we are sharing a change we are making to how we work as a company. I believe that spending more time together will help us (...) Starting February 27th 2023, we are adopting a ‚Äúdefault together‚Äù model where team members are expected to spend (...) an average of 4+ days/week of their time in office.‚Äù Since 2020, Snap has been ‚Äúdefault remote‚Äù and hired lots of people not within commuting distance of its offices. Such a U-turn in approach is a notable change and I can‚Äôt help but wonder if this is a deliberate bid to further downsize its staff. Snap did introduce a process for asking for an exception for RTO, and people in three groups can apply for this: People with overly long commutes to an office (more than 1 hour, on way) People hired in cities without a Snap office People who need medical accommodations Snap's leadership asked people to submit exceptions by end of week - 9 December - and said they will decide on exceptions by the end of 2022. According to internal chatter, about 30% of software engineers have asked for an exception, and managers are still unsure how many of the exceptions will be approved.  As a reminder, in May 2022 Snap  announced  a hiring slowdown,  laid off  20% of staff in August, shut offices like  Zenly‚Äôs office in Paris , and posted a net loss of $359M in Q3 2022 - four times more than in 2021, while revenue only increased by 6% year-on-year. In other words, the company needs either a sharp growth in revenue, or more reduction of costs. And a forced return-to-office is sure to result in voluntary resignations, especially among people unable or unwilling to spend almost every day in the office. Six months ago, Big Tech attempted to get people back in the office.  In March in  The Scoop #5 , I covered RTO announcements: ‚ÄúMicrosoft kicked off the return to the office announcements on 14 February, giving employees 30 days to return to the office in their Redmond headquarters. Google joined in on 2nd March, informing staff that starting 4 April, employees will be expected to be in the office three days per week in some US, UK and APAC offices. Apple joined in on 4th March. Tim Cook sent an email to Apple employees informing them that starting 11 April, returning to the office will be mandatory for 3 days per week.‚Äù However, shortly after the announcements, all companies delayed the deadlines for returning to the office. In the end, it was Apple where people returned to the office in a staged fashion, working 3 days/week  by September . It feels to me that a new RTO wave is starting.  I‚Äôve been talking with software engineers and managers at a variety of companies which have all mandated returning to the office during the past weeks. Here are some of them. Twitter: 5 days/week, effective immediately.  Following Elon Musk taking over the company, the full-remote culture has ended and employees are expected to work from the office. They  are expected  to work through the holidays in December, while in the San Francisco headquarters the company has  converted  office rooms into bedrooms so employees can sleep at work.  Here is a recap  of the strange events at Twitter during the past few weeks. Twitter does have a process to ask for exceptions from RTO. On 9 November 2022, Elon Musk made this gap really narrow, though. As I covered earlier in  Cruel changes at Twitter : ‚ÄúTwitter is getting rid of remote work, instructing employees to immediately return to the office. Elon Musk sent out his first email to all staff at Twitter just before midnight PST, on Wednesday. The email has the subject ‚ÄúDifficult times ahead‚Äù, painted a dire picture of Twitter‚Äôs economic prospects and said that Twitter will not survive the upcoming economic downturn without subscription revenue becoming roughly half the company‚Äôs revenue. ¬† The email closed by saying that starting on Thursday 10 November, everyone would be required to be in the office for 40 hours per week. The only exceptions are people who are physically unable to travel to an office, and exceptions that Musk personally approves.‚Äù Since then, Musk has relaxed the conditions for remote work slightly, for software engineers. Now, engineering managers can approve their direct report to work remotely. However, when doing so, it was made clear the manager is personally responsible for the performance of their direct, and could lose their job if the person does not perform well working remotely. For anyone wanting to maximise job safety, the safest bet at Twitter is still to work from the office, five days a week. DAZN: 5 days/week, effective immediately.  DAZN is the ‚ÄúNetflix for sports.‚Äù Here, the CEO sent an email on Friday, 2 December, mandating to spend 5 days/week in the office as of Monday, 4 December. He allowed until the end of January to resolve location issues which render employees physically unable to go to the office. I talked with engineering managers at the company who told me they see this as a move to force people to resign, and thereby do cost cutting without having to pay severance. DAZN has hired people who live 3-5 hours drive away from the nearest office, and it is impossible for them to commute every day. An engineering manager shared the company was looking to downsize in the UK already, so this move will likely achieve that goal. Guidewire software: 4 days/week.  Guidewire builds an insurance software platform, employs about 4,000 people and is headquartered in California. It announced the policy of 4 days/week in the office, with leadership telling staff they want to see more human interactions, and that they don‚Äôt see the company succeeding as a remote entity. A public US tech company: 3 days/week, and tracking employee work location.  At a publicly traded tech company valued at $20B ‚Äì which I‚Äôve been asked by the manager I talked with to not name ‚Äì the guidance is for people to spend 3 days/week in the office. Recently, engineering managers were given a tool where they see a dashboard showing which location their people worked at, on a particular day. This dashboard likely uses WiFi data to determine the physical location, and was distributed so managers can get automated reporting on people‚Äôs work location to enforce the 3 days/week policy. Google: 3 days/week, and more people following the guidance.  Google is an interesting place. In theory, people should be working 3 days/week from the office, but software engineers told me most people ignored this guidance. Until recently, most offices were empty. However, an engineer told me how some teams have had their director and manager press the issue by asking them to come in for 3 days/week. I‚Äôm also told that fear of potential layoffs are prompting more people to go to the office proactively ‚Äì especially if their manager is in. Datadog: 3 days/week.  From November 2022, new starters are no longer offered remote positions, and are expected to work in the office. As of recently, the company expects all staff not on a remote contract to spend 3 days/week in the office. The company‚Äôs main offices are in New York and Paris, with smaller offices across Europe and the US. Remote roles are exempt from the return to the office and Datadog still hires full-remote roles for senior+ engineering positions. Bloomberg: 3 days/week.  In New York, financial software and data company Bloomberg has had guidance to spend 3 days/week in the office. However, they left individual decisions up to managers, who didn‚Äôt enforce this. In October 2022, the company instructed teams to choose 2 ‚Äúshared in-person days,‚Äù when everyone on the team is in the office, with the third day left for people to decide. I talked with a software engineer who feels that Bloomberg is relaxed about the policy. This person did not come into the office for 3 days/week, but hasn‚Äôt been notified that this is a problem. Salesforce: 3 days/week.  During a company all-hands meeting this week, leadership announced their intention to increase the amount of time in office, from 1 day/week to 3 days/week. There currently is no hard requirement to meet this target, but I hear that people feel pressured to come in 2-3 days/week. Commuting is especially a problem for those who live far away from their workplace and have to drive 2 hours or more. Visa: 3 days/week, with badge tracking.  The financial services company has mandated: US: Monday, Tuesday and Thursday Europe and a few other locations: Tuesday to Thursday. The remaining two days of the week are work from home. Until now, this was not enforced, but automated tracking of badges starts in January. So, are we seeing the start of a Return to the Office wave?  It definitely feels like it. A surprisingly large number of companies have announced a RTO policy this week or last week, often starting from January or February, next year. However, I see a few differences in companies‚Äô approaches and motivations: Seeking to encourage voluntary attrition.  Snap and DAZN both announced forced returns to the office, with 4 or 5 days/week. These companies previously hired people who don‚Äôt live within commuting distance of their workplaces. And both businesses are making losses. Connecting the dots, forced RTOs look likely to serve as layoffs without being called as such. As a bonus, the companies will see remaining staff return to the office. Putting a hybrid working model in place was always the goal.  Companies like Apple, Google, Visa, Lego, Bloomberg and Salesforce never said they were going full-remote. Pre-pandemic, they had most employees working 5 days/week. Following this black swan event, the new approach is 3 days/week from the office, and 2 WFH. Formerly committed to remote work, and no backtracking . Robinhood and Mailchimp each previously committed to being remote-first companies. With Mailchimp, its new owner Intuit will most likely change this policy. For Robinhood, all the fanfare of announcing a commitment to remote first looks likely to add up to nothing more than a U-turn on this decision. Make no mistake, plenty of companies are staying remote-first. I‚Äôm especially seeing startups sticking with their remote-first policies, where the founders are committed to this pattern and find it works for them. I expect to see more tech companies mandate a 3 days/week return to office.  Businesses which will most likely do this are those like those in this article: large tech companies with hundreds or thousands of employees and office space they intend to make use of. These are companies which had people working at the office before the pandemic, and didn‚Äôt decide to adopt full-remote, beyond when necessary during lockdowns. I would expect to see fewer companies do the same as Twitter and DAZN, of mandating 5 days at the office and withdrawing all flexibility from employees. Looking ahead, I can see tech companies operating in four distinct clusters, based on work style: Hybrid: ~3 days/week from the office. Remote-first: most people work remotely, with some option to work in an office or a shared workplace. Office-only: 5 days/week in the office. Full remote: everyone works remotely, and the company has no offices. I expect to see lots of movement in companies changing their stance on remote work in the coming months; it‚Äôll be interesting to track developments. This was partway one of five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: More details on RTO.  What's happening at Proton, Lego Group, Sky (UK), Swisscom, Wayfair, Carvana, Mailchimp, Robinhood   and Pinterest. Amazon‚Äôs layoffs, a hiring freeze, and rescinded offers.  Uncertainty and anxiety inside the tech giant, where rolling layoffs are ongoing and offers are being rescinded. I talked with engineering managers to gather their viewpoints and opinions. Also, some good news about oncall changes inside an Amazon org.  Exclusive . Uncertainty at Google.  Support Check-Ins are the talk of staff at the company, as people who received one try to work out how bad their situation is. I talked with engineering managers at Google to get a sense of what‚Äôs happening, and why no one‚Äôs talking about the elephant in the room: potential layoffs.   Exclusive. Budget cuts at Spotify . While the music streaming giant has not done layoffs, it is curbing costs. I talked with a software engineer to discover how staff are taking the changes.  Exclusive . More than 1,300 companies hiring.  An updated list of who‚Äôs hiring software engineers and engineering managers. Read it here  or sign up  to The Pragmatic Engineer . Updates to this article: on 9 December, added more details on Snap‚Äôs RTO and the process of asking for exceptions. Also added details on Twitter‚Äôs RTO exception policy. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-scoop-circleci/", "title": "CircleCI‚Äôs unnoticed holiday security breach", "content": "\n             Originally published on 5 January 2023. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of seven topics in today‚Äôs subscriber-only  The Scoop issue . To get this newsletter every week,  subscribe here . For most engineering teams, returning from the winter holiday usually involves gradually getting back into the swing of things. But today has been anything but a soft landing for customers of CircleCI, who got the email you always dread from a vendor, suggesting CircleCI was compromised and customers' secrets could have been accessed by an attacker during the past two weeks. Here‚Äôs the email CircleCI customers received late on Wednesday 4 January. Emphases are original to the email: ‚ÄúAction request: Out of an abundance of caution, we strongly recommend that all customer take the following actions: Immediately rotate any and all secrets stored in CircleCI.  These may be stored in project environment variables or in contexts. We also recommend customers review internal logs for their systems for any unauthorized access starting from December 21, 2022, through today, January 4, 2023, or upon completion of your secrets rotation. (...)We apologize for any disruption to your work. We take the security of our systems and our customers‚Äô systems extremely seriously. While we are actively investigating this incident, we are committed to sharing more details with customers in the coming days. Thank you for your urgent attention to rotating your secrets. ‚Äù Affected customers are predictably unhappy. The first response has been frustration because of the chaos a breach like this causes: At a scaleup I talked with, infrastructure teams shut down all pipelines in order to replace secrets. This company decided to make the best of a bad situation by taking a few days to implement a secrets rotation mechanism not previously in place. The bigger issue is that customers could have been compromised for up to two weeks, and it‚Äôs all on them to work out if malicious actors could have accessed their systems via leaked CircleCI credentials. Why did CircleCI take so long to detect a security incident? I can only speculate, but it‚Äôs fair to assume that starting on 21 December, people at CircleCI, just like at most companies, were already starting to take holidays, and no one expected anything important to happen. If an attacker was to identify the best time to breach a system and go undetected for as long as possible, then the longest annual period of downtime would be it. It‚Äôs not far-fetched to suspect that the CircleCI team discovered the issue either on 2 or 3 January, and then sounded the alarm to customers. The breach comes two weeks after CircleCI laid off 17% of staff.  I don‚Äôt want to draw any conclusions, but it‚Äôs worth noting that CircleCI let go 17% of staff ‚Äì around 100 people ‚Äì on 7 December 2022, two weeks before the apparent start of the incident.  I asked CircleCI if they let any of their security team go as part of layoffs but the company did not answer my question. The CEO of the company wrote at the time of the redundancies (emphasis mine): ‚ÄúDespite today‚Äôs news, we‚Äôre confident in our business. I believe we have the right strategy to succeed in the long term.  We have the best CI/CD platform on the market by leaps and bounds.  We see that success reflected in the continued growth of our business, adding thousands of high-performing engineering teams to our platform over the past 12 months. Our customers are some of the most innovative, engineering-centric businesses on the planet, and helping them do great work will continue to be our focus.‚Äù Today‚Äôs news on the breach deals a major blow to CircleCI‚Äôs market position. This is because customers expect two things from a CI solution: To do its main task, which is build efficiently To remain secure, as source code is one of the most valuable assets any software company owns CircleCI customers were already targeted by phishing attacks in September 2022.  The company made customers aware of a phishing attack in which attackers stole GitHub credentials. However, the notified companies were given this information under NDA and not allowed to share it externally, one of them told me. This business decided to move off CircleCI because of this incident. Weeks later, the incident became public knowledge and was reported by  The Hacker News.  Attackers gained access to GitHub accounts of organizations. While this attack is clearly not a breach of CircleCI, the fact customers could be tricked into giving access to what they thought was CircleCI indicated a vulnerability. I reached out to CircleCI for comment, and asking for more details about the September phishing attacks that customers were under NDA to not share anything about, but the company just gave a generic response on how they take ‚Äútake customer security and privacy extremely seriously‚Äù and pointed to their  announcement , asking for time to provide more details in ‚Äúthe coming days.‚Äù Security incidents have plagued infrastructure providers over the past year or so.  Travis CI used to be a popular CI solution and a competitor to CircleCI. However, TravisCI was compromised  in 2021 , then again in  the summer of 2022  and then yet again  last December . TravisCI has been terrible at communicating with customers and at this point, in my view, it‚Äôs the least trustworthy CI provider on the market. Heroku was compromised  in April 2022 , with GitHub security tokens stolen by an attacker. What was really alarming about this situation was that Heroku‚Äôs security team did not notice; it was GitHub‚Äôs security team which alerted Heroku of suspicious activity with GitHub tokens. I talked with people at GitHub at the time who told me that, after getting more details from Heroku, the GitHub security team assessed Heroku as a major security risk due to the responses from the Heroku security team. GitHub immediately instructed the use of any Heroku products within its business to stop, and for staff to assume a full compromise on all Heroku keys. Some smaller sites were running on Heroku at the time, and they were turned off, with the secrets and passwords not reused elsewhere. It was a month later in May 2022, when Heroku notified customers of the extent of the security breach, writing: ‚ÄúAs reported on status.heroku.com, on April 7, 2022, a threat actor obtained access to a Heroku database and downloaded stored customer GitHub integration OAuth tokens. On that same day, the threat actor downloaded data from another database that stores pipeline-level config vars for Review Apps and Heroku CI. This was identified on May 16, 2022, after further forensic investigation. We have no evidence of any unauthorized access to Heroku systems since April 14, 2022. As a result, any secrets you set in Review Apps and Heroku CI config vars may have been compromised and should be rotated. In addition, any Heroku tokens stored in these pipeline config vars would potentially have allowed access to your Heroku account between April 7, 2022 and May 5, 2022, when your passwords were reset, invalidating all Heroku tokens as a result.‚Äù In my view, Heroku handled this security incident extremely poorly. For example,  in its public incident update , Heroku did not mention that Heroku tokens stored in pipeline vars were compromised, so it seems as if they tried to put a positive gloss on the public-facing incident. So, how much can you trust your CI provider or your infrastructure provider to not leak secrets?  This is a very good question. Over the past 12 months, Travis CI, Heroku and CircleCI have all failed at keeping customer‚Äôs secrets ‚Äì and therefore their codebases ‚Äì safe. I expect that platforms which design themselves according to a security-first approach will start to gain popularity. It is becoming increasingly risky to give a CI system full access to your code repository, in the way CircleCI or TravisCI expect. An example of a provider offering more thoughtful security is  Buildkite , which  does not store  source code or secrets, as customers run their Buildkite agents on their own cloud infrastructure, behind their own security policies. I reached out to BuildKite‚Äôs CEO, Keith Pitt, to ask why they chose this model. He said: ‚ÄúSecurity is a thing that keeps me up at night. If a CI/CD service gets popped badly, then it‚Äôs basically game over. You get one life with this kind of thing. Having said that: we  do  have access to GitHub webhook data which includes things like commit messages, branch names, locations of changed and added files. And of course, whatever logs are streamed to us from connected agents. Security became a big selling point for us. I‚Äôd estimate that about 50% of our big customers come to us because of security or performance issues with their previous provider.‚Äù GitHub‚Äôs  self-hosted runners  follow a similar approach on hosting build runners in the company‚Äôs own environment, limiting the exposure and leakage of secrets and source code, outside of the company running it. Now is a great time to do a pre-mortem on what could happen if your CI provider gets hacked, and your secrets leaked.  Even if you‚Äôre not a CircleCI, TravisCI or Heroku customer, don‚Äôt assume your provider won‚Äôt suffer a security breach. What sensitive data could be leaked if this happened, and how badly would it affect your business? Do you have measures in place like secret rotation to minimize the damage? This is not just a theoretical exercise; all of Slack‚Äôs code repositories hosted on GitHub were  downloaded by a malicious actor  during the winter break. Slack employee tokens were stolen and then the attacker logged into GitHub and made a copy of all of Slack‚Äôs code repositories. Slack detected this breach on 29 December and  communicated  it on 31 December. Note that Slack did not have its primary codebase hosted on GitHub, but stored that code on an internal repository which was not compromised. Do you want to keep relying on your vendor to keep your codebase secure, or would you rather choose a setup for storing your source code, with CI running inside your own infrastructure? This was one out of the seven topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Twitter‚Äôs first major outage since Musk‚Äôs takeover.  What caused Twitter‚Äôs partial outage lasting hours on 28 December? I‚Äôve talked with people involved in the incident to find out if it may have been connected to Elon Musk personally disconnecting server racks on Christmas eve.  Exclusive . Amazon to lay off 18,000 people and rescinding more offers.  Things are looking grim at Amazon, with the online retailer announcing that layoffs will be larger than was communicated in December. Meanwhile, signed offers keep being rescinded. Could this be a signal of more cost cutting to come across Big Tech?   Analysis . Hiring freezes . Databricks, Asana and Spotify are slowing or freezing hiring: details.  Exclusive . Layoffs picking up with the new year . The first tech layoffs of the year are already in with Salesforce, Vime and Socure. Can we expect these to continue, or is the worst behind us already? My opinion.  Exclusive details on Socure and analysis. Microsoft starting to exit China?  The tech giant is spinning up a new office in Vietnam. But why would the company begin to leave China? And would other US companies be wise to follow in Microsoft‚Äôs footsteps?   Exclusive . SpaceX valued at $142B?  The company is raising $750M of fresh funding and I have more details on revenue numbers, projections, the likely date of an IPO and why Starlink looks like a really big deal.  Exclusive . Read the full The Scoop \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/apple-job-cuts-tide/", "title": "Apple: The Only Big Tech Giant Going Against the Job Cuts Tide", "content": "\n             Originally published 26 January 2023. Two weeks after this article was published, Bloomberg wrote the article  Apple avoids job cuts because it didn‚Äôt overhire like Google and Amazon , repeating a subset of the arguments outlines the article and coming to the same conclusion I have.  Subscribe to The Pragmatic Engineer  to get industry analysis in your inbox, before it makes it as news to more mainstream media outlets. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of seven topics in today‚Äôs subscriber-only article going deep in analyzing  Google‚Äôs historic job cuts . If you‚Äôre not yet a full subscriber, you missed the issue  on Code deployment freezes  this week. To get full issues twice a week,  subscribe here . Over the past months, all major tech companies have announced layoffs. However, there‚Äôs one exception, which also happens to be the world‚Äôs most valuable company by market cap: Apple. Apple has not laid off employees during any of the last two tech recessions, and has resisted doing so, even now.  In 2001, when the Dotcom Bust hit, Amazon‚Äôs revenue declined by 13% and it responded by reducing headcount by 13%. In the next two years, Amazon still reduced its headcount: In 2001, during the Dotcom Bust, Amazon‚Äôs revenue growth slowed sharply. Amazon responded by letting staff go. For the next two years, it slightly reduced headcount, until year-on-year revenue growth was back above 30% in 2004 Apple, however, did not respond in the same way to the Dotcom Bust. Despite a major revenue drop, the company kept hiring: In 2001, Apple‚Äôs revenue declined by 33%. The company did not lay off, but did slow its hiring pace in the following years, until revenue growth caught up In 2009, Microsoft saw a dramatic growth slowdown from 17% revenue growth in 2008 to 3% revenue contraction in 2009. Microsoft let go about 6% of staff ‚Äì 5,000 people. Similarly, in 2009, Apple‚Äôs revenue growth slowed to 15% from 56% the previous year. Apple slowed hiring, but executed no cuts. And Apple has also resisted layoffs when its revenue growth turned negative, in recent times. In 2016, the tech giant posted an 8% decline in revenue, but still did no layoffs. Looking back on the past 20 years, it‚Äôs remarkable that Apple has been the only major tech company to not execute mass layoffs, regardless of how its revenue or profits changed. The last time Apple made significant job cuts was when Steve Jobs returned to the company as CEO in 1997 and  cut 4,100 jobs  from the about 14,000 employees the company had at the time. The company resisted growing quickly when all other Big Tech companies started to hire faster.  Another interesting insight comes from looking at how quickly tech companies have been hiring over the past few years. I crunched the numbers to see how rapidly each business expanded and found that Apple has been the Big Tech that resisted growth the most. Here‚Äôs the comparison of headcount growth of Google, Meta, Microsoft and Apple, and how their profitability changed over the same time period: Headcount growth year-on-year and the change in annual profitability across Big Tech. Apple has had the lowest headcount growth across the group of companies since 2018. In  analyzing why Google did its historic job cuts  I previously pointed to the connection that both Microsoft and Google laid people off after employee headcount growth raced ahead of revenue growth. Let‚Äôs take a look at what‚Äôs happened at Apple since 2011, when Tim Cook became the CEO of the company: Apple‚Äôs profit increases/decreases and employee growth since 2011, when Tim Cook took over the CEO role. Apple has been remarkably stable in growing its headcount at a constant rate, irrespective of profit fluctuation. Even more interestingly, the company did not grow headcount in 2020-2022 as fast as most of the rest of Big Tech did. I asked a long-time, current, Apple software engineer what they thought about Apple‚Äôs strategy of not speeding up recruitment from 2020 onwards. This person said that they feel almost all teams at Apple are understaffed and have had to learn to do more with fewer people. This software engineer also shared that when the market was very heated in 2021 and ‚Äúthe great resignation‚Äù was in full force, Apple did not cave into the higher offers, nor match the high offers other Big Tech companies were making. Although it is not visible in the chart above, in 2020-2021 Apple seems to have done a lot more hiring than in ‚Äúnormal‚Äù years, because it was backfilling for higher-than-normal attrition, as more people jumped ship to other companies for better compensation. Also, I‚Äôm told that in 2021 some teams struggled to fill allocated headcount. What felt painful in 2020-21: not matching Big Tech offers, not increasing the pace of hiring, now looks like a wise move in the current circumstances.  I analyzed the very hot 2021 job market in-depth at the time in the deep-dive  The perfect storm causing an insane tech hiring market . In a small scoop: at least a couple of positions Apple was hiring for were closed on Friday, 20 January. I talked with a software engineer who was on the fourth round of a five-round interview process (recruiter screen; two technical interviews; a systems design interview; hiring manager). This engineer was scheduled to have their systems design interview when their recruiter said that the position had been closed. I asked around at Apple and didn‚Äôt find evidence that this closing of positions was widespread. Several teams are still hiring. As with everything at Apple, engineers and managers have little visibility beyond their immediate teams, so it‚Äôs hard to draw wider conclusions from a few data points. Although it‚Äôs hard to predict the future, everything I‚Äôve learned about Apple suggests that there seems to be little risk in the company deciding on widespread cuts. This is both because of its history of not doing layoffs even when revenue contracted, and also because Apple didn‚Äôt fall into the trap of over-hiring during the past few years. This was one out of the five seven topics in today‚Äôs full article on  Google‚Äôs historic job cuts . The full edition additionally covers: Google‚Äôs sudden and unexpected cuts . In an email sent out at 2am Pacific time, the company terminated 6% of its workforce. ‚ÄúSurprised‚Äù doesn‚Äôt sum up how lots of people processed the news. Earlier warning signs.  Looking back, there were indicators that cuts could happen, even if they were hard to notice. Why did the layoffs really happen?  Google will close the year with more than $66B of profit, it's the second-best year ever. Why make cuts on the back of another very successful year? We do a thorough comparison with Microsoft‚Äôs reduction in its workforce. There are just too many similarities between the two companies. Areas impacted, areas safe, and severance payments.  The cuts were not evenly distributed and some groups were hit harder than others. I‚Äôve talked with Googlers to find out which groups were which. Google‚Äôs ‚Äúrest and vest‚Äù perception shattered?  For close to a decade, Google was known as a place with great work-life-balance, great compensation, and great job stability. How will this perception change? The big picture.  It‚Äôs not all gloom and doom: Big Tech has grown very much in 2022, even when taking the cuts into account. And some areas look to be safer from future reductions than others. Read it here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/pollen-salaries/", "title": "Inside Pollen's Software Engineering Salaries - Exclusive", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one and a half out of eight topics in today‚Äôs subscriber-only issue,  Inside Pollen's Transparent Compensation Data . If you‚Äôre not yet a subscriber, you also missed this week‚Äôs deep-dive on  Becoming a Fractional CTO . To get this newsletter every week,  subscribe here . Pollen was an events tech startup founded in 2015, which raised more than $200M in funding and employed about 600 people by 2022. It defied gravity by appearing to thrive at the same time as the Covid-19 pandemic shut down swathes of the events industry, worldwide. But after a series of layoffs, the company ran out of money and entered administration last August. Today, employees are still owed months‚Äô worth of wages and pension contributions. I covered the collapse of the company at the time in the article  Inside Pollen‚Äôs collapse: ‚Äú$200M raised‚Äù but staff unpaid - exclusive . It remains my most in-depth investigative article. During its existence, Pollen did something very interesting: implementing pay transparency. Every employee could examine a PDF with compensation details for every role at the company. In this week‚Äôs The Scoop, I analyzed this information and dissected it, going well beyond the raw data. Here are a few details from the data points, focusing on software engineering compensation. Pollen‚Äôs compensation philosophy When it comes to compensation philosophies across tech, I have been categorizing companies into three tiers within a model I call the  Trimodal nature of software engineering compensation : The ‚Äútrimodal‚Äù nature of software engineering compensation. Source:  The Pragmatic Engineer blog . Tier 1:  hyperlocal compensation. Companies benchmark against local competitors. These companies typically pay a  base salary . Some might also offer a cash bonus. Tier 2 : competing against all local companies and positioning closer to the top of the local market. These companies typically pay a  base salary  and tend to offer either an  equity  component or  cash bonuses . Tier 3 : competing against all regional/global companies. Much of Big Tech and some well-funded startups belong in this tier. These companies tend to offer a  base salary , generous  equity  and generous  cash bonuses . Overall, Pollen offered a pretty good base salary and a relatively small equity component for most employees. I would categorize Pollen as having been towards the bottom of Tier 2. In what was less usual, Pollen did not pay cash bonuses to anyone. Also, the equity part was unusual at Pollen. Despite this, the company managed to hire strong talent on the engineering side, and its alumni now work at the likes of Cloudflare, Amazon, Bloomberg, Typeform, among others. I asked tech employees why they chose to work at the company, and answers came down to a mix of the support for remote, attracted to a culture of transparency - like with the equal pay report -, the diversity of the team and the career opportunities that came with a seemingly high-growth startup. Equity was unusually distributed and seemingly little valued.  Although Pollen issued equity for all employees, it did not explain the value of its equity. I‚Äôve talked with lots of former Pollen employees and even engineering managers had no real understanding of how their equity worked, and no one had a sense of its value beyond the number of stock units issued. 75% of employees at the company received between 500 and 1,500 equity units that vested over 4 years, with no refresher issued for most. The top 25% of employees received on average about 8,000 units. As per the report, 9 roles within the company received more than 50,000 equity units: The 20 roles which were awarded the most equity at Pollen. Equity awards were for 4 years, and the value of a share was unknown; most likely around $14 at the peak of the company. Employees had no idea what the value of a share unit was, as the company never shared this information. In my analysis, I attempted to put a price tag on the equity units by taking the outstanding number of shares of the company ‚Äì 21 million ‚Äì and using hypothetical target valuations. At its peak, Pollen I estimate Pollen was valued at around $300M by investors, which would have meant a $14 share price. In the end, the equity for all employees ended up as zero, and all the figures for valuations are hypothetical. Still, I find it confusing that the company issued equity, but didn‚Äôt even attempt to convey its value to the vast majority of employees. I find this especially strange given the company brought in several venture capital (VC) firms, the best known being  Northzone , a VC which backed Spotify, Klarna and Personio in the past. Employees at those companies have known the value of their equity since the early stages. Software engineering compensation numbers I collected software engineering-related compensation numbers, grouping them for easier browsing. Software engineering: Software engineering compensation numbers. Source:  Inside Pollen's Transparent Compensation Data Engineering management and product: Engineering management and product management compensation numbers. Source:  Inside Pollen's Transparent Compensation Data The vast majority of the tech team was based in the UK and Poland, with a few roles in Europe and the US. My take is that Pollen generally paid well for tech, but did not target the very top of their respective markets. I would suggest that in London, its rates were around the 75th percentile. I suspect the company was able to attract good tech talent despite not overpaying in markets like London or Warsaw, thanks to supporting remote working, possessing a good brand, and being focused on building a diverse team ‚Äì at which it did a good job. Full subscribers have access to all tech compensation numbers, including for data science, data engineering design, and leadership roles. This article covered one and a half out of eight topics from the  Inside Pollen's Transparent Compensation Data  article, available for full subscribers. The complete article additionally covers: The pay transparency report.  An overview of the report and the cadence at which it was published. Regional pay differences.  Pollen employed a large number of people in the UK, Poland, the US and from across the EU, also hiring from Sweden and Mexico. How was pay calibrated across these regions? Tech compensation numbers.  How much were data scientists, data engineers, designers, leadership and other tech functions paid? Highest and lowest-paid roles.  Which roles did the company reward most and which the least? Budgets by organization.  How did funding for the tech organization compare to funding of other organizations such as Marketing, Operations and Revenue? Inspiration to take from this pay transparency report and numbers.  How can you use this data in budgeting, and what are the caveats to be aware of? Reports . Access to three detailed reports in Google sheets, where you can slice and dice the data derived from 430 data points. Full subscribers have access to a cleaned and browsable version of the extended data set, which can be helpful in diving in to get further details, and in refining your compensation philosophy. As a note, this data set is even more expansive and detailed than the  Inside Microsoft‚Äôs compensation numbers  which we covered last August. Read the full article here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-job-market-for-new-grads-2023/", "title": "The job market for new grads: worse than in 2008, but better than 2002", "content": "\n             Originally published on 23 Feb 2023  üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . If you're not yet a full subscriber, you missed the in-depth analysis this week:  Are tech companies aggressively cutting back on vendor spend?  To get this newsletter every week,  subscribe here . Chris Lee  is the founder of US-based  Launch School , which is one of the ‚Äúanti bootcamp coding schools,‚Äù and an organization which impresses me. While most bootcamps offer a program ranging from a few weeks to a few months-long which promises to teach people how to code, Launch School has a self-paced, mastery-based curriculum which students can take up to two years to complete, finishing off with the  Capstone program . In 2021, an impressive 67% of graduates got a software engineering job within 8 weeks, and in 2022 this number was 74% and close to 100% after 6 months, with a  $124K average base salary . Remember that in 2021 junior engineers were struggling to find entry-level positions,  as I covered at time , even within the generally heated job market. As a coding school operator, Chris has a unique perspective that gives him insight into lots of different companies and engineering departments. Given Chris's job doesn‚Äôt end until his graduates get jobs, he keeps his finger on the pulse of the job market. In what might be helpful, Chris started his career as a software engineer in the middle of the big downturn back in 2002 ‚Äì known as the Dotcom Bust ‚Äì and worked through the financial crisis in 2008. I asked him how 2023 compares. Here‚Äôs his take: 'This 2023 downturn now is far worse than 2008 but not nearly as bad as 2002, which felt apocalyptic. I gave some internal presentations to our Launch School students about how to approach this downturn, and here is what I told them: 'The current situation is pretty bad. It's a bloodbath. However, it's fundamentally different from 2001-2002. ' I expect things to turn around fairly quickly.  The main reason is that tech companies and VCs still have a ton of money; they're just not investing right now. '1. Big tech is freezing hiring and conducting layoffs. 'Both of these things are ways to appease twitchy investors and claw back some leverage from employees. Since every big company is doing the same, it's a ‚Äòsafe‚Äô time to do layoffs without setting off any alarm bells or lawsuits. '2. Small, private VC-backed companies are de-prioritizing growth, and instead focusing on extending the runway of cash reserves. 'VCs are withholding subsequent rounds of funding and asking portfolio companies to take a more financially conservative approach. For the job market, this means less jobs from ¬†VC-backed companies, too. '3. So where are the small private non-VC-backed companies? Shouldn't they be hiring?  'These companies never participated in the ‚Äúgrowth-first, hire-fast‚Äù frenzy and have always had a slow, methodical, financially conservative growth path, even in bull markets. Nothing has changed for them. 'Remember: nothing has fundamentally changed! '#1-#3 is why the current situation feels so dire. However, the fundamentals are the same. Tech is still eating the world and we still need top notch software engineers. There's a lot of money sitting on the sidelines right now and it's not moving out of tech into another industry. All industries are still turning to tech and software engineers to compete. So then, why is the money sidelined and what are the companies waiting for? 'Stock prices. 'Investors are ready to invest as soon as stock prices start coming up, which can happen at any time. Suppose the Russia/Ukraine war ended tomorrow. I would expect that to have an immediate positive impact on the market, which will in turn immediately impact the Big Tech hiring situation. And that, in turn, would impact VC-backed companies (enterprise contracts are here again!).' I asked what advice Chris is giving grads of his coding school: 'Hang tight, survive for now, and cash in on the upturn . No need to go to law school or take any drastic actions. It's a great time to invest in your skills. 'Further, our current job hunt cohort is experiencing both lower salary offers as well as lower number of interviews. I expect our Capstone results to be 15-20% worse in 2023 in both salary average and duration to offer.' How badly did layoffs impact Capstone graduates who took their first tech job out of Launch School? Chris says: 'Our alumni channel is full of nearly daily reports of layoffs or impending layoffs (Google, Microsoft, PayPal, DigitalOcean, and other companies). So far, luckily, most of our alumni working at these companies haven‚Äôt been affected as yet. 'However, 3-5% of our Capstone alumni have been affected. This is the most it's ever been. In fact, prior to a few months ago, I haven't even heard of one alumni being laid off. Now, we have 8 people affected (we have over 200 Capstone graduates). 'Despite all of this, the general mood of our alumni is cautious but confident. Even among those laid off, my general sense is that no one is panicking. Many are crafting a plan for the next couple of years.  At Launch School, we tend to attract long-term careerists and not those looking for a short-term paycheck. I think because of that, my general sense is that people aren't scared. This confidence is, in my opinion, the ultimate goal of what we're doing at Launch School.' Chris went through a similarly gloomy period when he started his own career. I asked how that experience shaped him. He said: 'Starting a career back in the 2002 downturn was scary and uncertain. However, that uncertainty taught me a lot. 'I learned that no matter how amazing the job or company, it was all about my own abilities. 'That uncertainty also had a significant influence in how I built Launch School. Despite being early in on the coding bootcamp fad back in 2012, I never bought into that approach, mainly because of my traumatic early years. I built Launch School for the bad times. During the last 10 years of a bull market, it's actually been difficult to sell a long, rigorous learning path. Now, I think it's the only way to remain confident in this market. 'I expect our 2023 graduation numbers to be significantly worse than our 2022 numbers, but I'm eager to compare them with other training programs.' Thanks a lot to Chris for sharing these details. You can follow Chris  on Twitter , and read more of his writing on  the Launch School blog . For my view , I am not sure I fully agree with Chris that a recover hinges on  just  the stock prices. Stock prices do have correlation with the broader economy, and should the stock market recover, this would definitely be good news for Big Tech, and it would also likely encourage VCs investing their current funds with more confidence. ¬† The Launch School alumni have been standout ones across self-taught graduates, and those let go will surely be searching for jobs. These people will start off with an advantage compared to current bootcamp grads or new grads, as all of them have had industry experience. I‚Äôm pretty sure that new grads - and especially bootcamp new grads - will find an even tougher job market than it‚Äôs been the case in the past. At the same time, as a hiring manager, if you would be open to hiring new grads or bootcamp grads, you‚Äôd likely have a stronger inbound pipeline than ever before. And if we can take anything from Chris‚Äôs experience of starting his career at a worse time than now, as a new grad, it‚Äôs that difficult times contain plenty of lessons and tough early experiences can build qualities of strength and resistance. For more stories about getting into software engineering via a non-traditional path, we covered  Nivia Henry‚Äôs career from a non-traditional background to director of software engineering at Spotify  and Louie Bacaj coming from poverty,  and becoming a senior director of engineering . This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Big Tech job-switching stats.  Which companies grew their software engineering headcount, which ones shrank, and how has the ‚Äúopen-to-new-opportunities‚Äù ratio shifted across Big Tech? I collaborated with a recruiter to find out, and the data is in.  Exclusive . A historical pushback at Amazon on RTO.  The tech giant joined the ranks in announcing 3 days per week in the office from May. However, this move is facing a pushback I‚Äôve not observed at any other Big Tech giant. I‚Äôve talked with current employees and bring you the details. Plus, expect a spike in PIPs at the tech giant.  Exclusive . Changes in the tech job market during the past month.  Observations from the  Pragmatic Engineer Talent Collective . Software engineers with experience that used to be rare to see as available to hire are now on the market.   Exclusive. More ‚Äútraditional‚Äù companies going against the tide of cuts.   Nintendo and Mercedes-Benz are rewarding staff better than usual, while most tech companies are cutting. Could there be longer-term implications of employers putting staff ahead of finances?  Analysis . Read the full The Scoop here. Although this issue mentioned Launch School - having interviewed their founder - I have no affiliation with them. As always, there‚Äôs no sponsorship, affiliates or other third-party advertisements included and I always disclose conflicts of interests (like being an investor in a company I mention). This issue has no such conflicts. Read more on how I stay independent  in my ethics statement . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/big-tech-job-switching-stats/", "title": "Big Tech job-switching stats - exclusive", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics from  The Scoop #39 , published two weeks ago, 23 February. To get full newsletters twice a week,  subscribe here . I have collaborated with a tech recruiter - they‚Äôve asked to be anonymous - who‚Äôs been running some very interesting queries on LinkedIn for software engineers. Here are some of the results, visualized. How software engineer populations have changed across Big Tech: The percentage change in software engineer roles at various companies, based on LinkedIn data, between Oct 2022 and Jan 2023. What‚Äôs behind these changes? The most common cause, unsurprisingly, is the layoffs announced during Q4 2022 at Twitter, DocuSign, Robinhood, Meta, and Stripe. Bytedance/Tiktok growing so fast is surprising.  I hear TikTok is hiring aggressively, mostly in the US. It has also hired some engineers in Poland, where the company opened its first European R&D office in 2021. This rapid headcount growth at TikTok, coupled with it supposedly making a loss and its traffic growth in the US  slowing , makes me wonder if the company might adjust its forecasts and perhaps reduce staff. Google‚Äôs headcount increase just in the past 3 months shows that its  hiring slowdown since October  has not really been a slowdown, and headcount growth has been stable during that time. Meanwhile, Apple, Netflix and Airbnb seem to continue to hire software engineers at a good pace, and all are employers about whom I‚Äôve not heard rumors of job cuts. A few weeks ago, I  set out why I‚Äôd be surprised  if Apple goes down that path. Although AWS and Salesforce also hired during this period, both have announced cuts which include software engineers. At which companies are software engineers more likely to interview externally?  On LinkedIn, anyone can set an ‚Äúopen to opportunities‚Äù flag which only recruiters can see. So we took October‚Äôs data points and compared them with January‚Äôs. Here‚Äôs the results: How the ratio of software engineers open to new opportunities changed in 3 months, across tech companies. Twitter is where most software engineers looked for roles elsewhere. This is hardly surprising, given the company let go about 70% of staff, executed by Elon Musk during a  series of cruel changes . Companies with recent layoffs - Meta, Salesforce, Lyft, Google - are ones where there‚Äôs been the most spike in engineers being open to new opportunities. What about places where engineers seem less interested in quitting? What is common across Snap, DocuSign and Robinhood is how they all had a first round or layoffs in the fall of 2022. So the decrease in people open to leaving is likely because a lot of engineers who wanted to leave: they already did. And how do companies compare in what percentage of software engineers working there have signaled to recruiters - even if privately - that they are open to new opportunities? How the ratio of software engineers open to new opportunities compares across tech companies. Netflix engineers are the least likely to be open, and Twitter folks are the most. What are Big Tech companies where it‚Äôs most likely to find software engineers looking for new opportunities? Twitter, Amazon, Cisco, Meta, Coinbase, Salesforce and Uber are all companies where recruiters might have more luck getting responses than, for example, at the likes of Netflix, Databricks or Stripe. This was one out of the five topics covered  The Scoop #39 . A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The full The Scoop edition additionally covers: A historical pushback at Amazon on returning to the office.  The tech giant joined the ranks in announcing 3 days per week in the office from May. However, this move is facing a pushback I‚Äôve not observed at any other Big Tech giant. I‚Äôve talked with current employees and bring you the details. Plus, expect a spike in PIPs at the tech giant.  Exclusive. Changes in the tech job market during the past month.  Observations from the  Pragmatic Engineer Talent Collective . Software engineers with experience that used to be rare to see as available to hire are now on the market.   Exclusive. The job market for new grads: worse than in 2008.  Insights from the founder of Launch School, Chris Lee, based on his unique observations with access to lots of different companies and engineering departments.   Exclusive. More ‚Äútraditional‚Äù companies going against the tide of cuts.  Nintendo and Mercedes-Benz are rewarding staff better than usual, while most tech companies are cutting. Could there be longer-term implications of employers putting staff ahead of finances?  Analysis . Read the full The Scoop here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-scoop-big-tech-layoffs/", "title": "What Big Tech layoffs suggest for the industry", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get the full issues, twice a week:  subscribe here . Update on 20 January 2023: less than a day after publishing this article, Google announced historic layoffs that will impact ~12,000 positions. I'll analyze Google's layoffs  in next week's issue,  but it further adds to my argument (and worry) about what the Big Tech layoffs suggest for the industry. Microsoft announced eliminating 10,000 positions on Wednesday - and I analyzed why the company decided to make this move despite earning record profits in 2022,  in this week‚Äôs The Scoop . The layoffs at Microsoft suggest that in 2023, the tech industry may stall growth-wise.   By cutting 5% of staff, Microsoft reduces its headcount from 221,000 to around 211,000. We can expect that by the middle of this year, the company‚Äôs headcount will increase, but only modestly, and still be below the 221,000 figure it was at last July. However, Microsoft‚Äôs business is incredibly diversified, to the point that it can be pretty representative of the B2B tech industry, minus advertising. Taking the visualization from Visual Capitalist, here‚Äôs the breakdown of the company‚Äôs revenue sources: Microsoft‚Äôs revenue split in 2022. Image source:  Visual Capitalist. Microsoft‚Äôs business is much more diversified than any of its competitors. The largest revenue source is Cloud at 31%, and there are 6 revenue sources which each account for 5% or more of company revenue: Cloud, Office, Windows, Gaming, LinkedIn and Ads. Amazon and Apple are the only two rivals with comparable diversification. Amazon has 5 segments each accounting for 5% or more of revenue: Online Stores, Third-party seller services, AWS, Prime, Ads: Microsoft‚Äôs revenue split in 2022. Image source:  Visual Capitalist. Meanwhile, Apple also has 5 segments which each account for more than 5% of revenue: iPhone, Services, Wearables, Mac, iPad: Apple‚Äôs revenue split in 2022. Image source:  Visual Capitalist. Google, on the other hand, makes 81% from Ads, While for Meta, it‚Äôs 97%. Meta is incredibly reliant on ads, and this reliance is the reason for  the company‚Äôs historic growth challenge . Microsoft‚Äôs layoffs worry me precisely because the company has a very good track record of predicting how the business will grow or shrink.  As for Amazon, while I‚Äôve not conducted the same level of analysis, the e-commerce giant is not dependent on ad revenue in the same way Microsoft isn‚Äôt, and its business is similarly diversified. Both Microsoft and Amazon have been pragmatic in growing their businesses and are nimble to react when the external environment shifts. As I wrote in July 2022, in  The Scoop #19: The start of a tech winter? ‚ÄúBut what is making Big Tech react much faster than other companies? I‚Äôll suggest this is because they are more nimble in how they both gather and analyze data, and in how they operate, compared to some more traditional companies. This means Big Tech predicts a slowdown in business, based on data they have, and is implementing a slowdown immediately. Traditional companies either don‚Äôt detect changes in the market with such sensitivity, or they might have learned to take a longer-term outlook, and not worry about changing direction. Don‚Äôt forget, most of these traditional companies have been around longer than Big Tech firms, and the fact that they are not as ‚Äújumpy‚Äù in reacting quickly is a feature for them, not a bug.‚Äù This was back when Big Tech was ‚Äúmerely‚Äù freezing hiring; Microsoft, Google, Meta all froze at that time, and Apple was rumored to be reducing its pace of hiring. Only Amazon hired as normal, back then: How the Big Tech hiring market changed between Jan-Jul 2022. Modified image from the one published in  The Scoop #19. Since then, the situation has changed. Here is how things look at time of publishing: The situation is especially grim, when looking at how things were just year ago: It‚Äôs certain we‚Äôll see a correction of 2021-22‚Äôs hiring frenzy and it‚Äôs a given that Big Tech will hire much less this year than in 2022, while the question remains whether other large tech companies will follow suit and announce layoffs in the coming months. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Microsoft‚Äôs layoffs.  The tech giant announced eliminating 10,000 positions on Wednesday, which is about 5% of staff. The company made a $72B profit in 2022 - which is more than the revenue it had in 2011. So why does Microsoft need to do layoffs?  Analysis . Layoffs at Goldman Sachs.  The investment bank cut 6% of staff, and is the first major non-tech company to do deeper cuts. Is this cause for worry?  Analysis . Layoffs and hiring freezes: it‚Äôll get worse before it gets better.  Amazon, Salesforce and a bunch of other companies made cuts in January. I analyze why we‚Äôre likely to see a spike on layoffs and hiring freezes in the coming period.  Analysis. Will we see a focus on sustainable growth for startups?  Profitable, has lots of money in the bank, and growing the team deliberately slower than revenue increases, not digging into money raised. This kind of approach was not what investors expected from fast-growth startups, yet it‚Äôs the approach Linear is taking. Will we see more companies follow?  Exclusive details. Read the full issue here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/google-coding-competitions/", "title": "Why did Google close its coding competitions after 20 years? Exclusive details.", "content": "\n             Originally published on 2 March 2023. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in this week's  The Scoop issue . To get full newsletters twice a week,  subscribe here . On 22 February 2023, Google announced its coding competitions are coming to an end: The visual that accompanied the announcement of the end of Google‚Äôs coding competitions. What were these competitions? Code Jam: competitive programming .  The program ran for 20 years, and was the longest-running one at the company. Competitors worked their way through a series of online algorithmic puzzles to earn a spot at the World Finals, for a chance to win a championship title and $15,000 USD. Qualification round: an online heat lasting about a day. To progress, contestants needed a minimum score. Online Round 1: consists of three sub-rounds. The top 1,500 contestants in any of the preliminary rounds proceed. Online Round 2: the top 1,000 make it through. Online Round 3: contestants get a limited edition T-shirt. The top 25 make it to the World Finals. World Finals: up to 2020, it was held in a location in the US or Europe, and has been online since. Pretty incredibly,  Gennady Korotkevich  has won the title every year since 2014 ‚Äì except once. Google also ran other programs: Kick Start: algorithmic programming.  A program that ran for 10 years. The top competitors from the Kick Start rounds were sometimes invited to interview at Google: this series served as a direct recruitment tool. See all  past problems, scorecards and analysis . Hash Code: team programming . Another contest that ran for 10 years. Students and professionals picked a team and programming languages, and were assigned a problem to solve. Problems were modeled off a real Google engineering challenge. Google Code Jam I/O for Women: algorithmic programming.  Hosted at Google‚Äôs Code Jam conferences, the top 150 contestants from the online round were brought to compete at Google‚Äôs annual I/O conference. More details about this conference  on its website . Looking through these competitions, I really liked how the challenges for the Hash Code competition related to real-world problems. For example, in 2019, the online round featured a challenge relating to  a problem with Google Photos : ‚Äú Introduction : As the saying goes, 'a picture is worth a thousand words.' We agree ‚Äì photos are an important part of contemporary digital and cultural life. Approximately 2.5 billion people around the world carry a camera ‚Äì in the form of a smartphone ‚Äì in their pocket every day. We tend to make good use of it, too, taking more photos than ever (back in 2017, Google Photos announced it was backing up more than 1.2 billion photos and videos per day). Task : Given a list of photos and the tags associated with each photo, arrange the photos into a slideshow that is as interesting as possible (the scoring section below explains what we mean by 'interesting') Scoring : The slideshow is scored based on how interesting the transitions between each pair of subsequent (neighboring) slides are. We want the transitions to have something in common to preserve continuity (the two slides should not be totally different), but we also want them to be different enough to keep the audience interested. The similarity of two vertical photos on a single slide is not taken into account for the scoring function. This means that two photos can, but don't have to, have tags in common.‚Äù But now, Google has laid off the staff who organized these long-running competitions.  I asked Googlers the reason why these events have been canceled and one thing became clear: most of the program managers who worked on the coding competitions were recently let go in  Google‚Äôs historic job cuts . A month ago when analyzing the layoffs, I noted: ‚ÄúProfit centers seem to have been impacted far less than cost centers and experimental projects. (...) I did not hear of many people being let go from Ads, Search or YouTube, which are considered revenue generators at the company. At the same time, Google‚Äôs in-house incubator, Area 120, was heavily impacted by layoffs.‚Äù When considering whether coding competitions were a cost center or a profit center, they do fall into the cost center bucket. The decision to cut the coding competitions was made very recently.  I talked with an organizer in a Google Developer Group chapter. This person told me: ‚ÄúAt the beginning of 2023, we still had Hash Code officially on the timeline. In the beginning of February, Google announced the delays in the registration process. When messaging Google what the delay means, they replied saying the website will be updated soon. That was the first sign of trouble for Hash Code.  When we asked our Google contacts about the situation, they told us to postpone (but not cancel) the event until further notice.  So knowing these lead up signs, the cancellation of the event is not that surprising, considering the info we had beforehand. However, what is very surprising is how the event was scrapped a month before it should have been held.‚Äù What does Google gain by canceling its coding events?  Based on information from insiders, Google‚Äôs coding competitions engaged more than 300,000 software engineers external to Google, annually. These coding competitions assisted in the hiring of thousands of software engineers each year, who were directly sourced from these events. The obvious gain is a reduction in the cost associated with the ongoing organizing of these events - the cost of Google‚Äôs staff, travel for participants, venue expenses and prize money. And what does Google lose by cancelling this series? Looking at it in a hard-headed way: Google won‚Äôt lose so much because its brand is so high-profile in the tech community. Two decades ago ‚Äì when Google was still a smaller company, employing only 3,000 people in 2004: 60x fewer than today‚Äôs headcount of 186,000. Back then, hosting a competition and enticing software engineers with prizes, while building up a reputation for the competition as challenging but fun, was definitely a smart tactic. It developed Google‚Äôs algorithmic-heavy engineering brand, and led some better-performing contestants to apply for jobs there. However, in 2023 Google has no shortage of applicants, which is especially true if we consider the tech giant is likely to slow hiring like the rest of Big Tech. There‚Äôs an additional perspective to consider: branding and marketing. This competition associated Google strongly with competitive programming (Code Jam,) algorithmic programming (Kick Start,) real-world challenges (Hash Code,) and diverse hiring (Code Jam I/O.) This marketing benefit is now gone. And although marketing investments are hard to measure, there‚Äôs a reason the likes of Coca-Cola keep spending big on marketing and advertising, even though almost everyone knows what Coca-Cola is. Today, every software engineer in the world knows of Google, and most know there‚Äôs challenging and interesting challenges to solve at the company. Could this awareness shrink from now on, in the absence of these competitions and the 300,000 students and software engineers who won‚Äôt engage on a yearly basis with Google via these events? Even more importantly, over time, will such a decrease compound and affect the type of talent Google can attract? This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The full The Scoop edition additionally covers: Stricter performance reviews? A follow-up.  More confirmation that performance reviews are stricter than usual, and low performers are exited at some companies. A scaleup founder also shares candid details about why this is happening, and why it‚Äôs likely to continue in places where headcount budgets have shrunk.  Exclusive . Coinbase: formerly high equity awards now taking their toll.  In 2022, the company issued 3x as much average equity to their employees, than Google did, and spent 10x as much in equity compensation, compared to revenue, than the search giant did. Why the imbalance? And what can other companies learn from Coinbase spending more than 60% of their revenue on stock compensation?  Analysis . Instacart reducing equity awards.  The company made a large change on how it issues equity. I go into the details of what this change means, and the implications. Could more companies follow suit?  Exclusive . Developer portals: market insights.  How will developer portal markets evolve, in a segment with Backstage as a major open source player? I talked with the founders of developer portal startups Cortex and Port.  Exclusive . Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-scoop-apple-rto/", "title": "Apple cracking down to enforce its RTO policy - exclusive", "content": "\n             Originally published 2 February 2023. More than 6 weeks after publishing, publications like  Business Insider ,  Apple Insider  and  9to5 Mac  have published the same story, repeating the same details I shared over a month before. If you'd like to get news like this in your inbox weeks or months before it goes mainstream,  subscribe ! üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of seven topics in today‚Äôs subscriber-only  The Scoop issue . Apple was the first Big Tech giant to mandate a proper return to the office and back in September 2022, this initiative was in full swing, being rolled out in the US and with 3 days per week in the office mandated in the UK. Back then, I  wrote : ‚ÄúApple rolled out RTO in a staged fashion, adding an additional day/week in the office every month. In May, it was 1 day/week, in June it was 2, and by July it was 3 days/week in the office. Apple struggled with office space in London because of hiring. During the lockdowns, Apple kept hiring with full speed in London as well. When RTO started, the company had several smaller offices across the city. Those going into the offices found themselves cut off from other teams, but also struggling for space. Apple addressed the problem swiftly, according to my sources. The company made changes so all software engineers will work from the same location‚ÄîBishopsgate 22‚Äîand they are renting an additional three floors so all the software engineers will fit. Those floors will open up in November.‚Äù Apple has started to check badge access to verify if people are in the office enough.  Like most Big Tech offices, Apple‚Äôs can only be accessed via badges. In offices like the US, badges also control access to more sensitive areas. Limiting access this way isn‚Äôt common in most tech companies, but it‚Äôs in Apple‚Äôs DNA to restrict how information spreads and which areas people can access. This approach is also a reason why details about new Apple products rarely leak. Over the past few weeks, Apple‚Äôs HR team has been sending engineering managers notifications informing them that their team members were out of the office too often last year. Managers have been asked to explain why, and told to take action. These inquiries ‚Äì and warnings ‚Äì have been sent in both the US and UK. However, enforcing the 3 days/week in the office policy is problematic for some teams. I talked with a software engineer in the UK who works in a distributed team and mostly communicates over chat throughout the day. They explained that in the office there are not enough private spaces for keeping in touch with colleagues via calls. Remember, Apple is very strict about forbidding even team-sensitive information from being shared by co-workers with no authorization for a project. This means that going to the office inhibits these engineers‚Äô ability to keep in touch, as they‚Äôre not allowed to do a call in a shared workspace if there‚Äôs no private meeting rooms. I‚Äôve also talked with engineers who moved away from their main work location, and plan to only be there every few weeks. They are productive and their managers are fine with this setup. However, with this HR crackdown, these people either need to get remote work exceptions approved, or move house back to within commuting distance of the office. Apple‚Äôs current policy allows 4 weeks of remote work per year.  Outside of these 4 weeks, the company expects employees to spend at least 3 days of every week in the office. From now on, attendance is being tracked and reported on. Needless to say, engineers whom I talked to aren‚Äôt happy about the 3 days/week being enforced. This is especially true for engineers whose manager supported them working remotely; indeed in many cases, the manager was also a proponent of remote work. A software engineer in London also shared how the office is often practically empty and speculated that building management might have been involved in wanting to increase the occupancy of the space. My take is that, realistically, it‚Äôs hard to find a workplace that offers all three of these desirable criteria: A well-known tech company Lots of flexibility on remote work Relatively good job security Apple is the only Big Tech company that‚Äôs been safe from job cuts, as we covered  last week . They were clear that people need to come to the office 3 days/week and now they‚Äôre enforcing this rule. By the sound of it, there is some flexibility, but I won‚Äôt bet on Apple‚Äôs leadership being happy with lots of exceptions. Apple had an ‚Äúoffice-first‚Äù culture before the pandemic and the leadership seem clear that this is the setup they want to return to ‚Äì and quickly. Could we see Apple being the first of many companies to start to enforce RTO rules?  There‚Äôs something interesting about how Apple comes up with its policies and approaches. I keep seeing Apple apparently ignore its competitors and what they are doing. Back in 2021, Apple was one of the only Big Tech companies to not get involved with the heated job market and its inflated compensation packages. It also did not speed up hiring during 2020-2021, like most other companies did. So the question is now that Apple has decided that enforcing RTO is in its best interest, will we see other companies come to the same conclusion, and will some copy this approach because Apple is doing it? For any leader considering implementing a strict policy like Apple‚Äôs: don‚Äôt forget that Apple is a special case. It seems to me that Apple employees are far more loyal than any other Big Tech employees I talk to. Should the company avoid any major job cuts, like it‚Äôs done for more than 25 years, then this loyalty is likely to increase despite the enforced RTO. While the job market has cooled off from the heated 2021 peak, there are now more companies offering either full remote or flexible remote work. Right now, any business that enforces a return to the office and overrules managers who grant exceptions will risk some of its engineers potentially exploring more flexible working options elsewhere. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Sergey Brin‚Äôs first commit at Google, after many years.  Google‚Äôs cofounder came out of retirement and made his first code change last week. I talked with software engineers at Google for their reaction to it.  Exclusive details. Meta‚Äôs lowest-ever bonus multiplier.  The company announced its multiplier and it‚Äôs never been as low as this. Engineers inside the company told me how they feel about it. I also share what the shrunken bonus pot means in money terms for US software engineers.   Exclusive . Aggressive performance reviews at several companies.  Performance review season is here and they feel far more harsh, this time. I‚Äôve talked with managers at HelloFresh, Delivery Hero and Uber to learn what‚Äôs different.  Exclusive. New trend: aggressively cutting back on vendor spending?  Scaleups, big tech companies and startups seem to have a sudden ‚Äì and often urgent ‚Äì focus on slashing vendor costs. I share what I‚Äôm seeing as I continue to gather details about this.  A heads up. Companies commit to protecting jobs.  Leaderships at some companies have told staff they will aim to ensure no layoffs happen. What does this promise mean, and why does it matter?  Analysis with exclusive details . An increase in solo mobile developers?  Interesting insights from RevenueCat data which could indicate an increase in tech entrepreneurship.   Exclusive . Read the full issue here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-collapse-of-silicon-valley-bank/", "title": "The Collapse of Silicon Valley Bank", "content": "\n             üëã Hi, this is  Gergely  with a bonus issue of the Pragmatic Engineer Newsletter. In every issue, I cover challenges and events at Big Tech and high-growth startups. To get full newsletters twice a week,  subscribe here . It‚Äôs been a wild weekend, starting Friday. In case you somehow missed it: we went through the fastest bank run in history, in an event that impacted about half of all VC-funded startups in the US and UK. On Friday night, Silicon Valley Bank (SVB) was shut down by regulators, triggering a weekend of fear and uncertainty for many people and businesses with questions like: ‚Äúcan we make payroll next week?‚Äù There was no certainty for startups with money in Silicon Valley Bank. As of today (Monday) things have calmed down, but it‚Äôs not all over. In this special edition, I cover the events of this blow to the tech economy. Deposits in Silicon Valley Bank, 1991-2023. The bank was founded in 1983. Source of data: Silicon Valley Bank public filings. Half of all venture-backed companies in the US used SVB,  making the bank the most important financial institution in the US startup tech sector. It wasn‚Äôt just startups, but also late-stage companies: 44% of venture-backed tech and healthcare companies which went public in 2022 were SVB customers,  according to Bloomberg . Thursday: Bank run On Thursday, 9 March, we witnessed the fastest bank run on record. What is a bank run? This is when customers show up at a bank to withdraw all their money, due to lack of confidence that their funds are safe. The issue is that banks (not only SVB) aren‚Äôt designed to work like this: they cannot fulfil simultaneous requests for withdrawals by all (or even most) customers. Basically, a bank doesn‚Äôt have everyone‚Äôs money easily to hand, locked up in a vault. This is because when you make a deposit with a bank, it uses some of your money for a variety of purposes: Loans to other customers as credit Short-term and long-term investments Some is free-floating, available to customers If a large percentage of customers suddenly want their money, a bank can do this to the extent that their free cash flow allows. Beyond that, longer-term investments need to be unwound: potentially breaking up long-term bonds that they bought, or their selling of debt they hold to other institutions. Breaking up or selling off any long-term investments may come at a loss, and there‚Äôs a danger the bank may still not have clawed back all customer deposits, meaning some could lose money. In a bank run, only those who act first secure their funds.  Those moving later might not get all their funds and could even lose some of their holdings. This is why even talk about bank runs can be hazardous: if you hear a bank run is starting, the rational move is to minimize your losses by getting your money out, which helps make the run a reality. Bank run at SVP Thursday, 9 March, Around 9am in the morning (PST / California time), founders were tipped off by venture capitalists that SVB looked in trouble. The investors suggested companies immediately withdraw their funds for safekeeping, while still possible. From here, things accelerated. 11am: Bloomberg  reported  that Founders Fund, a VC fund co-founded by Peter Thiel, advised all its portfolio companies ‚Äúto pull money from Silicon Valley Bank.‚Äù This news is widely shared on social media and in private messages. 11:30am: SVB CEO, Gregory Becker, holds a 10-minute conference call with top VCs, saying the bank has ‚Äúample liquidity to support our clients with one exception: If everyone is telling each other SVB is in trouble, that would be a challenge.‚Äù According  to The Information , the CEO said: ‚ÄúI would ask everyone to stay calm and to support us, just like we supported you during the challenging times‚Äù 12pm (noon): Details of the call leak, and focus shifts onto the CEO‚Äôs quote: ‚ÄúIf everyone is telling each other SVB is in trouble, that would be a challenge.‚Äù On social media, founders share that they are observing a bank run to be unfolding. This news naturally fuels the run. OK i am hearing from dozens of founders about what to do at SVB. It's an all out bank run. ‚Äî Howard Lerman (@howard)  March 9, 2023   From 12am: VCs tell portfolio companies to pull money they have in Silicon Valley Bank. The bank‚Äôs systems start to be overloaded to the point of customers not being able to log on and transfer. We were witnessing a full-on bank run unfold in a matter of hours, bank customers transferring out all their holdings. In the aftermath, we would learn that Silicon Valley Bank processed $42B in deposit outflows on Thursday: which is nearly a quarter of all deposits they held! Here‚Äôs a first-hand account of how things went for one customer,  Alexander Torrenegra , founder of  Torre.co , a platform to find work or be found. ‚ÄúThursday, 9 AM: in one chat with 200+ tech founders (most in the Bay Area,) questions about SVB start to show up. 10 AM: some suggest getting the money out of SVB for safety. Only upside. No downside. 10:50 AM: I read the messages in a bathroom break. Immediately cancel the meeting I had. Ask my wife, Tania, to wire all of our personal money out to other banks. Call my teams. Ask them to do the same. One of them, at the dentist, has to stop the procedure and run home. (...) ~12:00 PM: All of my chats with tech founders in the US light on fire with what‚Äôs happening. Obviously, we have a bank runoff. Surreal. 12:30 AM: We request two wires for all the money from the 2nd company to Mercury. 12:38 PM: Wires to Ameritrade clear. The 1st company is safe. (...) ~3:00 PM: My chats with tech founders from Latin America start to catch up. 4:05 PM: SVB calls us. Tells us that our savings will be wired the same day, as requested.‚Äù Friday: Downfall of SVB On Thursday afternoon, several startup founders I know got the memo to move their money, but they couldn‚Äôt log into SVB and do transfers. Most planned to transfer funds out the first thing Monday morning. Some founders even showed up at the offices of Silicon Valley Bank in San Francisco. As fellow Substack author Eric Newcomer  reported : ‚ÄúFounder Dor Levi, a former Lyft executive, first texted me at 8:16 a.m. from outside Silicon Valley Bank‚Äôs New York offices. He said he‚Äôd been instructed by a banker at Silicon Valley Bank to go and get a cashier‚Äôs check from the New York office if he wanted to move his funds. Levi wasn‚Äôt the only founder who showed up at SVB‚Äôs offices looking to pull his money from the bank. ‚ÄúThere‚Äôs more founders coming every minute,‚Äù Levi texted. He said about a dozen founders showed up at the bank this morning.‚Äù The founders showing up at the bank in person couldn‚Äôt withdraw their money. In fact, no one could. On Friday morning, the Federal Deposit Insurance Corporation (FDIC,)  announced  it was closing the bank.  The   FDIC is a government agency whose goal is to maintain stability and public confidence in the US financial system. The FDIC stated ‚Äúall insured depositors will have full access to their insured deposits no later than Monday morning, March 13, 2023.‚Äù This meant companies had guaranteed access to $250K on their account, but everything else was uncertain. This was bad news and the implications were just starting to become clear. Saturday: Reactions and preparing for bad outcomes By Friday midday, it was less than 24 hours since SVB was the largest startup bank, to a state of collapse. Customers not quick or lucky enough to transfer their money out had their accounts frozen for all of Friday, and could only hope to access $250K in deposits. This may sound like a lot for a personal account, but for a company with 30 employees on $150K each and monthly AWS costs of $100K, it would barely cover 2 weeks of wages and infra costs. As a result, making payroll was looking like a huge problem for many companies.  For tech startups, the biggest expenses tend to be: Staff payroll Infrastructure and vendor costs There‚Äôs a good reason why these same tech companies have been doing layoffs and  aggressively cutting back on vendor spend : it‚Äôs because staff payroll and infra vendor costs are the bulk of their expenses. In the US, payroll is every two weeks and most startups had a payroll cycle starting this week (the week of 13th March) In contrast, in the EU payroll is typically monthly. I talked with a well-connected founder, who said:: ‚ÄúMy WhatsApp is insane with SVB. 4 founders I know won‚Äôt make payroll unless they can bridge somehow. They are literally asking me for personal loans. My inbox is a bloodbath.‚Äù Garry Tan, CEO of Y Combinator  stated  how ‚Äú30% of YC companies exposed through SVB can‚Äôt make payroll in the next 30 days.‚Äù Given payroll was the immediate priority, founders for whom $250K wouldn‚Äôt cover the payroll jumped into action, reaching out to VCs for bridge loans, and asking friends and family to loan enough so they could pay staff. Employee-of-record (EOR) payroll companies such as Remote, Deel, Rippling found themselves in a challenging situation. These companies are hired by startups to manage payroll in countries where a startup is not a legal entity. Rippling, a popular payroll provider which also provides payroll, was immediately impacted because it used SVB to transfer salaries. When SVB went down, Rippling could no longer make these payments, so it rapidly switched over to JPMorgan Chase to make payroll, but warned customers that payroll might be late as a result. Meanwhile, other EOR providers have assured customers that their staff will get paid, even if customers won‚Äôt be able to transfer payroll the next week. On Saturday, Remote  confirmed  it was still making payroll - even if customers cannot transfer funds - and on Sunday Deel  announced  it will support impacted customers. EOR providers are in a tight spot themselves, as legally they cannot fail to pay employees in some countries, due to employment law. At the same time, with so many customers having had their accounts frozen, these providers could potentially have liquidity issues, meaning EORs could have had problems making payroll.) Vendor payments for the coming week were looking to be at risk by Friday.  For any startup with funds stuck in SVB, they had to budget the $250K they could access, and do so wisely. Other vendor expenses were arguably secondary until startups could access their full account, so founders were debating asking vendors to defer payments, given the unprecedented situation. Several vendors were proactive, offering payment support. On Friday, project management app Linear  announced  it would grant payment delays. On Saturday, error logging service Sentry  followed suit , and PaaS Vercel  did the same . For some startups, losing access to their bank account prompted drastic action.  While startups with relatively small expenses hoped to ride out the coming weeks on the insured $250K: for larger companies with all their funds tied up, this wasn‚Äôt an option. One example of this is Camp.com, a company selling themed toys for all ages. Responding to its bank account being frozen, the startup launched a site-wide 40% off sale, with this popup displaying to all visitors: The landing page for Camp.com on Saturday, 10 March. The company needed to urgently generate cash to continue operations, with its bank having gone under the previous day. A 40% discount is  huge  for a store like Camp, which sells physical goods. A site-wide 40% most likely means the company was selling everything at a loss, in a desperate bid to generate cash flow and continue operations while the bank account was inaccessible. The campaign and the cheesy graphic worked: Camp saw 35x the normal traffic, and ‚Äì presumably ‚Äì several times the sales. Founders were fearful of a liquidity crunch and the effects it could have.  By Saturday, it was understood the FDIC would move swiftly in selling SVB‚Äôs assets and aim to return deposits as fast as possible. The question really was: how fast? Was it possible by Monday? In the early hours of Saturday, a message circulated in VC circles, claiming the FDIC had already sold about half of SVB‚Äôs assets, and planned to make 50% of deposits available by Monday, with the other 50% likely to be recovered in 3-6 months. While this was better news than having access to only $250K, it still forecasted grim news and a liquidity crunch. After all, if 50% of a company‚Äôs reserves disappear, it will need to do drastic cost-cutting measures like refusing to pay non-essential vendors, laying off staff, and cutting down on expenses for up to 6 months until the deposits are returned. Sunday: Containing the crisis On Sunday afternoon, at around 5pm PST, the US Department of Treasury, the Federal Reserve and FDIC  issued  a joint statement, stating all depositors were fully protected, and Silicon Valley Bank customers will have access to all of their money starting Monday. The statement went on to state that no losses associated with the sale of SVB assets would be borne by taxpayers. Only shareholders and certain unsecured debt holders were not protected from this. In the UK, Silicon Valley Bank‚Äôs bankruptcy also caused a similar stir, because its UK entity was also a favored bank among UK startups. UK SVB held deposits of ¬†¬£6.7B ($8B) and served 3,300 clients, likely around half of VC-backed startups in the country,  according to Sifted . The UK entity collapsed on Friday as well. In another positive outcome, HSBC bank announced acquiring SVB UK for the symbolic sum of ¬£1. The acquisition means customers of SVB UK have access to all of their deposits as of Monday. Both in the US and in the UK, a crisis has been averted by ensuring depositors have access to all their money, which is the outcome financial analysts expected since Friday. On Friday, former Bloomberg columnist Noah Smith wrote : ‚ÄúLet‚Äôs talk about the big risk: financial contagion. Many people will undoubtedly have traumatic memories of 2008, when Lehman‚Äôs collapse triggered a systemic meltdown. That is a real possibility, and it‚Äôs why the FDIC and other government agencies are probably going to work very hard to make sure SVB‚Äôs depositors don‚Äôt have to take haircuts. But there are reasons this is not like the Lehman shock. (...) SVB didn‚Äôt have enough links to the rest of the financial system to cause a 2008-style cascade, but there could still be a wave of runs from plain old panic. Panic doesn‚Äôt need a rational reason, and in a bank run, panic becomes a self-fulfilling prophecy. (...) In general, I‚Äôm optimistic about the system‚Äôs ability to contain the fallout from SVB. So far the U.S. economy has powered along with record employment and strong growth, even as the tech sector has gone into a slump. There‚Äôs not a lot of reason to think this basic pattern will change after this bank run, and the government has every reason to make sure it doesn‚Äôt change.‚Äù Monday (today): Next steps for startups With the crisis averted, what‚Äôs the immediate priority for startups? Startups are setting up multiple bank accounts.  Startups have had a wake-up call about just how risky it is to have all their capital in one bank. Going forward, for startups with sizeable funding ‚Äì above $1M ‚Äì it will be a sensible hedge to use at least three bank accounts: One main account for expenses, with about 3 months‚Äô of funds. One account for emergency funds of ~3 months runway. One account to store the majority of funding, with an institution that is diversified: meaning most customers are not startups, in order to avoid the risk of a bank run. Some startups are setting up multiple  money market funds  to spread their investments. Every startup I‚Äôm in touch with has put together a banking strategy, are busy opening new accounts, and re-distributing funds. Startups are moving deposits from ‚Äústartup-first‚Äù banks and neobanks.  Given no bank can be assumed to be safe from a bank run, startups which previously held most of their deposits in other startup-friendly banks or neobanks are also moving them by opening up secondary or tertiary accounts with some of the largest banks: JPMorgan, UBS, Goldman Sachs in the US and Barclays and HSBC ‚Äì now the owner of SVB UK. Startup-friendly banks include Mercury, First Republic, Brex, and Jiko in the US. In Europe, such banks include Mozo, Revolut, Starling and Wise. So why did so many startups choose SVB as their banking partner? And what is the long-term impact on the tech ecosystem? I answer both questions in  this week's full issue on The Pragmatic Engineer , where I additionally cover: Why did so many startups use Silicon Valley Bank?  The approach SVB had that was different to traditional banks, and services they offered. The longer-term impact on the tech ecosystem.  Startups building buffers - and cutting costs -, a growing distrust in VCs, tech workers and the risks of startups. Why will high interest rates have a longer-lasting impact on startups than the SVB collapse?  And could it be that this collapse was a canary in the coal mine ‚Äì a sign of what‚Äôs to come? Read the full issue here. Further reading Since SVB‚Äôs collapse unfolded, there‚Äôs been plenty of analysis. Here are some articles I found insightful: Why was there a run on Silicon Valley Bank?  by Noah Smith The demise of Silicon Valley Bank  by Marc Rubinstein  The end of Silicon Valley (Bank)  by Ben Thompson Startup bank had a startup bank run  by Matt Levine (Paid) \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/is-there-a-drop-in-software-engineer-job-openings-globally/", "title": "Is there a drop in software engineer job openings, globally?", "content": "\n             Originally published on 23 March 2023. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get full issues twice a week,  subscribe here . There‚Äôs plenty of news and anecdotal evidence suggesting the jobs market for software engineers is cooling. In October 2022, I wrote about the start of a  Big Tech hiring slowdown . Then in December 2022, I collected  insights from tech recruiters , concluding that the market had slowed down from the frenzy of 2021-Q1 2022 and noted that every recruiter had shared there was some slowdown in the number of positions companies were hiring for. That same month, after gathering  insights from more than 30 hiring managers , my conclusion was that in almost all regions, it was easier to hire. But what about ‚Äúhard‚Äù data on trends in software engineer hiring? I delved into an existing data source for startups hiring software engineers, the monthly ‚ÄúWho is Hiring‚Äù thread on Hacker News, and also analyzed a newly available data source, the Indeed Job Postings Index. Startup software engineer job openings, based on Hacker News listings Hacker News is one of the most popular sites for software engineers. Every month, it runs a  ‚ÄúWho is Hiring?‚Äù  forum, where Hacker News readers from hiring companies can post jobs, with one post per company. The vast majority of posts are related to software engineering. I collected historical data on the number of companies posting positions per month, from 2014. Here‚Äôs how the number of postings have fluctuated over time: The number of companies posting on the monthly Hacker News ‚ÄúWho is Hiring‚Äù post, between Dec 2012 and Mar 2023. We see a noticeable dip in April 2020 ‚Äì when Covid-19 lockdowns began ‚Äì when the number of companies hiring dropped from 670 to 480. The ‚Äúpeak‚Äù in companies advertising positions on Hacker News was between June and November 2021, and in September that year I covered  The perfect storm causing an insane tech hiring market , then followed up with observations  on unusual off-cycle compensation increases  that November. Since then, the number of companies posting on this forum has steadily declined. Zooming in on the past 3 years, between February 2020 and March 2023: The number of companies posting on the monthly Hacker News ‚ÄúWho is Hiring‚Äù post, between February 2020 and March 2023. So when was the peak in the number of ‚Äúroles vacant‚Äù posts? I define ‚Äúpeak‚Äù as being a quantity of posts that‚Äôs 150% higher or more, than in February 2020. By this definition, the peak was February-November 2021: The ‚Äúpeak job market‚Äù for the number of companies posting positions on Hacker News. ‚ÄúPeak‚Äù refers to 50% more companies posting than in Feb 2020. Although the number of postings has fluctuated month to month, we can confidently say there were about half the number of job listings on ‚ÄòWho is Hiring‚Äô between September 2022 and today, than in June-November 2021. Startup developer engineer job openings, based on the Indeed Job Postings Index The Indeed Job Postings Index  is a data source made public thanks to Indeed‚Äôs Hiring Lab. The data is a ‚ÄúJob Postings Index‚Äù segmented by country and category. 100 is the reference data point, representing the number of job postings on 1 February 2022. I‚Äôve visualized the data for ‚ÄúSoftware Developer‚Äù job listings on Indeed, and here‚Äôs the three ‚Äúhottest‚Äù markets: The Indeed Job Postings Index of Software Developer positions. ‚ÄúPeak‚Äù denotes the number of jobs posted being at least double than in February 2020. The ‚Äúpeak‚Äù of the market was between mid-2021 and mid-2022 in most markets. It‚Äôs interesting that Australia was the ‚Äúhottest‚Äù market of all, as benchmarked by Indeed. Also interesting to see is that while the number of software developer job postings this month in the US and Canada is about equal to February 2020. In Australia, it‚Äôs almost double. Not all markets were as ‚Äúhot‚Äù as the US, Canada and Australia. The next two ‚Äúhottest‚Äù markets were Germany and the UK: The Indeed Job Postings Index for Software Developer positions for the UK and Germany. ‚ÄúPeak‚Äù means that the number of jobs posted was at least 1.5x higher than February 2020. A surprising data point is that software developer job postings in the UK never reached 1.5x higher than the February 2020 point. Equally surprising is that software developer job listings in Germany grew faster than in the UK, and still remain well above February 2020 levels. This is eye-catching, given employee protections are much stricter in Germany than in markets like the UK, where I‚Äôd assume hiring activity would shift to, even during a downturn. Another surprising data point is France: The Indeed Job Postings Index for Software Developer positions in France. In France, there‚Äôs no sign of fewer software developer positions being posted. In fact, the number of positions seems to be near its highest since February 2020! Finally, the most puzzling data comes from Japan: The Indeed Job Postings Index for Software Developer positions in Japan. Software developer listings in Japan seem to be always on the rise; now at more than 3x the level of February 2020. I struggled to understand the Japan data, as it defied everything we see about the global market. Luckily,  Izadi Egizabal Alkorta  - an Android engineer based in Tokyo - reached out after the publishing of this article to shed light on the unusual upwards trend, sharing: ‚ÄúI believe the weird readings in Japan could be explained by how Indeed is becoming more popular of a platform here. I now often see Indeed Japan's  advertising  both on YouTube and around Tokyo. This could be combined with the fiscal year budgeting timings (first in April with the new fiscal year and then October after assessing their funds after half a year); explaining the upwards trend & the spikes respectively.‚Äù What can we take from the Hacker News and Indeed data points?  The Indeed data points provide lots of regional data: There was a peak in software developer positions posted on the forum between mid-2021 and mid-2022 for the US, Canada, Australia and UK. The US, Canada and UK are currently seeing some of the lowest numbers of developer job listings since Feb 2020. Germany, France and Australia still have significantly more developer jobs than in February 2020. Japan is a market where developer jobs  on Indeed  keep growing. However, this is partially due because Indeed is gaining market share in the country, and partially because of how fiscal budgeting happens in April and October in the country. All together, we can say that the second half of 2021 saw a spike in software engineer job listings, and also that listings are today roughly at the level they were in February 2020 in the US, Canada and UK, and for the Hacker News startup and scaleup job opportunities. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The full The Scoop edition additionally covers: Amazon job cuts deepen.  Last week, the hot topic at Amazon was the leadership doubling down on a return to the office for staff. On Monday, the focus changed when the tech giant unexpectedly announced 9,000 more job cuts, including from profit center AWS. I talked with Amazon engineers to get another pulse check.   Exclusive . Triplebyte shutting down.  The startup aiming to make hiring software engineers easier raised $48M in 8 years. It‚Äôs now been acquired by rival startup Karat, in what looks like a fire sale. What does this acquisition signal to other startups?  Analysis. Pay transparency changes in the US.  Since January, companies hiring in several US states need to share pay details upfront. How could this change affect the market? I asked the founder of Complete, a startup focused on compensation.   Exclusive . Why was Dollar Shave Club‚Äôs website down for 8 days?  Unilever bought the shaving blade delivery service for $1B in 2016. In October of 2022, the popular service‚Äôs website went dark and was unusable for more than a week. What happened, and what could engineering teams learn from the incident?   Exclusive. Read the full The Scoop. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/amazon-return-to-office/", "title": "Amazon doubling down on RTO (return to office) - exclusive", "content": "\n             Originally published on 16 March 2023. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get full newsletters twice a week,  subscribe here . One month ago - on 17 February - Amazon announced its new remote work policy. From 1 May, employees are expected to spend at least three days per week in the office. I shared insider details  on the unprecedented pushback that this new policy has received. A big part of the pushback came because of three big reasons: Many employees accepted offers from Amazon with the understanding that their position will be full remote. About 30-40% of Amazon‚Äôs current staff was hired in the past 18 months, based on an engineer I talked with, looking at the ‚ÄúOld Fart‚Äù ranking - a system that shows what percentage of employees were hired after you. Plenty of employees are not within commuting distance from their assigned office. From 2021, directors had the autonomy to decide if their teams worked as remotely, hybrid, or in-office. When hiring employees, directors often assumed that this setup would stay permanently. At the time of publishing, more than 30,000 employees signed a petition asking for this new RTO policy be reversed, and more than 32,000 people joined an internal Slack channel to protest against the RTO policy change, I confirmed with a current software engineer. As we covered in  The Scoop #39 , this petition was addressed to  the S-Team  and reads: ‚ÄúWe, the undersigned Amazonians, petition to reverse the RTO initiative announced Friday, February 17, 2023, and propose Amazon reinstate the remote-work policy that empowers teams and individuals to determine and adopt the work style that works best for them - remote, hybrid or in-office.‚Äù Engineers I talked with were hopeful that Amazon‚Äôs leadership team - the S-Team - would reverse the policy or at least soften it. Until now, the S-Team did not communicate further about these changes. Until today, that is. Today - on 16 March - Amazon updated their FAQs about RTO. There is no softening of the policy: Amazon is doubling down on it. The company confirmed that building assignments for employees will be published by 14 April - referring to the building those employees need to commute to. They also published answers to 28 frequent questions, including these (emphasis mine): Q: ‚ÄúIf I now live far away from my assigned office, do I need to come into the office 3 days a week once my building is ready?‚Äù A: ‚ÄúYes.  We expect all employees to return to their assigned office at least three days a week  when their building is ready. If there is a reason in which you cannot do so, please discuss with your manager to explore options such as allowing extra time until you can relocate back to your assigned area of transferring to another team near your location.‚Äù The question about when your team is remote but you are not: Q: ‚ÄúWhat if I‚Äôm the only or one of just a few people from my team in the office I‚Äôm assigned to - do I still need to go in at least three days a week?‚Äù A: ‚ÄúYes. We believe that employees are much more likely to understand our unique culture and become part of it if they are surrounded by other Amazonians in person, even if not on their immediate working team.  We encourage managers to work towards having as many of their team members together in one physical location as possible . We recognize that this will take time, and in some cases, managers may choose to make an exception and designate certain individuals as remote, but this will be a very small minority of the company overall.‚Äù Sales and Customer Support will probably be exempt from the RTO requirement: however, employees do not yet have details on exactly what teams. For people outside Sales and Customer Support - such as Engineering - exceptions need to be requested to work remotely. If the exception is not related to a disability accommodation: this exception requires  S-Team  approval - which, practically, means an SVP or VP-level approval. On exceptions: Q: \"Are there exceptions to returning to the office three days a week? If I'm unable or unwilling to return to the office, how do I request an exception to work remotely?\" A: \"Yes. As there were before the pandemic, there will be exceptions for certain roles and functions that require remote status. For example, some in sales or customer support have historically had remote-working status and that will stay the same moving forward. If your role or function does not allow for remote-work status, you can request an exception to work remotely by starting with your manager to discuss your situation (...) An S-team member approval will be required for remote work status.\" Talking with engineering managers at Amazon (called  SDMs  here), those SDMs ¬†did not have details on how exceptions work, and neither did their directors. Engineering managers I talked with hope to get more clarification on the exceptions process later on. So what is the mood like inside Amazon?  Grim, talking to engineers. On Slack, people are talking about resigning, and the topic of unionizing is coming up more frequently. Amazon is known for being a company that  wants to stop unionization  by every means possible - so bringing up unionization - or, as engineers, I talked to called it: ‚Äòthe forbidden U word‚Äô is an unusually strong response. The same engineers upset about the RTO policy here to stay are also talking about canceling their Prime memberships or boycotting Amazon. What I hear from all of this is that many engineers find their situation hopeless: I am talking about people living too far from an office to make their commute practical. These people have no other option than to apply for a remote work exception - and hope they get it from the S-Team. Failing that: it will be a very long commute from May or having to find another job and resign. What does Amazon‚Äôs approach signal for other companies?  I consistently pay attention to what Amazon does, as the company has read the market well for the past decades: both from a business perspective, and also from how to attract and retain software engineers - doing this in a frugal way. The fact that Amazon‚Äôs S-Team did not blink, and refuses to soften the return to work policy signals that they either don‚Äôt expect much attrition, or have calculated with additional attrition. Given that the company is in the middle of  cutting 18,000 positions , there‚Äôs a fair chance that this RTO policy is a way to further increase attrition. At the same time, looking at the market, it‚Äôs hard not to ask the question: if people want to leave, where will they leave to? Meta just announced more cuts - and closing all 5,000 open positions. Dozens of tech companies have put similar, 3-day return to office policies in place starting from December, when an  RTO wave started , as we covered  in The Scoop #34 . There are, of course, still companies out there that are hiring for either full-remote or remote-friendly roles: a large number of startups and scaleups, and some better-known tech companies like Shopify, Spotify, GitLab or Automatic. Still, I cannot help but observe that we have passed ‚Äúpeak remote work,‚Äù and workplaces that have been office-first before the pandemic: most of them are reverting to a hybrid setup of 3 days per week in the office. Just like Meta has  hinted of doing exactly this , likely preparing for a policy change, also to target three days per week in the office. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Meta: a second round of layoffs and restructuring to come.  The tech giant announced it will let another 11,000 staff go, and is also closing 5,000 open positions. I talked with software engineers there to get a sense of the mood inside the company, and what they expect will happen.  Exclusive . Is ChatGPT causing panic within Big Tech?  Large-scale language model ChatGPT is taking the industry by storm, despite Big Tech companies having invested heavily for years in natural language processing (NLP) teams. Are these teams now panicking, and can we expect Big Tech to increase or decrease investment in NLP?  Analysis . How much do full-remote take-home exercises pay?  During their interview process, several full-remote companies ask software engineers to complete take-home exercises, which can take several days to complete. Among companies which pay candidates for their time, what are the rates? I gathered details from engineers.  Exclusive. Read the full issue here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-state-of-startup-funding/", "title": "The state of startup funding", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of six topics in today‚Äôs subscriber-only  The Scoop issue . To get full newsletters twice a week,  subscribe here . A recent report in  Carta‚Äôs newsletter  caught my eye: The state of angel investing, as reported by Carta. Source:  Carta‚Äôs The Data Minute newsletter Angel rounds ‚Äì or pre-seed rounds ‚Äì usually total less than $1M in funding raised. These rounds are often invested in an idea, without the validation of a product-market fit. Such a steep decline in the volume of angel rounds is concerning, as it may mean we see fewer companies ‚Äògraduate‚Äô into seed rounds when they validate there‚Äôs a problem space worth solving for. But how indicative of the broader market is this one data point? I decided to dig in and got my hands on additional data from Pitchbook and Dealroom. I also got an early look at the Q1 2023 Venture Monitor report by PitchBook and NVCA. This report shares data and analysis on quarterly US VC dealmaking, exit and fundraising activity. It confirms Carta‚Äôs findings that the angel and seed market‚Äôs at a 2.5-year (10-quarter) low: Angel and seed rounds have hit a 2.5-year low in the US. Source:  PitchBook-NVCA Venture Monitor Q1 2023 Now let‚Äôs look at the stages after seed: Series A and B; also known as ‚Äòearly stage VC.‚Äô Here‚Äôs how investments in the US have changed, quarter-on-quarter: Series A and B rounds at an 11-quarter low in the US. Source:  PitchBook-NVCA Venture Monitor Q1 2023 And what about Series C and D rounds; late stage VC funding? Things look more grim: Series C & D rounds haven‚Äôt been so low in 5 years. Source:  PitchBook-NVCA Venture Monitor Q1 2023 The last funding round stages tend to come before an exit: these are Series E or later rounds - also referred to as ‚Äúventure growth‚Äù rounds. Things are looking better in this category: Series E and later rounds are on the rise, and at the 2020 levels. Source:  PitchBook-NVCA Venture Monitor Q1 2023 The goal of VC-funded companies is to achieve an exit and generate returns for investors. An exit means either listing on a stock exchange or being acquired. We know IPOs are few and far between at present, but what about other exits? The data‚Äôs even worse than for late-stage funding: Exits for VC-funded companies have not been this low for a decade. Source: Source:  PitchBook-NVCA Venture Monitor Q1 2023 What about Europe?  I turned to  Dealroom  for a sense of the funding round there. Here‚Äôs how Angel rounds in Europe are doing: Angel investments in Europe. Source:  Dealroom In 2022, Angel rounds were at the lowest by cumulative value since 2015, which is even worse than we‚Äôve seen in the US. But what about seed rounds in Europe, typically of $1-4M by check size? Seed investments in Europe. Source:  Dealroom Seed investments have dropped since 2021, but in 2022 were around the same level as in 2020 ‚Äì and well above 2019. Zooming out, how have all investment rounds stacked up against previous years? Based on data for Europe, via Dealroom: VC investment in Europe, as aggregated value. Source:  Dealroom Wow, what happened in Q1 2021, when VC funding practically doubled? This was when the Covid-19 pandemic and lock downs were in full swing, and digital businesses boomed. And venture capital investment in tech also soared from that point. The peak of amounts invested was Q2 2021, but investment remained outstanding until Q3 2022. I analyzed the Dealroom data by stage to understand more about today: Series A investments still at early 2021 levels (!) Series B back to 2020 levels Series C back to 2020 levels Series D+ at 2020 levels Venture capital investment in Europe seems to be at or slightly above 2019-2020 levels across the market, by this aggregated chart. Yes, it‚Äôs a dramatic fall from 2021, but in line with investments pre-2021. So let‚Äôs sum up the findings. In the US: Angel and seed investments are back at 2020 levels (a 2.5-year low) Series A & B investments are back at 2020 levels (almost a 3-year low) Series C & E ¬†investments are back at 2018 levels (a 5-year low) Series E+ are back at 2020 levels, but on an upwards trend Exits are at 2013 levels (a 10-year low!) In Europe: Angel investments at a 7-year low Seed investments back to 2020 levels Series A still at early 2021 levels Series B+ back at 2020 levels In the US and Europe, the venture capital market has reverted to 2020 levels or earlier.  In Europe, investments seem to be back to 2020 levels across most categories. It is the US where things are a bit more puzzling: pre-seed, seed and Series A investments dropped to 2020 levels, but Series B+ investments seem to have fallen more, to 2018 levels. Most eye-catching is the lack of exits, which are at a 10-year low. Exits can fuel more VC investments, so the lack of these exits will surely make it harder for VCs to raise more funds from their limited partners (LPs). So should we see 2021‚Äôs high volumes as a symptom of an ‚Äúunhealthy‚Äù funding environment?  There was so much money in the market in 2021, as the charts clearly show. This level of VC investment appears unprecedented. Was it a good thing? Here‚Äôs what Stripe CEO Patrick Collison thinks, from the company‚Äôs annual letter: ‚ÄúAfter a decade-long bull run, venture capital invested in startups declined by two-thirds in Q4 2022 compared to Q1 2021. While the market may have overcorrected, a correction was in order: in describing financing conditions in 2021, few would reach for ‚Äúhealthy‚Äù as their first adjective.‚Äù My take is that in the way Covid-19 was an unforeseen ‚Äòblack swan‚Äô event, so was the boom in tech and in VC-funding in 2021, which was definitely impacted by the pandemic, thanks to businesses and consumers shifting to digital, as a result of the lockdowns making in-person activities difficult and non-practical. Now we can see how much VC-money poured into startups during 2021, it seems to explain why the end of 2021 was the  hottest tech job market of all time : it was fueled by the highest-ever level of venture funding, along with the stock market rallying and Big Tech doubling down on hiring. While less startup funding ‚Äì and fewer job openings! ‚Äì are not great news, reverting to pre-pandemic levels honestly seems like something which was always going to happen eventually. And still, the fact that there is significant venture capital flowing into the system is the reminder that tech has an established track record for creating high returns: and this expectation seems to have not changed from previous years. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Did Twitter fire too many people?  Laying off 50% of staff 6 months ago ‚Äì and more since ‚Äì is starting to have a visible impact. Twitter‚Äôs firing spree looks like it was too fast and very expensive in several countries.  Exclusive . An update on Amazon‚Äôs return to office (RTO) plan.  The company rejected a petition signed by more than 30,000 workers against returning to the office on 1 May. Could this controversy be an opening for smaller companies to poach Big Tech engineers?  Exclusive details and analysis. Stripe‚Äôs impressive Ruby codebase.  In its annual letter, Stripe mentioned it has more than 50 million lines of code. I was interested in how this translates to the number of services, and talked with engineers to learn more about it and the codebase.  Exclusive . Is diversity spending taking a hit at tech companies?  A software engineer at a diversity, equity and inclusion (DEI) vendor reports business is poor. What can vendors perceived as ‚Äòcost centers‚Äô do to reduce customer churn during challenging times like now?  Exclusive . Amazon‚Äôs ChatGPT guidance.  Access ChatGPT or Bard from an Amazon computer and you‚Äôre greeted with a screen of guidelines about how to use ‚Äì and not use ‚Äì these AI tools.  Exclusive. Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/critical-thinking/", "title": "Is Critical Thinking the Most Important Skill for Software Engineers?", "content": "\n             Critical thinking will only become more important as AI tools spread more. How do you get better at this, and why do yourself a service by rejecting jargon and by not taking things at face value from \"thought leaders.\" When I think back on the software engineers I looked up to, they all shared this trait where they never took anything at face value. They regularly questioned statements that did not make sense to them, no matter how small the topic was: even if it involved admitting they did not understand a concept. After a while, I started adopting this approach. I still remember being in a meeting where a Very Respected Engineer was explaining how they are building a project, and they said something along the lines of \"and, of course,  idempotency  is non-negotiable.\" I didn't know what idempotency was, and thus I could not tell why it was non-negotiable. I looked around, and everyone was nodding: but I knew I was missing  something . So I raised my hand and asked if they could explain what idempotency was, and why it was non-negotiable. This person explained it. As we got into details, it turned out that there was some part that was negotiable: as we didn't need idempotency for all endpoints. After the meeting, I asked other engineers in private who were nodding along if they knew what idempotency was. Three out of the four people admitted they also had no idea, and were glad I asked. So then, why were they nodding along? And why did it feel to me that I needed \"courage\" to admit I did not understand something and ask for an explanation? Jargon masks partial understanding I can answer why I felt uneasy about asking what a term like idempotency means: it's because I was admitting that I don't understand a part of tech jargon. And, to be fair, such admission implies that my professional experience or skills are below the person who knows what this jargon means, and knows how to use it. Or does it? Throughout my years as an engineer and later as an engineering manager I started to observe something interesting. Some senior+ engineers  loved  using jargon and used it all the time. However, they did this in an odd way: They would often \"shut down\" less experienced engineers by throwing in jargon, and then pointing out that those engineers did not understand the conversation. Basically, they were locking out these more junior engineers from discussions: and those engineers started to avoid talking to these more experienced engineers. They would \"win\" some arguments by throwing in jargon, and asserting their professional dominance  Their arguments were not always sound: and when I could follow along - knowing the jargon by now! - I could challenge them. But anyone not understanding jargon could not do the same. When asked to explain their ideas without jargon, they either struggled or refused to do so. Of course, I am generalizing, and there were a few engineers who used jargon, and could also explain things simply, and were open to doing so when less experienced people were around. By I started to develop wary of engineers who refused to explain things in simple terms when asked to do so. If someone cannot explain a concept without jargon, I now doubt they truly understand what they are talking about. The true test of properly understanding a given topic is whether you can teach it to someone else. Explaining your thoughts without the use of jargon - or gradually introducing jargon - is a form of teaching, as you need to adopt to someone who has less domain knowledge.  When you hear someone use jargon you don't understand: ask the other person to explain in simpler terms.  Doing so helps with two things: It improves your understanding, and you learn what the jargon means. If the person cannot explain their thoughts with little to no jargon: either they also don't fully understand the language they use, or they struggle to communicate a complex concept in simpler terms. Either way: their ongoing jargon usage masks that they have yet to properly understand what they are talking about. Dropping some of the jargon might even be beneficial to  them!   The rise of the \"thought leader\" Another phenomenon I'm observing in engineering circles is the rise of \"thought leader\" or \"tech influencer\" type of people on social media. These are people who have a sizeable following or subscribers, and are often labeled like this by others, or sometimes reference themselves as such. I now also find myself in this group, thanks to larger than usual social media numbers in terms of audience and more and more people referring to me as a \"thought leader\" or \"influencer,\" whether I like it or not (and  I don't like it .) These people - like myself - share opinions, observations, and views. Many less experienced engineers take these views at face value, assuming as many other people are paying attention to this person, this \"famous\" person must be right. ¬† I can assure you that this is not the case. There is little connection between social media signals like the number of followers and the depth of expertise. If anything, domain experts tend to have a much smaller profile on social media, as they are busy with work, and relatively few domain experts make regular time for social media. I  urge  people to avoid taking statements from \"famous\" people at face value and use critical thinking.  Ignore the social media signals - like views, followers, and so on - and focus on the argument. Is it an opinion that comes with no backing? Is it an observation from their environment? Do they have any references to point to? Instead of taking recommendations from these people: take whatever they share as input, and then do your research. If it's a recommendation of a tool or technique to use: don't use it right away, but stop and think if you have a problem you need to solve that this tool or technique can help with. If so: gather alternatives, and compare them. This point on \"thought leadership\" applies to me as well and to this article: I  suggest  you not take it at face value just because of social signals like likes, views, and so on. Those are all poor signals. Is accepting jargon usage and giving in to \"thought leadership\" resulting in less critical thinking? Both \"jargon architects\" and \"thought leaders\" are figures of unlikely authority. Even though neither group has any formal control or elevated domain expertise, I observe fewer people challenging them in a professional setting. For \"jargon architects,\" this tends to happen because engineers assume that as they don't understand the jargon, they must also not understand the thought process, so do not challenge them. For \"thought leaders,\" many people assume that because many \"follow\" this person, their insights must be universally applicable. So challenge both! Critical thinking is an approach that helps avoid being influenced by both groups: and thus helps avoid wasting time following recommendations with basic flaws, or approaches that won't work for your use case. And by questioning ideas, you also improve your critical thinking. Improving your critical thinking muscle The software engineers I looked up to, who always challenged when they did not understand something: they were all, without exception, critical thinkers. So how do you get better at critical thinking?  My approach is to simply 'think for yourself,' and don't move on until you understand  why  to do things, or  how  things are done. A few approaches I follow, that could also be helpful for you: Un-jargon the jargon.  If you come across jargon you don't understand: get to understand this! If someone is telling you jargon terms, ask them to explain simply, and challenge them if they cannot do so. Otherwise, understand the jargon in simple terms, yourself. ChatGPT can be an unexpectedly useful to break down jargon terms: just don't forget to verify its definition, as ChatGPT can make things up. Validate information and do your research.  When presented with information: don't assume it is correct. Look for sources, and question where the details come from. An example of this was how, when I was writing a book on resumes, I came across the concept of \"ATSes rejecting resumes.\" that hundreds of sites took over on the internet. I was sceptical that any system would automatically reject resumes, because I never saw this as a hiring manager. I did research, and turns out  all of this is a hoax : but many software engineers writing their resumes assume it to be true. Ask \"why\" and \"how.\"  Until you understand why something is done, or how something works: keep asking, and keep researching. This is a useful skill in all parts of life: from challenging the product person on why a piece of work needs to get done, to talking through with a peer on how a new system will be built, and finding edge cases that no one thought of. Avoid following the crowd, when you have not cleared #1, #2, and #3.  I've observed several hype cycles in tech when people get involved in new areas in technologies, when they lack understanding of how things down. Crypto/blockchain was a good example: I observed engineers get into the space without being able to answer what blockchain was, or how it worked, and how it compared to other alternatives, and what practical use cases were. My point is not that you should not get into new areas - because you should! But do your research and apply critical thinking before you do. Despite the recent cooling, the engineers who did this are still in the space because they know why they got involved. People who did not such research and just followed the crowd, hoping to make a lot of money: they got disappointed and left, feeling burnt. Critical thinking will only become more important as AI tools spread more.  Without critical thinking, you let others do a lot of the thinking for you, and fail to spot problems with arguments. When encountered with jargon, you assume the other person must know better. Similarly, when coming across a \"thought leader,\" you assume they must be right. What happens as AI-generated text becomes more common, and perhaps some of your colleagues will \"outsource\" their thinking to these tools? There will be the people who don't fully understand the output, but assume it must be right. And there will be the critical thinkers, who question the parts they don't understand. It's not hard to predict which group will be more successful, professionally. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/lyft-in-trouble/", "title": "Lyft in Trouble", "content": "\n             Originally published on 30 March 2023. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get full issues twice a week,  subscribe here . Disclaimer: I worked at Uber, Lyft's US competitor, between 2016-2020. As always, I aim to remain independent in my analysis: I hold no positions in any of the companies mentioned in this article, and have not been paid to write about any of the companies.  See my ethics policy  on more details on how I aim to stay fully independent. Update: 3 weeks after this article was published, on 21 April 2023, the Wall Street Journal  broke the news  that Lyft plans to cut 30% of its workforce.  Subscribe to The Pragmatic Engineer  to get the occasional analysis that is ahead of the news in your inbox. Lyft is a rideshare platform that‚Äôs a direct competitor to Uber, operating in the US and Canada. The company was founded by software engineers Logan Green and John Zimmer in 2012 and raised $4.9B in funding before going public in 2019, at a value of $29B. Today, the market cap of the company has collapsed by nearly 90%, to $3.37B at time of publication. This is less than it attracted in fundraising. The company is bleeding money: in 2022 it brought in $4.1B in revenue, while making a $1.6B net loss, with $1.8B cash (or its equivalent) on hand. At first glance, these numbers look worrying, but the true situation is not nearly as bad. The adjusted net loss ‚Äì omitting stock-based compensation or payments related to layoffs into account ‚Äì was $531M. Still, an adjusted net loss of $531M is still not pretty, knowing that Lyft has $1.8B in cash-like reserves. It is pretty telling that the company‚Äôs revenue was $4B in 2022 but its market cap is a mere $3.3B. A company trading below its annual revenue is unusual. For example, the market cap of Uber is roughly 4x the annual revenue (2022 revenue of $17B, market cap at $61B). In response, Lyft has taken drastic action, announcing a new CEO on Tuesday, 27 March. David Risher, who was Amazon‚Äôs SVP for US Retail between 1997-2002, is assuming the role. Both Lyft‚Äôs cofounders are stepping away from management duties. This change signals its ‚Äú wartime ‚Äù at Lyft.  There‚Äôs plenty of other signs, too: Lyft‚Äôs market share has stagnated versus Uber‚Äôs, with 28% of the US ridesharing market, compared to Uber at about 72%, as per  Bloomberg Second Measure . Over the past 5 years, its market share has been static: at the end of 2017, Uber held 71% of the US ridesharing market. Stock is down by close to 80% in 12 months - and 90% from the IPO price Founders who put company culture first seem to be withdrawing We covered more  on the difference between ‚Äúpeacetime‚Äù and ‚Äúwartime‚Äù at tech companies . What can employees expect will happen? Major changes could well be coming, given the financial situation of the company. The most obvious step is to halt everything that doesn‚Äôt contribute to revenue and to cut costs aggressively. It‚Äôs likely the company will eliminate positions it doesn‚Äôt need, and organize teams to do more with fewer people. Cost centers will likely see no additional investment, and I wonder if the new CEO will support investing in Lyft‚Äôs extensive  open source projects , including  Envoy  ‚Äì a cloud-native proxy ‚Äì or  Clutch , an infrastructure platform management platform.  We touched on Clutch  in the deep-dive on Backstage , when discussing alternative developer portals.  This is additional work Lyft does for free for the community; will it remain a priority? Lyft‚Äôs innovative stock-based compensation approach is now a big problem.  In 2020, Lyft‚Äôs stock price was on a downward slope, and the company changed how it awarded stock to employees. Instead of issuing a stock package that converts into stock units when issued and vests over 4 years, with a 1-year cliff, the company now issues a dollar amount of stock every year, which converts to stock units upon vesting. Basically, Lyft removed all the risk in stock price movements for employees. Back in 2020, this change boosted confidence among new joiners who knew exactly what compensation they were getting, even if the stock price dropped. On the downside, if the stock went up, employees wouldn‚Äôt gain. However, today Lyft faces two additional, related problems: The stock price is at an all-time low and still trending down The company is issuing ~20% of its current market cap as stock-based compensation, which leads to sell pressure, pushing the stock even lower Here‚Äôs Lyft‚Äôs stock price changes since their 2019 IPO: Lyft‚Äôs stock price - and thus market cap - is down about 90% since their IPO, and 80% in the past 12 months. One factor that‚Äôs hard to ignore is just how much Lyft‚Äôs stock compensation is dragging the stock down. In 2022, the company spent on stock-based compensation $767M for employees. It‚Äôs safe to assume employees sell the majority of stock that vests: Lyft issues stock akin to cash, with no downside if the stock price goes down. So employees likely treat it as cash, selling on vesting. It is sensible to sell stock when the stock price is trending down: sell it and diversify the investments. Day to day, about $150-200M worth of Lyft stock is traded; around 20M units on average. This means the stock Lyft issues comprises several days‚Äô worth of day trading volume, and issuing this much stock can impact the price by creating sell pressure. If Lyft‚Äôs market cap was 10x what it is today, or the daily traded volume was 10x higher, these stock sales would have much less impact. But if the company continues its stock compensation approach, it could deepen the downward spiral, wherein: Lyft keeps issuing a larger percentage of its market cap in stock Employees sell the vested stock This pushes the stock price lower The company needs to issue more stock for the same equity refresh dollar value Stock compensation is going to be reduced across the company.  The problem for Lyft is that the lower the stock price goes, the more stock it needs to issue relative to the market cap. In 2022, Lyft had to issue $767M of stock, 23% of the current $3.3B market cap! On one end, Big Tech employees could be jealous of people at Lyft; at many companies, stock prices fell and so did total compensation packages. But there‚Äôs a downside to Lyft paying so much in stock compensation when its market cap is shrinking drastically: leadership could look to cut stock compensation. In February, Lyft‚Äôs CFO stated the company aims to cut stock-based compensation in half by next year, saying: ‚ÄúWe are looking for opportunities to significantly cut costs and drive efficiencies. As one example, let me speak to stock-based compensation expense. Our current plans are to reduce this expense to approximately $400 million in fiscal year 2024, through measures such as our previously announced headcount reduction and shifting more of our employee base to international locations. We expect stock-based compensation will vary, but generally come down quarter-to-quarter as we progress towards this target.‚Äù So Lyft plans to hire in cheaper markets. However, this doesn‚Äôt explain how it can cut stock-based compensation by half. In 2020, Lyft already spent $565M on stock-based compensation with 2,700 employees, an average of $207K per employee. In 2022, the company spent $769M on stock-based compensation among 4,400 employees, an average of $174K per employee. To achieve the CFO‚Äôs stated $400M stock-based compensation spend, Lyt needs to: reduce stock paid by ~50%, to an average of ~$90K/employee, if no change in headcount: reduce headcount by ~50% if no change in stock compensation: Both are extreme and I expect Lyft to drastically cut stock and issue less per year, than ever before. If not, the CFO won‚Äôt be able to hit the $400M/year stock expense target. This is all a complicated way of predicting that Lyft will likely start paying less in total compensation. And I won‚Äôt be surprised if the CFO is asked during future quarterly earnings calls, how Lyft is doing at reducing stock-based compensation. Would shareholders have replaced Lyft‚Äôs CEO earlier, if they‚Äôd had the power?  In an important detail, the cofounders must have jumped, rather than being pushed out of their jobs. When Lyft went public, it put a special dual-class share structure in place where the cofounders held 49% of voting power, while only holding 5% of the stock, and could retain this control for 50-60 years. At the time of the IPO, Harvard Law School students Lucian Bebchuk and Kobi Kastiel  analyzed the risks of this structure  and concluded: ‚Äú[The problems with the cofounders holding absolute control and retaining this control for 50-60 years] are expected to decrease the economic value of the low-voting shares that public investors hold (and thus the price at which such shares are expected to trade). Each of the effects that we analyzed can be expected to significantly decrease the economic value of Lyft‚Äôs low-voting shares that public investors will hold ‚Äì and should be fully recognized by these investors.‚Äù The analysis turned out to be correct, and the value of Lyft‚Äôs shares could have also affected by investors having no say in how the company is run. And don‚Äôt forget: the founders still have 49% control of the company. The strategy of dual-class shares that can work well when a company is thriving, and when founders do not need to please investors all the time, can actually hurt the company‚Äôs stock price, as investors know that even a large investment does not buy them a voice. Lyft raised a total of $7.2B in capital yet is worth half of this today.  The company raised $4.9B during venture funding rounds and $2.3B during its IPO, and, still, the company is worth $3.3B at time of publication. Even worse, it‚Äôs making a loss and unable to gain market share versus Uber, which leave few options but to aggressively cut costs and eventually turn a profit as the #2 ridesharing business in the US. The cofounders abruptly stepping down and bringing in a former Amazon executive to attempt to turn the ship around, can be seen as a sensible business decision. It could also be an act of surrender by them and throwing in the towel, unable or unwilling to make the tough changes that are surely ahead for the company. Could we be seeing a reckoning for VC-funded companies that struggle to build a profitable business?  I think this is what is happening at Lyft, and similar other cases will surely play out. It was only in 2020 that Lyft was  paying top of the market  entry-level software engineers than any other company in the US. But with the company being in a financially difficult situation, it‚Äôs valid to ask: does Lyft have the business model to compete with Big Tech compensation packages, and also turn a profit? The era of cheap money and no expectation of making a profit, seems to be over as interest rates keep rising. This means loss-making businesses like Lyft either need to figure out how to turn a profit, like Uber is successfully doing, or risk eventually running out of money. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The full The Scoop  edition additionally covers: A trend of more works councils at tech companies.  Tech companies in Europe have not been big on Works Councils ‚Äì bodies which represent employees ‚Äì but this seems to be changing fast. Councils are now present in almost a dozen tech companies in Germany and the Netherlands. I share details on why this is happening now. ¬† Exclusive . Why did GitHub fire its engineering team in India?  In a somewhat unexpected move, GitHub has let go all of its software engineers in India. Why, and what will this mean for its products? I‚Äôve talked with affected devs for details.  Exclusive. Twitter‚Äôs disappointing equity refreshers.  Software engineers who stayed at Twitter despite its increasingly hostile workplace were promised equity awards, based on performance. But employees I‚Äôve talked with are disappointed with what they got. What could these lackluster awards mean for Twitter‚Äôs future?  Exclusive. A thriving bootstrapped company.  Challenges at Big Tech companies and venture-funded startups dominate the news. For a change, I contacted the founder of  HR Partner , a small, bootstrapped company whose founder wrote its Ruby / JavaScript application for the first 4 years. After a slow start, the company has nearly doubled its team the past few months. Why don‚Äôt we hear more stories like this?  Exclusive. Read the full The Scoop. Update on 31 March: updated the wording on how the company did not issue $769M worth of stock in 2022, but spent this much on stock-based compensation. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/datadog-65m-year-customer-mystery/", "title": "Datadog‚Äôs $65M/year customer mystery solved", "content": "\n             The internet has been speculating the past few days on which crypto company spent $65M on Datadog in 2022. I confirmed it was Coinbase, and here are the details of what happened. Originally published on 11 May 2023. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of six topics in today‚Äôs subscriber-only  The Scoop issue . To get full newsletters twice a week,  subscribe here . Datadog is a leading observability tooling provider which went public in 2019, with a current market cap of $28B. The company made $1.67B revenue in 2022, circa $140M per month. On an earnings call a week ago, on 4 May, the CFO mentioned a ‚Äúlarge upfront bill that did not recur,‚Äù saying: ‚ÄúBillings were $511 million, up 15% year-over-year. We had a large upfront bill for a client in Q1 2022 that did not recur at the same level or timing in Q1 2023. Pro forma for this client, billings growth was in the low 30s percent year-over-year.‚Äù If you‚Äôre like me, you‚Äôd probably skim over this detail, as it‚Äôs 15% here, 30% there. However, analysts attend these calls whose bread and butter is crunching the numbers and figuring out what a company might be trying to hide. A JP Morgan stock analyst did just this, quickly crunching numbers and asking the question: ‚ÄúDavid, looking at the math on this large upfront bill that did not recur, it seems to be about $65 million, if I'm running that correctly. Can you possibly shed a little more light?‚Äú Datadog‚Äôs CFO, David Obstler gave more details: ‚ÄúThat was a crypto company which continues to be a customer of ours. But that was an early optimizer. We had always talked about some of the industries that were most affected and optimized.‚Äú So, who is this mysterious crypto company? Investor Turner Novak  speculated  that it‚Äôs Coinbase: He added he doesn‚Äôt know for certain that it is Coinbase, as other crypto companies have also raised silly amounts of money in the past several years. So, did Coinbase spend $65M on Datadog in 2022? Online there‚Äôs no shortage of theories, or people pretending to be Coinbase employees, such as this anonymous commenter on Hacker News,  claiming  that the $65M was for a 3-year upfront payment (which information I could not verify). I wanted to find the truth, so I tracked down software engineers at the company. And I got my answer: Yes. Coinbase spent $65M with Datadog in 2021, and this was their due bill for that year.  I can confirm this, having talked with both current and former software engineers at Coinbase who shared details of what happened. Here‚Äôs how Datadog‚Äôs CEO explained, on the earnings call on what happened: ‚ÄúThis is one of those situations where this customer was in an industry that got pretty much decimated over the past year. And their own business was cut in three or four, in terms of the revenue. And when that's the case, we really work with customers to restructure their contracts with us. We want to be part of the solution for them, not part of the problem (...) We restructure their contract, so we keep them as a happy customer for many more years and do a deal that works for everyone with their business profile.‚Äù And here‚Äôs what actually happened, as I understand from talking with engineers at Coinbase. Coinbase had an incredible 2021 and did not have to care about costs. The company went public in June that year, and was valued at an eye-popping $86B. In comparison, nearly two years later the company is valued around $14B, a 75% decline. During the boom, trading volumes were surging, beating record after record, and Coinbase could barely keep up. Here‚Äôs how Coinbase CEO Brian Amstrong summarized it: ‚ÄúSo, obviously 2021 was just an incredible year for Coinbase, the kind of thing that you see very rarely in your lifetime, in a business career (...) We hit an all time high in our monthly transacting users of 11.4 million, which is 4x year-over-year, 400% pretty incredible.‚Äù Following the IPO in summer 2021, nobody at the company cared about infra costs; the only focus was growth. The company racked up huge bills for the likes of AWS, Snowflake, and also Datadog. And so, the $65M bill was for Datadog, for 2021. Coinbase settled the bill in Q1 2022. In early 2022 Coinbase suddenly needed to cut back infra spending.  The crypto industry hit a sudden chill, affecting Coinbase‚Äôs business. As revenue dried up, the company turned its attention to reducing its overly high costs. For observability, Coinbase spun up a dedicated team with the goal of moving off of Datadog, and onto a Grafana/Prometheus/Clickhouse stack. A quick summary of these technologies: Prometheus : a time series database.  A very popular open-source solution for systems and services monitoring. Prometheus collects metrics from configured targets (services) at given intervals. It evaluates rules and can trigger alerts. It‚Äôs mostly written in Go, with some Java, Python and Ruby parts. Prometheus stores time series in-memory and on storage (HDD or SSD), using an efficient and custom format, and supports  sharding  and  federation . Prometheus  is part  of the Cloud Native Foundation, membership of which indicates that it‚Äôs safe to build on top of Prometheus, as it‚Äôs actively maintained and will continue to be. Prometheus can be self-hosted, but several cloud providers also offer managed Prometheus services: both Google Cloud and AWS have this service in production, while Azure has it in preview. Grafana : the frontend for visualizing metrics.  Grafana is a popular source analytics and monitoring visualization solution. If you need to display or dive into metrics or alerts, it‚Äôs the go-to tool, and widely used across tech companies. When I was at Uber, Grafana powered many of our graphs. Here‚Äôs an example of Grafana dashboards you can  try out : Example Grafana dashboards. Source:  Grafana.org Clickhouse : log management. A fast and open-source column-oriented database management system, which is a popular choice for log management. Clickhouse is written predominantly in C++, and is widely used across the industry. For example, Cloudflare uses Clickhouse to store all its DNS and HTTP logs ‚Äì which is more than 10M rows per second! ‚Äì and Uber uses Clickhouse as its central logging platform. Coinbase spun up its in-house approach without the main goal of saving costs, but to have full control and ownership of observability. Observability and reliability is a major differentiator for Coinbase, as it gives a competitive advantage over rivals. However, with the crypto market cooling, costs became a major focus, and it was clear the in-house Grafana/Prometheus solution was much cheaper. The Coinbase team had been double-writing the new stack for months, confirming everything worked well, and ironing out any issues. We cover approaches like double-writing in the issue  Migrations done well . So Coinbase was ready to pull the plug on Datadog, but Datadog saved its customer relationship at the last minute by making Coinbase a very appealing deal it could not refuse. In future, the bill for Datadog would be nowhere near the $65M of 2021. As Brian Amstrong said of the crypto market during 2021, a $65M bill is the kind of thing you see very rarely in a business career. I asked an engineer at Coinbase who used the in-house stack and Datadog how they felt about the decision to stay on Datadog. They said it was ultimately the right decision, considering the reasonable costs, and the superior Datadog development experience. Coinbase could  eventually  have engineered a similar experience in-house. However, to provide a similarly seamless developer experience, would have likely taken tens of engineering years. ‚ÄúExpensive‚Äù in observability tooling is relative.  Let‚Äôs assume that today Coinbase ‚Äúonly‚Äù spends, say, $10M per year on Datadog. Is this too much? Looking at the headline number, it‚Äôs tempting to think so. However, let‚Äôs look a level deeper. A platform like Datadog helps prevent outages, detects them instantly, and mitigates them faster. In 2022, Coinbase had 17 outages, totalling about 12 hours of downtime. The company‚Äôs daily average revenue is around $9M/day, based on their 2022 earnings. Assume that Datadog cuts the number of outages by half, by preventing them with early monitoring. That would mean that without Datadog, we‚Äôd look at 24 hours‚Äô worth of downtime, not 12. Let‚Äôs also assume that using Datadog results in mitigating outages 50% faster than without - thanks to being able to connect health metrics with logs, debug faster, pinpoint the root cause and mitigate faster. In that case, without Datadog, we could be looking at 36 hours worth of total downtime, versus the 12 hours with Datadog. To put it in numbers: the company would make around $9M in revenue it would otherwise lose, Now that $10M/year fee practically pays for itself! What can we learn from Coinbase‚Äôs cost reduction exercise?  Vendors are tight-lipped about their customers reducing spend, and it is a lucky coincidence that Datadog gave enough hints to find out who their big ‚Äúearly optimizer‚Äù customer was, and find out more details. But is the story of Coinbase a one-off? I‚Äôm not sure that it is. Three months ago, I covered the trend that  Tech companies are aggressively cutting back on vendor spend  - and two months later, The Wall Street Journal also  reported  on the same topic. Coinbase, to me, seems to have been early to the cost optimizing trend. However, look closely at the  responses  I gathered, and ‚ÄúAWS‚Äù and ‚ÄúDatadog‚Äù are the two most mentioned vendors as targets for cost savings. This is simply because infra and observability costs tend to be the highest and AWS is the leader for cloud infra, and Datadog the leader for observability. Datadog CEO Olivier Pomel confirmed that this type of optimization is happening across all of their customers, saying: ‚ÄúWhen we look at our data, when we look at what we hear from the hyperscalers also, we also listen carefully to their commentary on what they foresee in the near future, we don't see anything that gives us confidence that we can call an end to optimization in the next quarter or the quarter after that. So as far as our guidance goes and our plan for the year, we assume that this is going to continue at a similar level for the rest of the year.‚Äù I have since confirmed several large companies with thousands of engineers building their own Grafana/Prometheus stack, planning to migrate off of their current observability vendor and operate the observability stack themselves. But why is this? Above $2-5M/year annual spend is where bringing a vendor in-house tends to come up.  And this is because it is around this number where the cost of hiring a whole team to do what a vendor is doing can  theoretically  make sense. As a rule of thumb, you can get infra costs much lower than what vendors charge. This is because both the vendor, and you are probably using the same Cloud infrastructure provider, which is usually AWS, GCP or Azure. However, you would need to hire and staff a dedicated engineering team to build and run that infra. So, from a cost perspective, this is the math problem you need to solve. At what point does is this equation become true: $infra_cost + $platform_team_cost < $current_vendor_costs In this question, $platform_team_costs will be above $1M, and sometimes above $2M. This is because you need to have a team of 4-5 engineers, plus a manager, and their average total compensation will be somewhere between $150-400K/year, depending on your cost basis. So when you have a bill that is above $2-3M/year, it can start to look tempting to build, rather than buy. The economics of this decision start to get down to how high of a margin is the vendor charging on top of raw infra? The curious question with Coinbase is: did they consider building, when talking about such a huge projected cost that could justify having a team? In the case of Coinbase, building in-house following a $65M bill was a clear no-brainer. They could hire a team of 10 senior and staff-level engineers in the Bay Area, and still have this team cost less than $5M/year. And they then only need to budget for the infra costs, which they can presumably bring down to low double digits per year. Coinbase planned to move off Datadog, but ended up staying. However, it is not the only larger tech company thinking about bringing observability in house. I have another exclusive which even Datadog might not be aware of, yet. This report is about Shopify and its plan to move off Datadog. But could recent layoffs change things? I cover details on this topic in  the full The Scoop . This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The full The Scoop edition additionally covers: Will Shopify migrate onto an in-house observability tool?  Shopify decided to build its own observability platform and migrate off Datadog. This plan looked certain until Shopify cut the very engineering teams that built its new platform. What happens next?   Exclusive . Microsoft cuts its compensation targets . Almost exactly a year ago, Microsoft employees received a welcome surprise: they could expect higher-than-usual compensation increases. Yesterday, another unexpected email came, but its contents were the opposite of last year‚Äôs. I talked with managers and engineers at the tech giant for their reaction to disappointing compensation news.  Exclusive . Shopify letting go most staff in Germany.  As part of cutting 20% of staff, most people in Germany were made redundant. These layoffs happened a week before a Works Council election in Germany. Is this unlucky timing, or is there more behind the move?   Exclusive . Senior compensation trending down in Ukraine.  Ukraine is one of the few countries for which we have access to nationwide data, through job site Djinni. Data for the first part of this year are in, and they point to something not seen recently: senior engineers are making less. Is this a local trend, or could we see it happening in other countries?   Analysis . A follow-up to this week‚Äôs public tech company compensation article . Why was Netflix lower down the list than many software engineers expected? Plus, new details about Roblox and why Jack Dorsey‚Äôs total compensation is $2.75.  Follow-up. Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/pagerduty-alternatives/", "title": "PagerDuty (and OpsGenie) alternatives", "content": "\n             This is a response to  a tweet  that asked something along the lines of: \"Why is there no competition to PagerDuty/Opsgenie? People in my team say it‚Äôs ‚Äújust connecting to the Twilio API‚Äù but if it were that easy, there‚Äôd probably be a ton of competition.\"  PagerDuty  is the market-leading incident alerting tool.  OpsGenie  is Atlassian's incident management tool, which is widespread thanks to distribution. If you're a JIRA or Confluence customer, it's trivial to connect OpsGenie, and to use it together with your existing Atlassian products. However, there are actually a lot of alternatives to these well-known tools! PagerDuty has excellent brand awareness, and competitors are pretty hard to find. This is despite PagerDuty innovating very little the past couple of days ‚Äì but many of their competitors stepping up the game and offering better features, often at a lower price. Let's change this awareness problem! Here's what a software engineer  said  after reading this post: \"We decided to go with PagerDuty because it seemed like a shallow competitive field. This is a helpful blog post ‚Äì maybe would have done something different had I had this list earlier!\" 20 incident management and alerting alternatives to PagerDuty Below are 20 alternatives, and one sentence on how they describe themselves on their website.  Note that several of the below are actually better than PagerDuty even though they are not more expensive ‚Äì thanks to supporting not just paging, but end-to-end incident handling as well! This is what disruption looks like! incident.io  (disclaimer: I'm  an investor  and have a bias thanks to knowing the team and how fast they ship). \"From the first alert to the final follow-up, incident.io integrates on-call, incident response, and status pages into one powerful incident management platform.\"  Note that the cofounder and CPO at incident.io contributed to the article  Incident review best practices . FireHydrant . \"Designed for modern engineering teams, FireHydrant simplifies and streamlines every aspect of your incident process.\" ZenDuty . \"End-to-end incident alerting, on-call management and response orchestration platform.\" Spike   \"We alert you of your incidents via Phone calls, Whatsapp, Telegram, SMS, Email, Slack, Microsoft Teams, and Discord before your customers do.\" ilert . \"Manage on-call, respond to incidents and communicate them via status pages using a single application.\" Blameless . \"Assemble responders, manage communications and restore service without ever leaving Slack.\" SquadCast  \"Deliver and scale super-reliable services with one platform for all your Reliability workflows. Fix issues faster and optimize savings.\" Datadog incident management . \"Track and collaborate on incidents from start to finish all within a unified platform. No context switching or manual processes.\" Grafana OnCall . \"An easy-to-use on-call management tool that will help reduce toil in on-call management through simpler workflows and interfaces that are tailored specifically for engineers.\" Splunk On-Call  (formerly: VictorOps) \"The tools to fix major incidents faster.\" AWS Systems Manager Incident Manager    \"Designed to help you mitigate and recover from incidents affecting your applications hosted on AWS.\" AlertOps  \"Transform real-time operational intelligence into automated incident response.\" Transposit  \"An on-call AI copilot and end-to-end automation ‚Äî so you can boost operational efficiency and resolve incidents faster.\" Pagerly . \"Manage operations within Slack with ease ‚Äì with tailored workflows,  on-call schedules, rotations, etc.\" Moogsoft  \"Ensure continuous availability with automated noise reduction, correlation, and collaboration across your incident workflow.\" XMatters   \"Automate operations workflows, ensure applications are always working, and deliver remarkable products\" Better Uptime   \"Get notified with a radically better infrastructure monitoring platform.\" OnPage  \"Ensure that critical notifications rise above the clutter and are always received by the right on-call teams.\" Rootly .  \"Manage incidents directly from Slack. Build a consistent and automated response process.\" OpsGenie . The best-known competitor. See my warning on OpsGenie reliability below though. Jeli . \"Respond faster, see patterns, ‚Äçlearn from your incidents.\"  Note: acquired by PagerDuty  in 2023 . And some solutions that are much more than just incident management and alerting, though have this as well: Coralogix   - a full-on observability platform, with alerting capabilities as well. ServiceNow : a workflow system that comes with alerting capabilities. Open source alternatives Iris  by LinkedIn:  a highly configurable and flexible service for paging and messaging. Oncall  by LinkedIn : a calendar tool designed for scheduling and managing on-call shifts. It can be used as source of dynamic ownership info for paging systems like  Iris . Alerting vs incident management differences Note that most competitors are  not  apples-to-apples in features to PagerDuty. Here are areas where each are different: Multi-channel alerting . PagerDuty is most known for it's multi-channel alerting capabilities and can deliver alerts across push notifications, emails, text messages, phone calls. It can chain respondent chains across multi-channels, and organize pretty complex oncall teams. Vendors like  ZenDuty ,  Spike ,  ilert  and many others all have similar alerting and alert chaining capabilities. Incident management.   What happens once the right people have been alerted? Well, the incident needs to be debugged, mitigated, and communication needs to happen with the relevant stakeholders. Once mitigation happens, a postmortem need to be completed, and follow-up work needs to be done. This is the part where PagerDuty won't offer nearly as much capabilities as many of the competitor products. Vendors like  incident.io ,  FireHydrant ,  Blameless  and several others tend to have more focus on this area. Learning from incidents . Once the incident is mitigated, and follow-up actions are complete, are we done? In better organizations: no! Incidents are ones that teams use to learn from: and these learnings are both circulated, shared as stories, and made easy to reference. New joiners to the company will often read through historic incidents to understand how things played out, and prepare for what to do when they go oncall. PagerDuty - to my knowledge - offers nothing for this phase.   Jeli  is the best example which focuses on this area, but other tools with a major focus on incident management tend to often offer such capabilities. In the age of always-connected smartphones with push notifications, choosing an incident management product that is less heavyweight on multi-channel alerting, but more focused on incident management might be a reasonable tradeoff. As an example of the above tradeoffs, here's how incident.io  compare themselves to PagerDuty  (I am an investor in incident.io): \"On paper, PagerDuty covers entire lifecycle of an incident, but in our experience ‚Äì and the experiences of our customers ‚Äì we‚Äôve observed it to be strongest in the alerting phases, and weaker at helping them to respond to and learn from incidents. At incident.io, we believe that we‚Äôre the most sensible incident response and management tool for companies looking to do more than just alert. Today, PagerDuty is both a integration with and an alternative to incident.io. We offer a powerful integration with their on-call management and alerting capabilities, allowing you to trigger incident.io incidents from PagerDuty alerts, and to escalate to other folks as necessary. PagerDuty is great (and probably the most popular tool) for alerting engineering teams when something goes wrong. However, PagerDuty doesn‚Äôt offer as much when it comes to incident coordination, response and follow-up ‚Äî arguably the most important aspects of incident management. This characterization on incident.io applies to many other tools, such as Rootly, Blameless, FireHydrant, and others. Their multi-channel alerting capabilities are more limited, but their overall incident management focus  could  be more relevant: depending on your needs, and the maturity of your team. Be wary of OpsGenie's past reliability incident.  I recommend exercising caution regarding OpsGenie, given how in 2022, OpsGenie  was down for hundreds of customers for 2 weeks . Yes: 2 for weeks! For a real-time alerting system! Unlucky customers had no option but to move to alternative alerting/incident management providers. This long downtime for a real-time alerting system is not acceptable, and that Atlassian did not prioritize restoring OpsGenie over less critical Atlassian products‚Äìeven as impacted customers were begging them to prioritize OpsGenie first and foremost‚Äìis truly puzzling.  I have since talked with engineers on the OpsGenie team who said that it felt that Atlassian rushed the OpsGenie integration - after buying the company - onto their unified internal stack, ignoring warnings that an outage in the Atlassian identity system would take OpsGenie down. OpsGenie is clearly more critical of a system than the ones like JIRA or Confluence, but it is not treated with priority within the Atlassian stack, at least now it seems like it. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-scoop-salary-transparency/", "title": "Behind the Scenes with Two New Salary Transparency Websites", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . If you‚Äôre not yet a full subscriber, you missed this week‚Äôs deep-dive into  Figma‚Äôs engineering culture . To get full newsletters twice a week,  subscribe here . In The Scoop #42, I  went into detail  about pay transparency changes in the US. California, Washington State and New York all recently passed legislation that mandates employers to post salary or total compensation ranges for job postings. This regulation impacts tech companies with a sizable presence in these regions, and is especially relevant for Big Tech. Companies have started to comply by listing expected pay upfront. Starting January, a wealth of compensation data is available on these employers‚Äô websites. This created an opportunity to build job sites which collect this data, make it easy to browse, and allow job seekers to apply to jobs paying at or above a certain level. Several software engineers rose to the occasion by doing precisely this over the past few months. I reached out to them for some ‚Äúbehind the scenes‚Äù insights. Comprehensive.io   crawls job sites and parses the data. Users can browse by company and range: The landing page at  Comprehensive.io The site was cofounded - and is partially built - by  Roger Lee , the creator of job cuts tracker website  Layoffs.fyi.  The site was launched in January 2023, shortly after California's pay transparency law went live. Today, the site tracks 2,000 tech companies and startups. In what is neat, the site tracks what percentage of companies are in compliance with the law: that is, post salary ranges now that they are required to do so. I asked Roger why he started the site. He said: ‚ÄúAs a result of running Layoffs.fyi, I‚Äôm also keenly aware that hundreds of thousands of tech employees have lost their jobs over the past year. Our hope is that making salary ranges more accessible on Comprehensive.io will help level the playing field for job seekers and employees, and help them navigate this fast-evolving talent market.‚Äù How does Comprehensive.io work and what is the tech stack behind it? Roger explains: ‚ÄúWe built software that automatically visits the Careers pages of these companies every day, finds all the job posts, and uses AI to extract the salary ranges from the text of the job descriptions. For AI, ¬†we‚Äôve built a system to efficiently use GPT-4 for this purpose, including auto-crafting prompts and performing pre and post-processing. We use React on the frontend, Node.js on the backend, and Postgres for database storage.‚Äù Neat - and it‚Äôs nice to hear of the team already adopting GPT-4 for a practical use case. Given Roger has been running the site for more than 3 months, I asked him what interesting things he‚Äôs come across. He mentioned 3 things: ‚Äú1. Although much has been made about outliers like Netflix who post unhelpfully-wide salary ranges, it turns out the vast majority of companies are posting salary ranges in good faith. For example, the average salary range posted on a job listing is $130,000 - $200,000. This represents a width of +/- 21% from the midpoint: right in line with what HR professionals consider to be best practice for the width of an internal salary range. 2. The percentage of tech companies complying with the California transparency law has jumped from 28% on January 1‚Äîwhen the law went live‚Äî to 58% today. In NYC‚Äîwhere the law has been live since last October‚Äî, the compliance rate is 70%. 3. The average salary posted for a ‚ÄòMachine Learning Engineer‚Äô job title is 19% higher than for a ‚ÄòSoftware Engineer‚Äô job title!‚Äù Finally, I asked Roger if he can share the highest and lowest compensation packages they picked up on. The highest ones are: Netflix advertises total compensation of  $300,000 - $900,000 Mashin advertises a salary range of  $250,000 - $650,000 OpenAI lists a salary range of  $200,000 - $370,000 Airtable lists a salary range of  $248,000 - $322,905 And the lowest ones: Remesh lists a \"minimum salary\" of  $100,000 FourKites lists a salary range of  $75,000 - $105,000 Illumina lists a salary range of  $79,300 - $118,900 Levels.fyi Jobs   is similar to Comprehensive.io, except it also tries to fill the gap on total compensation estimates for job postings that list base salary, but not equity or bonus components: The landing page for  Levels.fyi Jobs I reached out to Levels.fyi cofounder  Zuhayeer Musa , asking how the site works. He shared: ‚ÄúI'd preface everything by saying that this is very much a v1 of our jobs product and we plan to iterate and build a lot more as we get feedback.  We use a data provider to get jobs data and don‚Äôt scrape ourselves. Most jobs vendors have a ton of ‚Äòjunk jobs,‚Äô so we spent a fair bit of time culling the dataset to jobs that are unique.  We put the jobs data into Amazon S3. We have a network of Lamdas that fire any time new data is added. Our system is using purely Serverless to process the data. During processing, we match companies, titles and more, with our dataset. We also enrich the jobs with total compensation estimates and benefits in this step.‚Äù It‚Äôs early days but I asked Zuhayeer what was an engineering challenge they‚Äôve encountered. It was around unique searches: ‚ÄúWe were surprised to see just how many job searches are unique! For the landing page, this is less of a problem as we use caching heavily. However, we wanted to build powerful filters for users. We have filters like the ability to filter by particular benefits, total comp, company valuation, and others. However, all these filters mean that there are more unique requests, and we can‚Äôt take advantage of caching as much as we‚Äôd like.‚Äù Zuhayeer shared that they‚Äôre playing around with  OpenAI embeddings  and  vector databases : ‚ÄúWe‚Äôre still experimenting with some better search techniques and have started prototyping semantic search powered by OpenAI embeddings. We are super excited to start playing vector databases - ones that store and index vector embeddings we get from natural language processing models like OpenAI embeddings.‚Äù Finally, Zuhayeer asked me to relay that they‚Äôd love to get feedback if you use the site - via the on-site widget or the hello@levels.fyi email. Thanks both to Roger and Zuhayeer for sharing details, and browse their sites here: Comprehensive.io Levels.fyi Jobs This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Big Tech realizes quick layoffs in Europe can‚Äôt be done.  Meta and Amazon are realizing what companies like Microsoft and Uber learned the hard way: that in Europe you cannot hire fast, then fire fast. I share my first-hand experience of Uber‚Äôs 2019 and 2020 layoffs in the Netherlands, and what employee protection might mean for Big Tech and hiring in Europe.  Exclusive . Mercedes-Benz‚Äôs compensation philosophy.  A deep dive into how software engineers at the German car maker are paid in Germany, and the influence the country‚Äôs biggest worker‚Äôs union plays in salary bands.  Exclusive . Unexpectedly big raises at Hubspot.  I‚Äôve talked with an engineering manager who‚Äôs been surprised by how high compensation increases are at the publicly traded tech company.  Exclusive . Total compensation drops at Amazon.  This week is when engineers at Amazon learn their compensation rises. Engineers told me how things are going, and I‚Äôve heard disappointment and a drop in total compensation.  Exclusive . Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/compensation-at-tech-companies/", "title": "Compensation at Publicly Traded Tech Companies", "content": "\n             Insights from 50 publicly traded tech companies, and a list of those paying the most and the least in median total compensation - with previously unreported details. Originally published on 9 May 2023. üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover two out of seven topics from today‚Äôs subscriber-only deep-dive on  Compensation at publicly traded tech companies . To get full issues twice a week,  subscribe here . In 2015, the US Securities and Exchange Commission issued a rule which mandates publicly traded US companies to disclose their compensation details. Every year, 3 data points need to be made public: The median annual total compensation of all employees, except the CEO; The annual total compensation of its CEO; The ratio of these two amounts. We‚Äôre right on time to take a look at the latest figures. Over the past few weeks, the majority of US publicly traded companies have published their median total compensation numbers for 2022. During this time, I‚Äôve collected data on 100 tech companies. I can say the results are interesting. As a first peek, let‚Äôs cover how we arrive at the numbers, like those in this set: ‚ÄúMedian employee‚Äù vs a senior software engineer The data we share today is for ‚Äúmedian employee compensation.‚Äù But what is this? It‚Äôs  not  simply the median ‚Äì or midpoint ‚Äì of companies‚Äô total compensation distribution, but it does relate to this. First, a definition.   The median of a series of numbers is the figure in the middle of the series. The median is sometimes identical to the ‚Äúaverage‚Äù of all numbers. For example, like in the chart below showing 5 employees, among whom the average salary is $150,000, where the median element is also $150,000: 5 data points (salaries): $130K, $140K, $150K, $160K, $170K. Here, the median is the same as the average. However, this is a coincidence. In a series, the median is the middle figure, and can be both lower or higher than the average figure. Let‚Äôs look at another 5 data points, where the median and average greatly differ: 5 data points (salaries): $100K, $125K, $150K, $300K, $450K. The median is the middle element ($150K). The average is adding all of these (100+225+150+300+450) divided by the number of elements (5), which is $225K For compensation, the median figure can feel more fair than the average figure. This is because the median value shows 50% of the population make equal to or less than the median, and the other 50% of workers earn as much, or more. This is considered fairer because ‚Äúoutlier‚Äù numbers ‚Äì such as the packages of top earners ‚Äì don‚Äôt distort the true picture of a company‚Äôs distribution of compensation, by pushing up the average. Basically, outlying compensation packages have less influence on the median number. The issue with the average is that outlier data points can make it meaningless. For example, take a 5-person company, where average total compensation is $250,000. Does this mean roughly half of employees earn around $250,000? It may not: The average of 5 total compensation packages is $250K, due to an outlying data point, such as a CEO on >$1M This is a made-up, model example, but as we‚Äôll see in CEO compensation ratios, there are companies where the CEO earns well over 100 times the median compensation. Using the median creates a more ‚Äúrealistic‚Äù picture of compensation values and distribution. Companies are required to identify their ‚Äúmedian employee.‚Äù  Mandating a company to select the ‚Äúperfect‚Äù median total compensation value would cause unnecessary difficulty, especially at large companies, This is because it would mean keeping track of  exact  total compensation for every employee. This is complicated because equity such as stocks and shares forms part of many people‚Äôs pay, and its value can go up or down over time. Instead, the regulation gives organizations leeway to use a simpler, less complex approach, such as using statistical sampling. As the SEC writes: ‚ÄúA company could, for example, identify the median of its population or sample using: - Annual total compensation as determined under existing executive compensation rules; or, - Any consistently-applied compensation measure from compensation amounts reported in its payroll or tax records.‚Äù Companies need to explain their methodology, but otherwise have freedom to choose their best ‚Äúmedian employee.‚Äù Businesses can refer to the same median employee for up to three years. The median total compensation  should  mean ~50% of staff made more than this number, and 50% made less.  For example, here‚Äôs how Microsoft crunched numbers to find its median employee: ‚ÄúWe identified our median employee from among our employees as of June 30, 2022, the last day of our fiscal year, excluding approximately 11,024 employees who became Microsoft employees [via acquisitions Microsoft made that year] To identify our median employee, we used a ‚Äútotal direct compensation‚Äù measure consisting of: 1. Fiscal year 2022 annual base pay (salary or gross wages for hourly employees, excluding paid leave), which we annualized for any permanent employees who commenced work during the year 2. Target bonuses and cash incentives payable for fiscal year 2022 (excluding allowances, relocation payments, and profit-sharing) 3. The dollar value of share allotments granted in fiscal year 2022.  Compensation amounts were determined from our human resources and payroll systems of record. Payments not made in U.S. dollars were converted to U.S. dollars using 12-month average exchange rates for the year.  To identify our median employee, we then calculated the total direct compensation for our global employee population and excluded employees at the median who had anomalous compensation characteristics.‚Äù I say the median employee  should  be the midpoint total compensation figure, but in practice the median employee won‚Äôt have the perfect median value. In the above example, Microsoft excluded the salaries of employees whom the tech giant inherited from acquiring other businesses, and it also excluded outliers, meaning its median value is slightly off from the  true  median. However, it is what the company believes the median should be after excluding outliers. US-based senior software engineers almost always make more than their company‚Äôs median compensation number.  The median value is a lot less useful for roles closer to the ‚Äúbottom‚Äù of the distribution (like interns whose pay is likely among the lower percentiles) or closer to the top (like a Staff+ engineer who‚Äôs in the upper percentiles of the population). Senior software engineers based in the US will almost certainly be  somewhat  above the median value for two reasons: 1. Looking only at engineering, senior engineers are somewhat above the median.  A few weeks ago, when covering  Uber‚Äôs engineering level changes , I recreated the company‚Äôs engineering split, of which around 2,000 software engineers ‚Äì more than 50% of the population ‚Äì were non-senior engineers: A rough, estimated split of ~2,000 software engineers at Uber, in 2020. Source:  Uber‚Äôs engineering level changes Of course, Uber no longer has a split like this. Meanwhile, some companies are senior-heavy, meaning some senior engineers are below the median, due to their place in a top-heavy hierarchy with its distribution of roles above senior engineer. This is almost always mitigated by the next point, though: 2. Engineering tends to be better compensated than most other functions.  At tech companies where software engineering is  a profit center , it‚Äôs common for software engineers to have some of the highest total compensation at a given level. Of course, companies don‚Äôt consist only of software engineers; there are sales and marketing workers, administrative roles, research and development functions, and more. One function that can out-earn engineering is sales, by hitting and exceeding targets in what is frequently a commission-heavy job. A note: for engineers, the median compensation level at non-tech companies is close to meaningless.  At places where the majority of roles are lower paid, the median employee‚Äôs compensation package will reflect this. However, this number is almost certainly much lower than what a software engineer there earns. This means the median is not useful to engineers, as a low median doesn‚Äôt mean the pay at a non-tech business is uncompetitive. This is the case for a couple of well-known companies: Amazon: the median compensation package is $34,195. However, total compensation for senior software engineers is typically over $300,000/year in areas like the Bay Area or New York. Stitch Fix: the median compensation package is $39,000. The company makes clear who its median employee is: ‚ÄúOur median employee in fiscal year 2022 was a remote Senior Stylist. For fiscal year 2022, the annualized total compensation for our median employee was $39,000.‚Äù However, a data platform engineer  is offered  a base salary of $174,000‚Äî$190,000, and, likely, additional equity on top. Apple: the median compensation package is at $84,493, suggesting this is the package of a non-software engineer employee. Uber and DoorDash: at $76,767 and $79,737, both packages suggest the median employee is someone working in operations. These positions and customer support roles outnumber engineering jobs at both companies. Throughout this article, we are talking about total compensation,  not  salary.  Base salary is only one component of total compensation, and this is especially true for senior tech workers at tech companies. Total compensation is the aggregate of: Base salary Cash bonus (or, for salespeople, cash commission) Equity awarded Most of the companies in the higher total compensation buckets are places that issue significant equity to employees and would likely be in the top tier in the  Trimodal software engineering compensation model . Highest and lowest median packages Let‚Äôs begin with the headline numbers: the highest total compensation for median employee, by company. There‚Äôs plenty of nuance in this topic, which we‚Äôll get into later! The highest compensated median employees work at these companies: The top 10 for the highest median total compensation for 2022 financial year Okta  had its 2022 financial year run from early 2021 until early 2022 and it‚Äôs very likely its   eye-catching median number ‚Äì which is streets ahead of Roblox in second place ‚Äì was created by acquiring Auth0.   In 2021, Okta‚Äôs median compensation package was $258,687. Then in May 2021, Okta acquired Auth0, a 900-person company. The Auth0 acquisition was a stock-heavy deal, in which former Auth0 employees received a large, one-off stock compensation grant. I‚Äôve talked with current Okta employees, who all think the median employee was someone who came through the Auth0 acquisition, and received this one-off stock package. This would explain why the median total compensation package jumped by nearly $140,000 in one year. I expect that next year this value will fall to below $300,000. However, this data reveals the windfall which Auth0 employees likely received from joining Okta! And if the Okta number seemed large, the company shared that it should have been even higher, assuming the median employee stayed at the company. From Okta's report: \"The median employee terminated employment with the company in February 2022, following the end of fiscal 2022 but prior to the determination and payment of bonuses for fiscal 2022. The median employee‚Äôs annual total compensation (...) would have been paid to the median employee in March 2022 based on the individual‚Äôs target bonus and bonus plan attainment for fiscal 2022)  would be $432,502 .\" I'm scratching my head a bit on this addition from the company. This is because Okta should have chosen a representative median employee. And their choice of the representative median employee left the company before bonuses were paid. Yet now the company claims that this employee would have made more, had they stayed and collected their $30,709 annual bonus. But, again, Okta needed to choose the appropriate median employee, so this choice feels hard to understand. Roblox  presenting an annual median total compensation of $315,000 is not the kind of one-off that is likely to be the case with Okta. There is good explanation in how the company ended up this high: 75% of employees at the company work within product and engineering functions. This is higher than any other company has reported, from all 100 companies. It suggests that the median number for Roblox could be closer to the compensation for a senior engineer. I reached out to an engineering manager at Roblox, asking them on how representative this number is for engineering. The manager confirmed that it's representative, and also that Roblox pays top of the market. They shared that when candidates had competing offers, the only companies where they would still occasionally \"lose\" against, numbers-wise, was Meta and Netflix, and not by much. While Roblox is in the gaming industry, they benchmark their compensation not primarily against gaming companies, but against top-tier tech companies. Their peer group includes Dropbox, DoorDash, Roku, Snap, Splunk, Twilio, Okta, and Workday. No other gaming companies compare themselves to this tier of tech companies, and it also shows in compensation. And, to be fair, the company does have a lot of engineering challenges that are similar to most of Big Tech. Just think of the root cause of their 3-day outage that we covered  in Real-World Engineering Challenges #3 , which came about by being one of the largest customers of HashiStack, and the first ones to come across a Consul circular dependency that even HashiCorp engineers - the folks creating Consul - have not observed before. Why is Netflix not in the top 10?  Another surprise is not to see Netflix on the top 10. For software engineers, Netflix pays top of the market - and does all of this in cash. They tend to offer more than any other company for senior engineer positions - only Meta or Google tend to compete with them, head-on-head. Heck, the company pays so well that it could afford to not increase compensation packages in October of 2022 -  as we covered in The Scoop #29 . And yet, the median number for Netflix is $218,400, which is a good 35% below that of Meta and Amazon, and 50% below that of Roblox. Even though we know that Netflix can - and does! - pay competitive with those companies. So why the difference in the reported number? The answer lies in the composition of the company. Netflix employs more than 12,000 staff, but only 2,000 of these work in tech. And most of the non-tech staff is compensated below where software engineers are: and so the median employee will almost certainly not be a software engineer. This is especially true, as, up to 2022, Netflix rarely hired non-senior software engineers. On the other hand, at companies like Google or Meta, the median employee  could  be a software engineer, even if it is not a senior engineer. In addition to the 10 companies listed above, 25 other businesses paid more than $200,000 in total compensation to their median employee: #11 to #35 for the highest median total compensation for 2022 financial year Something interesting stands out from this list: Smaller companies can offer a higher median compensation package than their larger competitors.  By smaller, I refer to market cap or market share, compared to a sector‚Äôs leaders. Fastly is a content delivery network (CDN) which competes with Cloudflare and Akamai. It‚Äôs far from a market leader by revenue and market cap: Comparing the revenue, market cap and the number of employees between Akamai, Cloudflare and Fastly Also, Fastly is behind in public-facing market share, according  to measurements by W3Techs , just 7.6% of websites use Fastly, compared to 5.2% using Akamai and 75.9% using Cloudflare. Yes, Akamai has only a 5.2% share, which speaks to its enterprise focus. Meanwhile, Cloudflare is far more popular with the consumer and small business segment. Based on all factors, it‚Äôs clear that Fastly is the #3 of these CDNs: it‚Äôs behind Cloudflare on all metrics, and has only a tenth of the revenue and market cap than Akamai, even though Fastly has a bit more of the consumer market. So is being #3 reflected in the median compensation? Absolutely not; quite the opposite, in fact: Median total compensation between the three CDN providers Why is there such a big difference in median compensation between these 3 rivals? Geographic distribution . 79% of Fastly‚Äôs workforce is US-based. For Cloudflare it‚Äôs 59%, and 40% for Akamai. Total compensation is significantly lower outside the US, and given that 60% of Akamai‚Äôs staff is international, the median employee is more likely to be someone outside the US. And for Cloudflare, it is most likely a US-based employee in a less senior position. The premium in working for a lesser-known brand . Both Akamai and Cloudflare are well-known companies, and considered market leaders in certain CDN areas. They will have no trouble attracting candidates, some of whom will take a pay cut to join. For example, Cloudflare is known for its ‚Äúno negotiation on compensation‚Äù policy. In contrast, Fastly pays a premium to attract top talent. Keep in mind that the median numbers quoted by the three companies refer to different people: Fastly: a US-based employee, likely close to a senior engineer Cloudflare: likely a US-based employee but below a senior engineer Akamai: likely a non-US based employee, likely well below a senior engineer For similar positions, Fastly, Cloudflare and Akamai are likely to pay comparably. I would speculate that Fastly may be willing to be flexible in negotiating packages, as it pays a premium for being a less known brand. Which companies pay the least, by median?  There appear to be a few surprises: Companies that pay the least, by median compensation This list looks surprising if we assume median total compensation reflects the value of software engineer pay. But this is the wrong conclusion. Low median total compensation usually means the median employee  is not  a software engineer.  We mention above that the median compensation package at Stitch Fix is for a Remote Stylist position, while Amazon‚Äôs media employee may be a warehouse worker, while at Uber and DoorDash it‚Äôs an operations role. Another reason for a low value is when the median employee is in a low-cost region. This is the case for Accenture and Cognizant. Both these are service companies with most staff based in India. The median employee is most likely to be an entry-level software engineer in that region. For example, Cognizant has 355,000 employees, of whom 258,000 are in India. The company helpfully breaks out three median values for nuance: Global: $31,450 (out of all 355,000 employees) UK and western Europe: $70,462 (out of 27,000 total employees) US: $93,846 (out of 41,000 US-based employees) What these numbers mean is that 20,000 employees in the US make more than $93,000 in total compensation. It‚Äôs safe to assume that for senior positions, the company can be competitive on pay, even if this isn‚Äôt visible in the median numbers. The same is true of other companies in the list. For most, the likely explanation for a surprisingly low median number is one or both of these: Most workers are not US-based, but are in lower-cost regions. For example, Groupon has only 28% of staff in the US. There are more non-tech employees than tech employees in the business, and the median employee is a non-tech role. This was two out of the seven topics covered in  today‚Äôs deep-dive issue . The full issue additionally covers: Big Tech‚Äôs salary benchmarks.  How does Amazon, Apple, Alphabet, Microsoft, Oracle, Meta, Salesforce and NVIDIA benchmark their compensation, and which ones benchmark each other mutually? CEO pay ratios.  Which CEOs took home the most and the least, relative to a median employee? How do standout CEOs such as Satya Nadella and Tim Cook compare to others? Compensation packages with job stability . Many companies which offer strong packages have had layoffs recently. But which places have not let workers go, and also pay well? Where to find these ‚Äúhidden‚Äù numbers.  Companies don‚Äôt advertise their median pay brackets. How can you find this revealing number for most publicly traded US companies? And which companies are allowed to not publish this data, and how come? The complete list of 100 tech companies.  In browsable format, so you can slice and dice the data on the median compensation, CEO pay, and when the companies last had cuts. Read the full issue here. Many subscribers expense The Pragmatic Engineer Newsletter to their learning and development budget. If you have such a budget, here‚Äôs  an email you could send to your manager . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/uber-engineering-levels/", "title": "Uber‚Äôs engineering level changes", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of five topics in today‚Äôs subscriber-only  The Scoop issue . To get full newsletters twice a week,  subscribe here . This is a bit of a ‚Äòlate scoop,‚Äô which I initially missed when it happened. Better late than never! Until early 2022, the software engineering levels at Uber were: Engineering levels at Uber, 2014-2022 Back when I was at Uber in around 2020, I saw statistics about the spread of these levels. By memory, it was something like this: A rough, estimated split of ~2,000 software engineers at Uber, in 2020 Back in 2020, Uber had about 2,000 software engineers, of which: ~50-60 were staff (L6) level (2.5-3%) ~15 were senior Staff (L7) level (~1%) 2 were principal (L8) level (0.1%) Uber had an ongoing challenge with the Senior 2 level.  This level was created back around 2014, before which Uber had L3, L4, L5, L6 and L7 levels. However, the L5 (senior) level grew overcrowded, with a large population of engineers. Not only that, there was significant variation in expectations at this level. Uber‚Äôs engineering leadership decided to bisect the level into L5A and L5B, where L5A mapped to what most of Big Tech calls ‚Äúsenior engineer‚Äù (getting complex, team-level projects done), and L5B was closer to what the tech industry usually expects of staff engineers (complex, cross-team-level projects.) Uber‚Äôs L6, staff engineer level, remained one where engineers owned complex, organization-wide projects, and vacancies for this level were rare. For example, in my 200-engineer organization called ‚ÄúMoney,‚Äù we had 2 Staff engineers (L6) and no L7 or L8 engineers in 2016-2018. Between 2018-2020, this ratio changed to 1 L7 engineer and 5 L6 engineers in a 300-person organization. ‚ÄòDown-leveling‚Äô to join Uber became common.  Uber‚Äôs Senior 2 level was in line with what companies like Meta, Amazon or Google expected of staff-level engineers, so those at other companies often received offers for senior 2, senior staff engineer, staff, and so on ‚Äì especially engineers arriving from Google. The search giant is known to have the strictest expectations for levels, and most engineers expect a lower level offer from Google, than at their previous workplace. However, at Uber even former Google engineers above the senior engineer (L5) level received offers a level below their old title. I talked with a staff Engineer (L6) at Uber who previously was a senior staff (L7) at Google. We cover more about down-leveling in tech in the article  The Seniority Rollercoaster. In March 2022, Uber addressed this inconsistency in levels by updating engineering levels to be more in-line with the rest of the industry. The company pretty much renamed senior 2 engineer as staff engineer, and updated the titles from L6. They also added a new level 9. The levels now are: Engineering levels at Uber from 2022 My view is this update was overdue and makes sense. I cannot count how often I explained to candidates how Uber‚Äôs Senior 2 level was pretty much the same as ‚Äústaff‚Äù at their present employer, and how our staff level was more like ‚Äúsenior staff‚Äù at Google. I also assume Uber may have been less attractive to candidates heavily focused on the job title, even though the Senior or Staff level titles become increasingly harder to distinguish.  In an earlier issue, we also covered  why, after 25 years, Netflix introduced engineering levels  and ended up with similar‚Äîabeit fewer‚Äîlevels than where Uber is now. The title change had a small impact on Uber alumni.  Following last year‚Äôs change, there was a flurry of title changes on LinkedIn by Uber engineers, many of whose connections congratulated them as senior 2-and-above engineers for what looked like a promotion to staff-or-above levels. However, for most there had been no level change, only a title bump due to levels being updated. What was amusing was how quickly former senior 2-and-above engineers updated their titles to reflect the changes. Anyone who was an L5B at Uber years ago, could now say they were a Staff engineer, not a senior 2. And people duly did so. In fairness, updating of titles is warranted, especially since the new ones reflect responsibilities better than before. And this update also applies to how I can present my achievements as a manager at Uber. Throughout my tenure I never promoted any engineers on my team to Staff level. It would have been hard to do so as in the broader organization of 300 engineers, only one person was promoted to L6 during my 4-year tenure! But did help promote 4 direct reports to Senior 2 (L5B) level.But with Uber‚Äôs new levels, I could say I helped 4 reports get to the Staff engineer level. We cover more on Staff+ topics:  What is a Staff+ engineer ,  Engineering leadership skill set overlaps  and  Ways Staff and Principal engineers get stuck (and how to get unstuck) . This was one out of the six topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The full  The Scoop edition  additionally covers: Meta‚Äôs second round of engineering cuts.  About 4,000 tech workers were let go yesterday (Wednesday) at Meta. Which divisions are most impacted, and is there a pattern? I talk with current Meta engineers and managers to get answers.  Exclusive . More managers become ICs at Shopify.  Several engineering managers at the e-commerce tech giant have been asked to revert to individual contributor (IC) roles. Could this become a trend in Big Tech?  Exclusive . Tech vendors with standout growth rates.  Okta has released a report summarizing anonymized app usage data from more than 17,000 customers. Postman, Sentry, Figma, Miro, Snowflake and 1Password are growing very quickly. What‚Äôs the ‚Äòsecret‚Äô behind some standout growth companies? The CEOs of Postman and Sentry reveal details.  Exclusive . AWS forming a Works Council in Germany.  Amazon is known for its union-busting tactics, yet the leadership seems unusually supportive of a new Works Council formed in Germany, which supports the interests of software developers. What are this group‚Äôs goals, and its timeline?  Exclusive . Honeycomb‚Äôs $50M fundraise.  The observability startup has been close to running out of money at least once in their 7-year-old history, and their early years were quite precarious. And yet, in a down market, they raised a surprisingly large round. What is the fundraising environment like and how did they secure a fresh round? I sat down with their CTO to get more details.  Exclusive . Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/should-you-optimize-for-all-cash-compensation/", "title": "Should you optimize for all-cash compensation, if possible?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and high-growth startups through the lens of engineering managers and senior engineers. In this article, we cover one out of four topics from today‚Äôs subscriber-only  The Scoop issue . If you‚Äôre not a full subscriber yet, you missed this week‚Äôs deep-dive  on Shopify‚Äôs leveling split . To get full issues twice a week,  subscribe here . Across tech, it‚Äôs not  that  common to issue stock to all software engineers. Of course, Big Tech and most ‚Äútech-first‚Äù companies at which software engineering is a profit center, do this. Making key employees who create value into shareholders is a common practice, as it aligns interests. For example, say a software engineer comes up with an idea, ships it, and it generates a new revenue stream for the company. At a more ‚Äútraditional‚Äù company that issues no equity to employees, this employee will probably get a nice end-of-year bonus and perhaps a modest pay rise. But they have little incentive to stick around and work on the new project, even though they probably have plenty to contribute and could help generate a  lot  more revenue. At a company that does issue equity, this employee will get it ‚Äì and the bonus could be  really  nice ‚Äì and also get a larger equity allocation. Now, the employee has good reason to stick around and see their equity vest, and also to ensure their project creates as much value as possible. The more successful the project, the more value it makes for the company, which boosts the stock. The employee wins as their already large equity allocation is worth more. And, of course, the company also wins: as the company‚Äôs other shareholders capture most of this value increase. It gave up a  little  equity, in the hope of a much  bigger  benefit. Of course, the problem with stock is that its value also goes down. And at any company that rewards valued employees like software engineers with large equity packages, a drop in stock price creates a retention problem. Suddenly, people will feel like they‚Äôre paid less, even though they‚Äôre working as hard or even harder than before. This is the problem many tech companies including Shopify have experienced with stock prices falling since mid-2021. Shopify‚Äôs stock value fell 79% between September 2021 and September 2022: Shopify‚Äôs stock price change, versus the S&P 500 index, between September 2021 and 2022 The most common way companies respond to such drastic stock declines are these: Issue higher equity refreshers , intended to counter a falling stock price. While this approach sounds good, it‚Äôs also very expensive. And the company would be taking on the risk of the stock price going down, making it not really a sustainable approach. Shorten vesting windows.  Instead of exposing employees to 4-year vesting windows ‚Äî with the ups and downs over this period ‚Äì just issue stock at a dollar value, and convert it to cash on vesting. For example, this is what Stripe and Lyft are doing. It reduces the downside employees see with stock price movements, and also reduces the upside. This approach could make more sense for companies whose growth is expected to be either modest, or negative. Offer employees their choice of equity exposure.  The benefit of issuing stock to employees is that stock compensation impacts cash flow less. For companies with good cash flow, they could simply let employees decide how much of their annual total compensation target to take in cash, and how much in stock. Netflix is the most known for this approach. Shopify decided to allow for option #3 by rolling out Flex Comp.  We covered more on Flex Comp in Tuesday‚Äôs article  on Shopify‚Äôs leveling split . Now, employees can choose which percentage of their compensation target they allocate to stock, and what stays as cash. Here is how that interface looks like: Shopify‚Äôs Flex Comp tool. We covered details about how this system was rolled out in  The Scoop #23  and in  Inside Shopify‚Äôs leveling split At level L7 and above, there is an expectation to take at least a given amount in stock, which I‚Äôm told is around 5% at first, and 20% at higher levels. This constraint is sensible from the company‚Äôs point of view; it‚Äôs very much in Shopify‚Äôs interest for senior staff to have  more  skin in the game. In September 2022, when this new system was rolled out, most software engineers I talked with were wary of too much exposure to the stock market, after seeing their stock holdings melt. People I talked to opted to take all or most of their compensation in cash. Hindsight is 20-20, but looking back at what‚Äôs happened since, those who diversified ‚Äì and opted to take more of their compensation in stock ‚Äì have seen better financial outcomes, at least to date. This is because Shopify's stock price doubled the past 9 months: Shopify‚Äôs stock price change, versus the S&P 500 index, between September 2022 and June 2022 So, if given the choice, should you take most of your compensation in cash?  Looking at Shopify, in the past year this would have been the less profitable option. However, how could employees know the company‚Äôs stock price would increase by as much as it did? Well, as an employee you have access to a wealth of ‚Äúinsider‚Äù information which public investors do not see. You know about big-bet projects in the company, have access to business dashboards and you can attend internal all-hands about business strategy, competition, market share, etc. You could gather details that make you more bullish about the company. If you have such information, it could be a calculated risk to allocate more of your compensation to stock. However, no matter how many ‚Äúinsider‚Äù details you have, one thing you don‚Äôt control is how the stock market values the company. And value depends on many external factors, as shown by the negative impact of US interest rate rises on many stocks. Here‚Äôs a thought experiment: say you could accurately predict how Shopify‚Äôs revenue and loss change between September 2021 and the following 2 years. Knowing this, would it have been smart to buy or sell the stock in September 2021? And when would it be sensible to buy more stock? Here‚Äôs those numbers, mapped out, and how the stock  really  performed: How Shopify‚Äôs revenue, net income, EBIDTA (Earnings Before Interest, Taxes, and Amortization), and stock price changed the past 2 years Looking at the data, the company‚Äôs revenue keeps growing and its profitability decreases. However, there seems to be less correlation between the business metrics and the drastic stock price change, than the numbers indicate. So, if I had access to these accurate projections, I would‚Äôve still been unable to know with a high level of certainty when to buy or sell stock, in order to maximize returns. Choosing more cash   does  have a couple of benefits that stock doesn't have: Severance . Choosing a higher cash option could mean having an officially higher base salary. This can make a difference when being let go, as the severance is typically based on this number. Mortgage . Similarly, when applying for a mortgage, the bank usually bases the decision on the amount loaned based on salary, and not equity. Liquidity.  Cash is as liquid as it gets. With stock, even at publicly traded companies: you cannot sell during blackout periods. For stock in private companies: you cannot sell until a liquidity event (e.g. being acquired or going public) occurs. Of course, the downside of cash is that it will not appreciate in value: only equity can do this. How much you invest in your own company‚Äôs stock will be driven by your risk appetite.  Investing in  any  stock is risky: it has potential upsides and downsides. You have some insider information, but that information is unlikely to help you accurately predict stock performance over time. Among tech workers, two common approaches I‚Äôve seen to splitting cash and equity exposure, are: Reduce your equity exposure . Take as much cash as you can and put it in low risk investments. Index funds are a popular destination Some stock.  Keep some of your compensation in stock. Take most out as cash and invest it, but keep some in the company if the outlook is decent All-in.  Take a big risk because you can, and you believe you have good information. When you believe your company is set up for success ‚Äì and you can afford to be wrong and even lose on your equity position ‚Äì then there‚Äôs more scope for risk. But decide in advance what you‚Äôll do if the stock does poorly! Needless to say, none of this is financial advice, and I don‚Äôt hold any individual company stocks. I do this to  reduce potential bias  in my reporting, not because I lack conviction in some companies. Decide on the strategy most appropriate for you, given your current situation and knowledge. Don‚Äôt be afraid to change your approach as your situation changes or you refine your views, based on more information. This was one out of the four topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Pinterest‚Äôs new levels and reduced compensation bands.  L15 is the new L5 in Pinterest‚Äôs new leveling system. As the new levels were rolled out, compensation targets dropped by around 30%. I checked in with current engineers on how they feel about the change.   Exclusive . Pay rises at Shopify . Together with recent re-leveling, the company awarded unexpected raises. I got details on the numbers, including what high performers got.  Exclusive . Who might buy Lyft?  There‚Äôs signs that the US‚Äôs #2 ridesharing company could be open to a sale. Who might buy it?  Analysis . Read the full issue here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/google-domains-to-shut-down/", "title": "Google Domains to shut down", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of five topics from today‚Äôs subscriber-only  The Scoop issue . To get full issues twice a week,  subscribe here . Google Domains was a breath of fresh air when launched in 2015. It stood out from domain registrar competitors with a simple and clean interface, transparent pricing ‚Äì $12/year for popular domains ‚Äì and its handy integration with Google Workspace and Google Sites. It‚Äôs the domain provider I chose to host pragmaticengineer.com, and I‚Äôve been a happy customer for years. Other developers also appreciated its clean interface, straightforward pricing, and trusted Google‚Äôs brand. As such, Google Domains became a popular domain registrar. Since mid-2020, it‚Äôs been the #3 most-used domain registrar, globally: The popularity of domain providers, based on monthly domains registered. Data source:  Domain Name Stat Google Domains was in beta from 2015 to 2022, which is Google‚Äôs way of marking in-development services not yet ready for ‚Äúprime time‚Äù due to potential bugs. Google doesn‚Äôt take lightly a service exiting ‚ÄúBeta,‚Äù as when the company announces this exit, customers know they can count on the service being around ‚Äì and stable ‚Äì for a long time. For example, Gmail exited beta 5 years after its inception, in order to attract more use of the service by business. Google Domains exited Beta in March 2022, 7 years after launch. This move was taken to mean Google was committed to it, and that businesses could rely on it. The exit boosted adoption of domains: it took Domains 7 years to hit 7 million domains, then growth surged after General Availability. As of this month, Google Domains held 10M registered domains: Google Domains adding 3M more domains in just one year. Now out of the blue, Google Domains is shutting down and Squarespace is buying all customer accounts,  barely a year after the product exited beta. A week ago, on Thursday 15 June, I had to check I was reading correctly when Squarespace published  a press release , suggesting it had acquired Google Domains. The press release: ‚ÄúSquarespace announced today it has entered into a definitive asset purchase agreement with Google, whereby Squarespace will acquire the assets associated with the Google Domains business, which will be winding down following a transition period. This purchase includes approximately 10 million domains hosted on Google Domains spread across millions of customers.‚Äù So what‚Äôs being sold, exactly? Google published a  help center article  making this very clear: ‚ÄúOn June 15, 2023, Google entered into a definitive agreement with Squarespace, where they intend to purchase all domain registrations and related customer accounts from Google Domains.‚Äù A week later, Google has still issued no press release. However, on, 16 June 2023, Google VP Matt Madrigal emailed Google employees and shared more details on what exactly is happening: ‚ÄúNo transfer of technology is included as part of this agreement. Also, Domains employees will not move to Squarespace as part of this agreement but will continue to work with us during the transition period. This means that this will have an impact on our colleagues in the Domains team. We anticipate that people on this team will remain on this team till the transition is complete - we anticipate this to take 9 months. After the transition is complete, we will provide time and support to our Domains employees to find a new role and project.‚Äù So, Google Domains and Google Cloud Domains are shutting down, possibly in about 9 months‚Äô time. Squarespace has bought the 10M domain registrations and customer accounts, will migrate them over with the help of the current Google Domains team, then Google Domains will be disbanded. Obviously, there are plenty of questions. Does this count as selling personal information to a third party? In 2019, Sundar Pichai wrote  an opinion piece  in The New York Times, where he recorded a powerful commitment (emphasis mine) ‚ÄúTo make privacy real, we give you clear, meaningful choices around your data. All while staying true to two unequivocal policies: that  Google will never sell any personal information to third parties ; and that you get to decide how your information is used.‚Äù Google has been true to this promise, and it‚Äôs logical that it has. Personal information is very valuable in targeting ads, and advertising is Google‚Äôs main business. Of course the company would not sell personal information; instead, it would collect it, keep it secure, and use it to target ads via Google‚Äôs infrastructure. Is Google breaking Sundar‚Äôs promise with this deal? Let‚Äôs take another look at what‚Äôs being traded: ‚Äú...[Squarespace] intends to purchase all domain registrations and related customer accounts from Google Domains.‚Äù Phrasing this differently, but with the same meaning: ‚ÄúGoogle intends to  sell  all domain registrations and related  customer accounts  of Google Domains to Squarespace.‚Äù Note that this is not a merger or acquisition, but a pure sale of assets: a set of domain registrations and customer accounts. These accounts contain personal details like names, phone numbers, addresses, and payment information like credit cards. That payment information will also be transferred: ‚ÄúYour encrypted billing data will, where applicable, be securely migrated to Squarespace and their PCI-compliant payment processor(s).‚Äú To me, this sounds the sale of personal information to third parties by Google, breaking one of the company‚Äôs two ‚Äúunequivocal‚Äù policies. However, John  in the comments  makes a very good point on why this would not constitute as selling customer data. As he writes: ‚ÄúBased on my experience in many privacy roles covering US, EU, UK and other countries, the sale of a company will likely be covered in Google's privacy notice and is not considered a sale of personal data considering customer's personal data will immediately be covered by the purchasing company's privacy notice. The \"we will never sell your personal information\" point is related to selling individual customer's data where Google would act as a data broker. A data broker will sell personal data to anyone who will pay with no privacy restrictions on who purchases the data. In this Google - Squarespace scenario, Google will inform customers and make sure that Squarespace's privacy notice is appropriate, which it is actually. More protective than Google's in some ways. You may have a point that this should be considered a sale, however I think you would have a challenge getting a privacy regulator to add this to the definition of sale as it would be an impediment on selling assets or mergers and acquisitions.‚Äù And John closes with some good advice, on navigating this world where products and companies are bought and sold: ‚ÄúAt the end of the day, it would have been great if we hadn't build an entire economy of free apps where the cost is actually us, our personal data, but the cat is out of the bag years ago on this and it's an uphill fight. My advice to everyone is to use the browser on your phone and limit the apps you download, as most of them pull location data off your device at a minimum. And Apple's privacy ad campaign touts the strong privacy controls in iOS but they don't mention that the controls don't apply to Apple's use of your data.‚Äù What about the second ‚Äúunequivocal‚Äù policy, that users get to decide how their information is used? Well, based on the  Google Domains Privacy Policy  ‚Äì which is also Google‚Äôs Privacy Policy ‚Äì Google  can  do such transfer, as long as they give notice: ‚ÄúIf Google is involved in a merger, acquisition, or sale of assets, we‚Äôll continue to ensure the confidentiality of your personal information and give affected users notice before personal information is transferred or becomes subject to a different privacy policy.‚Äù And this is exactly what Google intends to do: ‚ÄúOnce the transaction between Google and Squarespace is approved you‚Äôll receive more information about the transition of your domain name(s). Google Domains will work with Squarespace to make the transition as seamless as possible for you. This transition process will roll out gradually and is expected to take several months.‚Äù So users will be notified that this information will be sold, and should have the opportunity to move to another domain registrar if they do not want their data to be passed on to Squarespace. Until now, Google‚Äôs business relied on collecting personal data, and using it across its own, wide set of services and advertising products. So there was no incentive to sell customer data, and Google did not. This Google Domains shutdown and customer accounts sale is the first time the company is selling off a part of its business that also sells customer records. I think this is an important milestone. Can Google customers assume it will not do a similar deprecation and sale with another service, by selling accounts to another third party? I see no assurance that it won‚Äôt. But at least we know that customers will need to be notified in advance. Why is Google staying silent? It‚Äôs been a week since Squarespace‚Äôs press announcement. In that time, Google has not issued its own press release to provide more context on what‚Äôs happening, nor notified Google Domains customers. On one hand, it‚Äôs understandable Google would hold off on any communication until regulatory bodies approve this sale. Because if some regulators oppose it, then the deal could be off. On the other hand, not issuing a press release for a week in today‚Äôs media environment is odd. Customers are learning Google Domains is likely to disappear, and they‚Äôll be passed to a new provider. How much would you trust your vendor, going forward, if they don‚Äôt inform you in a timely manner that they intend to offload you? Don‚Äôt forget, many Google Domain customers are also Google Cloud customers, who have also not been given clarity. I reached out to Google to ask if it will notify customers directly, and if so, when? The company avoided my question in a very short response, writing: ‚ÄúFor the latest information on Domains, please see  here  and customers can find details on this agreement and what they can expect in this  help center article  posted by Google.‚Äú While Google is curiously silent, competitors are taking advantage of this communications blunder  There is few things that make customers want to leave their vendor than learning about big news ‚Äì like how they will be sold to another domain provider ‚Äì  not  from their vendor. Here is some masterful marketing from Cloudflare, which they send out to Cloudflare customers: Cloudflare is helpfully informing its customers that if they also have domains with Google Domains: well, that's going to be sold to Squarespace. This message is effective thanks to Google not having said anything to its customers. I'd expect many more domain providers to follow suite: and why would they not? Customers deserve to be told what will happen with their domain. And there's a good chance that the customers who realize that Google failed to inform them will trust the domain provider that  first  notified them about this pretty major event. The immediate winner of this deal is Squarespace.  Valued at $4B, the website building and hosting company has got the keys to the world‚Äôs 3rd largest domain registrar, and will become  the  key Google Workspaces partner. Today, Squarespace has ‚Äúonly‚Äù 1 million domains registered, but by the time the deal closes this number will be closer to 10 million. Regulatory approval will still have to be granted, but I cannot foresee this deal not going through, as Google is becoming smaller and Squarespace is considered a smaller player in the domain registrar industry. Regulators tend to want to stop large players from becoming even more dominant by acquiring a small, but strategic, company. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Why is Google selling Domains?  Only recently, Google announced Domains had exited beta status, 7 years after launch, and reinforced its commitment to the product. So why sell it, just a year after General Availability? I talked with Googlers for their opinion ‚Äì and share my own take.  Exclusive . The impact on Google Cloud.  Google is not only selling its consumer Google Cloud business, but also retiring the Google Cloud product, ‚ÄúGoogle Cloud Domains.‚Äù How could such a move impact Google‚Äôs cloud ambitions, and will customers churn as a result?  Exclusive . Google Nest‚Äôs untrustworthy status page.  Google Nest had an outage across Europe, and yet its status page never indicated this, even as the company confirmed to customers an incident was ongoing. Why would a company like Google not utilize its status page to display the  real  status of the service?  Analysis . Google‚Äôs upcoming Duet AI capabilities and pricing.  Starting August, Google will roll out Google Workspace AI capabilities for general availability. I got my hands on pricing and other details which are currently known only by a select few customers. The lineup‚Äôs impressive, but it‚Äôs pretty pricey at an additional $30/month/seat. What will customers get for their money?   Exclusive . Read the full issue here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/an-educational-side-project/", "title": "An educational side project", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. We cover one out of four topics in today‚Äôs subscriber-only  The Scoop issue . If you‚Äôre not yet a full subscriber, you missed this week‚Äôs deep-dive on  Agoda‚Äôs private cloud setup . To get the full issues, twice a week,  subscribe here . I‚Äôd like to share a story about an educational side project which could prove fruitful for a software engineer who‚Äôs seeking a new job. Juraj Majerik  is an Amsterdam-based software engineer who decided to improve his applied knowledge of containerization, multiprocessing and observability. So he built a ‚Äúclone‚Äù of a ridesharing app like Uber or Bolt: the app simulates riders requesting trips and drivers picking them up, then repeats this all over again. See it  in action, here : A screenshot of the interactive ‚ÄúRides‚Äù app. See the full app  here What grabbed my attention was how this app is much more than just a simulation. Juraj included system monitoring parts which monitor the server‚Äôs capacity he runs the app on: The  monitoring page  on the Rides app And it doesn‚Äôt end here. Juraj created  a systems design  explainer on how he built this project, and the technologies used: The systems design diagram for the Rides application The app uses: Node.js  for the simulation engine Go  on the backend PostgreSQL  for the data layer React  and  TypeScript  on the frontend Prometheus  and  Grafana  for monitoring and observability And if you were wondering how all of this was built, Juraj documented his process in an incredible, 34-part blog series. You can  read this here . This ‚ÄúUber clone‚Äù offers a nice blueprint on how to tackle a complicated project . Thanks to the detailed documentation of Juraj‚Äôs progress, we can reconstruct how he built the project. This is educational, as it shows one possible way to tackle a complicated project, and one for which the creator could only devote time to on the side, and at weekends. Here‚Äôs how Juraj approached the undertaking: Phase 0: make a plan (Oct) . Instead of starting with coding, Juraj kicked off by sketching. He sketched out what he wanted the final product to look like: The sketch Juraj made, before starting any coding And he sketched how he envisioned the observability part to work: The sketch of the monitoring system Phase 1: Infrastructure (October-November) . Before diving into coding, Juraj set up the infrastructure. I assume he did this to familiarize himself with infrastructure which he hasn‚Äôt necessarily used in production before. This side project offered a good opportunity to try it out. Set up a server on DigitalOcean (a virtual machine with 1GB memory and 25GB of disk space) Set up the domain, and configure the DNS Set up users on the server Set up SSH keys for more secure authentication Install Go on the server, which will power much of the backend Set up a HTTP server using Go Deploy for the first time, doing so manually, for now Enable HTTPS by registering a certificate Utilize environment variables to be used for configuration, instead of hardcoding configuration or secrets into the source code. Hardcoding secrets in production is poor practice.  We  covered  how Stack Overflow learned this the hard way, a few months back. Serving a web page. This is the point where the app reached the ‚ÄúHello world!‚Äù stage Improve deploys. Change deploys to be a one-command process, instead of multiple steps See  blog posts #1-11  for details on all the steps. Phase 2: some business logic, and more infra (December-January) Draw a map using JavaScript to map onto an  SVG  format Build a graph and traverse it.  Here‚Äôs a video  of Juraj demonstrating this traversal. Set up Docker to package the application into containers Use Docker in production, and modify the deploy script to deploy using Docker Set up PostgreSQL to persist data on drivers, riders and trips Connect the Go backend to the PostgreSQL database Connect the backend and the database containers Docker Compose  in production See  blog posts #12-20  for details on all the steps. Phase 3: a basic UX (February) Migrate to React Design a car, from a vector image Move a car with animations. Including adding unit tests. Turn a car using rotations Tidying up the project: refactoring the files now, that the project‚Äôs structure is more clear Server-generated data Animation fixes See  blog posts #21-27  for details on all the steps. Phase 4: ‚Äúhardcore‚Äù coding (March) This was the first phase where Juraj did no more infrastructure work, and focused only on ‚Äúpure‚Äù business logic. Simulation engine: this component simulates the behavior of drivers and customers Multiprocessing for Node.js, to avoid blocking the event loop Generating destinations, and making sure the start point is not too close to the destination Matching drivers with customers: doing this similarly to how a service like Uber does Route planner: tell the driver which route to choose to collect a ¬†customer See  blog posts #28-32  for details on all the steps. Phase 5: finalizing and monitoring (April) Finalizing the simulation Setting up monitoring & logging See  blog posts #33 & 34  for details of all the steps. Standoud things about this side project There are several things that I‚Äôll highlight about this side project. 1. Persistence.  Juraj built this project on the side, between October 2022 and April 2023, which is 7 months. 2. Documenting the steps.  Every time Juraj made progress, he documented what he did, and how. This likely helped him to learn, and it also helps others wanting to understand, too. 3. Incremental progress.  The project looks like a tough one to build from scratch on the side. But looking at the incremental steps, it is not nearly so daunting. Here are a few of the steps, taken directly from the blog: Monday:  installing Go  on the server (17 Oct) Wednesday:  setting up the HTTP server  using Node‚Äôs native http module (19 Oct) Friday:  the first deploy  (21 Oct) Saturday:  enabling HTTPs  (22 Oct) Sunday:  setting up environment variables  (23 Oct) (Step away from the side project for a week) ‚Ä¶then do another burst of tasks, making more progress 4. You won‚Äôt get the layout of a project right, the first time. So refactor!  Juraj was about 70% done with the project, when he went back to refactor the structure of the project. This wasn‚Äôt for the lack of planning: but because as you set up new infrastructure, things turn out a bit different than you expected. This is just the way of software engineering, and there‚Äôs nothing to be embarrassed about it. As you learn more about the project, don‚Äôt be afraid to go back and change the project structure ‚Äì or do other refactorings ‚Äì to help your work, going forward. See  the project structure  Juraj set up at the end of Phase 3. 5. Infrastructure is important, and setting it up right can be a consuming task!  In the first 3 phases of the project, Juraj spent a  lot  of time on infrastructure setup. It was only in Phase 4 that he was able to focus ‚Äúpurely‚Äù on the coding part. I really like how this project showcases  just   how much time  can go into infrastructure setup. At companies with dedicated platform teams, those teams take exactly this kind of load off other teams building greenfield projects. Both as an engineer, and especially as an engineering manager, don‚Äôt forget there‚Äôs a real cost to setting up and then maintaining infrastructure. Much infrastructure work is invisible as it does not involve commits, and most engineers won‚Äôt document the time they spend on these tasks, like Juraj has. But this is work that still needs to be done! Here are the learnings Juraj had with this project.  I reached out to Juraj to ask how this project helped him. His answer: ‚ÄúI've touched on many topics I haven't been exposed to in my day-to-day job, such as server configuration, setting up a deployment pipeline, animations in JavaScript, or using Docker.  I decided to get better at algorithms and data structures a few months ago, and this project complemented it nicely. For example, I implemented the map and its associated methods (e.g. path-finding) from scratch. I also wanted to get better at setting up a full-stack project from scratch and understand why certain technologies are used. Docker is a good example - I didn't use it because I ‚Äòwanted to‚Äô, but because the necessity for it arose. I was surprised how much time all of the infra work took me before I was able to start with the actual simulation logic!‚Äù And how did Juraj find the time to work this much on the project? ‚ÄúWhile I was at my previous job, I dedicated 1-2 hours a day, usually after work. After leaving in March due to a layoff, I decided not to start my job search immediately, but spent some more time finishing and polishing this project. That's when I really ramped up my effort on it and started seeing a lot of progress.‚Äù If you are thinking of doing a side project with the goal of learning new technologies ‚Äì and, to also be able to share those learnings, and show off the side project ‚Äì I can recommend taking inspiration from this methodological approach Juraj took. Of course: don‚Äôt copy the exact approach, as-is. But planning first, documenting steps, and building a ‚Äúproduction simulation‚Äù are all ideas that you could use in your own side projects as well. If you do: your side project will surely stand out from many of the other ones. Your own projects often seem less impressive to you than they are to others.  I was impressed by the implementation and attention to detail for this project ‚Äì for example, going the extra mile for adding in monitoring for the server components: typical for a production service, but rarely seen in a side project. When I shared that I‚Äôm impressed with the execution with Juraj, his response was surprising, as he told me: ‚ÄúWorking on this side project every day, it no longer feels that impressive to me (as I think is common with software projects). But having read your fresh perspective, it certainly gives a lot of encouragement!‚Äù When it‚Äôs day-to-day work, most engineers don‚Äôt think they‚Äôre doing anything complex, or special. And, in all fairness: no single step in Juraj‚Äôs project was complex. The complexity comes from the combination of simple steps. This is the beauty of software engineering: that everything that seems complex can be broken down to simple to understand ‚Äì and simple to implement ‚Äì steps. Thanks a lot to Juraj for sharing this project with me. View the complete source code  here . If you are hiring for full-stack engineers, Juraj is on the market ‚Äì at least for now! Connect with him via  his website ,  on LinkedIn  or  on Twitter . This was one out of the four topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The full The Scoop edition additionally covers: Why are many Snap employees selling their stock as soon as it vests, and not a day later?  Snap is a very strange publicly traded company, where shareholders have precisely zero votes. I‚Äôve talked with engineers and discovered a surprising level of distrust within the company. Is this tied to the governance model, or something else?  Exclusive . Analyzing the split of cuts at Lyft.  How much were software engineers impacted by ride-hailing service Lyft‚Äôs large-scale cuts? I went through data based on Lyft‚Äôs talent directory; it looks like tech functions were hit harder than other areas.  Exclusive . Robinhood is no longer a remote-first company.  Few companies were as vocal about becoming a remote-first company than Robinhood. But less than 18 months later, the company has made a u-turn. What can founders and leaders take from this avoidable policy reversal?  Analysis . Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/ai-coding-tools-explosion/", "title": "An explosion in software engineers using AI coding tools?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and high-growth startups through the lens of engineering managers and senior engineers. In this article, we cover one out of four topics from today‚Äôs subscriber-only  The Scoop issue . To get full issues twice a week,  subscribe here . GitHub just  published  a survey about developer productivity and AI coding tools. The company hired an external research agency to survey 500 US-based software developers who work at large, 1,000+ person organizations. I reached out to GitHub to get more details on how the survey was conducted. Some details about the population surveyed ‚Äî which were not published on the original survey: All respondents work full-time, and are individual contributors Specialization: 32% fullstack, 23% frontend, 17% backend, 18% DevOps, 4% mobile, 6% operations Age: 47% 30-49, 41% 30-39, 6% below 29 and 6% above 50 Gender: 70% male, 30% female The industry split was also pretty evenly distributed: Answering the question ‚ÄúHow would you best describe the area in which your company operates?‚Äù and ‚ÄúWhich of the following categories includes your company‚Äôs annual sales revenue?‚Äù One finding really jumps out: 92% of developers say they use AI coding tools at work: 92% of respondents use AI coding tools at work Back in April, we covered  the productivity impact of AI tools , based on a survey of engineers who‚Äôve been using AI coding tools for some time. While I know of few developers who don‚Äôt occasionally use ChatGPT, or have not tried an AI coding assistant, I always assumed this must be within my bubble. But this research indicates these tools have spread far and wide. What do AI coding tools help the most with? The survey lists the top 3 areas mentioned by developers: Learn : Develop coding language skills (57%) Productivity : become more productive (53%) Focus : spend more time building and creating, less on repetitive tasks (51%) These findings chime with the biggest productivity gains developers mention in the  article on AI coding tools , from using AI coding tools like Copilot, or generative AI tools like ChatGPT. Organizing the most common use cases mentioned from  The productivity impact of AI coding tools  in the three categories from the GitHub survey: Learning  (Generative AI) New concepts, tools and frameworks, and research. Interestingly, the use case of learning unfamiliar topics was mentioned most frequently in the context of ChatGPT. Researching new topics is also a common use case. Improving code quality: by asking ChatGPT to do this, or asking it to criticize the code. Another use case is to input code and ask ChatGPT to refactor it. Getting started: kicking off new projects and tasks, and overcoming initial barriers. As one respondent shared: ‚Äúit breaks the initial barrier of ‚Äòwhere to begin?‚Äô‚Äù Generating code for greenfield tasks or projects is also a common use case. Productivity  (AI coding tools & Generative AI) AI coding tools: Scaffolding: ‚ÄúI have been using it mainly to get basic structure ready without typing it all out by myself. Helps me to do my task in a very short amount of time in most cases.‚Äù Autocomplete: \"I have it always on, suggesting autocomplete in the IDE.\" Generative AI tools: Debugging: One use case is to give ChatGPT some code and ask it why that piece of code isn‚Äôt behaving as expected. Prototyping: several engineers mention they use ChatGPT to throw together a prototype quickly. Focus  (mostly AI coding tools) AI coding tools: Boilerplate code (AI coding tool): ‚ÄúIntegrating with a very inconsistent SOAP service is an example of when I would go mad if I had to type it all out. Copilot is able to use bits of notes I have in IDE to generate reasonably-looking skeletons while adjusting types/names/literals.‚Äù Generating repetitive code (AI coding tool): \"It generates a lot of code I would type anyway. It speeds up my work.\" Generating tests and documentation (AI coding tool): \"I use it for everything ‚àí writing code, writing tests, writing documentation\" and \"generation of (block) comments, generation of tests, documentation.\" Generative AI tools: Routine, boring tasks: for example, SQL or Elastic queries and understanding what JSON responses mean. We should expect even more heated competition between AI coding tools , off the back of this data. If close to 90% of developers are already using something to help them code, then we are in the ‚Äúearly adopter‚Äù phase, where 90% of the population is experimenting and is early in adopting these tools. This means the future market leaders are tools which are available today, or will launch very soon. Now is a good time to recap AI coding tool alternatives. We  previously covered  these: Tabnine  (2019) GitHub Copilot  (2021) Replit Ghostwriter  (2022) Amazon CodeWhisperer  (2022) Codeium  (2022) SourceGraph Cody  (2023) CodeComplete  (2023) FauxPilot  (2023) Tabby  (2023) In the 2 months since publishing that list, several new tools have launched, including: Refact.ai : a coding assistant for VS Code or JetBrains, with a self-hosted option Cursor : an AI-fist code editor. GitLab Code Suggestions  (beta.) Studio Bot  for Android Studio by Google. Trained on the model PalM2. JetBrains AI coding assistant  inside its JetBrains Fleet, the next-generation IDE. Bito  ‚Äì bringing ChatGPT to the IDE. This company launched publicly only a few days ago! Visual Studio Code plugins: HuggingFace Autocomplete  for VS Code. Based on the  StarCoder  LLM published by HuggingFace on 4 May. 10Minions  for VD Code. None of the above are endorsements: do your research on matters like which code models these companies use, their policies to keep your code secure, and other due diligence. See a  comparison of the first 9 tools here . This space is evolving rapidly: it‚Äôs exciting and hard to keep up with! Developers in this survey seemed to feel they are already evaluated roughly as they expect they should be.  One interesting question was how these devs think their managers  should  rate their performance, and how they actually do. Unfortunately, the survey does not make apples-to-apples comparisons possible for most categories. I took the categories where direct comparison is possible, and the result is pretty surprising: How developers in the survey think they should be evaluated, vs how they are.  Data source: GitHub I‚Äôll add that I find it problematic that GitHub has not released the full survey results, as it feels like they are cherry-picking some results, and making an apples-to-apples comparison hard to do. For example, the report says ‚Äúdevelopers want more collaboration (...) developers want collaboration to be a top metric in performance reviews.‚Äù But, when looking at the apples-to-apples data, this doesn‚Äôt ring true: 35% of developers said they‚Äôd like collaboration and communication to be measured for performance, and 33% said that their company already does this. So how will evaluation criteria change if everyone uses AI coding tools? Developers think it won‚Äôt change much, based on directly comparable data from the survey. How developers think they should be evaluated, if using AI coding tools. The results are almost identical: 2% more think that quality and time to complete a task will be a bit more important.  Data source: GitHub There are interesting takeaways  from the survey , but I feel the survey was parsed in a way to fit the narrative of how AI coding tools lead to more collaboration. From looking at the raw data ‚Äì the limited amount that was released, of which much was curiously hidden ‚Äì I did not reach the same conclusion. Sure, people will ‚Äúcollaborate‚Äù more with the AI itself, but I got no sense ‚Äì or read on the data ‚Äì that using AI tools would result in more collaboration between software engineers. However, despite my suspicion about data being cherry-picked, I do agree with this takeaway of the survey: ‚ÄúAs AI technology continues to advance, it is likely these coding tools will have an even greater impact on developer performance and upskilling.‚Äù Generative AI and within-IDE coding tools still seem to be distinct categories.  In my observation, there‚Äôs still a big divide between two types of AI coding helpers: Generative AI: chat ‚Äúbuddies‚Äù you can ask things like ‚Äúexplain how generics works in Go, and how it is different to generics in Java.‚Äù These tools greatly help learning and can also help scaffold or prototype ideas. Within IDE AI coding tools: these aid coding workflow by enabling users to focus more on ‚Äúinteresting‚Äù work, and make coding more productive. This was one out of the four topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: AWS‚Äôs us-east-1 outage: a deep dive.  Amazon‚Äôs most important region went down for 3 hours, and the whole of the web felt it. Which services and companies were impacted and what really caused this incident? I spoke with engineers at AWS to get answers.  Exclusive . Why Meta is reducing its number of managers . On a recent podcast, Meta‚Äôs founder and CEO shared his reasoning for why the tech giant now has fewer managers. I talked with current Meta engineers for their reaction ‚Äì and give my two cents as well.  Analysis . HashiCorp‚Äôs ‚Äòoptimized‚Äô layoff process.  The infrastructure provider cut 8% of staff, and seems to have ‚Äòoptimized‚Äô this process from a business perspective. How did the company go about communicating redundancies, and what would a more humane process have been?  Exclusive. Read it here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/inside-agodas-private-cloud/", "title": "Inside Agoda‚Äôs Private Cloud - Exclusive", "content": "\n             üëã Hi, this is  Gergely  with the monthly, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover challenges at Big Tech and startups through the lens of engineering managers and senior engineers. If you‚Äôre not a subscriber, you missed the issue on   Shopify‚Äôs leveling split  and  a few others . Subscribe to get two full issues every week. Many subscribers expense this newsletter to their learning and development budget. If you have such a budget, here‚Äôs  an email you could send to your manager . To get articles like this every week,  subscribe here . In a previous  two-part series , we dived into Uber‚Äôs multi-year project to  move onto the cloud , away from operating its own data centers. But there‚Äôs no ‚Äúone size fits all‚Äù strategy when it comes to deciding the right balance between utilizing the cloud and operating your infrastructure on-premises. To show the complexity of this choice and the ways tech businesses approach it, this article brings the inside story of one large tech company that‚Äôs decided against onboarding to the cloud ‚Äì at least for now. Agoda  is a leading online travel booking platform in Asia. It‚Äôs owned by Booking Holdings Inc, which also owns the popular travel sites, Kayak and Booking.com. Unlike Uber, Agoda does not make use of public cloud providers, having  decided  to build out its own private cloud, instead. To learn more, I reached out to Agoda‚Äôs CTO  Idan Zalzberg  who generously talked through previously not shared details. In today‚Äôs issue, we cover: Agoda in numbers.  The number of developers, physical cores, data centers, and more. The hardware inside Agoda‚Äôs private cloud . 64-core compute nodes of around 20 servers per rack, Top-of-rack (ToR) switches and plenty of redundancy. Agoda‚Äôs cloud strategy and usage.  Is Agoda‚Äôs goal to operate off the cloud, or on it? What are the use cases where the company already utilizes public cloud? The cloud or your own data centers?  Idan‚Äôs advice for any midsize company weighing up on-prem versus public cloud. 1. Agoda in numbers Agoda lists 3.6M hotels and holiday properties worldwide, and its apps and website appear in 39 languages. The company sees 80K searches per second at peak traffic, and serving them all involves calculating 10M different ‚Äúaccomodation rates‚Äù per second. Interestingly, the majority of these searches are not by holidaymakers ‚Äúbrowsing right now‚Äù during their free time ‚Äì most searches are by partners, affiliates and search engines! The company employs about 6,600 people in 31 markets, with its headquarters in Singapore. Around 1,600 people work in engineering, including software engineers, data science and business intelligence (BI) teams, and the DevOps team. The majority of the engineering team is in Bangkok, Thailand. Among the 1,600 tech workers, the hardware team numbers in the low tens, and their job is to maintain the hardware and ensure it operates in DCs as expected. This group doesn‚Äôt include the software layer for infrastructure, which is a software team that builds the orchestration platform (Fleet) upon Kubernetes. Although the company employs about 4-500 people in its data organization, there‚Äôs been no single dedicated ‚Äúdata team‚Äù for around 2 years. Agoda moved away from this model and its data engineers are embedded into each team. Within the data org, the distinct roles of data scientist, data analyst and data engineer are defined. Within data engineering, there is currently no separation between data engineers and machine learning (ML) engineers; individuals take on both roles.  We go deeper into ML in  What is ML engineering? The company works in Scrum teams, which typically contain a product manager, developers, data scientists/analysts/engineers and BI engineers. The goal of having all these people is to create a shared business purpose. Infrastructure-wise, the company operates around 6,500 servers, with a total of approximately 600k virtual cores (vCores) and 300k physical cores. The company‚Äôs largest data cluster is 20-30PB (petabytes: 1PB is 1,000 terabytes or 1M gigabytes). Ten years ago, this data cluster was 300GB as a Hadoop cluster; that‚Äôs around a 100,000-fold increase in data stored! The company runs 4 data centers: in the US and Europe, with two in Asia. Agoda co-locates in all data centers, leasing space for its racks and the largest data center consumes about 1 MW of power. It uses Spark for the data platform. For transactional databases, it‚Äôs mostly the Microsoft SQL Server, but also other databases like PostgreSQL, ScyllaDB and Couchbase. At peak load, Agoda sees around 7.5M queries per second as total load, spread across its managed database-as-a-service (DBAAS.) The company uses HP servers, VAST hardware for object storage. Agoda utilizes Akamai as its CDN vendor. 2. The hardware inside Agoda‚Äôs private cloud Agoda is standardizing its hardware SKUs (stock-keeping unit,) This is a unique code for a hardware that captures all the important details. The company standardizes SKUs to allow for supply chain optimization and ease of deployment. Typical compute nodes have: 64 cores physical cores, with SMT enabled (128 vCores) 512 GB memory 4 TB of storage The company aims to maintain a similar ratio of cores / RAM / disk on all servers it buys. Here‚Äôs a common configuration: HPE ProLiant DL325 Gen10 Plus v2 Server CPU: 1x AMD 7763 CPU (64 physical cores) Memory: 512 GB of RAM Storage and 4 TB of NVMe ( nonvolatile memory express ) storage. NVMe is next-generation SSD The HPE ProLiant DL325 Gen10 Plus v2 Server Agoda‚Äôs racks usually support 6-10 KW of load each, depending on the age of the facility. Often, around a dozen servers are deployed on a 6KW rack, equating to circa 1.5K vCores which can deploy approximately 20 servers with a 10KW rack, or around 2.5K vCores. Servers and racks in Agoda‚Äôs data centers The company needs to plan server locations carefully in order to avoid hot spots and airflow problems.   Each server has 2x25Gbps networking interfaces connected to dual switches of one switch per rack, and the cables cross between a rack pair. Top-of-rack (ToR) switches connect to end-of-row switches with multiple 100 Gbps links, which connect to the network core with 2x400 or 4x400 Gbps links, depending on row size. Oversubscription, depending on rack density, is between 1.3:1 and 2:1. Oversubscription  in networking terms refers to having less network bandwidth available than the total capacity the network can theoretically handle. For example, assume a rack with 20 servers, each with a 25 Gbps card. To carry all the network capacity of these servers, you need 500 Gbps of bandwidth. However, if the top-of-the-rack switch has only 4x100Gbps of bandwidth, then oversubscription is 1.25:1 (500Gbps theoretical peak, vs 400 Gbps actual.) Similarly, if you have 10 racks with 400 Gbps bandwidth per rack, you need 4,000 Gbps bandwidth at the end-of-rack switches. However, assuming 4x400Gbps switches, the oversubscription is 2.5:1 (4,000:1,600). Oversubscription is a pragmatic approach to network planning, when considering cost control. Servers rarely use their maximum allocated bandwidth for prolonged periods, and it‚Äôs even less likely that this happens simultaneously to all servers in a rack, or for all racks in a row. In the case of Agoda, oversubscription was done after understanding the traffic patterns, and this setup does not interfere with being able to handle peak traffic loads. Networking setup within Agoda data centers A rack inside Agoda‚Äôs Singapore data center. The yellow networking cables are 25 GPS, and the black ones are power cables The company uses  Arista  equipment in the DC. Due to supply chain issues, hardware refresh work is a bit behind, so a decent chunk of the racks are still on 10Gps ports. All of those ports are expected to be upgraded by 2024. Needless to say, Agoda‚Äôs infrastructure is redundant.  The company has two of pretty much everything, and redundant networking. They achieve inter-DC connectivity through a combination of: Point-to-point circuits MPLS circuits ( muti-protocol label switching  circuits) IPSec circuits ( IP Security  circuits) Bandwidth between the main DCs is 40 Gbps, growing to 60 Gbps in the near future. It has optimized traffic paths for latency and route critical applications through the best circuits. To reduce latency, a CDN is used . From a customer perspective, Agoda utilizes a CDN with a large local presence in core geographies,  Akamai . The CDN manages caching and path optimization from the customer to Agoda, mitigating some common local access problems of remote locations. It also utilizes this distributed platform for security purposes, enriching data sent to the on-prem fraud detection platform. For its data platform , Agoda builds on top of Spark. For the underlying hardware, it uses dual-socket HP Dl385 servers, with: 2x64-core AMD EPYC 7713 CPUs 2 TB of RAM 15 TB of NVMe, for caching purposes. A HP Dl385 server These HP servers run quite hot at 800-900W each, so Agoda can only host 7 or so in each rack. For data storage , it uses an  object store  cluster, running on  VAST  hardware. In this cluster, around 15 PB of raw data and 21 PB of logical data can be stored. More data can be fitted than there is raw storage available thanks to VAST‚Äôs  data deduplication . For transactional work , Agoda mostly uses Microsoft SQL server (MSSQL,) running on physical servers optimized for core performance using low-core count and high clock machines. It chose this setup because the Microsoft licensing model has a rather steep per-core cost. Licensing costs are around $7,000 per core for SQL Server‚Äôs enterprise edition, so this approach increases the utilization of these licenses. 3. Agoda‚Äôs cloud strategy and usage The remainder of this article is a question-and-answer session between Idan and I. The questions are in italics. Agoda not moving to the cloud is interesting as it‚Äôs a ‚Äúsibling‚Äù of Booking.com, which has started to move to the public cloud. So why has Agoda not done so? ‚ÄòI can‚Äôt speak for Booking.com, but in some cases I believe companies consider migration to the cloud as an opportunity to ‚Äúrestart‚Äù their infrastructure and solve existing scale/capacity issues. Our current position is that we‚Äôre happy and quite stable in terms of capacity and performance, so we have no urgent need to make drastic changes to how we do things. For us, a migration for the cloud needs to be an opportunity and not a solution to a problem; it must show benefits in terms of cost, velocity, quality, etc. So far, we haven‚Äôt been able to prove such merit in the migration. Our strategy is to get to a ‚Äúcloud ready‚Äù state.  We have neither a ‚Äúyes, we need to be on the cloud‚Äù nor a ‚Äúno, we will not move to the cloud‚Äù position. We want to get to the ‚Äúwe don‚Äôt really care where we operate‚Äù state; this is our strategy. How do we get there? Firstly, we don‚Äôt use expensive setup like SANs ( Storage Area Networks ). We took a cheaper approach for our hardware stack. By moving all our workloads to Kubernetes, we can easily migrate to a cloud provider, if needed. Becoming ‚Äúcloud ready‚Äù was why we moved off the HDFS protocol to S3, and why we are hedging our infrastructure ownership by using a few vendors in critical areas. For example, we use VAST as a vendor for storage, rather than self-hosted HDFS clusters. We are pretty close to our ‚Äúcloud-ready‚Äù goal. We do ‚Äúlift and shift‚Äù exercises a few times every year, which is how we hedge our dependency on our on-prem infrastructure. We‚Äôre ready to move if some disaster were to strike when access to the infra was lost, for example. There‚Äôs a lot of groundwork that goes into these exercises. We work with the cloud provider, set up a fiber connection with them, set up databases there, and do the lift-and-shift exercises. Over the years, we‚Äôve become more efficient in setting up the experiment. For example, initially, we set up virtual machines to run in the cloud and we had to have all those virtual machines running, even when not in use. These days, we use Kubernetes and spin up the containers when we do the exercise.‚Äô What about using the cloud to ‚Äúscale out‚Äù your operations, for example during peak loads? ‚ÄòWe actually looked into scaling loads out, but this turns out to be not so simple. Our original idea was to spin up the cloud only for peak traffic, or during high traffic periods. However, it turned out that providers are not particularly optimized to guarantee 50,000 cores being available for 2 hours usage per day. And this makes sense from their point of view; after all, what would they do with all those cores the rest of the time? There are some use cases where we do use the public cloud.  An example is CI/CD, which is a smaller use case, and we‚Äôre okay with spending more than if we ran jobs on-prem. In return, we have guaranteed SLAs on how quickly builds will finish, regardless of how many builds happen in parallel. Having these SLAs means our developers can iterate quicker. For massive production use cases when we would need to put in a large ask for a cloud provider; it would not make financial sense without a significant baseline budget commitment. Even with fiber connections, it‚Äôs hard to have fast enough connections from a service to the database. So if we want to keep our databases ‚Äúwarm‚Äù on the cloud at all times, that would incur a baseline cost. This cost is the latency between databases like our MSSQL, Couchbase, ScyllaDB and other instances, and our microservices. While we  could  rebuild our systems to handle higher latency from the authoritative database without much user impact, the centralized cache engines would need to be kept ‚Äúwarm‚Äù in some way within the cloud. This baseline cost is also why we don‚Äôt ‚Äúburst to the cloud‚Äù for production services, at present. We have approaches for handling traffic spikes  without scaling to the public cloud. They include: Shifting traffic between datacenters. This works well as our data centers have different peak schedules in different regions. Degrading features for exceptional spikes, instead of buying more servers to ensure we can handle any type of spike. An idea for the future is that in the case of extreme spikes, we would shift part of this load to the data engineering DC. Currently, we do not shift load to the data engineering clusters during spikes.‚Äô 4. The cloud or your own data centers? For small enough companies, it‚Äôs pretty clear that onboarding to the cloud has lots of advantages. But what advice would you give a scaleup or a midsize company evaluating whether to operate their own data centers, or to onboard to the cloud? ‚ÄòUse knowledge-driven decision making.  Decisions that come from ignorance are poor ones, such as ‚Äúeveryone else does it, so we should as well,‚Äù or ‚Äúwhat we have works and I‚Äôm afraid of trying this new technology.‚Äù On the other hand, decisions that come from  actual  knowledge and understanding are good decisions! So gather the knowledge and make sure it applies to your situation. Avoid  cargo culting  ‚Äì when you imitate things you don‚Äôt understand!‚Äô Have the expertise and investment to operate on-prem ‚ÄòGet into a position where you don‚Äôt have to care too much about whether or not you are on the cloud.  The best position to be in is not caring about whether you run your own infrastructure, or onboard to the cloud. Get your application stack in a shape whereby you can operate in either setting. Then you can objectively make infrastructure changes much quicker than if you‚Äôre locked in to on-prem or the cloud. Be ‚Äúcloud-ready‚Äù while running on-prem. Even if you run on-prem, ensure you use technology you can shift to the cloud relatively easily. For example, using Kubernetes as orchestration and the S3 protocol for data, are all choices we made in running our stack on-prem, which are also ‚Äúcloud-ready‚Äù choices. Avoid software that locks you in . Proprietary software can lock you into a given provider, making it very hard ‚Äì and expensive ‚Äì to move. Be aware of the margins of each cloud service. Are the charges worth it for your use case?  The cloud is not just for getting machines to use; it includes an ecosystem of services as well. At least some of these services are running software that is easy to maintain and run and have no licensing cost. Still, the providers are still incentivized to ‚Äúscare‚Äù you into believing you cannot manage it by yourself. It‚Äôs important to make that judgment with your own team and come to a knowledgeable decision. The focus on the expertise needed and whether you can manage it yourself, is a kind of fear-mongering that has been very strong in selling the cloud. In some cases this makes sense. For example, the US is an aggressive market where super talented people who know the cloud services inside-out can work for the companies that build those services, and great engineers often prefer to work at the ‚Äúsource.‚Äù But then, when you look at Agoda, we are pretty much the only company in Thailand that does anything like this so in-depth. If I‚Äôd come to Silicon Valley to convince a talented developer to come to Thailand to work for Agoda, it would be hard. But for developers based in this part of the world, we‚Äôre a shining star doing interesting, exciting and challenging stuff, plus we‚Äôre almost the only ones going all the way down to infrastructure-level. In our geographical area, we‚Äôre unique.‚Äô When you‚Äôre already on the cloud ‚ÄòDon‚Äôt let teams use whatever they want in the cloud . Here‚Äôs the thing, onboarding is  always  super easy. However, offboarding can be hard to impossible! This type of lock-in is the biggest risk of the cloud in my view. One way to work around lock-in is to force the use of at least two cloud providers across the organization, and only allow onboarding to services on one cloud provider if they can be migrated to the other provider. Be conservative about adding new technology dependencies.  Don‚Äôt add one unless it  really  adds a new capability you cannot support in your current stack. In other words, don‚Äôt increase the stack size itself unless you really have no choice! The same goes for taking on cloud service dependencies. I‚Äôve seen a  lot  of cloud services be acquired, or suddenly pivot, or be shut down. When this happens, if you have a dependency on such a service, you are left with an ‚Äúultimatum‚Äù of needing to find a new solution, and you start from scratch in the search. This is a very real risk that‚Äôs worth calculating.‚Äô Takeaways Thanks very much to  Idan  for generously sharing so much detail about Agoda‚Äôs journey in operating on-prem, and its thinking about using the cloud.  Although Idan did not ask me to mention this, I will add that Agoda  is hiring  in several locations across Asia. Here are few takeaways worth taking from Agoda‚Äôs journey, especially as we contrast it to  that of Uber‚Äôs . Every business has unique constraints . Agoda operates in Asia, where the cost of labor is lower than the US and Europe, but where public cloud costs are higher. The company has been in business for almost 20 years and has always managed its own infrastructure. It has hardware buyers, people installing and maintaining machines, and folks building the software infrastructure layer to run on top of virtual machines. Agoda employs tens of people to manage the infrastructure layer, and probably around 100 people who work on various parts of infrastructure and DevOps. Here‚Äôs a breakdown of employee numbers from Idan: Tens of people (between 10 and 30) maintaining hardware 25-30 people maintaining data infrastructure like Kafka or RabbitMQ. 20-30 people working in the database administration area The teams who build and maintain solutions like Fleet If your company is in a similar position in terms of infra needs, and engineering headcount; and has made similar investments in infrastructure, then you might also be able to set up and operate your own infrastructure. If not, it doesn‚Äôt mean you cannot! Treat all details in this article as examples of approaches, not instructions which your company should closely follow. The above was about a third of the topics discussed in two subscriber-only deepdive articles about Agoda‚Äôs private data centers.  The full article series  covers these additional topics: Internet service provider (ISP) basics.  What are tier 1, 2 and 3 ISPs? Why does it matter? And why does Agoda connect to a Tier 1 one? Data center tiering.  How tiers 1-4 for data centers measure up, and which tiers do popular cloud providers certify as? Why does Agoda co-locate with Tier 3-or-above? The evolution of data centers at Agoda . From blade servers and Windows machines in 2012, to an in-house, Kubernetes-based orchestrator development system today. Data centers (DCs) and availability zones.  How does the company organize its two regions, and which services use active-active or active-passive DC setups? The application stack inside the private cloud.  Fleet, Buckbeak, Agoda‚Äôs detailed data stack and bespoke developer portal. To move or not to move to the cloud.  How Agoda knows if it‚Äôs time to move away from on-prem servers. Are location-based expenses keeping the company off public clouds? A surprise advantage of hiring software engineers . Owning their own stack end-to-end comes with unexpected hiring benefits, when attracting developers. Agoda‚Äôs learnings from operating its own DCs.  The importance of standardizing, and why to minimize your tech stack. Read the full article series here . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/layoffs-push-down-scores-on-glassdoor/", "title": "Layoffs push down scores on Glassdoor: this is how companies respond", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and high-growth startups through the lens of engineering managers and senior engineers. In this issue, we cover one out of six topics from today‚Äôs subscriber-only  The Scoop issue . To get full articles twice a week,  subscribe here . I got a message from a software engineer working at a company which laid off 30% of staff in December 2022. It‚Äôs a late-stage startup valued at around $3B which had around 1,000 employees before the layoffs. The engineer wrote: ‚ÄúMy company is removing Glassdoor reviews because their rating has gotten so low. The company‚Äôs score went to 2.3 and they started doing this. I don‚Äôt think my company is alone in this practice to protect themselves from bad press, but lots of my colleagues have had their reviews deleted. Effectively, we‚Äôve been silenced.‚Äù I managed to talk to someone in this company‚Äôs HR department, who confirmed that the leadership set a goal to improve the business‚Äôs Glassdoor rating. The HR team‚Äôs target was to get the score above 3.0. And so, they got to work flagging negative reviews for removal, and encouraging staff to post 5-star reviews to balance out negative reviews. Turns out, this company is not alone in doing so. In today‚Äôs issue, we‚Äôll look closely at what is happening, and also investigate a specific company ‚Äî cybersecurity company Trustwave ‚Äî to find out what happened so the company reached an all-time high Glassdoor rating: The Glassdoor score history of Trustwave. Something changed since mid-2021: we‚Äôll investigate exactly what happened that explains this sudden rise Some tech companies are in ‚ÄúGlassdoor crisis management mode‚Äù after layoffs.  I‚Äôve talked with CTOs and HR professionals at 5 tech companies, who all tell me they‚Äôre doing something similar to having set a target score to improve to, or did so in the past. I‚Äôm not naming these companies as I believe this is a widespread trend that‚Äôs not limited to just a few players (And, to be clear, Trustwave is not in this group: I do not have information of such mandates at the company). Also, there  is  business sense in doing this for reputational reasons. But first, let‚Äôs talk about  what  they are doing and whether it‚Äôs fair. The Glassdoor site makes it very clear companies cannot remove reviews. On every Glassdoor review page is this message: The message on Glassdoor‚Äôs review pages Well, this statement is  somewhat  inaccurate, as Glassdoor does remove some reviews. I talked with several HR folks whose mandate was to remove unfavorable reviews. This is possible, and here‚Äôs how it works: Glassdoor will remove reviews that violate its community guidelines, or terms of use.  Employers can flag reviews and Glassdoor does all removals at its sole discretion, and shares no details on why they decide to remove a review. There is no appeals from employers. Users whose reviews are removed are not notified.  I asked Glassdoor for comment on this fact. The company responded with a generic statement that did not answer why they don't notify users when taking down their reviews. Paying customers seem to get priority in acting on flagged reviews.  Although any company can flag reviews to be removed, a HR person told me that in their experience Glassdoor takes no action until the company is a Glassdoor customer. This person‚Äôs company flagged reviews that were very clearly in violation, but Glassdoor only took a review down when the company started paying.  Glassdoor responded and said they allow non-paying employers to flag reviews: but the company did not say if they treat non-paying employers with the same priority as paying ones. In all fairness, doing so would make no business sense. There is no way to pressure Glassdoor to remove any single review . However, a Chief People Officer who has worked at tech firms for more than 10 years told me their ‚Äúsuccess rate‚Äù for removing reviews is about 1 in 3. This person said that in their experience, rude and abusive reviews can be successfully challenged. Otherwise, Glassdoor won‚Äôt budge. Glassdoor is pretty good at reducing spamming.  The same Chief People Officer said they are satisfied with how well Glassdoor removed spam, or fake reviews. Spamming ‚Äì a ‚Äúcopy-paste‚Äù style review ‚Äì is a common problem and they do not feel Glassdoor take a backseat in battling this. The most common way to get a review removed is for a company to claim it violates Glassdoor‚Äôs terms of service. A HR professional who used to be tasked with removing as many reviews as possible, told me the most common method is to flag a review for one or both of the following reasons: Impersonating another person. Employers frequently flag reviews claiming what the review was by an impersonator pretending to be a staff member. Should Glassdoor agree, it will ask the reviewer to prove they‚Äôre a current employee, and will hide the review until this happens. Naturally, some employees will not want to identify themselves, even to Glassdoor. Defamatory, libellous, fraudulent or knowingly misleading content. Again, employers can flag content that falls into this category. This could be abused by some employers, putting Glassdoor in the position of deciding whether or not they agree with the employer‚Äôs opinion. Glassdoor is in a tricky spot, but doesn‚Äôt make the situation easier for itself.  Glassdoor is a semi-anonymous site where employees post reviews on the understanding Glassdoor will protect their privacy; and the site makes good on this promise. Glassdoor went as far as going to court in 2022 to push back on toymaker Zuru, which wanted to know the reviewers‚Äô identities. Unfortunately for privacy fans, Zuru won and a US court  ordered  Glassdoor to disclose this information.  So if you leave a review, consider the non-zero chance that a court order could force Glassdoor to reveal your identity, even though it clearly aims to protect this as much as possible. Imagine the situation where a review claims something and the company tells Glassdoor this is deliberately misleading information. What is Glassdoor to do? It needs to enforce the terms of service, so either it takes the employer at their word and removes this review. Or Glassdoor has enough knowledge to know the employer is incorrect and the information is accurate. However, when a review in question contains internal company information, Glassdoor will not have prior knowledge to fall back on, so it  has  to remove the review, or else fail to enforce its own terms of service. And to be fair, the HR worker I talked to said the same. This person flagged  every single  1 or 2-star review, and Glassdoor only acted on clearly defamatory and fraudulent ones, or ones which violated guidelines. Glassdoor could make the process a lot clearer by publishing a moderation log which details when and why it removed a review. This log could contain only the redacted parts of affected reviews to ensure the terms of service are not broken. Such a log would build confidence that Glassdoor is a neutral platform which is only enforcing its own terms and conditions, and could validate this. Wikipedia‚Äôs edit logs, or  the moderation log  on the programming website Lobste.rs, are both examples of bringing transparency to moderation and content editing policies. Companies encouraging staff to leave more positive reviews is a common way to increase the score.  Glassdoor itself naturally encourages companies to have more employees add reviews in order to combat negative reviews. In the article ‚Äú I'm an employer. What can I do about negative reviews on Glassdoor? ‚Äù the company outlines 4 steps: Flag reviews. Glassdoor validates if they break its terms and conditions or community guidelines. If they do, they need to be removed. Respond to them. Responses are shown under the review. Post more reviews. Glassdoor provides  several templates  about how employers can do this. Take legal action. This is always a possibility, but is the most time-consuming approach and the outcome of legal proceedings is uncertain. I‚Äôve talked with several CTOs and HR professionals who told me their companies encourage employees to post reviews in various ways: Send a reminder to new joiners during the first few months, asking them to leave a review on Glassdoor.  This is a smart approach, as new joiners are often in their honeymoon period, and are likely to leave a positive review. Remind managers of the importance of Glassdoor reviews when hiring staff, and ask them to consider sharing their experience on the site.  Again, smart, as managers tend to sell the company anyway and are likely to share positive things about the place. Organize a ‚ÄúGlassdoor review event,‚Äù asking employees to leave honest reviews. In cases where there is no pressure to leave a positive review, I cannot find fault in these approaches. Of course, employees know a good review makes the employer look better, but it‚Äôs the employee‚Äôs choice. However, there are companies which employ more questionable tactics. Engineering leaders and engineers shared some stories: A startup organized a social event at work, and asked employees to show up on time with their laptops. As everyone arrived, the founder instructed people to go to Glassdoor, and leave a positive review. The founder and other executives walked around, checking what people were writing. One company asked employees to write a ‚Äúhonest‚Äù review and email it to HR. Naturally, this meant the review was not anonymous any more. A company, as part of their onboarding checklists, instructs new joiners to submit a positive Glassdoor review during their first week at the company.  Such reviews can often be spotted, as the descriptions will often mention how the reviewer has barely started at the company. A video platform startup company explicitly banned terminated employees from posting a negative review of the company on Glassdoor, or any other review site for one year, as part of their severance package agreement. A software engineer who was given this severance agreement contacted Glassdoor to complain about their employer, but never heard back. The engineer didn‚Äôt post a negative review for a year to protect their severance. Another company disallowed employees posting any Glassdoor reviews, in the employment contract itself: doing so would go against this contract. This company added this clause after a long and constant inflow of negative reviews. These examples suggest bad company cultures, regardless of what the reviews say. Some companies see relatively fast increases in their Glassdoor scores, after layoffs.  Let‚Äôs take a specific example: Trustwave, which is a cybersecurity and managed services provider owned by Singtel, a telecom giant in Singapore. Here‚Äôs Trustwave‚Äôs Glassdoor page at time of publication: Trustwave‚Äôs Glassdoor reviews page. Source:  Glassdoor But the company‚Äôs Glassdoor page was not always like this. Just 2 years ago, about 12 months after layoffs at the company, the scores were significantly lower: Trustwave‚Äôs Glassdoor reviews page in June 2021 Former employees told me the company had a restructuring in mid-2020, letting go about 10-20% of staff. This, naturally, decreased morale ‚Äì and likely also contributed to more negative company reviews on Glassdoor. The company called this restructuring a company-wide transformation. A PR manager from Trustwave said that the changes since 2020 included a revamped performance management process, introducing a ‚ÄúMoments that Matter‚Äù workplace philosophy (basically, flexible remote work,) and investment in learning and development. This PR manager said they believe the improved Glassdoor score ‚Äúis a direct reflection of Trustwave's successful corporate and cultural transformation with its focused talent initiatives.‚Äù I spent a few days collecting and crunching Trustwave‚Äôs Glassdoor reviews, and can now map out how reviews have changed: The change in ratings for Trustwave, 2014-2023. Since 2021, ratings have dramatically improved It‚Äôs not surprising to see the company‚Äôs Glassdoor score decreasing after mid-2020, as this happens to companies that go through restructuring which involves cuts. However, there‚Äôs a definite and ongoing uptick since the mid-2021. In May that year, the company announced a new Chief People Officer, and since then has been a lot more responsive in responding to Glassdoor reviews. Also, the number of reviews have increased by quite a lot. What‚Äôs strange is that until June 2022, the number of reviews was up, but the average rating was still around 3.5. Then something changed from June 2022: How the frequency and scores across reviews have changed in the last 24 months. The past 12 months there‚Äôs been an unprecedented uptick in 5-star reviews In the past 12 months, the company received more than 6 times the number of 5-star reviews than in the previous year. So I decided to look into the content of these reviews. To my surprise, 12 out of the last 25 reviews were exact copies of each other: exact duplicate reviews coming in 12-20 days after the first such review. Basically, 50% of recent reviews are spam. Here are some examples: The exact same review, posted twice. All of these reviews are 5-stars, very short and lack any specifics. Twelve of the last 25 reviews are ‚Äúcopy-paste‚Äù reviews. Are they legit? I reached out to Trustwave to ask if they‚Äôre aware of these duplicated, overly generic reviews on their Glassdoor page. The company responded, saying ‚ÄúTrustwave is not aware of any fake or duplicate reviews on its Glassdoor page.‚Äù Well, the company should be  somewhat  aware that half of all recent reviews are duplicates, given the Chief People Officer personally responded to a duplicate review less than a month ago, making it clear they read both reviews: Trustwave‚Äôs Chief Human Resources Officer‚Äôs response to a duplicate review Given I already found a dozen duplicate reviews just by browsing Trustwave‚Äôs site, I was wondering how seriously Glassdoor is taking removal of such spam reviews, which should be easy enough to identify. I reached out for comment, but the company replied with a generic statement: ‚ÄúBefore a review appears on Glassdoor, it goes through a multi-tier review process that can include both technological and human review.‚Äù Well, that automated review does not seem to include checking for duplicate reviews, as of today. Remember which company has what type of incentives.  Glassdoor‚Äôs customers are businesses, and the company makes its revenue from 4 sources, all based on businesses paying for: Employer branding: the ability to respond to reviews Review intelligence, to discover trends in reviews Job listings Targeted job ads Glassdoor‚Äôs incentives are tied to keeping its customers (businesses) happy, and to attract enough traffic from job seekers to justify businesses contracting with Glassdoor. And as for companies? Their goal will be to present themselves in a positive light. HR teams at certain organizations could set a goal of getting their Glassdoor score to a given target, or the C-level leadership might set the target. In the case of Trustwave, a year ago the company‚Äôs score was 3.5. Today it is 4.4. What‚Äôs changed? Dozens of generic-looking 5-star reviews that give no additional insight into what it‚Äôs  really  like at the company. So how much should you trust this score, or rely on it? My take is that you should be cautious, and treat this with due context. I cover more advice on this in the  full The Scoop issue . Independent of this article, solution scientist  Shikhar Sachdev  dived deep and investigated  The underground economy of Glassdoor reviews , finding fake, 5-start Glassdoor reviews have a going rate of $10-25 per review on marketplaces, and providers offering review removal services - for a price. Review removal is something Glassdoor explicitly says should not be possible. It's fascinating research to read:  check it out here. This was one out of the five topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop  edition additionally covers: Should Glassdoor reviews matter to you?  As an engineering leader or a job seeker, how much weight should you assign to Glassdoor reviews? I give my take from both sides, pulling in expert advice.  Opinion When will Amazon join the generative AI race?  Among the big 3 cloud providers, Microsoft and Google are shipping generative AI solutions for customers to use. Meanwhile, Amazon has announced Bedrock, but more than a month later not even its own developers have access. What‚Äôs going on, and when will Bedrock be available? I talked with Amazon SDEs and have answers.  Exclusive A 1.5 month-long code freeze at Stack Overflow.  With hundreds of hardcoded secrets in its repository, this became a major problem for Stack Overflow, due to the CircleCI security breach. To remedy things, the company froze all deploys for six weeks. What can we learn from this incident?   Exclusive Early warning of recent layoffs at AWS.  It‚Äôs rare to know if you‚Äôre at risk of losing your job, before cuts are announced. In what was probably an oversight, affected AWS employees got a few days‚Äô notice that the axe was going to fall, which helped many people prepare.  Exclusive The AI boom to intensify?  NVIDIA‚Äôs earnings revealed a much bigger-than-expected demand for hardware to run and train AI models. Could we see the already hot AI field heat up further?  Analysis . Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/github-copilot-alternatives/", "title": "Github Copilot and ChatGPT alternatives", "content": "\n             There are a growing number of AI coding tools that are alternatives to Copilot. A list of other popular, promising options. Originally published 16 May 2023. There are plenty of tools to choose from aside from Copilot and ChatGPT. Here are the most promising ones worth checking out, with an emphasis on those with self-hosting as an option. Date of launch is in brackets: Tabnine  (2019) GitHub Copilot  (2021) Replit Ghostwriter  (2022) Amazon CodeWhisperer  (2022) Codeium  (2022) SourceGraph Cody  (2023) CodeComplete  (2023) FauxPilot  (2023) Tabby  (2023) Copilot alternatives on the market ChatGPT alternatives One important thing to note about ChatGPT is that, by default, it uses your input via the web interface to train its model. This is how  Samsung employees leaked confidential data  by asking ChatGPT to generate meeting notes. ChatGPT retains user data, even that of paying users. If you don‚Äôt consent to this, you need to  opt out . Below are a couple of ChatGPT alternatives which do not ‚Äúleak‚Äù data like it does, as in making user-entered data part of a training set which can later be accessed by all customers: OpenAI APIs . Curiously, ChatGPT uses data entered via its web interface for training, but  not when using its APIs . So an obvious workaround is to use the APIs with a wrapper, like the open source  Chatbot UI . Azure OpenAI Service . Fine-tune custom AI models with your company data and hyperparameters. MosaicML . Train large AI models with your company data in a secure environment. Point to an AWS S3 bucket, and that‚Äôs it! Glean.  AI-powered workplace search across the company‚Äôs apps, powered by deep learning-based large language models (LLM.) Aleph Alpha . A company emphasizing that it‚Äôs a European AI technology company, which has open sourced its code codebase and doesn‚Äôt use customer data to train models. Cohere . A set of LLMs to generate text, summarize it, classify and retrieve it. Writer . A generative AI platform that trains on the company‚Äôs data. Building your own company model instead of using a centralized LLM provider  is another alternative, and this approach could be prudent for businesses conscious about not passing sensitive and proprietary data to vendors. Databricks created  Dolly , a cheap-to-build LLM which works pretty decently compared to ChatGPT, although the model is more dated. They also  open sourced  15,000 records of training data.  Read more about Dolly . A very relevant question in the coming age of LLMs will be ‚Äúbuy, build, or self host?‚Äù This is because the usefulness of LLMs depends on two things: the model, and the additional training data. Companies will want to train LLMs using their in-house data to make them most useful for staff. However, trusting a vendor with in-house data is more risky than building and operating an LLM in-house, or self hosting one. But there‚Äôs considerable cost in both self-hosting, and especially in building one. Still, it‚Äôs early days, so perhaps experimentation like this makes sense? It feels to me that ChatGPT alternatives are an incredibly hot topic and we‚Äôve likely only skimmed the surface of startups working in this area. For example, there are more than 50 LLMs with 1B+ parameters that can be accessed via open-source checkpoints or proprietary APIs.  Here‚Äôs a list of them , collated by software engineer  Matt Rickard . This article is an excerpt from  The productivity impact of AI coding tools . The full article additionally covers: The survey . An overview of questions and the profiles of respondents. Comparable productivity gains . The gains which GitHub Copilot and ChatGPT offer are enticing, but not totally unprecedented within tech. Experienced engineers with decades in the business share examples of previous comparable productivity improvements. GitHub Copilot.  Its most common use cases, where the biggest gains are to be found, and when this tool isn‚Äôt so useful. ChatGPT.  Most common use cases and when to proceed with caution. Copilot vs ChatGPT.  How the tools compare. When is one better than the other? The present and future of AI coding tools.  Common observations and interesting predictions from survey respondents. \" Are AI coding tools going to take my job?‚Äù  A very common question and source of concern for some engineers. Read the full article here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/domain-registrars-which-developers-recommend/", "title": "Domain Registrars which Developers Recommend", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of four topics from today‚Äôs subscriber-only  The Scoop issue . To get full issues twice a week,  subscribe here . Google Domains is the third most popular domain registrar globally, in terms of the number of domains  currently  registered. With 10 million registrations, it sits as the fourth largest aggregate ‚Äúdomains holder‚Äù: behind GoDaddy (80M,) NameCheap (16M,) Tucows (11M.) With Google Domains to be discontinued ‚Äî as we  covered this in detail last week  ‚Äî all 10 million domains  will  move to a new registrar. Current Google Domains customers who do nothing will be migrated to Squarespace and onboard to its interface. They‚Äôll need to familiarize themselves with Squarespace‚Äôs domain management capabilities. However, domain names are easily transferable, and domain registrars I‚Äôve talked with already say they‚Äôre seeing a large spike in transfers from Google Domains.  Read more about  how Squarespace announced buying of Google Domains , and who the immediate winner of this move could be. We are likely at the start of ‚Äúa great domain transfer,‚Äù  with what may easily be millions of Google Domains customers initiating a domain transfer. So I figured that now is a good time to collate registrars which software engineers recommend. This list is useful, not just for Google Domains customers who don‚Äôt want to wait to be passed to Squarespace. Anyone planning on registering a domain may find this list beneficial. As a note, I‚Äôve nothing against Squarespace. It‚Äôs been a domain registrar since 2020, and already manages 1 million domain names. Unlike most domain registrars that sell domain names very close to wholesale cost ‚Äì and make a profit on other services they sell, like hosting, DDos protection, and so on, Squarespace sells domains at a higher margin. A .com domain registration costs $20/year at Squarespace, compared to $12/year with Google Domains, and $9-10 at registrars that sell closer to wholesale .com prices. Also, longtime readers might find Squarespace familiar, as it was Squarespace principal software Tanya Reilly who wrote the book  The Staff Engineer‚Äôs Path , from which I previously  shared an excerpt  and is a book I recommend.  If you ask me, it‚Äôs a pretty great indicator for Squarespace‚Äôs engineering culture to have someone like Tanya work there! I asked on Twitter  ‚Äúwhat domain registrars would you recommend / do you use‚Äù , and more than 250 techies replied. I suspect most respondents use these registrars for side projects, and some use them at work. The results are very interesting. For context, let‚Äôs first look at the  global  market share of domain registrars, highlighting those which respondents mentioned, later: The global market share of domain registrars, based on the total number of domain names managed. Only GoDaddy has double digit market share. Source:  Domain Name Stat Let‚Äôs now zoom in closer, at registrars which emerge in the survey results: Comparing the relative market share of larger registrars to each other in the group, which puts the next chart in context. Data source:  Domain Name Stat Domain providers which software engineers and other techies recommended in responses to my tweet: ‚ÄúWhat domain registrars would you recommend / do you use?‚Äù How 251 techies responded. Question asked  on Twitter Three domain providers stand out: Cloudflare, Namecheap and Porkbun. Let‚Äôs go into more detail on these three standout recommendations, and then cover the rest. I‚Äôll share quotes from engineers on why they recommend a provider, and I also reached out to Cloudflare and Porkbun providers to ask if they‚Äôre seeing an influx of traffic since Google Domains‚Äô sale was made public. In-line with  my ethics statement , I have not been paid to mention any of these providers, nor do I hold stock in any of them or any of their competitors. Cloudflare Cloudflare  earned the most mentions, and also comments which most people seemed to agree with. A few comments which represent what many engineers said: ‚ÄúEmail routing out of the box, for free. Easy redirect rules. Protection for HTTPS endpoints.‚Äù ‚ÄúAfter moving my domains to CloudFlare, I discovered their DNS is much more than a DNS.‚Äù ‚ÄúYou pay what they pay ‚Äî no markups or hidden fees. You also get free WHOIS protection, DNSSEC, and 2FA. Plus, you can use Cloudflare‚Äôs network and features to boost your site.‚Äù The biggest complaint about Cloudflare was that it doesn‚Äôt yet support several more specialized top-level domains. I asked Cloudflare what they are doing about this, and the company confirmed they‚Äôre adding support to .dev and .app by mid July 2023 ‚Äì those being two highly requested ones. Due to the volume of mentions, I also played around a bit with the interface by registering a domain to try things out.  The clean interface  reminded me of Google Domains, but Cloudflare comes with extras off the bat, such as  domain proxying  included with all domains, that can protect against DDos attacks. Cloudflare's domain management interface. This interface reminded me somewhat of the one I've come to like at Google Domains. Are domain providers seeing an influx from Google Domains customers?  I asked Cloudflare and Porkbun directly. At Cloudflare, Dane Knect, SVP Emerging Technology and Incubation, said many customers come hoping to avoid the ‚Äúbait and switch‚Äù approach of some providers: ‚ÄúWe have seen a massive increase in inbound business from Google Domains customers. When we first embarked on offering a Registrar service to our customers, two phrases kept coming up when we asked customers what they thought about their current registar ‚Äúupsell‚Äù and ‚Äúbait & switch.‚Äù While you can initially buy a domain at a discounted price, upon renewal, customers were always surprised by the new sticker price.‚Äù Cloudflare sells domains ‚Äúat cost,‚Äù so the company effectively loses money on every single purchase. As a customer, you want to know how your provider makes money, and how it will stay in business. On this, Dane said: ‚ÄúWe took a similar approach with Registrar as we did with SSL back in 2014 ‚Äî we decided it was crazy that people should have to pay to be encrypted online. In 2014, we became one of the first services to say that you should get encryption at no extra cost, even on our free plan.  We saw the same thing happening with domain registration ‚Äî there‚Äôs a cost to operating a TLD, and we pass that onto our customers. But all we‚Äôre really doing is pinging an API, and there's a minimal cost to us, so we see no reason for our customers to pay more than wholesale. The promise we made to our customers when we announced Registrar in 2018 was never to charge a markup beyond our costs, and we plan to stick to that promise.‚Äù Namecheap Namecheap   was another standout mention. A few quotes by engineers recommending it: ‚ÄúIt has an outdated, 2000s-era UI, but to me, that's a positive sign. It indicates that their core business is robust enough that they don't need to invent unnecessary new features arbitrarily.‚Äù ‚ÄúMy reason is simple - it is their bread and butter and also so much trusted in the Hacker News community.‚Äù ‚ÄúBeen with Namecheap for around 5 years. Love it.‚Äú Lots of devs referred to having used Namecheap without issues for years. In what‚Äôs a nice sign, the CEO of the company is active  on Twitter  and responds to customer complaints and comments. Namecheap is an example of a company that‚Äôs launching a new product called  Spaceship  to sell domains  below  wholesale cost, by coupling the domain with shared hosting and email packages. This kind of bundling will only become more common. Just be aware of where the subsidy for the domain comes from! Porkbun Porkbun  is the most unlikely domain provider on this list. I mean, look at the site: Porkbun‚Äôs website. The company describes itself as ‚ÄúPorkbun is an amazingly awesome ICANN accredited domain name registrar based out of the Pacific Northwest. We're different, we're easy, and we're affordable. Use us, you won't be sorry. If you don't use us, we'll be sad, but we'll still love you.‚Äù Also, look at these graphics: Porkbun created a unique piglet for each type of domain they support. And boy, are there a lot of little piggies! Source:  Porkbun‚Äôs ‚ÄúAwesomeness‚Äù page Okay, so why do devs like using Porkbun? Here‚Äôs what they said: ‚ÄúThey are just very good and affordable üê∑Plus all settings at 1 place üëê And bulk options!‚Äù ‚ÄúI only buy domains from them, and don't use any other services. But it's insanely cheap. They have English-native support and don't outsource it. Very dorky and fun vibe, which is not usual.‚Äù \"Cheeky brand, name fits well. A page from the Mailchimp product led playbook.‚Äù Porkbun is seeing a 50x increase in transfers from Google Domains.  I learned of this statistic after reaching out to Porkbun to ask about how business is going since the announcement of the sale to Squarespace. The company told me this is how much more domain transfers they see coming from Google Domains, versus a year ago. Quite the jump! I asked the company why they think they‚Äôre getting so much business, especially from developers? They said: ‚ÄúWe were the first registrar to offer free SSL certificates via Let‚Äôs Encrypt, our overall value is second to none. We were the first to launch our  AI Search Generator  tool amid the race to incorporate AI into domain name search in response to industry needs and customer feedback. Plus, you can‚Äôt discount the importance of being friendly, fun, and approachable. We don‚Äôt take ourselves too seriously, I mean our logo is a pig‚Äôs butt.‚Äù Porkbun sells domain names on the cheaper side. While this is good for customers‚Äô wallets, it raises the question of how sustainable the business is. I asked Porkbun how confident customers can be that they won‚Äôt go out of business. The company shared a few interesting points: Porkbun was originally launched to run a new TLD registry, and the company owned ¬†.wiki, .ink, .design, .gay, and .tattoo. But post-launch, Porkbun found that larger registrars like GoDaddy did not market these domains the way Porkbun would have liked to, so they launched their own! The unit custom domains brought in the most revenue, initially. From Porkbun: ‚ÄúSince the registry was already making $33 on a .design registration, we asked ourselves how much Porkbun needs to make. Our markup on standard domains remains the same: $1 or less.‚Äù And thanks to low margins, Porkbun is mindful of not competing on the same services. As they write: ‚ÄúThere are some places where you could point to our lean nature impacting the product: we don‚Äôt (yet) have 24/7 support, we are intentional about expanding to other ccTLDs [country code top-level domains] and geographies, and that we have relied on word-of-mouth growth and marketing for much of our history.‚Äù And Porkbun ended with an interesting tongue-in-cheek response by comparing themselves to Google Domains; except that Porkbun is still in business despite its much smaller size, and Google Domains is throwing in the towel, despite the backing of a tech giant: ‚ÄúWe‚Äôll point out that  both  Porkbun and Google Domains launched in 2015. Google Domains grew to be something like the 4th largest registrar in the world, with much higher margins, and yet we‚Äôre the ones still committed to this work and our customers for the long run. We see ourselves in the industry and reinforce that we as a registrar are not going away anytime soon!‚Äù Other registrars Other providers which several developers recommended, in order of popularity: AWS Route 53 : the obvious choice for those already on AWS. Gandi : a French provider, especially popular in Europe. AWS uses Gandi under the hood for many of its domains. iwantmyname : a provider supporting 400+ extensions, operating for 15 years GoDaddy : given its dominance of market share, I found it curious that relatively few engineers recommended this giant Hover . A survey respondent: ‚ÄúBeen using it for many years. The controls are good, the knowledge base quite extensive, and the support quite helpful when I needed it.‚Äù Namesilo . A popular registrar, globally. DNSimple . A provider that‚Äôs been around since 2010. Name.com . Around since 2003. Dynadot . Founded in 2002. Vercel . The frontend cloud platform company is a popular choice for frontend infrastructure, and offers domain registrations without leaving the service. INWX : a German registrar Hetzner : a German cloud provider and registrar OVH Cloud : a French cloud provider and registrar Inonos : a German company, founded in 1988. ‚Ä¶ and other, one-off, mentions. Clearly, many engineers have their own personal favorite registrars! Some domain registrar giants are missing from ‚Äì or surprisingly low down ‚Äì on this list.  GoDaddy is by far the most popular domain registrar, globally. But it ¬†was mentioned surprisingly few times in recommendations from developers. Even more ¬†surprisingly was that Tucows ‚Äì the domain registrar with the third most domains globally ‚Äì wasn‚Äôt mentioned even once. Clearly, the target audience both for GoDaddy and Tucows is not the developer crowd. In contrast, Namecheap ‚Äì the second most popular registrar globally ‚Äì did remarkably well with the tech crowd, earning the second most mentions behind Cloudflare. A ‚Äúcheap domain registrar search site‚Äù  which several devs recommended to use is  TLD-List . This site compares real time prices across providers, ranking domains by affordability. This service is ideal for saving money; for example, when buying domains for a side project. I would caution against only shopping around for price when it‚Äôs for a production project, and features like email forwarding, proxying, DDos protection, CDN integration, and so on. Just as important will be reliability, customer support or additional domain tools. Do your research based on the capabilities you need! Will the Google Domains shutdown make a sizable impact on the domains or cloud computing markets?  I am sensing there‚Äôs a larger than usual domain transfer wave starting, from Google Domains to other registrars. The thing is, domain registrations are a very low margin business. The top 3 registrars that developers seem to prefer make close to no money on the domains themselves. Both Cloudflare and Porkbun seem to treat domain names as a loss leader; they take a loss on this service and make it up by cross-selling other services to a subset of domain customers.  I assume all other providers selling domains close to wholesale cost do the same. Seen through this lens, encouraging domain transfers is a marketing activity. And encouraging developers to choose a given provider could be a long-term marketing/investment strategy. Developers who move their domains might not be big spenders today, but several of them could be future decision makers at their company, when it comes to selecting an infra provider, a CDN, security services, or hosting. This was one out of the four topics covered in this week‚Äôs The Scoop. A lot of what I share in The Scoop is exclusive to this publication, meaning it‚Äôs not been covered in any other media outlet before and you‚Äôre the first to read about it. The  full The Scoop edition  additionally covers: Atlassian flattening its engineering organization.  Last week, 480 engineering managers at Atlassian were told they are to become individual contributors (ICs.) This fits the trend of fewer managers ‚Äì and middle managers ‚Äì across tech. Will more companies to follow this approach?  Analysis . A bootstrapped and profitable company making cuts.  Zapier is  nearly  fully bootstrapped: the company took just $1.3M in pre-seed funding, more than 10 years ago. But with more than 800 employees and a $5B valuation, the company has cut 10% of staff. This is interesting, because unlike most companies making cuts, Zapier faced no obvious pressure from investors to do so. So why did it do it?  Analysis . Amazon is delaying some MBA grads‚Äô start dates . New grad MBA PMs due to start this summer at L6 levels have had their start dates pushed back 6 months. Could this move hurt Amazon‚Äôs employer brand?  Exclusive . Read the full The Scoop here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-roots-of-modern-backend-engineering-practices/", "title": "The Roots of Today's Modern Backend Engineering Practices", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover thee out of nine topics from today‚Äôs subscriber-only issue:  The Past and Future of Modern Backend Practices . To get full issues twice a week,  subscribe here . It‚Äôs fascinating how what is considered ‚Äúmodern‚Äù for backend practices keep evolving over time; back in the 2000s, virtualizing your servers was the cutting-edge thing to do; while around 2010 if you onboarded to the cloud, you were well ahead of the pack. If you had a continuous deployment system up and running around 2010, you were ahead of the pack: but today it‚Äôs considered strange if your team would  not  have this for things like web applications.¬† How have practices considered cutting edge on the backend changed from its early days, and where is it headed in future? To answer this big question, I turned to an industry veteran who‚Äôs been there, seen it, and done it ‚Äì and is still active in the game.  Joshua Burgin  was an early Amazon employee, joining in 1997, back when Amazon was just an internet bookstore and cloud computing wasn‚Äôt even a speck on the horizon.¬† He then worked at the casual games company Zynga, building their in-game advertising platform. After Zynga, he rejoined Amazon, and was the General Manager (GM) for Compute services at AWS, and later chief of staff, and advisor to AWS executives like Charlie Bell and Andy Jassy (Amazon‚Äôs current CEO.) Joshua is currently VP of Product & Strategy at VMware, a cloud computing and virtualization technology company. Joshua has remained technical while working as an executive. Joshua also writes an excellent  Substack newsletter  about how to design products which customers love, how to operate live services at scale, grow and optimize your technology orgs, and the history of the tech industry.  Subscribe here . In this issue, we cover: Year 1 on the job: accidentally taking Amazon.com offline The birth of ARPANET (1969) The rise of the internet and web-based computing (1989) A timeline of the evolution of modern backend practices In this article, we use the word ‚Äúmodern‚Äù to describe what larger, more established businesses consider cutting edge today.  We also use it in a historical sense to describe previous generations of technology that were pioneering in their time. It‚Äôs important to note there are no one-size-fits-all choices with technology, especially for things like microservices or Kubernetes, which are still considered relatively modern at large companies today. Startups and midsized companies are often better off not jumping to adopt new technologies, especially ones which solve problems a business does not have. With that, it‚Äôs over to Joshua: 1. Year 1 on the job: accidentally taking Amazon.com offline My journey in backend development began with an unexpected stumble, not a carefully considered first step on a pre-planned career path. In 1997, when Amazon was a one-floor, sub-100 person startup trying to sell books online, I experienced what every engineer dreads. Backend code I wrote and pushed to prod took down Amazon.com for several hours.  This incident was my initiation into the high-stakes world of internet-scale services. Back in those days, the ‚Äúcloud‚Äù wasn‚Äôt even something you could explain with hand gestures, and of course not something to which you deployed applications, and scaled on a whim.¬† Our tools were simple: shell scripting,  Perl  ( yes, really! ) and hand-rolled  C -code. We used a system called  CVS  ( Concurrent Versions System ) for version control, as Git did not exist until 2005 when  Linus Torvalds  created it. Our server setup was primitive by today's standards; we had a single, full-rack size ‚ÄúAlphaServer‚Äù box manufactured by Digital Equipment Corporation (DEC): The DEC AlphaServer 8400 box. Image source:  DEC AlphaServer 8000 Brochure . All of Amazon.com ran on such a server in 1997! On the Alpha box, we had an ‚Äúonline‚Äù and ‚Äúoffline‚Äù directory. To update code, we flipped a symlink ( a symbolic link is a file whose purpose is to point to a file or directory ) to swap between the code and HTML files contained in these directories. At the time, this approach was our best effort to deliver code on the nascent web.¬† Amazon.com ran on top of a monolithic C binary named ‚ÄúObidos,‚Äù   named after the narrowest, swiftest section of the Amazon river, in Brazil. Obidos shouldered the entire load of a business which became an online retail behemoth.¬† I remember the physicality of our systems; the blinking lights of the network traffic, having to put thermometers on servers because we were using converted conference rooms as data centers, and how we put a tarp in one corner because the roof leaked! All our servers had names, including some named after Muppets characters like Bert and Ernie.¬† We didn‚Äôt build our applications in neat containers, but in bulky monoliths which commingled business, database, backend, and frontend logic . Our deployments were initially manual. Avoiding downtime was nerve-wracking, and the notion of a 'rollback' was as much a  relief  as a technical process.¬† To succeed as a software engineer, you needed to be a jack-of-all-trades. We dabbled in network engineering, database management, and system administration. Oh, and did I mention this was  on top of  writing the code which fueled Amazon's growth? We were practicing varying shades of DevOps before it existed as a concept. On the day I broke the site, I learned the importance of observability.  I mean ‚Äúimportance‚Äù as a fundamental necessity, not a buzzword. Here‚Äôs how the outage played out: I pushed code from dev to staging  using a script  where everything worked fine. I then  half-manually  pushed code from staging to production. I still used a script, but had to specify parameters. I inadvertently specified the wrong parameters for this script. I set the  source  and  destination  Apache configuration as the same. Rather than failing with an error, this encountered an existing bug in the DEC Unix ‚Äúcopy‚Äù (cp) command, where cp simply overwrote the source file  with a zero-byte file . After this zero-byte file was deployed to prod, the Apache web server processes slowly picked up the empty configuration file. And it lost pointers to all its resources! Apache started to log like a maniac. The web server began diligently recording logs and errors it encountered. Eventually, the excessive Apache logs exhausted the number of inodes you can have in a single directory Which resulted in the servers becoming completely locked up! To resolve this, we had to do a  hard  reboot. This involved literally pushing the power button button on the server! Our ability to monitor what was happening for users on the website was overly simple, it turned out.  It‚Äôs wasn‚Äôt that we hadn‚Äôt thought about monitoring because we automated plenty of things, such as:¬† Network monitoring: inbound/outbound traffic Database monitoring: for example, keeping track of order volume Semi-automated QA process for our ‚Äúdev‚Äù and ‚Äústaging‚Äù environments Of course, we had no synthetic monitoring back then; as in simulating website usage, and thereby getting notified when things went wrong before users experienced it. Instead, we were regularly notified of bugs when executives‚Äô spouses and partners encountered issues while trying to buy things!¬† Looking back, I could‚Äôve done a better job with bounds checking and input validation. By bounds checking, I mean determining whether an input variable is within acceptable bounds before use and input validation. And for input validation, I mean that I could have analyzed inputs and disallowed ones considered unsuitable. I made these improvements after the outage, as part of  the post-mortem process , which at Amazon is known as a ‚ÄúCOE‚Äù (Correction of Errors,) and uses the ‚Äú 5 whys methodology ‚Äù developed originally at Toyota, which is still common today across the US. The AWS re:invent conference in 2022 hosted a good  in-depth overview of Amazon‚Äôs COE process . ‚ÄúThe more things change, the more they stay the same,‚Äù is one theme of this article. And this was proved true not long after I returned to Amazon in 2014, when a very large AWS service outage was caused by‚Ä¶ you guessed it; the absence of bounds checking and parallelized execution. The outage I caused in 97 taught me that developing robust systems goes hand-in-hand with the development of robust monitoring and observability tooling ‚Äì which should exist  outside  of whatever code you‚Äôre writing because you can‚Äôt always anticipate how your code will operate. And of course the incident was a lesson in humility and accountability, demonstrating that how you respond to outages or problems you cause, is a reflection of your character and professional integrity. Nobody‚Äôs perfect, and reacting positively to challenges and critical feedback significantly enhances how others perceive you. But this article isn't just about learning from the past; it's about understanding the  roots  of current backend engineering practices.  Let‚Äôs dive into the evolution of backend development, from computing‚Äôs early days up to the present, and try and predict what the future holds. As we go on this journey, remember: Every complex system today stands on the shoulders of lessons from earlier, formative times. 2. The birth of ARPANET (1969) To appreciate the magnitude of progress in backend development, we need to go back to 1969 and the birth of  ARPANET . This pioneering project was conceived during the Cold War between the US and the USSR. ARPANET was the world‚Äôs first major foray into networked computing. This project‚Äôs advancements laid the groundwork for many technologies still with us today, seven decades later. The concept of a distributed network was revolutionary, back then . ARPANET  was designed  to maintain communications during outages. This is a principle that has since become a cornerstone of modern backend architecture. But back then, the challenge wasn't just in building a network; it was about proving distributed systems could be  reliable ,  efficient , and  secure,  on a scale never attempted before. The structure of ARPANet in Dec 1969, which connected four universities using different computers, all massive is size and cost Consistent experimentation was a hallmark of this era . Protocols and practices we now regard as rudimentary were cutting-edge breakthroughs. Packet switching  was the method ARPANET used to send data, which laid the foundation for the future internet. In the early 1960s the prevailing communication networks consisted of continuous, analog circuits primarily utilized for persistent voice telephone connections. This approach was transformed by the advent of  packet switching , which introduced a digital, intermittent framework for networks. This method transmits data in discrete packets, doing so only as needed. Although this introduced the compromises of signal discontinuity and conversion overhead, packet-switching had several advantages:¬† Digital signal could be made \"error-free\" Software processing was upgradeable at the connection points Redundancy meant networks could survive damage Sharing links boosted efficiency For more on how packet switching works,  this overview on the Engineering & Technology History Wiki  is a good start, and it also provides details on how ARPANET was originally connected: ‚ÄúARPANET was linked by leased communication lines that sent data at speeds of fifty kilobits per second. Operating on the principles of packet switching, it queued up data and subdivided it into 128-byte packets programmed with a destination and address. The computer sent the packets along whichever route would move it fastest to a destination.‚Äù Sending digital packages allowed for robust, adaptable communication pathways that could withstand points of failure. This resistance to failure is what modern cloud services replicate in their designs for fault tolerance and high availability. There were a lot of technical hurdles which ARPANET had to overcome. The biggest was how to create a network that operated across disparate, geographically separated nodes. To solve this, network engineers devised innovative solutions that went on to influence the development of protocols and systems which underpin today‚Äôs web. For example, this was when these protocols were invented: TCP/IP Telnet FTP protocol Network email All these protocols were built for or, first implemented, on ARPANET! As a backend developer, acknowledging ARPANET's influence is vital.  The engineers who built ARPANET show us the importance of expecting and designing for failure, which is the core principle of backend and distributed systems development practices today. Notions of redundancy, load balancing, and fault tolerance which we work with are the direct descendants of strategies devised by ARPANET‚Äôs architects. 3. The rise of the internet and web-based computing (1989) ARPANET's influence expanded in the 1980s when the  National Science Foundation Network  (NSFNet) provided access to a network of supercomputers across the US. By 1989, the modern Internet as we know it was born, The first commercial Internet Service Providers (ISPs) emerged in the US and Australia, kicking off a radical shift in global communication. At the same time as the first ISPs were founded, in 1991 Sir Tim Berners-Lee proposed and implemented the  Hypertext Transfer Protocol  (HTTP.) It defined internet-based communications between a server and a client. HTTP triggered an explosion in connectivity ‚Äì and we can now safely say this protocol proved to be one of two fundamental catalysts of rapid internet adoption. What was the other driver of adoption? Well, until 1993, the most common way to access the internet was via text-based interfaces, and the Gopher browser, which looked like this: The Gopher browser was how people browsed the internet in the early ‚Äò90s. I used it in college! Image source:  HowToGeek Then in 1993 Marc Andreessen and his team built and launched the first modern web browser,  Mosaic , which provided a graphical interface for browsing the internet, making it accessible to a non-technical audience. This milestone is widely considered a critical point in the digital revolution, by enabling the average person to easily and meaningfully engage with online information and resources. Scaling challenges became more interesting on the backend side of things.  As the internet's reach grew, businesses faced the daunting task of making their infrastructure available on this thing called the ‚Äú internet ,‚Äù and scaling it to allow more users to access their services at once. There were several parts of this challenge:¬† Serving international audiences : All code, databases, HTML web pages, customer service tools, etc., were in english only. The localization (l10n) and internationalization (i18n) projects were many months-long undertakings just to launch amazon.de (Germany.) Later, adding support for ‚Äú double-byte characters ‚Äù to launch amazon.jp (Japan) took just as long. Managing increasing, unpredictable website loads : Amazon was growing tens-of-thousands-of-percent a year by order volume (and 100s of percent in staffing.) Third-party events like ‚Äú Oprah‚Äôs book club ‚Äù could send traffic and orders spiking 1000s of percent. And 1998 was the beginning of Amazon‚Äôs ‚Äúpeak season spike,‚Äù with a significant increase in sales the day after Thanksgiving, and the Christmas holidays. Even within that period there were waves, peaks and valleys that varied by several orders of magnitude. Safeguarding data and systems : There weren‚Äôt common tools like public/private key encryption, role-based-access-control (RBAC), zero-trust, least-privilege and other ‚Äú defense in depth ‚Äù measures that we have today. For example, it used to be common to check your database password into your version control system, and at most obfuscate the password (i.e. by rotating the letters using a ROT13 cypher,) to reduce the risk of storing it plain-text. Clearly, something more secure was needed. The early ‚Äò90s also saw the emergence of novel solutions to challenges such as: Database management Server clustering Load balancing Today, these challenges still exist but are so much easier to solve, with no shortage of open source or commercial solutions. But 30 years ago, these problem areas demanded hands-on expertise and in-house, custom development. At Amazon.com, we had our fair share of backend infrastructure challenges. The business was  founded in 1994 , a year after the Mosaic browser, and grew fast. This rapid growth put constant stress on the infrastructure to just keep up; not to mention Amazon‚Äôs stated ambition of becoming a global marketplace.¬† Internally, we seemed to hit another hard scaling limit every 6 months. This limit was almost always on how much we could scale out monolithic software. Each time we hit such a limit, we were pushed further into implementing distributed systems, and figuring out how to scale them up for demand. At the time, it felt like Amazon was forever one bad customer experience away from going under.  It was a high-pressure environment, and yet we needed to build systems for the present, and also for unpredictable but ever-increasing future loads. These were three out of the nine topics covered in  The Past and Future of Modern Backend Practices . The full article additionally covers: The struggle for scale at Amazon and the birth of SOA (late 1990s) Virtualization: the new frontier (1999-2002) Cloud computing: A paradigm shift (2006-2009) Containers and Kubernetes: reshaping the backend landscape (2013-2019) Today‚Äôs backend ecosystem: defining ‚Äúmodern‚Äù Envisioning the future of backend development Read the full article. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/devternity-fake-speakers/", "title": "The DevTernity Tech Conference Listed Fake Speakers for Years: I Accidentally Noticed", "content": "\n             For 3 years straight, the DevTernity conference listed non-existent software engineers representing Coinbase and Meta as featured speakers. When were they added and what could have the motivation been? Three featured speakers listed at DevTernity 2021, 2022 and 2023, and JDKon 2024. These people do not exist. A year ago, I spent months doing an investigative report on how UK events tech company Pollen had its staff work for free, as it had run out of money but still kept operating. The company kept promising that missing wages would arrive ‚Äì but they never did. Not only that, but the company stopped paying health insurance to US staff without informing them. The company went bankrupt, and the  details I uncovered were troubling . A year later, the BBC made a documentary about the company called  Crashed: $800M Festival Fail .¬† That BBC report required more resources than I have available. My report also created potential legal jeopardy for me ‚Äì and I had to review it with lawyers before publication. I decided that while I greatly respect investigative reportage, it‚Äôs not an area I would venture into, again. And I intended to keep this promise. However, last week I saw a post on my timeline in which a good friend of mine was announced as a speaker at the  DevTernity tech conference  on 7-8 December. It‚Äôs a paid, online-only conference, with tickets ranging ‚Ç¨399-798 per person ($435-870). The speaker lineup features some of the best-known speakers in the tech industry: ones like Scott Hanselman, Kelsey Hightower, Sam Newman, David Heinemeier Hansson, Dave Farley, Allen Houb and others. I clicked to check out what his talk will be about, and to look at the speaker lineup. Most speakers were familiar, and I also checked out the others. One profile caught my attention: Anna Boyko, a core contributor to Ethereum: Six of the 24 speakers from DevTernity 2023. Source:  DevTernity There aren‚Äôt many core Ethereum contributors, and I found it curious that someone committed to working on an open source crypto platform would join Coinbase at the same time. Eager to learn more about Anna‚Äôs professional history, I turned to LinkedIn. No matches. Google. No matches, save for this conference. I looked through the Ethereum core contributors, but found no one remotely similar. Finally, I reached out to friends at Coinbase who said they never heard of anyone called ‚ÄòAnna Boyko.‚Äô By now, I was suspicious. Could Anna be a fake profile? Surely not for such a high-profile conference? I assumed I was missing something, and I wanted to see if this could be a one-off of inventing a fake profile to make the conference lineup look more impressive than it actually is. So I looked at other conferences by the same organizer, Dev Events. And sure enough, I found yet another non-existent speaker for JDKon 2024 called  Alina Prokhoda : Senior Engineer at WhatsApp, and Microsoft MVP.  Alina Prokhoda, listed in the JDKon 2024 lineup. This person also does not exist. But there is no such MVP, and I confirmed with my sources that no one by this name works at Meta. I then looked at previous DevTernity conferences. In 2022, another odd profile stood out: a speaker with no Twitter handle and a weird title; Natalie Stadler ‚ÄúSoftware Craftswoman at Coinbase:‚Äù Speakers at DevTernity 2022. Natalie Stadler was made up, even then. Source:  DevTernity I don‚Äôt know about you, but I cannot imagine any Coinbase employee agreeing to such a title for a conference. Still, chatting with a contact at Coinbase, I asked them if Natalie also worked there; and she did not.¬†But it didn‚Äôt stop here. Natalie Stadler was a listed speaker  on the 2021 edition of the conference , as well. When and why were the fake speakers added to the conferences? You‚Äôll notice that all the fake speakers were women. Is this a coincidence? There's a timing that questions whether this could have been an accident. To answer, first, let's meet the conference's cofounder, Julia Kirsina (Coding Unicorn). She  confirmed  to hold this role in 2023: Julia (Coding Unicorn) mentioned she‚Äôs the cofounder of the conference in order to get in touch with a DevTernity speaker. Julia says she‚Äôs an ambassador at DevTernity in  her profile . On 3 August 2021, at 5pm GMT (6pm CEST), a complaint was made on Twitter, which message  called out  the all-male panel for the 2021 DevTernity lineup: Julia (cofounder of DevTernity) reacting to a complaint on the all-male lineup for DevTernity 2021. She never sent a DM to Matty to chat about the situation, as I confirmed with Matty \"Natalia Slater, Software Craftswoman at Coinbase\" was added a few hours after this complaint on the lack of diversity was made.   The DevTernity website is open source, with all changes observable, so we can  find the exact commit on 3 August 2021  that added the first fake speaker. It happened at 7pm GMT (8pm CEST), so  only  2 hours after the complaint made: The  same commit  also added Julia Kirsina, the cofounder of the conference as a speaker: but Julia delivered no talk on this conference. Given the timing, it seems highly likely that the conference's organizers invented a woman profile to address the concerns raised by Matty Stratton. On 6 August 2021, Natalia's name was  changed  to \"Natalia Stadler:\" Natalie Stadler was present in the 2021 conference lineup, as well as for the 2022 one.  For the DevTernity 2023 website, Natalia Stadler was no longer part of the site when it  went live on 3 January 2023 . Her \"colleague,\" Anna Boyko was added  on 21 January : The original image of Anna Boyko looked like it was generated from the website  This Person Doesn't Exist . This image was updated to a perhaps more realistic one on 24 January,  in a commit  that updated several speaker images: Finally, Alina Prokhoda  was added  to the JDKon lineup on 14 October 2023: Is there more to this, than fake Coinbase and Meta speaker profiles? What do you do when you find four instances of non-existent speakers at four conferences held in different years? All this took about 30 minutes of research to find out, including the pinging of contacts at Coinbase and Meta. Other people  must have  discovered what I did with such little effort, but it seems they said nothing. My choices seem to be to stay silent and let this deceit continue: or speak up, and hopefully help end this practice. I decided to share that this conference advertises fake speakers, and has done so for years.  This statement is easily verifiable by anyone in the same way that I did. I‚Äôve not seen this deceit at any other tech conference, and I‚Äôve seen enough that I didn‚Äôt want to keep quiet. So, I publicly shared  on Twitter  and  LinkedIn  that these speakers are made up. People were obviously not happy, and asked questions.  The DevTernity conference is organized ‚Äúby a small team of software engineers from Singapore, Estonia, and the Netherlands,‚Äù as per  the website . One of the conference‚Äôs organizers responded in public,  offering an explanation  that made no sense: such as stating that this was a one-off mistake, when it‚Äôs a multi-year practice. Further disturbing details have emerged from efforts by investigative reporters.  The Verge  confirmed  no ‚ÄúJulija Kirsina‚Äù graduated from The RISEBA University of Applied Science, which is listed on this  speaker‚Äôs LinkedIn profile  as her professional education, and The Verge could also not reach her. Is there even a real female software engineer behind the ‚ÄúCoding Unicorn‚Äù account, and does a developer with the name Julia Kirsina exist?   404Media  reported  that the conference‚Äôs male founder seems to be heavily involved behind Julia Kirsina‚Äôs ‚ÄúCoding Unicorn‚Äôs‚Äù Instagram account. Despite being listed as a featured speaker at DevTernity in 2021, 2022 and 2023, Kirsina never delivered a talk at the conference. In another relevant detail, the conference organizer was previously banned from tech social media site Lobst.ers  for sockpuppeting  the Coding Unicorn account. The DevTernity conference is no longer taking place: I understand this may be because several speakers canceled after learning of the deception. I hope everyone who paid for tickets and prefers a refund gets one; for an ethically run conference, this should be a given. Hopefully, this is the last time a paid tech conference advertises invented speakers with AI-generated images who don‚Äôt actually exist. The myth of \"there are not enough women speakers\" One of the organizers of the conference  responded  on Twitter, claiming \"There have been 1000s of events chasing the same small sub-group of female speakers.\" This sounds like a cheap excuse. The community response to this claim has been also strong contradiction, and people sharing resources on where women speakers can be found. A couple of these: Women in tech speakers and organizers : a continuously updated list on GitHub. 400+ speakers. STEM Ladies : a list on Twitter/X with 1,600 members \" Reply to this thread with a woman in tech you look up to: \" 300+ responses  Guests on the Hanselminutes podcast : 920+ guests working in tech (or areas related to tech), the majority from diverse backgrounds More coverage We've not seen anything of this kind of deceit in tech - a conference inventing speakers, including fake images - and the mainstream media covered this first-of-a-kind unethical approach to organizing a conference, extensively: Male tech conference founder is behind popular woman coding influencer account  (404Media) This dev conference organizer seems addicted to making up women  (The Verge) Meet ‚ÄòAnna Boyko‚Äô: how a fake speaker blew up DevTernity  (The New Stack) A popular female coding influencer's Instagram is apparently run by a man  (Endgadget) ‚ÄòWhat a strange tale‚Äô: Tech conference canceled after execs flee report of fake women speakers  (Fortune) A conference organizer lists imaginary women speakers to increase the appearance of diversity at his events  (Boing Boing) Backlash over fake female speakers shuts down developer conference  (Ars Technica) Tech conference accused of creating fake women speakers  (Skift) Developer conference axed after fake female profiles outcry  (Bloomberg) DevTernity conference collapses amid claims women speakers were faked  (The Register) Tech conference organizer accused of using fake female panelists  (Business Insider) Fake AI-generated woman on tech conference agenda leads Microsoft and Amazon execs to drop out  (Washington Post) A shorter version of this article was shared published in  The Pragmatic Engineer Newsletter on 30 November .  \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/mentoring/", "title": "Mentoring software engineers or engineering leaders", "content": "\n             I get asked every now and then if I offer 1:1 mentoring for either software engineers or engineering managers or leaders. While I used to do this in the past, I  don't offer this any more.  I collected much of the advice I have to offer for software engineers in  The Software Engineer's Guidebook . I also write  The Pragmatic Engineer Newsletter  where I do cover topics like  what it means to be a senior engineer at various companies , how to deal with  a low-quality engineering culture , and  other topics . I do believe great mentors are useful for professional growth , and have benefitted both informal and formal mentorship from experienced engineers and managers.  I wrote more on the  benefits of developers mentoring other developers  in the past. Here are approaches, as well as people I can recommend: If you are working at a large company : look for mentors, internally. Mentors who are inside the organization will be able to offer insights and observations that external mentors would likely not be able to help with. How do you find these people? They could be people you already worked with; or you can ask your management chain to connect you with folks who might be open to mentoring. If you are in an engineering leadership position at a smaller company , a paid coach/mentor could be a good investment, which could potentially be footed by your company. See a list of  paid coaches and engineering managers  based on both people I know personally; and recommendations from engineering managers who worked with them. If you are a software engineer , try to connect with and learn from more experienced people at your workplace. See advice on various approaches in my article  Developers mentoring other developers: practices I've seen work well.  You can also consider connecting with more experienced folks online: either through free sites, or via paid ones. See a  list of these sites to connect with mentors . Mentoring doesn't have to be a big deal.  Software engineer and engineering leader  Rodrigo Pimentel  shares this advice ( read his full post ): \"For a long time, I hesitated to actually try and find a mentor. Not only am I not good at asking for help, but I felt embarrassed to ask the people on my radar.  But then it turned out *I* was mentoring someone and I didn't even know it! A friend and former team member asked me to keep having our 1-1s (which I always have with everyone on my teams) after I left the company and moved to a different country. Which was fine by me, I enjoyed the chats, I learned a lot from them. One day, this friend casually referred to himself as my \"mentee\", and I was taken aback. I had no idea! This made me realise that being a mentor doesn't have to be a big imposition. So I approached a friend whom I admire and asked for a recurring chat. It was very unstructured, and we didn't even manage to have many sessions, but the ones we did have were valuable to me. (...) If you find yourself not having a mentor because of some (perhaps self-imposed) friction, try to unblock yourself by lowering the task. Ask a friend you admire for some of their time. Most people are happy to help. I hope you find these pointers useful. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/2023-review/", "title": "The Pragmatic Engineer Newsletter in 2023", "content": "\n             2023 was the second full year of  The Pragmatic Engineer Newsletter , and this newsletter is now almost two and a half years old; the first issue came out on 26 August 2021. Thank you for being a reader, I greatly value your support. This year, 102 newsletter issues were published, and this is number 103. You received a deepdive issue on Tuesdays, and every Thursday it was¬† ‚ÄúThe Pulse‚Äù ¬†‚Äì formerly The Scoop. Occasionally, there was a bonus article on Wednesdays, too, such as about¬† the book, Tidy First? Like¬† last year , these newsletters all add up to 5-7 books‚Äô worth of information. And speaking of books, this year I¬† finally ¬†published the project I‚Äôve been busy writing for years on the side of the newsletter:¬† The Software Engineer‚Äôs Guidebook . This turned into a four-year-long endeavor; thank you to everyone who purchased the paperback edition. Kindle and audiobook formats are expected in early 2024. Today‚Äôs issue  is a look back at 2023, with pointers to articles you may want to reread, or discover for the first time. We cover: The newsletter‚Äôs evolution The most popular articles, and my personal favorites New resources and templates for engineers and managers added this year Tech industry pulse in 2023 Read the 2023 recap here. For reviews of earlier years, see The Pragmatic Engineer¬† in 2021 ¬†and¬† in 2022 . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/section-174/", "title": "The Pulse: Will US companies hire fewer engineers due to Section 174?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of four topics from today‚Äôs subscriber-only  The Pulse issue . To get full issues twice a week,  subscribe here . In October, we looked into  bootstrapped companies founded by software engineers  and the article resonated with many readers; I got lots of messages from bootstrapped founders following that issue. Many messages were complaints about something called ‚ÄúSection 174 changes.‚Äù Here‚Äôs what one founder said: ‚ÄúHave you heard of a change in Section 174 of the US tax law that kicked in a few years ago? This change is making bootstrapped software businesses completely unsustainable.¬† Basically, all costs related to R&D cannot be expensed, including labor for software development. These costs have to be capitalized and amortized over 5 years ‚Äì or 15 if labor is done outside of the US. I have no other way to put it: this change is completely insane. Everyone I talk to says the same. I am curious if this has come up in your discussions with other bootstrapped companies?‚Äù I did some research, and The Wall Street Journal and a handful of other news outlets have  covered  this change since last March. Still, founders reaching out shared that it feels like public awareness is low about just how large a problem this tax change is. Back last April, Ben Thompson at Stratechery  covered  this change, also expressing his surprise on how impacted companies seemed to be blissfully unaware of this regulation: ‚ÄúI‚Äôve been very surprised that few people in tech seem to know about this issue, at least in the private conversations that I have had, even though startups are arguably the hardest hit companies of all.‚Äù I  took to social media  to gather more information, and a surprising number of complaints from US tech businesses came in. In this issue, we cover: An unexpectedly high tax bill out of nowhere A tax change never intended to make it into law Why did Big Tech and VCs not raise the alarm?‚Äù The impact of this change on US tech companies and devs working at them Why is forced amortization of software labor objectively bad? Will the US be content being a less competitive place for startups? If you're more of a YouTube videos type,  Theo.gg created a video on this topic . An unexpectedly high tax bill out of nowhere Many US software businesses amassed surprisingly high tax bills in 2023, seemingly out of nowhere, due to a tax change which took effect in July the previous year, which many small companies knew nothing about until finalizing their 2022 returns. The change was expected to be repealed (reversed) in December 2022, so many accountants didn‚Äôt inform customers for that reason. So, businesses got a surprise when the first tax payments fell due last April. The amendment to S174 means employing software engineers can no longer be accounted as a direct cost in the year they are paid ‚Äì unlike the norm, globally. Here‚Äôs a simplified example of the change from the final tax year before the change. Take an imaginary bootstrapped software business called ‚ÄúAcme Corp.‚Äù This company generates $1,000,000 of revenue per year running a SaaS service. It employs five engineers, and pays each $200,000. That is $1,000,000 paid in labor costs.  For simplicity, we omit other costs like servers and hosting, even though those costs can also fall under the new R&D rules, and have to be amortized.  So, how much taxable profit does this company make? In 2021, the answer would be zero profit. In 2022, the answer was $900,000 in profits(!!) This is because from 2022, software engineer labor costs  must  be amortized over five years. Here is how amortization works: 10% amortized for the first year 20% amortized for years 2 to 5 10% for year 6 Let‚Äôs break this down: The impact of Section 174 changes on a company that has $1M in revenue and $1M in labor costs. What happens to a small, bootstrapped company without $189,000 in cash floating around with which to pay this tax? There are two options: Take out a loan at a relatively high interest rate (likely at around 10% or so.)  I‚Äôve heard of small businesses needing to use personal loans to pay tax. ¬† Lay off a software engineer on $200,000 per year and use this saving to pay the bill! Less hiring of software engineers and more software engineering layoffs are already happening at smaller US tech companies.  In January last year, in a Wall Street Journal article, policy analyst, Alex Muresianu,  estimated  this tax code change would cost the US about 20,000 full-time software engineering jobs. And I have more real-world accounts of how US businesses are being hit, straight from the companies themselves: A business  posted  a $90K loss in 2022 by the old rules, but is taxed on a $1M profit. Infra startup Gruntwork is  hiring less  in 2024 because of the change. A startup that raised $1.25M and hired five employees, is  likely to face  a $150,000 tax bill it did not account for. A seed-stage startup that raised $3M and was operating at a loss became profitable due to the S174 change, so must budget for higher taxes. Another US company let go of 23 engineers employed in India because of the tax change. Software engineers abroad can be amortized only over 15 years. A tax change never intended to make it into law So, what are ‚ÄúSection 174 changes?‚Äù We need to go back some years to understand. In 2017, then-President, Donald Trump, signed the 2017 Tax Cuts & Jobs act, which overhauled tax codes and reduced tax ‚Äì for example, it reduced the top tax bracket from 39.6% to 37%. To make the bill pass strict budgetary rules, the Senate used a process called reconciliation: adding in tax code changes that delayed tax increases. These delayed increases ‚Äúbalanced out‚Äù the tax reduction. One of these changes was Section 174, set to come into effect 5 years later, in 2022. These parts  deliver the blow  by making it clear that software development costs  need  to be amortized over 5-15 years. Most experts expected Congress to push back the Section 174 amendment to a later date, or simply remove it. But Congressional negotiations to repeal the changes fell apart at the last minute in December 2022, meaning it became law. Why did Big Tech or VCs not raise the alarm? Why did we not hear the largest tech companies protesting the tax change? Actually, several did, but their protests failed to cut through on the news agenda. Large tech companies tend to speak up about issues like this via coalitions, trade associations, and lobbyists. Amazon, Microsoft, Intel, Ford, Lockheed Martin, and other US companies created the US  R&D Coalition  in 2018 to advocate in reversing this change. This group  concludes : ‚Äú[The Section 174 changes are] a dramatic shift in the tax treatment of business investments in research and innovation, and it will leave the United States with a system unlike any other in the industrialized world.¬† By diminishing the near-term value of R&D expenditures, the Tax Cuts and Jobs Act will reduce incentives for companies to invest in the development of new products, ultimately hurting consumers and businesses alike.‚Äù Here is how the S174 change impacted some companies, based on what I found in their annual reports: Microsoft : $4.8B additional tax paid in 2023.  The company generated a $72B profit that year, so this tax increase was manageable. It‚Äôs still a very large amount! Netflix:  around $368M in additional tax paid ‚Äì  also manageable with $4.4B annual profit. Google : the tax change was minimal, because Google was voluntarily amortizing software development expenses for most staff, already. This was for all projects that reached ‚Äútechnological feasibility,‚Äù which is a milestone products pass before public release. For companies with large cash reserves, the tax change was inconvenient, but manageable.   Over a five-year period, the amount of tax evens out. After five years, there can even be tax benefits to this kind of accounting. What about VC-funded companies? For loss-making companies this change doesn‚Äôt make much of a difference. But the change does impact VC-funded companies near to break even. Most VC-funded companies close to breakeven have big-enough cash buffers with which to pay unexpected tax bills. However, these companies might reduce hiring ‚Äì or even consider letting go staff.¬† Impact on US tech companies and devs working at them Assuming Section 174 stays and all US companies  must  amortize software developer costs over 5 years, this will have an immediate impact on early-stage and small tech companies: Less hiring of software engineers in the US/more layoffs.  Small and medium-sized tech companies facing higher tax bills in 2023 and 2024 will hire fewer developers. Redundancies might happen for cash flow purposes to replace in-house developers with vendors, which brings us to the next likely impact: Firing of non-US software engineers employed by US companies.  The tax change is very hostile to software developers employed abroad: their wages need to be deducted over 15 years. Unless a US company has massive cash reserves, it now makes no sense to remotely employ or contract with individual software developers. An engineer shared how their company fired 23 developers employed in India  because of  Section 174. A boon for SaaS companies and vendors?  US software companies now have a strong reason to buy, instead of build, software in-house. In February last year, we covered the  trend of tech companies aggressively cutting vendor spend . This tax change greatly incentivizes US companies to increase vendor spend ‚Äì and either not hire more devs, or let some go! It makes a  lot  less sense to incorporate tech startups in the US.  Assuming there‚Äôs a choice to incorporate a startup in the US or somewhere else, then any other country makes so much more sense. In the first few years of a startup, it‚Äôs typical to make a loss while building something that might not work out. Thanks to the amortization rules, in the US this loss could turn into a taxable profit!¬† Startup software IP will likely be moved out of the US.  Foreign founded venture-backed startups have been overwhelmingly incorporated in Delaware, US, until now. The Delaware company would then hold the intellectual property (IP) of the startup. With the Section 174 changes, the simplest way to not be subject to US amortization requirements is to move the IP to a foreign subsidiary ‚Äì and then this subsidiary can employ developers, without being subject to the 15-year amortization requirements. This is what newly founded VC-funded startups are doing, already!  As usual, this is not legal or business advice. Consult a professional for guidance on this matter. Creative workarounds, like ‚Äúinversion buying.‚Äù  Say that you run a US company with a Canadian subsidiary, with most developers working in Canada. With Section 174 changes, Canadian developers need to be amortized over 15 years (!). A tempting workaround is to have the Canadian subsidiary buy the US company! Now this is a Canadian company, and Section 174 doesn‚Äôt apply to developers in Canada. However, such workarounds can be expensive and complicated from a tax perspective, due to Passive Foreign Investment Company (PFIC) rules. Still, plenty of founders are exploring setups like this. Tech companies are now forced to understand ‚Äì and use ‚Äì R&D credits.  The S174 amendment forcibly categorizes pretty much all software development as R&D. The upside of this that R&D credits do offset the tax bill, but only partially: R&D costs eligible for the R&D Tax Credit are typically a smaller subset of all R&D costs. Image source:  Aprio Insights For more details on tax credits and Section 174, Gusto created a  Section 174 tax liablities caluculator .  Do consider getting professional advice, as always, if you are running a business impacted by this change. Innovation across all US software companies will take a hit if Section 174 stays.  The tax change incentivizes software companies without large cash reserves to invest  less  in research and development. Or they can just move abroad. But the change isn‚Äôt just bad for small software companies; it hurts even the largest ones ‚Äì it is why Microsoft and Amazon are also advocating for its reversal. Why is forced amortization of software labor objectively bad? The concept of amortization (also referred to as depreciation) is as follows. Say you purchase a powerful server for $2,000 to serve traffic for your SaaS business. You pay $2,000 on the spot. However, the expected lifespan of this server is 4 years, after which you expect to replace it. Therefore, it is reasonable to argue that you are getting about $500 worth of ‚Äúvalue‚Äù every year from this server, and so you amortize (depreciate) a quarter of the value of this server every accounting year, until year 4. This kind of depreciation is sensible, as you could sell your server for around $1,000 after two years (assuming that is how its value depreciation.) Tax authorities in different countries have come up with depreciation frameworks that businesses follow along these lines. For example, in the US, the  Financial Accounting Standards Board  (FASB) created the Generally Accepted Accounting Principles (GAAP) provisions, which include a framework on how to deal with depreciation. Amortizing software development over years makes sense ‚Äì but only in  some  cases.  If you have launched a software product, have customers, and you can forecast demand for this product pretty accurately, then investing developer hours to keep this SaaS running feels similar to buying hardware. The software engineer could build a new feature for the SaaS which generates revenue for years to come. So there is  some  argument to treat software development akin to buying a server. But is comparing physical goods to software, accurate? Take a company that buys a server office it plans to use for 20 years. After a massive one-off investment, the only cost is maintenance, which is a pretty minimal cost. Now take the example of creating software to generate revenue for 20 years. If you do barebones maintenance, the software becomes obsolete in a year or two! You need to keep adding new features and keep up with the competition. As you add more features, you run into tech debt and architecture issues, so you refactor the software and within a few years you rewrite the whole thing! Building software is like continuously renovating ‚Äì and rebuilding ‚Äì a property.  While it is tempting to see why an accountant would want to treat software development amortized like physical goods, this is simply not the reality of how software products behave, or are maintained. Before Section 174, companies could  choose  how they categorized software developers, and could opt into deducting costs. This is what stable and highly profitable businesses like Google have done: for software products in production (and making money) it deducted developer costs over 5 years. For pre-launch projects, Google simply expensed those developers. This is the sensible way to run a software business, after all! Google employing lots of devs in Switzerland starts to make a  lot  more sense, especially now.  Ever wondered why Google has such a large software engineering center in Switzerland ‚Äì despite the high cost of software engineers within Europe? Switzerland has a very powerful research and development incentive: the country  allows expensing  135% of R&D-related salaries in the year they are incurred.¬† Switzerland‚Äôs taxation is pretty much the polar opposite of that of the US with Section 174. Is Section 174 stays, I would not be surprised if some US companies considered following Google‚Äôs lead and explore setting up engineering offices in this country. Will the US be content being a less competitive place for startups? All founders whom I talked with hoped Congress would revert this disastrous tax code change, given its devastating impact on tech startups. However, this has not happened ‚Äì and it‚Äôs unclear if it will. Founders have been trying to get the attention of Congress: sending a  letter signed by 1,000+ software businesses , and creating coalitions like the  American Innovators Coalition . Another group formed in March this year is the  Small Software Business Alliance , created by indie SaaS founder Michele Hansen, supported by over 600 small software company founders.¬† I asked Michele why she thinks the general public isn't aware of the threat to US companies. She said: ‚Äú1. For years, the perception has been that tax changes impact big companies, not small ones.¬† 2. Tax policy issues are boring for the general public. It takes a strong social impact ‚Äì for example, mass layoffs ‚Äì for news like this to break into mainstream media. 3. Section 174 was never supposed to take effect, and was widely assumed that it would be fixed before it took effect. So, there was little interest in a problem likely to go away.‚Äù Michele said there is reason for hope, though. Congress appears to have struck a deal: revert Section 174 changes on R&D expensing. Lawmakers are now  looking for ways to finance this deal . One country making software development less competitive obviously benefits other countries. Thanks to the S174 amendment, starting a tech company  outside  the US is far more attractive ‚Äì including for raising startup capital. Still, the US has long been the global innovation hub for technology, and the country kneecapping technological innovation might let the rest of the world catch up. But I cannot see this being beneficial for innovation, as a whole, globally. Thank you to  Michele Hansen  and  Jacek Migda≈Ç  for their insights and reviewing a draft of this section. Updates to the article after publishing: 6 January ‚Äî added a reference to Stratechery that covered this change last April This was one out of the four topics covered in this week‚Äôs The Pulse. The full edition additionally covers: Industry pulse.  A roundup of recent events, with commentary. The New York Times is suing OpenAI, Canva to offer a secondary equity sale, Cloudflare receiving 3x as many applications in 2023 than a year ago, and more. Uber is now worth more than all competitors, combined.  Two years ago, food delivery company DoorDash and ridesharing company Lyft were worth more than Uber. Now, Uber‚Äôs worth more than DoorDash, Lyft, Didi, Zomato, Grab, Delivery Hero, Instacart, and half a dozen other competitors. The largest known Ruby codebases.  Stripe and Shopify almost certainly operate the world‚Äôs largest Ruby codebase. A look at other companies known to work with massive Ruby repositories. Read the full The Pulse. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/happy-leap-day/", "title": "Happy Leap Day!", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of three topics from today‚Äôs subscriber-only  The Pulse issue .  Subscribe  to get issues like this in your inbox, every week. It‚Äôs 29th February, a once-every-four-year occurrence. Most people don‚Äôt think too much about this extra day in the calendar, but as software engineers, we absolutely should! But first, a few current cases of systems whose developers didn‚Äôt: In Sweden, card payments are down at a leading supermarket chain.  ICA is the biggest supermarket chain in the Nordic country, and today customers can only use cash. From Swedish online magazine  Omni.se : ‚ÄúThe problem [with card payments] is due to today's date. The information I received is that today is the shooting day. It is therefore a leap day problem and it is February 29 that simply causes it, says store manager Peter Slagbrand to Eskilstuna-Kuriren. The information about the leap day problem is confirmed by the ICA bank's press officer Maria Elfvelin.‚Äù In Colombia, airline tickets have been printed incorrectly by the nation‚Äôs largest airline.  Airline Avianca printed tickets dated as 3/1 instead of 2/29, thanks to their system not accounting for the leap day. A traveler shared how the airline recognized the mistake, fixed it on the day, and  sent this email  to customers: ‚ÄúWe inform you that if your flight is on February 29, 2024, you may experience a discrepancy in the date of your flight on the boarding pass. To ensure you have the correct information, please download it again from avianca.com or from our app.‚Äù Payment terminals at gas stations stopped working in New Zealand.  The New Zealand Herald  reports : ‚ÄúPetrol stations around the country are up and running again following a day-long leap-year glitch which saw card payment machines go down for more than 10 hours. Allied Petroleum, Gull, Z, Waitomo and other fuel stops around New Zealand reported problems with card payments on Thursday because of a software glitch they said was caused by their systems not being programmed to deal with the date February 29.‚Äù A smartwatch released this year couldn‚Äôt display today‚Äôs date.  The Fastrack FS1 is a recently released smartwatch from the Indian company, Fastrack. The FS1 model was released in March 2023, and here‚Äôs what it says is the date today: The first time this watch saw a leap day ‚Äì and it wasn‚Äôt prepared. Source:  Manu Varghese on X An EA Sports racing game is unplayable today.  EA SPORTS WRC (World Rally Championship) is a rally racing game, released in November 2023 for Windows, Xbox and Playstation. Those trying to play the game today cannot: because it crashes. The workaround EA Sports  suggests  is to set your system date to 1st of March ‚Äì or perhaps just take a break from playing today! EA Sports WRC is a recent game that also cannot handle today‚Äôs leap day. Image source:  Pushsquare This crash is notable, given the games industry invests more heavily than most other companies into quality assurance and thorough testing of the games. It is further proof on how easy it is to forget about an edge case that comes up just five months after the release of the game. Driving license issuance disrupted in Japan.  Japan Today  writes : ‚ÄúPolice departments in some Japanese prefectures were unable to issue driver's licenses Thursday, apparently due to a system glitch linked to the leap year. The extra day at the end of February appears to have triggered a system error related to time and date functions. Police departments in Niigata, Kanagawa, Okayama and Ehime prefectures faced problems from the morning, such as being unable to send personal data from the driver management system to the machines that issue licenses. The system was almost fully restored before noon.‚Äù I will give a hat tip to the  ‚Äúalmost fully restored before noon‚Äù  mention. You can imagine the engineer who was asked by a business stakeholder: ‚Äúis it fixed yet?‚Äù and who answers: ‚ÄúAlmost ‚Äì I‚Äôve now resolved 90% of the issues.‚Äù Which we all know means there‚Äôs still the second 90% left to resolve ‚Äì because resolving those last edge cases often take just as much time as fixing the first 90% did!  I‚Äôm being sarcastic, but this is often how it goes with bugs not encountered before. There are several more cases of systems failing today, as collected by software engineer Matt Johnson-Pint in his post,  List of 2024 Leap Day Bugs . Expect more bugs this 31 December.  After 29 February, we‚Äôre not done with leap day-related glitches. New Year‚Äôs Eve holds another nasty surprise for systems that assume a year is 365 days long. This year has 366 days. Some consequences can be very serious. In 1996, an aluminum smelting plant in New Zealand was damaged when the factory abruptly shut down in the first few seconds of 31 December! As the New Zealand Press Association  wrote in 1997 : ‚ÄúA computer glitch at the Tiwai Pt [place in South Island of New Zealand] aluminum smelter at midnight on New Year's Eve has left a repair bill of more than $1 million [New Zealand Dollars]. Production in all the smelting potlines ground to a halt at the stroke of midnight when the computers shut down simultaneously and without warning.¬† New Zealand Aluminium Smelters' general manager David Brewer said the failure was traced to a faulty computer software programme, which failed to account for 1996 being a leap year. The computer was not programmed to handle the 366th day of the year, he said. \"Each of the 660 process control computers hung up simultaneously at midnight,\" Mr Brewer said.‚Äù The same problem occurred two hours later at Comalco's Bell Bay smelter, in Tasmania [Australia]. New Zealand is two hours ahead of Tasmania. Both smelters use the same programme, which was written by Comalco computer staff. (...) Tiwai staff rallied through the night to operate the potlines manually and try to find the cause. The glitch was fixed and normal production restored by midafternoon. However, by then, the damage had been done. Without the computers to regulate temperatures inside the pot cells, five cells overheated and were damaged beyond repair. Mr Brewer said they would have to be replaced at a cost of more than $1 million.‚Äù In 2008, Zune (Microsoft‚Äôs 30GB music player)  stopped working  on 31 December because of a leap year bug, which sent devices into an infinite loop. At the time, Microsoft had invested the most into a testing culture, with one dedicated SDET (software development engineer in test) for every 2 SDEs (software engineers.)¬† Yet this bug slipped through the cracks!  We cover more on Microsoft‚Äôs QA approach and the later retirement of the SDET role in  How Big Tech does Quality Assurance . So, how do you account for Leap Days when building systems?  A couple of things will help: Use Date objects and operations on them: e.g. increment the date object by a year, instead of adding 365 days to it. Framework-level date classes tend to account for leap years ‚Äì it‚Äôs a big reason to use them! Do not assume February always has 28 days For that reason, don‚Äôt assume every year has 365 days This list is not exhaustive. What is exhaustive is a list on GitHub:  Falsehoods programmers believe about time . It‚Äôs a very long list, with 112 falsehoods named. Here are 10 of my favorites: ‚ÄúDon't reinvent a date time library yourself. If you think you understand everything about time, you're probably doing it wrong. Falsehoods   - There are always 24 hours in a day.   - February is always 28 days long.   - Months have either 28, 29, 30, or 31 days.   - The day before Saturday is always Friday.   - GMT and UTC are the same timezone. - Any 24-hour period will always begin and end in the same day (or week, or month).¬† - The difference between two timestamps is an accurate measure of the time that elapsed between them. - Daylight saving time always adjusts by an hour. - Time always goes forwards.‚Äù The last note is particularly notable on how time  can  move backwards ‚Äì at least in terms of what the time is. While the absolute seconds will always will always increment: when daylight savings end, clocks are winded back an hour: one minute after 1:59am on Saturday, it is not 2am but 1am! There are some things, however, that are safe to assume, because they are always true. For example, a month always has  at least  28 days. So, if you are to hardcode a monthly recurring charge to repeat on a specific day of the month: doing this on or before the 28th  should  be safe enough. I now invite you to  read the full list , then inspect code you‚Äôve previously written containing assumptions about dates and time. Can you replace it with a date library that accounts for (hopefully)  all  of the above? This was one out of the three topics covered in this week‚Äôs The Pulse. The full edition additionally covers: Klarna‚Äôs AI chatbot: how revolutionary is it, really?  Klarna launched its AI chatbot, built in collaboration with OpenAI, which the company wants to use to eliminate 2/3rds of customer support positions. But is it as revolutionary, and as likely to replace jobs, as Klarna claims? My take is that it‚Äôs a well-written bot, but I‚Äôm dubious that it‚Äôs as disruptive as that. Affirm paid $10M for Fast‚Äôs engineering team.  As the one-click startup ran out of money, its then head of engineering brokered a deal with buy-now-pay-later scaleup Affirm, which paid $10M in cash in return to give out offers to 80-90 Fast software engineers. Read the full The Pulse here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-10x-engineer-evolution/", "title": "The ‚Äú10x engineer:\" 50 years ago and now", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of five topics from today‚Äôs subscriber-only article  What Changed in 50 Years of Computing . If you‚Äôre been forwarded this email, you can  subscribe here . ‚ÄòThe Mythical Man Month‚Äô by Frederick P. Brooks, Jr. is a bona fide classic in the software industry. First published in 1975, and with an updated edition in 1995, the text is almost 50 years old. Lots of time has passed, yet the book is still relevant. The title of the book takes aim at the ‚Äúmyth‚Äù that software development can be measured in ‚Äúman months,‚Äù which Brooks disproves in the pages that follow: ‚ÄúCost [of the software project] does indeed vary as the product of the number of men and the number of months. Progress does not.  Hence the man-month as a unit for measuring the size of a job is a dangerous and deceptive myth. ‚Äù I‚Äôve been making my way through this book from software‚Äôs earliest days and taking notes of what‚Äôs remained the same in the 50 years since Mythical Man Month came out, which predictions the book got right or wrong, and what‚Äôs different about engineering today. Chapter 3 is ‚ÄúThe Surgical Team,‚Äù and contains what might be one of the very first mentions of the ‚Äú10x engineer‚Äù concept. This is how Brooks put it: ‚ÄúProgramming managers have long recognized wide productivity variations between good programmers and poor ones. (...) In one of their studies, Sacknman, Erikson, and Grant were measuring performances of a group of experienced programmers. Within just this group the ratios between best and worst performances average about 10:1 productivity measurements, and an amazing 5:1 on program and speed space measurements! In short, the $20,000/year programmer [in 2024 terms: $120K] may well be 10 times as productive as the $10,000/year one [in 2024 numbers: $60K].‚Äù Brooks agrees with this observation, and suggests a radical solution: have as few senior programmers as possible, and build a team around each one ‚Äì a bit like how a hospital surgeon leads a whole team. Brooks suggests the set up below, borrowed from Harlan Mills, could work well: The chief programmer.  Brooks calls this person ‚Äúthe surgeon.‚Äù They write the specification, code, tests it, and write the documentation. Has 10+ years‚Äô experience, and a broad range of expertise across developing, math, business, and whatever else is needed. The copilot.  ‚ÄúThe alter ego of the surgeon, able to do any part of the job, but less experienced.‚Äù This is a bit like a junior pair-programming partner. The language lawyer.  ‚ÄúMost computer installations have one or two people who delight in mastery of the intricacies of a programming language. These experts turn out to be very useful, and very widely consulted.‚Äù This role implies the chief programmer will usually not have time to go in-depth on a programming language, and will rely on an expert in it. A most interesting addition! The toolsmith.  Responsible for building and maintaining developer tools so the programmer and copilot can do their jobs better; such as improving editors, building better debugging functionality, creating utility tools and macros, etc. The tester.  They come up with test cases and data. Also responsible for scaffolding of tests.¬† The program clerk.  ‚ÄúResponsible for maintaining the technical records of the team in a programming-product library, responsible for both machine-readable and human readable files.‚Äù The administrator.  Responsible for payroll, renting offices, buying computers, etc. The editor.  Edits documentation the chief programmer writes, and makes it production-ready. Two secretaries.  ‚ÄúThe administrator and the editor will each need a secretary; the administrator‚Äôs secretary will handle project correspondence and non-product files.‚Äù Here‚Äôs what this ‚Äúsurgical team‚Äù built around a very productive programmer looks like: The ‚Äúsurgical team,‚Äù built around a programmer, who could be 5-10x more productive. Brooks proposed 9 others support them My sense is this team setup was aspirational. The roles certainly made sense at the time, but why would any business leader sign off to hire 9 other people to support  one  developer? In 1975, I assume the answer was very few. In 2024, there is no need for most of Brooks‚Äô proposed roles, and the ‚Äúsurgical team‚Äù has transformed thanks to advancements in tooling and how we work: ‚ÄúSurgical team‚Äù in 2024. It‚Äôs around 2 people and the other roles are replaced by modern tooling and approaches like version control, testing in development, modern IDEs, etc It‚Äôs fascinating how much tooling has improved in 50 years.  Tools and approaches at our disposal, which didn‚Äôt exist in 1975, or were not widespread in 1995, include: Git  ‚Äì the now-dominant version control system used by much of the industry, with exceptions for projects with very large assets, like video games Code reviews : these became common in parallel with version control. Code reviews reduce the need to pair while working on a task, allowing engineers to keep up with changes and learn from each other. CI/CD : running automated tests on all changes, and deploying code to production automatically. Rollout and rollback mechanisms.  Brooks discusses software in the context of producing operating systems, pre-internet. Building operating systems and embedded software remains challenging, but software updates over the internet are common and bug fixes can be delivered later. A good example is automobiles; most modern vehicles regularly refresh firmware and operating systems ‚Äúover the air!‚Äù Picking up languages and frameworks is easier.  There are countless online resources, sandboxes, and advanced IDE functionality like autocomplete and inline signaling for compile-time errors, that make getting started with a new language much easier, today. To come right up to date, we‚Äôre currently discovering the  productivity impact of AI coding tools . Progress has changed what used to be a 10-person team supporting a lead developer, into a set of tools ‚Äî as well as a couple of centralized platform teams, at larger companies. The concept of ‚Äúhierarchical programming‚Äù feels dated.  One thing that strikes me about Brooks‚Äôs model is that it‚Äôs hierarchical. The ‚Äúchief programmer‚Äù acts as an architect and does all planning, most direction setting, and some coding, while everyone else works well-defined, supporting roles. The copilot is described as: ‚Äúknows all the code intimately. [They] research alternative design strategies. [They] obviously serve as an insurance against disaster to the surgeon. [They] may even write code, but are not responsible for any part of the code.‚Äù This setup made sense when access to computers was more limited because machine time was expensive, but, today, it would be wasteful to not have even an entry-level engineer writing production code. What didn‚Äôt exist back then was source code control and code reviews to stop poorly written code making it to production. It‚Äôs a good reminder that tooling changes a team‚Äôs social dynamics. Thanks to better tooling, we are able to reject overly hierarchical team structures these days. Brooks‚Äô ‚Äútoolsmith‚Äù concept is still valid, but different.  I am intrigued by the role for a dedicated developer to build better debugging tools and utilities, and also by an addition to it: ‚ÄúEach team will need their own toolsmith, regardless of the excellence and reliability of any centrally provided service. Their job is to see to the tools needed or wanted by the surgeon, without regard to any other team‚Äôs needs.‚Äù Brooks was convinced that even with a central tooling team ‚Äì which we‚Äôd call a platform team, today ‚Äì there was still plenty of value in a team-specific tools specialist. But this need has vanished almost entirely because tools, developer environments, build tools, and more, can be  configured  in detailed ways.¬† All teams at a company use the same CI/CD tools, but they might change the configurations slightly. It‚Äôs true that within an engineering team, there‚Äôs usually one or two engineers who enjoy tweaking build systems and shared environments more than others do. However, with central platform/infrastructure teams, there‚Äôs no need for an ‚Äúembedded‚Äù platform engineer in teams. This has to do with how much developer tools have evolved in the 50 years since the book came out. The ‚Äú10x engineer‚Äù has always been a source of debate and contention.  We‚Äôve all seen developers who seem to be a lot more productive than others. CTOs and CEOs catch on to this as well, and some label standout folks as ‚Äú10x developers.‚Äù However, there‚Äôs a lot of nuance: A developer who builds things rapidly might do so by writing unmaintainable code that several developers will struggle to modify, later The ‚Äú10x developer‚Äù might be someone who hoards information, and is effective because they refuse to let others understand obscure systems they build A ‚Äú10x developer‚Äù could be far more productive because of their long tenure at a workplace with high turnover Another ‚Äú10x developer‚Äù could be someone with good business sense, working on the most profitable projects, who avoids other work Another ‚Äú10x developer‚Äù could also be very good at taking credit for work done by a larger team, which they finished You see where this leads. ‚Äú10x developer‚Äù behavior can actually be undetected toxic behavior under a different label. Meanwhile, others could have the advantage of a specific context that cannot be replicated. It‚Äôs certainly a complex topic, and one we haven‚Äôt stopped thinking and arguing about for more than 50 years, across the industry. This was one out of the five topics covered in the article  What Changed in 50 Years of Computing . The full article additionally covers: Joys and woes of programming, then and now Why do we ship faster now than in 1975? Is ‚ÄúBrooks‚Äôs Law‚Äù still valid? Do we spend more time coding than 50 years ago? Read the full issue here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-ai-developer/", "title": "Is the ‚ÄúAI developer‚Äùa threat to jobs ‚Äì or a marketing stunt?", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of three topics from last week‚Äôs subscriber-only  The Pulse issue . Today, full subscribers got access to a comprehensive  Senior-and-above tech compensation research . To get full issues twice a week,  subscribe here . There‚Äôs been a number of news stories about ‚ÄúAI developers,‚Äù recently. A first, smaller wave of these stories included Magic.dev raising $100M in funding from Nat Friedman (CEO of GitHub from 2018-2021,) and Daniel Gross (cofounder of search engine Cue which Apple acquired in 2013,) to build a ‚Äúsuperhuman software engineer.‚Äù It seems they‚Äôre aiming for something which performs  better  than human software engineers, today: Image source:  Daniel Gross on X It‚Äôs a very bold claim whose success would mean a direct replacement of developers! Clearly, this would generate a handsome return for investors and founders. Gross implies the company is eyeing more than $10B in revenue; although it‚Äôs just a claim, and we saw no product or demo. This week has brought a bigger wave of coverage, with startup Cognition Labs producing a video demo about its product ‚ÄúDevin,‚Äù which it calls ‚Äúthe first AI software engineer‚Äù ‚Äì just as they announced raising a $21M Series A funding. The company says: ‚ÄúDevin is the new state-of-the-art on the SWE-Bench coding benchmark, has successfully passed practical engineering interviews from leading AI companies, and has even completed real jobs on Upwork. Devin is an autonomous agent that solves engineering tasks through the use of its own shell, code editor, and web browser. When evaluated on the SWE-Bench benchmark, which asks an AI to resolve GitHub issues found in real-world open-source projects, Devin correctly resolves 13.86% of the issues unassisted, far exceeding the previous state-of-the-art model performance of 1.96% unassisted and 4.80% assisted.‚Äù To back up these claims, the company  shared videos  of the tool in action, in which an agent runs into an error, adds print statements to debug the error, detects the issue, fixes it, and commits it. Devin has dominated tech news for the past few days, with major media outlets running sensational headlines, including the usually reserved Bloomberg‚Äôs,  Gold-Medalist Coders Build an AI That Can Do Their Job for Them . On top of the promise that Devin can do the job of software engineers, the Cognition founding team boasts of having one 10 gold medals in international coding competitions ‚Äì meaning the founders are excellent competitive programmers. I suspect the media campaign is overreaching, though.  Press reports say Devin is ready to do the job of developers, but even Cognition AI admits that the tool only solved about 1 in 7 GitHub issues unassisted in tests. That‚Äôs impressive, but there‚Äôs a very long way to go! You‚Äôd expect junior engineers to tackle at least as many (if not more,) and for senior engineers to get almost 7, unassisted. Also, when I visited Cognition AI‚Äôs website, I naively expected the AI developer to have generated parts of the website, proving the thing works in production. But there is none of this. The world‚Äôs first ‚ÄúAI developer‚Äù did not touch its creator‚Äôs website. Source:  Cognition So far, all we have is video demos, and accounts of those with access to this tool. From the videos, it seems it‚Äôs more of an advanced agent that can switch between certain tools. Still, at this point, Devin doesn‚Äôt feel more than a heavily work-in-progress prototype. Devin is spreading a lot of fear about job security.  Even though Devin is not readily available to use, reactions to the possibility of a colleague that‚Äôs an ‚ÄúAI developer‚Äù makes the potential impact of AI tools very clear. Cognition AI is positioning Devin as a possible replacement for an engineer, and more, and so is Magic.dev, which claims its aiming for a ‚Äúsuperhuman software engineer. Devin‚Äôs videos are potentially a source for concern, and Magic.dev is backed by the former CEO of GitHub, so there‚Äôs grounds for concern that autonomous agents are coming which will do what a software engineer does today, and more, right? My take is a little different. What if it‚Äôs a well-choreographed show performed out of necessity? What if AI dev tool startups have been backed into a corner by Microsoft, which has eaten their lunch?  The interesting thing about Devin is that in its current form it feels more like a  coding assistant  that can get some things done. It makes mistakes, needs input, and gets stuck on 6/7 bugs on GitHub. It‚Äôs a helpful tool, always available, but not a replacement for a developer. It‚Äôs more a  copilot . But we already have a co-piloting AI tool; it‚Äôs called GitHub Copilot! Microsoft launched it 2.5 years ago, and it became the leading AI coding assistant almost overnight. Today, more than 1.3 million developers pay for it (!!) across 50,000 companies. At $20/month, it‚Äôs a price point that is very hard to compete with, especially given how expensive GPU infrastructure is, which needs training and fine-tuning for operating large language models. Usually, we see startups innovate with new tooling, and Big Tech then catches up and builds their own tools, or acquires some competitors and integrates them. However, Microsoft was one of the first to launch an AI coding assistant, years ahead of most other startups. When we looked at  GitHub Copilot alternatives , all were launched at least a year after GitHub Copilot‚Äôs 2021 launch except Tabnine, launched in 2019. AI dev tool startups  need  outlandish claims to grab attention.  The ‚ÄúAI coding buddy‚Äù space feels already saturated. For organizations hosting source code on GitHub, Copilot is a no-brainer. For companies using Sourcegraph for code search,  Cody  is the clear choice. Those using Replit for development, the  Replit AI  tool is the one to go with. The only major source control platforms that don't have AI assistants yet are GitLab and Bitbucket, and this is surely just a matter of time. This means, one of the few ways to launch an AI dev tools startup is to claim you will  fully  replace software engineers. Anything less, and there‚Äôs no reason why developers should swap their existing coding assistant, and open up their codebase for a brand new tool to crawl and contribute to. The Cognition AI team smashed it on media attention; it feels like their launch garnered almost as much developer attention as ChatGPT‚Äôs launch in November 2022. The company broke through to mainstream media ‚Äì no small feat! Some articles about Cognition AI‚Äôs product launch. It‚Äôs rare for startups to get as much attention ‚Äì which was likely the point. Source:  Google News The company surely has its waitlist full of companies with high expectations, eager to try out this agent. Cognition AI will now need to deliver on a promise that has never been fulfilled but has been set as a goal, many times through tech history. The good news is the claim ‚Äúyou will not need software engineers‚Äù has been on repeat since the 1960s.  Ask any CEO what their company spends most money on, and their answer will likely include the engineering team. Software engineers are expensive, which means our profession pays well! Businesses pay what they have to because they need to. If they  could  pay less, they would. It‚Äôs nothing new that software engineers are expensive and hard to recruit; this has been the case since the dawn of computing. In 1959, the programming language COBOL was designed by software engineer Grace Hopper. The stated goal of this language was to allow business people with no programming background to use it. From  Wikipedia : ‚ÄúIn the late 1950s, computer users and manufacturers were becoming concerned about the rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new programming languages were proliferating, the same survey suggested that if a common business-oriented language were used, conversion would be far cheaper and faster.‚Äù COBOL  should  have been the answer to a rising cost of programming: it allowed anyone, with no programming experience, to write programs. The language was indeed friendly for business users, and was the most popular programming language in the world for a short period in 1970. Here‚Äôs what‚Äôs ‚Äúhello world‚Äù looks like in COBOL: ¬†IDENTIFICATION DIVISION.¬† ¬†¬†¬†¬†¬†¬†¬†PROGRAM-ID. HELLO. ¬†¬†¬†¬†¬†¬†¬†PROCEDURE DIVISION. ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†DISPLAY \"Hello, world\". ¬†¬†¬†¬†¬†¬†¬†END PROGRAM HELLO. In the end, COBOL didn‚Äôt remove the need for developers: instead, it created demand for COBOL developers. In an amusing twist, a few years ago, demand for COBOL developers  reportedly soared  as there are still critical banking and insurance systems using this now-ancient language. And COBOL was just one of many attempts. Efficient frameworks are continuously created so that fewer developers can build the same application; no-code tools promise to build software without the need of developers. And while all of these initiatives partially succeed: we keep observing a need for software developers. AI-assisted tools do what could be a much bigger leap, compared to a new programming language like COBOL. However, as we understand more about LLMs, we understand more of their limitations, and their best use cases. LLMs have a core problem with hallucination, and coding is one of the few use cases of adding a second validation loop to test the modified code and eliminate this hallucination. We still know little about how LLMs perform over time on unfamiliar technologies, and they remain very smart ‚Äúprobability machines,‚Äù operating based on weight matrices.  We covered how ChatGPT works, under the hood. I have no illusions that developer software in 5 years won‚Äôt look different to today because we‚Äôll have better tools to use. But a future of ‚ÄúAI developers‚Äù doing most of the work? This is the necessary messaging that today‚Äôs AI tooling startups need to repeat. If the future is AI coding buddies, it will most likely be improved versions of GitHub Copilot, Sourcegraph Cody, tools from Jetbrains, GitLab, and others in the developer tooling space. This was one out of the three topics covered in  last week's The Pulse.  Also, see today's deepdive on   Senior+ and executive compensation in tech . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/tech-jobs-board/", "title": "Shutting Down My Job Board for Software Engineering Positions After 2.5 Years", "content": "\n             I started  The Pragmatic Engineer Job Board  in October 2021. 2.5 years later, I am shutting it down permanently, despite a reasonable success in traction. The shutdown was triggered by my vendor ‚Äì  Pallet  ‚Äì discontinuing their job board and talent collective approach. However, I  might have eventually come to the same decision myself, even without Pallet making this call. In this post, I outline what led here; the results of the job board (and talent collective), and what I learned about the tech jobs market. Context My initial motivation with the job board was to add a kind of \"helpful monetization\" to both my blog, and  The Pragmatic Engineer Newsletter  (a few months after I started this newsletter). In the blog ‚Äì and at the end of all free newsletter issues ‚Äì jobs posted by customers of the job board were shown. Like this: These featured jobs were posted by companies I pre-vetted I accepted posts that scored at least 9/12 on  The Pragmatic Engineer Test  ‚Äì which is a measurement I put together, aiming to put a number against how \"modern\" a company's engineering culture is. Companies paid $500/month for a job posting or $750/month for two, featured job postings. On top of the ability to post jobs, they had access to The Pragmatic Engineer Talent Collective. This \"collective\" is something that my job board vendor, Pallet, innovated, and it was an instant hit both for companies hiring and for candidates looking for jobs. The Talent Collective Pallet started out as a job board. However, early 2022, the startup innovated with the concept of a \"talent collective.\" The idea was this: \"Creators\" have large audiences of professionals in a field. (E.g. a YouTuber doing design videos has designers watching, or a software engineer like me writing on software engineering has developers reading) These \"creators\" would vet people looking for jobs And they would also vet companies looking to hire. Companies can then message these vetted candidates! ... creating a place that is kind of like LinkedIn: except it has higher signal-to-noise. Companies get more frequent responses, and candidates get higher-quality inbound requests! The core insight Pallet had was how people trust \"creators\" ‚Äì and how these \"creators\" already have engaged audiences. This is what it looked like, from the outside: And this is what it looked like, for companies signed up for the collective, from the inside: The interface for companies hiring, from inside Pallet's platform I was personally reviewing every candidate application: and for the ones that I approved, I added a note on why this profile is interesting or standout ‚Äì often adding details that I assumed some recruiters could miss (such as open source contributions, mentoring outside of work, or interesting and relevant extracurricular activities that I found encouraging to see.) I spent about 2-3 hours per week vetting inbound candidates. Over time, a friend started to help out with pre-vetting: they spent about 3-4 hours per week vetting, and I spent another ~1 hour per week going through candidates and tweaking comments. Tech job boards are a dying breed A few months after launching my job board, Stack Overflow Jobs ‚Äì  the most well-known software engineering jobs board ‚Äì announced shutting down, with the effective date of 30 March 2022. As I analyzed this event  in The Pragmatic Engineer: Every hiring manager I talked with told me how Stack Overflow Jobs has been the place where job ads got good candidates. As I  shared in November 2021 , Stack Overflow is retiring this product, and the last day of operation will be 30 March 2022. I asked Stack Overflow why the product is being shut down and had a long conversation with someone working on the product. The explanation was that  this product doesn't make sense and Stack Overflow doesn't see a future in job boards . The nature of job boards is very transactional, and while job boards have been around forever, it's not a product that a VC-funded company can scale the way they want. Closing this job board begs the question: where can you advertise positions, so that people see it and apply? The reality is that there's no replacement for this job board. Hiring managers are having decent success with the likes of LinkedIn, AngelList and other, smaller job boards. There's even a site called Stack Overflow Job Alternatives which is a collection of dozens of smaller job boards. At the time, I saw good traction with my job board just starting out, so I was surprised that Stack Overflow sees no real future in job boards? Two years later, I now \"get\" why Stack Overflow shut down its jobs products.  It was the same reason Pallet pivoted into Talent Collectives. Job boards are an \"ok\" small business to run on the side... but it's a very transactional product: CompanyX has trouble getting enough qualified candidates: they tried referrals, and reaching out to possibly interested candidates on sites like LinkedIn.  This usually means it's for a senior+ engineer position. They post a job ad on a job board. They get a large influx of inbound applications: most of them low quality, and create a  lot  more work for the company! With some luck, the company will find a \"hidden gem\" candidate across the many unqualified applicants. Success! Success means they stop advertising. They will come back with an even more challenging position for next time ‚Äì if they even do! My job board had an (initial) advantage of lots of qualified candidates applying.  My job board was not a standalone board: but it was interesting tech jobs listed at the bottom of my blog and newsletter. As such, companies initially received lots of qualified candidates. The feedback I received was how my job board was far better in quality responses than when the same companies posted on sites like LinkedIn. Still, the majority of companies working with me never posted a single job!  They went for the Talent Collective instead and contacted vetted, senior+ engineers there instead. About 80% of my customers were like this. I asked a couple of them: why this approach? The responses were typically: Job listings attract too many unqualified candidates that is more work to go through than it's worth They already have a job ad on their site: and they advertised it. They are unhappy with the results, and want to source directly They get to qualified candidates a lot faster using the talent collective From my perspective, I liked this setup. Companies stayed customers longer, as they were interested in having access to the \"latest drops\" in the talent collective. (A \"drop\" was a new batch of people admitted to this group, which I did every 2-3 weeks). It created a reason for them to be recurring customers, while receiving regular value. Did Pallet really crack the \"what comes after job boards,\" after all? It looked like it, but only for a short while. Pallet discontinues Talent Collectives (and Job Boards) A few weeks ago, Pallet sent me a nice message in which they explained that after much internal deliberation, they have made the tough call to shut down talent collectives and job boards. Instead Pallet will focus on their contingency recruiting business, which has been much more promising, business-wise. At first, I was surprised by this message. But as I reflected on it, I had to admit: I kind of saw this coming. Pallet is a VC-funded company that  raised  about $3.8M in seed funding. The company's mission is to \"Allow businesses to tap into and hire the talent that hangs out natively in these internet [creator] communities.\"  Pallet's business model was simple: charge a 10% \"cut\" from the money that creators charged for companies hiring (or using the talent collective). Pallet later added an option to charge more for companies where they sourced the tech company, and the tech company decided to \"tap into\" a creator's Pallet. This 10% cut-rate was a big reason I signed up for Pallet. It seemed like a reasonable price to charge for the infrastructure Pallet built.  It's also the same take rate that Substack, my newsletter platform charges.  So, for a company signing up for a $750/month package, I made $675, and Pallet made $75. I observed two troubling trends, though. #1: \"Creators\" stopped running their Pallet job boards and talent collectives.  In early 2022, YouTubers and newsletter writers started to run their Pallet boards by the dozens. As I look back now, about 90% of the people I remembered having a Pallet stopped maintaining it and using it about a year ago. The truth is: running a job board/talent collective involved recurring, nontrivial amount of work: Sourcing companies who hire. Although my newsletter is one of the most-read software engineering ones (with more than 3M monthly impressions), I still \"only\" got about 3-4 inbound companies in most months. I can only assume that a newsletter or YouTuber with 1M views per month might have thus gotten one, or less! Going through the talent collective, vetting companies candidates. This took about 3-6 hours per week, between myself and a friend. #2: Interest in job boards/talent collectives declined, even as traffic displaying these offerings increased.  Here are statistics on traffic that ended up on my job board (when people clicked through from my newsletters and blog): and how traffic across my newsletter and blog changed over the same time: The number of visitors for the Job Board / Talent Collective; the newsletter; and the blog. Traffic to the newsletter increased; the blog stayed flat; but for the job board, it decreased In what is surprising: despite my newsletter generating significantly more traffic (up from ~1M impressions per month to closer to 2.5M per month), and many of these impressions displaying job ads (at the bottom of free emails): the interest in the job board and talent collective decreased. There was a similar trend in companies paying to access the talent collective and job board. This peaked in 2022, and it has been a slow, but steady decline all the way until now. The \"very best\" applicants no longer applied to my talent collective In late 2022 and early 2023, I had trouble believing the quantity and quality of candidates applying to the job board. These included: Engineering directors at Big Tech with 20+ years of experience, with very impressive projects worked on. Principal engineers at Big Tech with 25+ years of experience (several of them with 10+ years tenure, some with industry-wide-known projects shipped) Multi-time founding engineers, with a track record of raising venture capital Extremely motivated engineers with 10+ years of experience, based in the Bay Area, NYC, London and other tech hubs The surprising part was that all of the above folks likely had an already strong network, and yet they were willing to give this talent collective a go. The reason? This was the period of \"The Great Tech Layoffs\" when: Meta fired about a quarter of their staff in 6 months Google, Amazon and Microsoft all laid experienced folks off It was hard to find any venture-funded, late-stage scaleup that had not done at least 10% layoffs This period passed ‚Äì luckily for the industry, I'll add! Thankfully, we've not seen such a layoff streak since. At the same time, there are much fewer of the above profiles applying to the collective. And, to be fair: why would they do so?  The only reason these people did it in the first place was because they were  just  let go in mass cuts. In more \"sane\" times like today, these caliber people are happily employed. The way to get talking with them is through referrals, or sending cold LinkedIn messages, and hope that it catches them at the right time. Looking ahead: AI spam makes job boards even more useless I was lucky enough to run my job board before automated AI applications went mainstream. However, this is starting to happen already. Here's one of the many such startups offering to submit 150 automated applications per day for $99/month: A startup called \"LazyApply\" For candidates frustrated of not hearing back from job applications: it's a no-brainer to invest in such tools. Many will. For companies listing jobs on job boards: they will se a significant increase in noisy, and AI-generated applications. Just as predictable is the response: with an increase in inbound applications, why not use AI to get through these much faster? There are also several such startups: One of the several startups responding to a spike in inbound applications... also using AI! This one is called \"Applicant AI\" As an aside, this dynamic is amusing: AI-automated job applications increase inbound job ad applications by ~10x AI-assisted tooling aims to partially automate screening of said applications, reducing time by 10x ... and we could see AI tools parsing the output of other AI tools! This future sounds surreal, but we will surely see some of it! Should it happen, we can expect a form of \"in-person screening\" to return. Ironic, no? All things point to the same: more demand for specialist job search firms and for direct sourcing So far, what I've observed in the last 1.5 years of operating my job board and talent collective: Companies are willing to pay more for the \"talent collective\" model much more than to post jobs Interest from candidates is down from the early 2023 peak ‚Äì despite traffic on my newsletter significantly up The \"very best\" candiates no longer apply to my collective: most likely, because they do not have to! Where does this leave a company that wants to hire standout senior+ software engineers, or engineering leaders? Two viable options: Go direct, and source these folks on LinkedIn.  A LinkedIn Recruiter seat costs $8,000+/month: but when you're serious about hiring, it gets superior results to what my $750/month talent collective did. Hire a specialist tech search firm that you pay based on successful hires.  This fee is usually 20-30% of the new hires's annual salary. While this might sound a lot: it can still be cheaper than just paying for 6 month's of LinkedIn's Recruiter package! This is  exactly what Pallet has pivoted to . I've worked pretty closely with the team at Pallet, and they are a nimble team, aiming to predict where the market is headed: and they move there, before anyone else does. This is how they pivoted to \"talent collectives,\" and they are now pivoted to being a standout search firm. Goodbye, job boards and talent collectives I now get it, why Pallet is retiring their platform and offering. If I was running Pallet, I would do the same. The tech industry is a fast-changing one: what works today might not work as well tomorrow. We are seeing this with job boards ‚Äì and I predict that AI tools will quickly reduce the usefulness of this recruiting tool.  I expect the changes coming to result in these dynamics play out for the tech sector: Somewhat  increase the value of LinkedIn recruiter seats  ‚Äì as long as LinkedIn can put robust filters in-place to verify that an account is a human, and not AI generated. No wonder LinkedIn is rolling out verification of profiles ‚Äì it will soon become table stakes for the platform to have these! Significantly  increase the demand for specialist search firms.  Companies that sidestep the whole \"AI-spam\" problem by directly talking with experienced folks, and ones who have figured out how to contact these people outside of platforms like LinkedIn. Companies  only  pay on a successful hire, and do not have to deal with the increasingly noisy nature of  Could  increase the demand for in-house recruiters.  With more applications coming in (although more noisy ones) and the \"best\" candidates being the ones you need to contact, we could see more demand for in-house recruiters. Given that recruiters were laid off in large numbers in 2022-2023, this could be a welcome reversal: and plenty of great recruiters are, most likely, on the market, available to hire. I've decided that my energy is better spent on other projects , And so I am not looking to relaunch my job board or the talent collective. Looking back, the amount of time I spent with the job board and talent collective already felt too much. If I'm honest with myself: it was a distraction away from researching and writing The Pragmatic Engineer. And while doing  deepdives into company engineering cultures , or  uncovering interesting tech industry trends  fill up my bucket: \"rejecting\" companies or candidates for the job board/talent collective; doing customer support for companies on the job board (such as doing full refunds whenever a company did not get a qualified candidate in a month): these were all draining it. If I'm honest with myself: I should have retired the job board/talent collective earlier than I've done so. And so, in a strange way, I'm grateful that Pallet made this decision for me and helped me re-evaluate where I  really  want to spend my time. For everyone who has applied to the talent collective: I will ensure that your data is removed from Pallet's system, as my talent collective closes down. If you would like to get in touch with Pallet ‚Äì to be considered for positions in their network ‚Äì  you can opt-in here . For all the companies who trusted me to help with your hiring: thank you!  Pallet  has a different model, going forward. Try it out if you find it interesting (I have no affiliation with the company, beyond having been a happy customer for their previous product). Otherwise,  I suggest experimenting with other job boards, or with solutions like LinkedIn, Gem, and others. Statistics In closing, here are statistics Pallet offered the job board and talent collective: 30 months and 13,000 job applications, 2,800 candidates in the collective, 3,600 intro requests from companies, and 1,300 of these accepted (turned into a conversation) I hope you found this reflection useful! Other, similar topics: I removed all affiliate links from my blog: numbers Three years of advertising on my blog: numbers As a note: the job board and talent collective will shut down on 27 April 2024. After this, no job ads will be shown in the free issues of  The Pragmatic Engineer Newsletter . I offered to extend job ads for currently advertising companies on the blog for another month: these will be active in this blog until 27 May 2024. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/italian-bank-outage/", "title": "Weekend maintenance kicks an Italian bank offline for days", "content": "\n             üëã Hi, this is  Gergely  with a bonus, free issue of the Pragmatic Engineer Newsletter. In every issue, I cover topics related to Big Tech and startups through the lens of engineering managers and senior engineers. In this article, we cover one out of four topics from today‚Äôs subscriber-only  The Pulse issue . To get full issues twice a week,  subscribe here . Sella is a mid-sized bank in Italy with around $14B in assets under management. However, Since Sunday (7 April), most of its services are inaccessible. The Sella banking app, the Sella Invest app, and internet banking are all down. Two trading apps ‚Äì Sella XTrading and Sella Trader, continue to operate normally. So, it seems all the banks‚Äô digital properties, except those for trading, have gone down hard. ‚ÄúSomething, something  Oracle.‚Äù  What caused this issue? From  Sella‚Äôs status page : ‚ÄúFollowing the installation of an update to the operating system and related firmware which led to an unstable situation. Our technicians have been collaborating with Oracle, a multinational and supplier of the Sella group's operating system for over twenty years, to restore full operations: several progresses have been made but at the time we are writing to you the situation has not yet returned to normal. This type of intervention takes time, which is why the activities carried out so far have not completely solved the problem.‚Äù It‚Äôs hard to get too much out of these vague reports, but here‚Äôs my attempt at decrypting what  might  have happened: An Oracle version was updated, and/or database schema changes were made.  There‚Äôs a much smaller possiblity that both happened at the same time. The changes messed up all major databases in some unexpected way. Sella needs Oracle‚Äôs help to figure things out. It‚Äôs suggested that the problem was probably some edge case in how they use Oracle, or how they define schemas, or a widely-used Oracle feature might have been changed, etc. You might expect something catastrophic like this to happen if Sella was trying to ‚Äújump ahead‚Äù by updating to several versions of Oracle from a very old version. After all, if it was ‚Äújust‚Äù a schema change: this change should be straightforward enough to revert. Still, I‚Äôm puzzled by how long the system has been down. If it was a risky update, just restore the backups! Every sensible tech company has a backup strategy to bring back its systems ‚Äì and performing a backup before a major update is common practice.  If you perform a risky update, this is a good reminder to start by doing a backup, or inserting a ‚Äúrollback point‚Äù that you can revert to, should things go wrong. If it was an update to Oracle, or to the operating system, then why not roll back the update? This is also why banks utilize a 2-day ‚Äúblackout period‚Äù which creates space to revert failed migrations or updates. Of course, if it was that simple, then Sella would surely have already done the change. It all suggests there was an unexpected edge case. The problem might be caused by an external ‚Äî but kind of internal ‚Äî platform owned by the banking group.  Fabrick  is a platform that Sella is operating on top of. This platform was created in 2018 by the Sella group, and is a platform that supports open banking and open payment services. The platform is used by clients outside of the Sella group as well. What confirms the suspicion that this is a Fabick-level issue is Fabrick‚Äôs  status page  that says Fabrick‚Äôs tech staff are involved: ‚ÄúWe would like to inform you that the event is currently still ongoing, continuous monitoring is in place, and any slowdowns are affecting only the services provided jointly with the Sella group. There are still ongoing slowdowns in bank transfers, payments with debit and prepaid cards and in accessing and using online services, including Internet Banking, Smart Business Sella and apps. The resolution of the event has top priority for all of us. (‚Ä¶) These events occurred after the installation of an update to the Sella group's IT systems, which led to an instability affecting Fabrick's recalled services.‚Äù We can already see a problem: a web of dependencies. So far, Sella mentioned a problem with Oracle. The platform they use ‚Äî Fabrick ‚Äî says theere‚Äôs an ‚Äúinstability‚Äù caused by the update to Sella's own systems. So who is at fault here? Would have this issue occurred if Sella owned its own platform, instead of creating a platform that they spin off, and now something falls through the cracks? This might well have happened: but at least it would have been easier to identify the issue. A software engineer I talked with with visiblity into the issue shared that the engineering team is grappling with tech debt built up, which is making it hard to identify and fix the issue. This engineer speculated that the common practice of subcontracting several layers within banks could also lead to the situation that it becomes an ‚Äúit‚Äôs not my problem‚Äù situation ‚Äî which is what we see, as the Fabrick platform seems to blame the ‚Äúupdate to Sella group‚Äôs IT systems‚Äù which caused Fabrick instability. But Fabrick is ‚Äî or  should  be ‚Äî Sella group as well! Are 2-day ‚Äúblackout‚Äù windows good for an engineering culture?  Banks regularly do maintenance during weekends; it‚Äôs when data migration projects are run, and things like schema updates, rolling out of new systems, and other riskier changes. In some ways, banks are lucky to have these ‚Äúblackout periods‚Äù when money movements are frozen, and engineering teams have up to 48 hours to make changes, test them, and roll them back if needed. In contrast, most other industries like ecommerce, utilities, airlines, etc, have no such luxury and must invest in zero-downtime migrations. This means these companies need to get very good at detecting and resolving incidents in real time. Banks rarely do! So, it‚Äôs fair to ask if it is a net good or a net bad that banks don‚Äôt need to plan for short downtime, or zero downtime maintenance or migration? I‚Äôd argue this approach unintentionally helps create a weaker engineering culture, and a worse work-life balance. Banks can simply have engineers work at weekends on risky migrations. They don‚Äôt need to do rollback plans, because they already have one: ‚Äúif it goes wrong on Saturday, we have another 24 hours to fix it on Sunday.‚Äù Good luck to the Sella and Fabrick teams in resolving this outage. Perhaps we‚Äôll learn what caused this serious incident. As related reading, here are past articles touching on the topic of migrations and tricky outages: Why it took Roblox 73 hours to get their systems back online  in 2021. An interesting deepdive, and details on why it took so long to find the root cause of the outage. Migrations done well : a guide for executing migrations well, at both small and large scales. Update on 11 April: clarified that Fabrick is, in fact, owned by Sella group. This was one out of the five topics covered in this week‚Äôs The Pulse.  The full edition  additionally covers: Industry pulse.  The first mass layoffs at Apple since 1997 (or not?); amateurish URL rewrite at X (formerly Twitter); never-ending job interviews for engineering executives, and more. The end of Hopin.  It took Hopin just two years to become the fastest-ever growing European startup by valuation. Four years later, the company is no more. The final valuable parts of Hopin are being sold, and all staff are expected to be let go. Exclusive details on the StreamYard sale. Adyen, the only major Fintech with zero mass layoffs?  All major Fintech startups have let go of some staff over the past two years, except Adyen. Meanwhile, the business has quietly become one of Stripe‚Äôs biggest competitors. A close look at this curious phenomenon. Read the full The Pulse here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/how-does-chatgpt-work/", "title": "How does ChatGPT work? As explained by the ChatGPT team.", "content": "\n             See a longer version of this article here:  Scaling ChatGPT: Five Real-World Engineering Challenges. Sometimes the best explanations of how a technology solution works come from the software engineers who built it. To explain how ChatGPT (and other large language models) operate, I turned to the ChatGPT engineering team. \"How does ChatGPT work, under the hood?\" I asked this from  Evan Morikawa  at OpenAI. Evan joined OpenAI in 2020 ‚Äì two years before ChatGPT launched ‚Äì and has led the Applied engineering team as ChatGPT launched and scaled. His team was the one that created ChatGPT, and Evan has been there from the very beginning. With this, it‚Äôs over to Evan. My questions are in italic. A refresher on OpenAI, and on Evan Evan: how did you join OpenAI, and end up heading the Applied engineering group ‚Äì which also builds ChatGPT? OpenAI is the creator of ChatGPT, which is just one of the business‚Äô products. Other shipped things include¬† DALL¬∑E 3 ¬†(image generation,)¬† GPT-4 ¬†(an advanced model,) and the¬† OpenAI API ¬†which developers and companies use to integrate AI into their processes. ChatGPT and the API each expose several classes of model: GPT-3, GPT-3.5, and GPT-4. The engineering, product, and design organization that makes and scales these products is called \"Applied,\" and was founded in 2020 when GPT-3 was released. It‚Äôs broadly chartered with safely bringing OpenAI's research to the world. OpenAI itself was founded in 2015 and at the company‚Äôs core today is still a research lab with the¬† goal ¬†of creating a safe and aligned artificial general intelligence (AGI.) The Applied group and ChatGPT within OpenAI I joined OpenAI in October 2020 when Applied was brand new. I do¬† not ¬†have a PhD in Machine Learning, and was excited by the idea of building APIs and engineering teams. I managed our entire Applied Engineering org from its earliest days through the launch and scaling of ChatGPT.¬† We cover more on Evan‚Äôs story in¬† Inside OpenAI: how does ChatGPT ship so quickly? ¬† How does ChatGPT work? For those of us who have not spent the past few years building ChatGPT from the ground up, how does it work? When you ask ChatGPT a question, several steps happen: Input. ¬†We take your text from the text input. Tokenization. ¬†We chunk it into tokens. A token roughly maps to a couple of unicode characters. You can think of it as a word.¬† Create embeddings.¬† We turn each token into a vector of numbers. These are called embeddings.¬† Multiply embeddings by model weights. ¬†We then multiply these embeddings by hundreds of billions of model weights. Sample a prediction.¬† At the end of this multiplication, the vector of numbers represents the probability of the next most likely token. That next most likely token are the next few characters that spit out of ChatGPT. Let‚Äôs visualize these steps. The first two are straightforward: Steps 1 and 2 of¬† what happens when you ask ChatGPT a question Note that tokenization doesn‚Äôt necessarily mean splitting text into words; tokens can be subsets of words as well.¬† Embeddings ¬†are at the heart of large language models (LLM), and we create them from tokens in the next step: Step 3 of¬† what happens when you ask ChatGPT a question. Embeddings represent tokens as vectors. The values in the above embedding are examples An embedding is a multi-dimensional representation of a token. We explicitly train¬† some of our models ¬†to explicitly allow the capture of semantic meanings and relationships between words or phrases. For example, the embedding for ‚Äúdog‚Äù and ‚Äúpuppy‚Äù are closer together in several dimensions than ‚Äúdog‚Äù and ‚Äúcomputer‚Äù are. These multi-dimensional embeddings help machines understand human language more efficiently. Model weights¬† are used to calculate a weighted embedding matrix, which is used to predict the next likely token. For this step, we need to use OpenAI‚Äôs weight matrix, which consists of hundreds of billions of weights, and multiply it by a matrix we construct from the embeddings. This is a compute-intensive multiplication. Step 4 of what happens when you ask ChatGPT a question. The weight matrix contains hundreds of billions of model weights Sampling a prediction¬† is done after we do billions of multiplications. The final vector represents the probability of the next most likely token. Sampling is when we choose the next most likely token and send it back to the user. Each word that spits out of ChatGPT is this same process repeated over and over again many times per second. Step 5. We end up with the probability of the next most likely token (roughly a word). We¬† sample ¬†the next most probable word, based on pre-trained data, the prompt, and the text generated so far. Image source:¬† What is ChatGPT doing and why does it work? ¬†by Stehen Wolfram Pretraining and inference How do we generate this complex set of model weights, whose values encode most of human knowledge? We do it through a process called¬† pretraining . The goal is to build a model that can predict the next token (which you can think of as a word), for all words on the internet.¬† During pretraining, the weights are gradually updated via¬† gradient descent , which is is a mathematical optimization method. An analogy of gradient descent is a hiker stuck up a mountain, who‚Äôs trying to get down. However, they don‚Äôt have a full view of the mountain due to heavy fog which limits their view to a small area around them. Gradient descent would mean to look at the steepness of the incline from the hiker‚Äôs current position, and proceed in the direction of the steepest descent. We can assume steepness is not obvious from simple observation, but luckily, this hiker has an instrument to measure steepness. However, it takes time to do a single measurement and they want to get down before sunset. So, this hiker needs to decide how frequently to stop and measure the steepness, so they still can get down before sunset. Once we have our model we can run¬† inference ¬†on it, which is when we prompt the model with text. For example, the prompt could be: ‚Äúwrite a guest post for the Pragmatic Engineer.‚Äù This prompt then asks the model to¬† predict the next most likely token (word) . It makes this prediction based on past input, and it happens repeatedly, token by token, word by word, until it spits out your post!¬† This is Gergely again. How ChatGPT works isn‚Äôt magic, and is worth understanding.¬† Like most people, my first reaction to trying out ChatGPT was that it felt¬† magical . I typed in questions and got answers that felt like they could have come from a human! ChatGPT works impressively well with human language, and has access to more information than any one human could handle. It‚Äôs also good at programming-related questions, and there was a point when I questioned if ChatGPT could be¬† more capable ¬†than humans, even in areas like programming, where humans have done better, until now? For a sense of ChatGPT‚Äôs limitations, you need to understand how it works. ChatGPT and other LLMs do not ‚Äúthink‚Äù and ‚Äúunderstand‚Äù like humans. ChatGPT does, however, generate words based on what the next most likely word should be, looking at the input, and everything generated so far. In an excellent¬† deepdive about how ChatGPT works , Stephen Wolfram ‚Äì creator of the expert search engine¬† WolframAlph a ‚Äì summarizes ChatGPT: ‚ÄúThe basic concept of ChatGPT is at some level rather simple. Start from a huge sample of human-created text from the web, books, etc. Then train a neural net to generate text that‚Äôs ‚Äúlike this‚Äù. And in particular, make it able to start from a ‚Äúprompt‚Äù and then continue with text that‚Äôs ‚Äúlike what it‚Äôs been trained with‚Äù. As we‚Äôve seen, the actual neural net in ChatGPT is made up of very simple elements‚Äîthough billions of them. And the basic operation of the neural net is also very simple, consisting essentially of passing input derived from the text it‚Äôs generated so far ‚Äúonce through its elements‚Äù (without any loops, etc.) for every new word (or part of a word) that it generates. But the remarkable‚Äîand unexpected‚Äîthing is that this process can produce text that‚Äôs successfully ‚Äúlike‚Äù what‚Äôs out there on the web, in books, etc. (...) The specific engineering of ChatGPT has made it quite compelling. But ultimately (at least until it can use outside tools) ChatGPT is ‚Äúmerely‚Äù pulling out some ‚Äúcoherent thread of text‚Äù from the ‚Äústatistics of conventional wisdom‚Äù that it‚Äôs accumulated. But it‚Äôs amazing how human-like the results are.‚Äù This was an expert from the article  Scaling ChatGPT: Five Real-World Engineering Challenges . Read that article for more details on the engineering challenges behind building (and scaling) ChatGPT, as explained by Evan. Other explanations on how ChatGPT and LLMs work: What Is ChatGPT Doing ‚Ä¶ and Why Does It Work?  by Stephen Wolfram. Probably the best easy-to-follow, and yet in-depth article. Via spreadsheets / Excel  (really! It's easy to follow) \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/ai-developer-marketing-stunt/", "title": "Is the ‚ÄúAI developer‚Äùa threat to jobs ‚Äì or a marketing stunt?", "content": "\n             This article was published on 14 March 2024  in The Pragmatic Engineer, for subscribers . I'm sharing this piece in public more than a month later, as it provides important context and analysis for the AI dev tools space.  Subscribe to The Pragmatic Engineer  to stay up-to-date on what is happening with software engineering, Big Tech, and startups. And to get timely analysis like this into your inbox, early. There‚Äôs been a number of news stories about ‚ÄúAI developers,‚Äù recently. A first, smaller wave of these stories included Magic.dev raising $100M in funding from Nat Friedman (CEO of GitHub from 2018-2021,) and Daniel Gross (cofounder of search engine Cue which Apple acquired in 2013,) to build a ‚Äúsuperhuman software engineer.‚Äù It seems they‚Äôre aiming for something which performs  better  than human software engineers, today: Image source:  Daniel Gross on X It‚Äôs a very bold claim whose success would mean a direct replacement of developers! Clearly, this would generate a handsome return for investors and founders. Gross implies the company is eyeing more than $10B in revenue; although it‚Äôs just a claim, and we saw no product or demo. This week has brought a bigger wave of coverage, with startup Cognition Labs producing a video demo about its product ‚ÄúDevin,‚Äù which it calls ‚Äúthe first AI software engineer‚Äù ‚Äì just as they announced raising a $21M Series A funding. The company says: ‚ÄúDevin is the new state-of-the-art on the SWE-Bench coding benchmark, has successfully passed practical engineering interviews from leading AI companies, and has even completed real jobs on Upwork. Devin is an autonomous agent that solves engineering tasks through the use of its own shell, code editor, and web browser. When evaluated on the SWE-Bench benchmark, which asks an AI to resolve GitHub issues found in real-world open-source projects, Devin correctly resolves 13.86% of the issues unassisted, far exceeding the previous state-of-the-art model performance of 1.96% unassisted and 4.80% assisted.‚Äù To back up these claims, the company  shared videos  of the tool in action, in which an agent runs into an error, adds print statements to debug the error, detects the issue, fixes it, and commits it. Devin has dominated tech news for the past few days, with major media outlets running sensational headlines, including the usually reserved Bloomberg‚Äôs,  Gold-Medalist Coders Build an AI That Can Do Their Job for Them . On top of the promise that Devin can do the job of software engineers, the Cognition founding team boasts of having one 10 gold medals in international coding competitions ‚Äì meaning the founders are excellent competitive programmers. I suspect the media campaign is overreaching, though.  Press reports say Devin is ready to do the job of developers, but even Cognition AI admits that the tool only solved about 1 in 7 GitHub issues unassisted in tests. That‚Äôs impressive, but there‚Äôs a very long way to go! You‚Äôd expect junior engineers to tackle at least as many (if not more,) and for senior engineers to get almost 7, unassisted. Also, when I visited Cognition AI‚Äôs website, I naively expected the AI developer to have generated parts of the website, proving the thing works in production. But there is none of this. The world‚Äôs first ‚ÄúAI developer‚Äù did not touch its creator‚Äôs website. Source:  Cognition So far, all we have is video demos, and accounts of those with access to this tool. From the videos, it seems it‚Äôs more of an advanced agent that can switch between certain tools. Still, at this point, Devin doesn‚Äôt feel more than a heavily work-in-progress prototype. Devin is spreading a lot of fear about job security.  Even though Devin is not readily available to use, reactions to the possibility of a colleague that‚Äôs an ‚ÄúAI developer‚Äù makes the potential impact of AI tools very clear. Cognition AI is positioning Devin as a possible replacement for an engineer, and more, and so is Magic.dev, which claims its aiming for a ‚Äúsuperhuman software engineer.\" Devin‚Äôs videos are potentially a source for concern, and Magic.dev is backed by the former CEO of GitHub, so there‚Äôs grounds for concern that autonomous agents are coming which will do what a software engineer does today, and more, right? My take is a little different. What if it‚Äôs a well-choreographed show performed out of necessity? What if AI dev tool startups have been backed into a corner by Microsoft, which has eaten their lunch?  The interesting thing about Devin is that in its current form it feels more like a  coding assistant  that can get some things done. It makes mistakes, needs input, and gets stuck on 6/7 bugs on GitHub. It‚Äôs a helpful tool, always available, but not a replacement for a developer. It‚Äôs more a  copilot . But we already have a co-piloting AI tool; it‚Äôs called GitHub Copilot! Microsoft launched it 2.5 years ago, and it became the leading AI coding assistant almost overnight. Today, more than 1.3 million developers pay for it (!!) across 50,000 companies. At $20/month, it‚Äôs a price point that is very hard to compete with, especially given how expensive GPU infrastructure is, which needs training and fine-tuning for operating large language models. Usually, we see startups innovate with new tooling, and Big Tech then catches up and builds their own tools, or acquires some competitors and integrates them. However, Microsoft was one of the first to launch an AI coding assistant, years ahead of most other startups. When we looked at  GitHub Copilot alternatives , all were launched at least a year after GitHub Copilot‚Äôs 2021 launch except Tabnine, launched in 2019. AI dev tool startups  need  outlandish claims to grab attention.  The ‚ÄúAI coding buddy‚Äù space feels already saturated. For organizations hosting source code on GitHub, Copilot is a no-brainer. For companies using Sourcegraph for code search,  Cody  is the clear choice. Those using Replit for development, the  Replit AI  tool is the one to go with. The only major source control platforms that don't have AI assistants yet are GitLab and Bitbucket, and this is surely just a matter of time. This means, one of the few ways to launch an AI dev tools startup is to claim you will  fully  replace software engineers. Anything less, and there‚Äôs no reason why developers should swap their existing coding assistant, and open up their codebase for a brand new tool to crawl and contribute to. The Cognition AI team smashed it on media attention; it feels like their launch garnered almost as much developer attention as ChatGPT‚Äôs launch in November 2022. The company broke through to mainstream media ‚Äì no small feat! Some articles about Cognition AI‚Äôs product launch. It‚Äôs rare for startups to get as much attention ‚Äì which was likely the point. Source:  Google News The company surely has its waitlist full of companies with high expectations, eager to try out this agent. Cognition AI will now need to deliver on a promise that has never been fulfilled but has been set as a goal, many times through tech history. The good news is the claim ‚Äúyou will not need software engineers‚Äù has been on repeat since the 1960s.  Ask any CEO what their company spends most money on, and their answer will likely include the engineering team. Software engineers are expensive, which means our profession pays well! Businesses pay what they have to because they need to. If they  could  pay less, they would. It‚Äôs nothing new that software engineers are expensive and hard to recruit; this has been the case since the dawn of computing. In 1959, the programming language COBOL was designed by software engineer Grace Hopper. The stated goal of this language was to allow business people with no programming background to use it. From  Wikipedia : ‚ÄúIn the late 1950s, computer users and manufacturers were becoming concerned about the rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new programming languages were proliferating, the same survey suggested that if a common business-oriented language were used, conversion would be far cheaper and faster.‚Äù COBOL  should  have been the answer to a rising cost of programming: it allowed anyone, with no programming experience, to write programs. The language was indeed friendly for business users, and was the most popular programming language in the world for a short period in 1970. Here‚Äôs what‚Äôs ‚Äúhello world‚Äù looks like in COBOL: ¬†IDENTIFICATION DIVISION.¬† ¬†¬†¬†¬†¬†¬†¬†PROGRAM-ID. HELLO. ¬†¬†¬†¬†¬†¬†¬†PROCEDURE DIVISION. ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†DISPLAY \"Hello, world\". ¬†¬†¬†¬†¬†¬†¬†END PROGRAM HELLO. In the end, COBOL didn‚Äôt remove the need for developers: instead, it created demand for COBOL developers. In an amusing twist, a few years ago, demand for COBOL developers  reportedly soared  as there are still critical banking and insurance systems using this now-ancient language. And COBOL was just one of many attempts. Efficient frameworks are continuously created so that fewer developers can build the same application; no-code tools promise to build software without the need of developers. And while all of these initiatives partially succeed: we keep observing a need for software developers. AI-assisted tools do what could be a much bigger leap, compared to a new programming language like COBOL. However, as we understand more about LLMs, we understand more of their limitations, and their best use cases. LLMs have a core problem with hallucination, and coding is one of the few use cases of adding a second validation loop to test the modified code and eliminate this hallucination. We still know little about how LLMs perform over time on unfamiliar technologies, and they remain very smart ‚Äúprobability machines,‚Äù operating based on weight matrices.  We covered how ChatGPT works, under the hood. I have no illusions that developer software in 5 years won‚Äôt look different to today because we‚Äôll have better tools to use. But a future of ‚ÄúAI developers‚Äù doing most of the work? This is the necessary messaging that today‚Äôs AI tooling startups need to repeat. If the future is AI coding buddies, it will most likely be improved versions of GitHub Copilot, Sourcegraph Cody, tools from Jetbrains, GitLab, and  others in the developer tooling space . This was an excerpt from  The Pulse #85 . The full article covers these additional topics: Industry pulse.¬† Apple unbans Epic‚Äôs developer account in just one day; The two, distinct types of layoffs happening across the industry; OpenAI‚Äôs CTO unwilling to answer what videos their Sora video product was trained on; Reddit prepares to go public; and more. A trend of lower equity grants, with forward-heavy vesting?¬† DoorDash is offering 40% lower equity grants ‚Äì but by changing equity vesting to be forward-heavy, the first year‚Äôs compensation remains unchanged. We will probably see more companies reaching for creative solutions to both reduce equity compensation but to also reward top performers more efficiently. And to not have to worry about the ‚Äúfour-year-cliff‚Äù anymore. Read the full article here. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/the-software-engineering-industry-in-2024/", "title": "The software engineering industry in 2024: what changed, why, and what is next", "content": "\n             The past 18 months have seen major change reshape the tech industry. What does it all mean for businesses and dev teams ‚Äì and what will pragmatic software engineering approaches look like in the future? I tackled these burning questions in my conference talk, ‚ÄúWhat‚Äôs Old is New Again,‚Äù which was the keynote of the Craft Conference in May 2024. This presentation is my best attempt to pinpoint the biggest contributors for the  changes across VC capital, Big Tech's hiring/firing behaviour, fewer tech IPOs and a much more touch job market than what we've seen in a while. Watch the talk on YouTube Alternatively: Read  the analysis of what happened, why, and what is next Watch  the Q&A for the talk Access  the presentation slides I hope you found this analysis insightful, and¬†the talk interesting to watch! \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/klarnas-ai-chatbot/", "title": "Klarna‚Äôs AI chatbot: how revolutionary is it, really?", "content": "\n             The below article was originally published  in The Pragmatic Engineer , on 29 February 2024. I am re-publishing it 6 months later as a free-to-read article. This is because the below case is a good example on hype versus reality with GenAI.  To get timely analysis like this in your inbox,  subscribe to The Pragmatic Engineer . Klarna launched its AI chatbot, built in collaboration with OpenAI, which the company wants to use to eliminate 2/3rds of customer support positions. But is it as revolutionary, and as likely to replace jobs, as Klarna claims? My take is that it‚Äôs a well-written bot, but I‚Äôm dubious that it‚Äôs as disruptive as that. Klarna is going all-in on AI: more specifically, on OpenAI. I have confirmed this through talking with software engineers there, who told me there‚Äôs a top-down mandate to utilize AI wherever possible in an effort to drive more efficiency, and product improvements. It‚Äôs not exactly a secret, nor is the fact that Klarna‚Äôs cofounder and CEO Sebastian Siemiatkowski is a huge OpenAI fan. Two weeks ago, Fortune¬† reported : ‚ÄúDrawing on a common investor, Siemiatkowski reached out to OpenAI CEO Sam Altman last year, telling him: ‚ÄòI want Klarna to be your favorite guinea pig.‚Äô The two companies have worked together ever since.‚Äù A few days ago on 27 February, Klarna shared progress, a month after the project went live. ‚ÄúKlarna today announced its AI assistant powered by OpenAI. Now live globally for 1 month, the numbers speak for themselves:The AI assistant has had 2.3 million conversations, two-thirds of Klarna‚Äôs customer service chatsIt is doing the equivalent work of 700 full-time agentsIt is on par with human agents in regard to customer satisfaction scoreIt is more accurate in errand resolution, leading to a 25% drop in repeat inquiriesCustomers now resolve errands in less than 2 mins compared to 11 mins previouslyIt‚Äôs available in 23 markets, 24/7 and communicates in more than 35 languagesIt‚Äôs estimated to drive a $40 million USD in profit improvement to Klarna in 2024‚Äù Drawing on this press release, Siemiatkowski then¬† posted on X , unintentionally painting a gloomy picture of the future of customer support jobs: ‚ÄúIn our case, customer service has been handled by on average 3000 full time agents employed by our customer service / outsourcing partners. Those partners employ 200, 000 people, so in the short term this will only mean that those agents will work for other customers of those partners. But in the longer term, as more companies adopt these technologies, we believe society needs to consider the impact. While it may be a positive impact for society as a whole, we need to consider the implications for the individuals affected. We decided to share these statistics to raise awareness and encourage a proactive approach to the topic of AI. For decision makers worldwide to recognise this is not just \"in the future\", this is happening right now.‚Äù But what does this chatbot do, and is it bad news for customer support jobs today, and in the future? I signed up to try it out. As a spoiler, it‚Äôs well-built, and will probably be a blueprint for how to put an L1 (first-level support) chatbot together. The Klarna chatbot experience The chatbot can be started either with a generic question, or about a specific purchase. I bought an item using Klarna, and started talking about it with the bot. The experience is snappy: in 20 seconds, you always get an answer: This is how Klarna‚Äôs chatbot works On one hand, the bot is a tool that seems to find relevant parts of documentation, and then shares these sections. This feels word-by-word, or sometimes summarized. Where it goes beyond being just a simple search tool is when it injects order-specific context: Chatting about an item includes context on the price of the item, the merchant and the date of purchase. It‚Äôs all weaved in nicely into the responses. It can also venture in other areas ‚Äì for example, it gets chatty when asking about the history of the company: Overall, it feels like the chatbot is carefully designed to not allow it to go into details that are not on a whitelist. Although it is possible to bypass these restrictions ‚Äì we‚Äôll see examples below ‚Äì it is not trivial to do so. Common questions for the chatbot Amusingly, when I asked the bot for the most-asked questions by customers, it gave a list: Payment-related queries. How to make a payment; confirm a payment or extend a payment due date Order issues: questions or concerns about orders ‚Äì not receiving goods or receiving faulty of broken items Personal detail updates Unauthorized purchases Questions about Karna‚Äôs policies And some rarer questions, as per this bot: Less common scenarios: a purchase not reflecting in the Klarna account due to a technical glitch; understanding unique payment agreements; splitting payments across multiple cards Asking for help about rare error messages Chatbot safety guards and limitations One of the biggest downsides of chatbots is that they hallucinate. Under the hood, Klarna‚Äôs bot uses ChatGPT‚Äôs APIs. We‚Äôve¬† previously covered how ChatGPT works ‚Äì it generates a list of possible next words (tokens) based on the input, and chooses the highest probability one. This means that it can (and does!) make things up, if left unchecked. This was how Air Canada‚Äôs chatbot made up a non-existent policy, which Air Canada¬† claimed it was not liable for , but a judge ruled otherwise. Klarna put up safety guards, and over the course of 15 minutes of probing, I could not get the chatbot to hallucinate; i.e: come up with something that‚Äôs incorrect. I assume there‚Äôs a verification step which compares the output to a whitelist of permitted topics, and that specific policy information must be recounted word for word. When an ‚Äúout of bounds‚Äù topic comes up, the chatbot hands over to a human agent: My first attempt to get the chatbot to talk about non-shopping related topics led to a swift handoff to a human agent Poking at the system prompt A system prompt is a way to provide context and instructions before passing on the user input. These prompts specify things like when to end the conversation, topics to avoid, and other high-level instructions. With clever-enough probing, this system prompt can be revealed. For example,¬† here‚Äôs ChatGPT‚Äôs recent system prompt , and an excerpt with instructions on image generation: ‚ÄúWhenever a description of an image is given, create a prompt that dall-e can use to generate the image and abide by the following policy: The prompt must be in English. Translate to English if needed. DO NOT ask for permission to generate the image, just do it! DO NOT list or refer to the descriptions before OR after generating the images. Do not create more than 1 image, even if the user requests more. Do not create images of politicians or other public figures. Recommend other ideas instead. Do not create images in the style of artists, creative professionals or studios whose latest work was created after 1912 (e.g. Picasso, Kahlo). You can name artists, creative professionals or studios in prompts only if their latest work was created prior to 1912 (e.g. Van Gogh, Goya).‚Äù What is the system prompt for Klarna‚Äôs bot? I couldn‚Äôt get the chatbot to share all of it, but I got some interesting details for when the bot stops responding and connects to a human agent: Examples of topics the chatbot was instructed to not engage with ‚Äì most likely confiugred via its system prompt It‚Äôs likely that Klarna put these guardrails in place within its system prompt. And it also explains why the bot handed me off to human agents when I went out of bounds on topics. Prompt injection Another risk with chatbots is prompt injection. Software engineer ‚Äì and Django creator ‚Äì Simon Willison covered this topic in detail in his post,¬† I don‚Äôt know how to solve prompt injection : ‚ÄúLanguage models like GPT-3 are the ultimate black boxes. It doesn‚Äôt matter how many automated tests I write, I can never be 100% certain that a user won‚Äôt come up with some grammatical construct I hadn‚Äôt predicted that will subvert my defenses.‚Äù Users have already managed to bypass protections the Klarna team has put in place to produce output that should not be possible ‚Äì but it was, thanks to clever grammatical prompting, proving that even this carefully built bot is not immune to it: A user of the Klarna chatbot managed to get the chatbot to generate code. This is an example of deliberate prompt injection. Source:¬† Colin fraser on X Speaking multiple languages One impressive capability of Klarna‚Äôs bot is that it holds the same conversation in around 30 languages. I‚Äôm a native Hungarian speaker, which is so rare that even Amazon does not support it. To my surprise, Klarna‚Äôs assistant switched over, and informed me of my order, and whether I had other questions using grammar on a par with a human speaker. The information was a direct translation of what it told me when I asked the same question in English. Still, this is an area in which I can see demand for capabilities that do not exist today, like more extensive support for niche languages, and tiny markets. Suddenly, Klarna‚Äôs chatbot is there to support dozens of locations. What does this chatbot really replace? The CEO of Klarna says the chatbot did the work of 700 customer service representatives. However, the bot transfers anything more complex than adding basic context to a human.¬† This chatbot seems a good example of a way to eliminate most ‚ÄúL1‚Äù support;¬† i.e: ¬† the initial point of contact for users seeking technical support, which handles basic queries and straightforward questions. Level 2 and Level 3 support are handled by trained staff. A user with a rare and complex issue would often go through L1 and L2 support to reach an agent who can help. To me, it seems that Klarna‚Äôs bot does really well on oft-repeated questions with the same answers. So, it now acts as a new ‚Äúfirst line of defense,‚Äù meaning Klarna would indeed need fewer, less trained, L1 support staff. This is the warning in the CEO‚Äôs message. It‚Äôs clear this is just the start for Klarna, and they‚Äôll experiment with adding more complex flows to the bot, trying to handle more complicated queries in an automated way. The challenge is to do this safely, given large language models (LLMs) are non-deterministic, and trusting it with sensitive data is a bad idea. Klarna is a Fintech company, so there are few things more embarrassing than this chatbot leaking sensitive financial details of customers, and outsiders accessing it! I expect Klarna to be very cautious here, and perhaps only human agents will have access to sensitive data. Is automating away L1 support revolutionary? Klarna‚Äôs AI chatbot integration is well-built and it‚Äôs safe to assume it is probably the most comprehensive integration at this scale,¬† right now . I‚Äôm making this assumption having tested it, and also based on the close relationship Klarna has with OpenAI. Perhaps the company is, indeed, OpenAI‚Äôs ‚Äúfavorite guinea pig,‚Äù at least for now! Klarna‚Äôs claim that it saves $40M per year with this chatbot is plausible because: The system does the work of 700 agents¬† at any given point in time Agents usually work in 8-hour shifts, meaning 3 agents need to work to offer 24/7 support This means that 2,100 L1 support jobs could be lost to this bot ‚Ä¶ which matches with how Klarna offloaded 2/3rds of their customer support load to this system: they worked with 3,000 customer support agents, mostly from external companies ‚Ä¶ and this means the company paid $19,000 per agent annually, on average Automating L1 support is not that revolutionary, and has been done previously on different systems.¬† For example, ¬† If you have called phone support and experienced the automated ‚Äúplease press 1 for this, 2 for that‚Äù script; well, that was an early example of automating away L1 support. I talked with a software engineer who worked at Citibank in around 2008, when the company decided to eliminate its L1 support system, and automate support via a phone system. Over two years, the team automated 95% of phone support requests and closed a call center of 7,000 people in Mexico. As part of this work, Citibank did something interesting and realized that this system annoyed customers, and risked churning high value customers. So they added a condition that was something like this: if (customer_is_high_value) { ¬† // Connect to human, do not put them into the automated call sequence } else ¬† // Low value or free customer, have them go through automation } A big difference between Klarna and Citibank is that the latter did not brag about it at the time. So, I don‚Äôt really buy that this is revolutionary in business terms, beyond AI‚Äôs own revolutionary potential.¬† If anything, it illustrates Klarna was overspending as if it was still  the old, now-departed, ZIRP era . The company could have easily automated away L1 support that answers basic questions for low-value customers ages ago, without an LLM. The company simply didn‚Äôt prioritize it, and was happy to spend $60M per year on customer support.  We previously covered more  on what the end of ZIRP means for the tech industry . Now that Klarna has an AI-based system in place, it has something which mature companies built before LLMs existed! At places like Uber, people are connected to a support person when their query cannot be solved by providing readily-available, basic information, and there is also automation built to handle common queries. For example, if your UberEats order is missing an item, you can report this and receive an automatic refund, all without human intervention ‚Äì no AI agent needed (although a machine learning model surely runs in the background, flagging possible fraudulent refunds, in which case routing to a human agent likely happens.) More companies will soon have access to LLM-based L1 support automation.¬† Klarna‚Äôs CEO says his company is saving tens of millions in customer support costs thanks to¬† an AI chatbot ¬†built in a few months, so this¬† will ¬†get the attention of other companies which have not yet thought about how to deal with L1 support.¬† Does AI bot-building solve the right problem? I created this image to provoke thoughts: It‚Äôs a lot more interesting ‚Äì and faster ‚Äì to create an AI chatbot, than to fix confusing UIs and products. On one hand, offering chat support is something many customers will appreciate because chat is often a more convenient process. On the other hand, if chat support is the preferred feedback channel, it could mean it‚Äôs not a priority to make the UI easy and self-explanatory, and the product logical and simple to use. So, AI bots might not always be the best option, even if your org has the opportunity to build them.¬† \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/speakers-for-eu-tech-events/", "title": "Speakers for Amsterdam / Netherlands Tech Events", "content": "\n             I (Gergely) sometimes get reachouts to do talks at events in Amsterdam (where I am based,) the Netherlands, or somewhere in Europe. Unfortunately, rarely do talks ‚Äì I do  one conference per year .  However, I asked around in the community about tech professionals who do paid talks that software engineers find interesting, engaging, and educational. Below are experienced speakers who have presented at conferences and have confirmed they are open to such opportunities (including traveling to locations in the Netherlands.) All of them have reference recordings at conferences linked. Based in the Netherlands Kwo Ding   (Amsterdam, at Booking.com.) Talks about various testing topics. See his talk  on linting  (SeleniumConf, London, 2020) and  on Mobile testing  (SauceCon, San Francisco, 2017) Sendil Kumar N  (Amsterdam, Uber). Talks about software engineering topics and managing teams. (Amsterdam, engineering manager at Uber). See his  talk at React Live 2023  (a case study of a successful migration)  and  at JSWORLD 2022  (designing high-performance React applications.) See  more past talks . Alessandro Mautone  (Amsterdam, formerly WeTransfer.) Talks about Android, automation (CI/CD workflows) and soft skills (e.g. how to review PRs, or how to handle incidents at scale.) See his  talk at Droidcon 2023  (how to handle incidents at scale) and  at Droidcon 2024  (what if ADB does not have to be that complicated?) Bert Jan Schrijver   (Utrecht). CTO and cofounder of OpenValue, speaker for 10+ years in front of audiences up to 1,000 professionals. Talks about developer-focused talks about topics like software architecture, developer productivity and DevOps, and also does keynotes. See his talk at  GOTO Amsterdam 2023  and see  his speaker profile  for more details on talks he does. Dennis van der Stelt  (Rotterdam): \"I love sharing stories with software engineers and architects. My talks are usually tech agnostic, so a fit for multiple occasions.\" Watch past talks from Dennis  at NDC 2023  (autonomous microservices) ,  NDC 2022  (dealing with eventual consistency.) Dennis also talks at conferences like Techorama, √òredev and others.\" See  current talks Dennis offers . Anita Kalmane  (Twente). Talks about neurodiversity on tech product teams. Listen to her talk  on The Agile Within podcast  (neurodiversity within Scrum teams) and on  the Scum Facilitators podcast . Agnes Molnar  (Eindhoven): talks about leadership development and information/knowledge management. See her  past presentations she gave  and  learn more about her . Nikola Yovchev  (Amsterdam): Talks about platform teams and operational excellence cultures. See his talk at  an Amsterdam meetup  (growth vs complexity) and at a panel  at GOTO meetups  (reducing time to market.) If you are a software professional based in the Netherlands and are open to paid speaking engagements, please send reference recordings at conferences and details on topics you talk about  on LinkedIn , and I can add you to this list. Based in neighboring countries and open to travelling to talk These speakers confirmed that traveling to Amsterdam or to a location in the Netherlands is something they are open to doing ‚Äì and they are close enough that it's a sensible trip in time and cost. Naturally, you would need to cover their (reasonable) travel cost, plus their speaking fee. Abby Bangser  (UK, founding principal engineer.) Talks about the platform engineering space. See her  talk at DevOpsDays London 2023  (on platform engineering), at  Navigate Europe 2023  (bringing product thinking to platform). Florian Goerisch  (Switzerland, formerly at Google for 9 years.) \"I do talks on how products are build in tech-led companies and how this approach is so different from how things are done here in Europe.\" See a past talk from Florian on  how European tech companies can operate better .  Ivett √ñrd√∂g   (Germany, founder at Lean Poker) Engineering culture topics, topics on short feedback loops and incremental delivery. Ivett is he creator of the devops training tool \"Lean Poker.\" See  current talks Ivett offers  and  a past one at Future Tech 2024 . Blanca Garcia Gil  (UK.) Talks on a variety of topics about staff+ engineers (career ladders, archetypes, developing leadership skills, promoting into the role) and women in tech. See her talk  at QCon 2022  (behaviours to become an effective staff-plus engineer), and  at LeadDev 2022  (solving the puzzle of staff+ time management.) She also  facilitates panels . Emad Ghorbaninia   (Denmark, mobile lead engineer.) Frequent speaker at mobile conferences, and holds workshops. See his talk  at try! Swift Tokyo 2024  (on mobile and AI), and  at SwiftConf 2023 Germany  (open sourced Apple Health frameworks.) He talked at AppDevCon, SwiftConf, App Builders, Swift Craft and many other mobile conferences. More  about Emad . Itoro Liney  (UK, technology manager at Just Eat Takeaway.com.) Career development for software engineers and managers, and AI ethics. See her talk  at Big Data LDN 2023  (on machine learning ethics.) More  about Itoro . Anemari Fiser  (Spain, formerly at ThoughtWorks.) Talks on a variety of topics about tech leads (developing leadership skills, promoting into the role), career development and women in tech. See her  talk at Tech Lead Conference Amsterdam 2024  (tech leadership is more about people than tech) and a presentation  about leveling up your tech career . Dave O'Connor   (Ireland, 17 years as an SRE leader at Google). \"Software Resiliency, Customer Management for SaaS (internal and external), SRE history and development, OKRs, Managing Distributed Teams, Performance Management, Coaching high-level engineers and managers, Interrupts, on-call, incident management.\" See his talk on SRECon EMEA 2022 (oncall: an equal opportunity waste of time) and  other past talks . Martin Thwaites  (UK, at Honeycomb): developer, engineer and professional speaker. Specialized in observability, open telemetry, and production-first engineering. See  past talks from Martin .  Gus Fune  (UK, CTO at Div Brands) \"I speak about Leadership, Team Building Productivity, Digital Transformation and eCommerce (MACH, Composable, Platforms, etc), and on a minor degree CX, DX and UX.\" See his  talk at LeadDev London 2022  (on development setup.) Gus also talked at Turing Fest (Edinburgh), MACH Three (NY), and HasuraCon (Remote), amongst others.  See his past talks . Maciej Jedrzejewski   (Switzerland.) Talks about domain-driven design, event storming, domain storytelling, software architecture, continuous deployments and tech leadership. See his talk at  DevoxxPoland 2024  (what every software architect should know about infra), and  at VIScon 2021  (a way to avoid handshakes.) Michele Brissoni  (Slovakia.) Talks about software craftmanship, agility, DevOps and behavioural engineering. See his talks at  IT Revolution 2024 , at  Italian Agile Moment 2023  and  in 2020 . Jennifer Riggins  (UK, tech culture journalist.) See her talk at  Kubernetes Community Days UK 2023  (how to cultivate belonging in open source communities) and a panel she hosted  on developer productivity . See other  talks by Jennifer . See more speakers in  responses to this LinkedIn post  asking for tech professionals interested in giving talks. \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "},
{"url": "https://blog.pragmaticengineer.com/paying-down-tech-debt-further-learnings/", "title": "Paying down tech debt: further learnings", "content": "\n             This is a follow-up to the article  Paying down tech debt , written by industry veteran  Lou Franco . Lou has been in the software business for over 30 years as an engineer, EM, and executive. He‚Äôs also worked at four startups and the companies that later acquired them; most recently Atlassian as a Principal Engineer on the Trello iOS app. Later this year, he‚Äôs publishing  a book on tech debt . For updates on this upcoming release,  subscribe here . In this issue, we cover: Use tech debt payments to get into the flow.  In a counter-intuitive observation: by making small, non-functional improvements, you gain more confidence in a new codebase, and can start to move faster. Big rewrites need heavyweight support.  Without the backing of management, a large-scale rewrite is likely to fail. With this, it‚Äôs over to Lou. Use tech debt payments to get into the flow and stay in it A good reason to add new comments to old code before you change it is to speed up a code review. Adding comments is also a good way to reduce cognitive load. When it takes me time to learn what code does, writing something down helps me remember what I figured out. Clarifying the code is even better. Reducing tech debt as I go also helps me get into ‚Äòthe flow.‚Äô  We all know what it feels like to stare at code and wonder what it does, scrolling up, scrolling down, and then command-tabbing over to Slack to procrastinate. By making small changes as I learn the code, I get more confidence, and soon I find myself going from adding tests and comments to making more substantive changes. The tech-debt payments weren‚Äôt for some future benefit. They are helping me right now. Once I have gotten into flow, staying in flow is so important that whenever I feel resistance to whatever change I‚Äôm making, I make a small code change to keep me from dropping out of it, applying the same techniques that I used to get into it. Reducing tech debt as you go is also a great way to learn a new codebase.  I learned this at my first job out of college, which was for a company that made DOS software to price foreign exchange options. When I started at the company, I didn‚Äôt know what a lot of the code was even supposed to do.¬† Every program has non-domain specific code. In the early 90‚Äôs, DOS programs like the ones my company made had its own Text UI screen rendering system. This rendering system was easy for me to understand, even on day one. Our rendering system was very memory inefficient, but that could be fixed. I spent my first couple of weeks rewriting each ‚Äúwindow‚Äù of the application to make it more memory efficient. By doing so, I got to see every screen of the system. This project helped onboard me to the software, its structure, its build, and our issue tracking and version control workflows. I incidentally paid down some debt, but also learned how our software stack worked, while doing so! I did this again when I started at Trello. My first project was supporting i18n (internationalization) in the app. The first step of that was getting each string in the code into a strings file that could be sent to translators. My goal was to fix the debt of hardcoded strings, but I learned a lot about the codebase and our process as I did it.¬† This has even worked unintentionally. When I was hired to work on a large-scale rewrite, I ended up being an expert on the legacy code as well because I had to read it every day to reimplement its features. Big rewrites need heavyweight support I avoid large scale rewrites, as I‚Äôve seen them fail or drag on much more often than they succeeded. My biggest mistake personally was trying to rewrite a C/C++ system as memory safe C# code, which seemed like a good idea, but didn‚Äôt have the backing needed. It was eventually shelved. Sometimes it‚Äôs impossible to do this work in a way that delivers value until it‚Äôs done, so lots of commitment is required. But I was also part of a two-year long rewrite that worked, and learned some things that I recommend to clients when they want to take one on. In 2004, I was hired by ISO-NE, a non-profit that manages the electric grid in New England. There are ISOs all around the country established by the local energy companies to provide services to themselves ‚Äì an important one is managing the electricity market, which trades 24x7 and determines the prices for generation. If it isn‚Äôt working, then there might be problems delivering electricity. At ISO-NE, the electricity price publishing system was a pile of Bash, Perl, PHP, and C. These scripts mixed database access, HTML generation, and logic in unexpected ways. Sometimes a script would generate another script. You‚Äôd fix a bug in a generated script, and it would get overwritten. It was a mess! I was hired to rewrite it as a clean Java-based system, and brought in for my experience with the legacy languages and J2EE. They doubled the team size from two to four to include a developer with a lot of Java Server Pages experience, and then later to eight members with contractors who only worked on the new system. They hired a manager who had done this kind of project before, and set a target date of nearly two years. The first lesson I learned about big rewrites was not to underestimate them. The size of the project was well-understood and planned.  Frankly, having two years for a rewrite with such a large team seemed wrong to me. In the end, we needed that time. We got these resources because the current situation was untenable: the code was fragile and mission critical, and our stakeholders ranked reliability as the #1 priority.¬† We ensured the legacy system was improved during the rewrite.  I was hired to work full-time on the new code, but we realized the best thing for me to do was spending some time maintaining legacy code. Contractors were recruited for their expertise in the new system, so couldn‚Äôt work on the legacy one. Because I was in both codebases, whenever I did something new with the legacy code I added it to the new code, or updated the spec. By the end of the project, all the non-contract engineers were working on both codebases in the same ratio as each other. The systems were built in parallel and both kept running during an overlap period, much like Gergely describes in  Migrations Done Well . We coupled the rewrite with a user-facing improvement project.  We coupled the rewrite ‚Äì which was invisible to users ‚Äì with a move to a customer relationship management system (CRM). We branded both projects as ‚ÄúWarp‚Äù (Web Application Redesign Project). Our content management was implemented with similar home-spun scripts maintained by the same developers. We moved to an enterprise CRM system and created a fresh design.¬† Throughout the project, we mostly talked about things users could see, like the new design, the easier way to update content, the content workflow, etc. After the system had been up for a while, we could talk about the reduction of incidents and other improved reliability metrics because these were heavily monitored at ISO-NE, and showed significant improvement. If the state of your system is untenable and a rewrite in small chunks over time isn‚Äôt possible, then ensure everyone in the company, all the way up to the executive management team, agrees and understands what needs to be done. Don‚Äôt underestimate what it will take.¬† This is the most important lesson, and it‚Äôs what I saw work at Atlassian fifteen years later in a multi-year rewrite that transformed the business from a mostly on-premises company to a cloud based one.¬† When doing a large-scale rewrite, the work will require a temporary increase in the number of developers, which can be done with contractors or temporary reassignment if your company has the resources. Recruit expertise in a new technology and front-line managers that have done it before.¬† It also helped us to couple the project with one that was more visible to stakeholders. This was fine because it was maintained by the same team and had similar issues. If you can find a way to do it, you‚Äôll have something to show when you‚Äôre done, and can follow up with quality metrics after measuring them. This is Gergely, again.   For more tactics on how to deal with tech debt, see the article  Paying down tech debt , published in  The Pragmatic Engineer . Thanks to Lou for sharing some hard-earned experience and advice for taming tech debt. As mentioned, Lou is working on a book dedicated to this topic;  sign up to get emails from him with more thoughts about managing tech debt , and to be notified when the book is ready. If you have suggestions of topics for Lou to cover in the upcoming book, please connect with him on  LinkedIn , or  via his website . \n\n\n             \n             \n               Subscribe to my weekly newsletter  to get articles like this in your inbox. It's a pretty good read - and the  #1 tech newsletter  on Substack.\n             \n            \n        "}
]